
c:/Users/Omid/Desktop/CozirProject/CozirApp/CO2ExchangeSystem/target/1.5.0/electron/CO2ExchangeSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008280  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080882a0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002c4  20000000  080882a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008a0  200002c8  200002c8  000402c8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08088568  08088568  00038568  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08088590  08088590  00038590  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001f2b0d  00000000  00000000  00038594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00026a29  00000000  00000000  0022b0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002969a  00000000  00000000  00251aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000031e0  00000000  00000000  0027b164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000058b8  00000000  00000000  0027e344  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00048327  00000000  00000000  00283bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00068cf5  00000000  00000000  002cbf23  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000c523f  00000000  00000000  00334c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000f2e4  00000000  00000000  003f9e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f006 f97a 	bl	808632a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f006 f97f 	bl	8086340 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	080882a4 	.word	0x080882a4
 8080050:	200002c4 	.word	0x200002c4
 8080054:	200002c8 	.word	0x200002c8
 8080058:	20000b68 	.word	0x20000b68
 808005c:	20000b68 	.word	0x20000b68

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f004 f94d 	bl	8084300 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08088204 	.word	0x08088204
 8080088:	080882a0 	.word	0x080882a0

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 b824 	b.w	80800d8 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 f827 	bl	80800e4 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f004 b8f3 	b.w	8084284 <_post_loop>

0808009e <_Znwj>:
 808009e:	f003 bc7f 	b.w	80839a0 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f003 bc85 	b.w	80839b0 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80800b6:	b510      	push	{r4, lr}
 80800b8:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80800ba:	6800      	ldr	r0, [r0, #0]
 80800bc:	b108      	cbz	r0, 80800c2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80800be:	f003 fc77 	bl	80839b0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80800c2:	4620      	mov	r0, r4
 80800c4:	bd10      	pop	{r4, pc}

080800c6 <_Z15setup_USBSerialv>:
STARTUP(setup_USBSerial());
SYSTEM_MODE(MANUAL);



void setup_USBSerial(){
 80800c6:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80800c8:	f004 fcca 	bl	8084a60 <_Z16_fetch_usbserialv>
}
 80800cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SYSTEM_MODE(MANUAL);



void setup_USBSerial(){
  Serial.begin(9600);
 80800d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80800d4:	f004 bcaa 	b.w	8084a2c <_ZN9USBSerial5beginEl>

080800d8 <setup>:
void setup() {
  // Put initialization like pinMode and begin functions here.
  //obj.setSamplingRate(1);
  //obj.setSamplingPeriod(2);
  //obj.setLoggingFrequency(0.5);
  obj.cmdStart(); // will run Serial CLI thread 
 80800d8:	4801      	ldr	r0, [pc, #4]	; (80800e0 <setup+0x8>)
 80800da:	f000 bafb 	b.w	80806d4 <_ZN9Co2System8cmdStartEv>
 80800de:	bf00      	nop
 80800e0:	200002d0 	.word	0x200002d0

080800e4 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80800e4:	b510      	push	{r4, lr}

  obj.readSensors(); // will read Co2 and GPS data.
 80800e6:	4c07      	ldr	r4, [pc, #28]	; (8080104 <loop+0x20>)
 80800e8:	4620      	mov	r0, r4
 80800ea:	f000 fb8f 	bl	808080c <_ZN9Co2System11readSensorsEv>
  obj.log();         // log data into SD card using JSON format.
 80800ee:	4620      	mov	r0, r4
 80800f0:	f000 fb93 	bl	808081a <_ZN9Co2System3logEv>
  //obj.publish();   // will publish sensors data to Particle cloud.
  obj.sleep();       // will sleep for (SamplingPeriod - SamplingRate) * 60  minutes
 80800f4:	4620      	mov	r0, r4
 80800f6:	f000 fb82 	bl	80807fe <_ZN9Co2System5sleepEv>
  obj.wakeup();      // change the current state of the State Machine.
 80800fa:	4620      	mov	r0, r4

}
 80800fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  obj.readSensors(); // will read Co2 and GPS data.
  obj.log();         // log data into SD card using JSON format.
  //obj.publish();   // will publish sensors data to Particle cloud.
  obj.sleep();       // will sleep for (SamplingPeriod - SamplingRate) * 60  minutes
  obj.wakeup();      // change the current state of the State Machine.
 8080100:	f000 bb92 	b.w	8080828 <_ZN9Co2System6wakeupEv>
 8080104:	200002d0 	.word	0x200002d0

08080108 <_GLOBAL__sub_I_SystemMode>:

}
 8080108:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808010a:	4c12      	ldr	r4, [pc, #72]	; (8080154 <_GLOBAL__sub_I_SystemMode+0x4c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808010c:	f003 f9b4 	bl	8083478 <HAL_Pin_Map>
#include "Co2System.h"

STARTUP(setup_USBSerial());
 8080110:	f7ff ffd9 	bl	80800c6 <_Z15setup_USBSerialv>
 8080114:	2300      	movs	r3, #0
 8080116:	6023      	str	r3, [r4, #0]
 8080118:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808011a:	71a3      	strb	r3, [r4, #6]
 808011c:	8123      	strh	r3, [r4, #8]
 808011e:	f64f 73ff 	movw	r3, #65535	; 0xffff
SYSTEM_MODE(MANUAL);
 8080122:	4d0d      	ldr	r5, [pc, #52]	; (8080158 <_GLOBAL__sub_I_SystemMode+0x50>)
 8080124:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080126:	2003      	movs	r0, #3
 8080128:	f003 fb6e 	bl	8083808 <set_system_mode>
 808012c:	4620      	mov	r0, r4


void setup_USBSerial(){
  Serial.begin(9600);
}
Co2System obj(1,2,0.5); // Creat an State Machine object.
 808012e:	4c0b      	ldr	r4, [pc, #44]	; (808015c <_GLOBAL__sub_I_SystemMode+0x54>)
#include "Co2System.h"

STARTUP(setup_USBSerial());
SYSTEM_MODE(MANUAL);
 8080130:	462a      	mov	r2, r5
 8080132:	490b      	ldr	r1, [pc, #44]	; (8080160 <_GLOBAL__sub_I_SystemMode+0x58>)
 8080134:	f005 f8ee 	bl	8085314 <__aeabi_atexit>


void setup_USBSerial(){
  Serial.begin(9600);
}
Co2System obj(1,2,0.5); // Creat an State Machine object.
 8080138:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 808013c:	2202      	movs	r2, #2
 808013e:	2101      	movs	r1, #1
 8080140:	4620      	mov	r0, r4
 8080142:	f000 fa2d 	bl	80805a0 <_ZN9Co2SystemC1Ejjf>
 8080146:	462a      	mov	r2, r5
 8080148:	4620      	mov	r0, r4
  obj.log();         // log data into SD card using JSON format.
  //obj.publish();   // will publish sensors data to Particle cloud.
  obj.sleep();       // will sleep for (SamplingPeriod - SamplingRate) * 60  minutes
  obj.wakeup();      // change the current state of the State Machine.

}
 808014a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}


void setup_USBSerial(){
  Serial.begin(9600);
}
Co2System obj(1,2,0.5); // Creat an State Machine object.
 808014e:	4905      	ldr	r1, [pc, #20]	; (8080164 <_GLOBAL__sub_I_SystemMode+0x5c>)
 8080150:	f005 b8e0 	b.w	8085314 <__aeabi_atexit>
 8080154:	20000310 	.word	0x20000310
 8080158:	200002c8 	.word	0x200002c8
 808015c:	200002d0 	.word	0x200002d0
 8080160:	080800b7 	.word	0x080800b7
 8080164:	080806a9 	.word	0x080806a9

08080168 <_ZN5StateD1Ev>:

#include "State.h"

State::~State(){

}
 8080168:	4770      	bx	lr
	...

0808016c <_ZN5State7publishEP9Co2System>:
bool State::publish(Co2System* pCo2Sys) {
 808016c:	b508      	push	{r3, lr}
	Serial.print("Can not Publish\n");
 808016e:	f004 fc77 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080172:	4902      	ldr	r1, [pc, #8]	; (808017c <_ZN5State7publishEP9Co2System+0x10>)
 8080174:	f003 fe8b 	bl	8083e8e <_ZN5Print5printEPKc>
	return false;
}
 8080178:	2000      	movs	r0, #0
 808017a:	bd08      	pop	{r3, pc}
 808017c:	08087718 	.word	0x08087718

08080180 <_ZN5State5sleepEP9Co2System>:
bool State::sleep(Co2System* pCo2Sys) {
 8080180:	b508      	push	{r3, lr}
	Serial.print("Can not Sleep\n");
 8080182:	f004 fc6d 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080186:	4902      	ldr	r1, [pc, #8]	; (8080190 <_ZN5State5sleepEP9Co2System+0x10>)
 8080188:	f003 fe81 	bl	8083e8e <_ZN5Print5printEPKc>
	return false;
}
 808018c:	2000      	movs	r0, #0
 808018e:	bd08      	pop	{r3, pc}
 8080190:	08087729 	.word	0x08087729

08080194 <_ZN5State11readSensorsEP9Co2System>:
bool State::readSensors(Co2System* pCo2Sys) {
 8080194:	b508      	push	{r3, lr}
	Serial.print("Can not Read Sensors\n");
 8080196:	f004 fc63 	bl	8084a60 <_Z16_fetch_usbserialv>
 808019a:	4902      	ldr	r1, [pc, #8]	; (80801a4 <_ZN5State11readSensorsEP9Co2System+0x10>)
 808019c:	f003 fe77 	bl	8083e8e <_ZN5Print5printEPKc>
	return false;
}
 80801a0:	2000      	movs	r0, #0
 80801a2:	bd08      	pop	{r3, pc}
 80801a4:	08087738 	.word	0x08087738

080801a8 <_ZN5State3logEP9Co2System>:
bool State::log(Co2System* pCo2Sys) {
 80801a8:	b508      	push	{r3, lr}
	Serial.print("Can not log\n");
 80801aa:	f004 fc59 	bl	8084a60 <_Z16_fetch_usbserialv>
 80801ae:	4902      	ldr	r1, [pc, #8]	; (80801b8 <_ZN5State3logEP9Co2System+0x10>)
 80801b0:	f003 fe6d 	bl	8083e8e <_ZN5Print5printEPKc>
	return false;
}
 80801b4:	2000      	movs	r0, #0
 80801b6:	bd08      	pop	{r3, pc}
 80801b8:	0808774e 	.word	0x0808774e

080801bc <_ZN5State6wakeupEP9Co2System>:
bool State::wakeup(Co2System* pCo2Sys) {
 80801bc:	b508      	push	{r3, lr}
	Serial.print("Can not wakeup\n");
 80801be:	f004 fc4f 	bl	8084a60 <_Z16_fetch_usbserialv>
 80801c2:	4902      	ldr	r1, [pc, #8]	; (80801cc <_ZN5State6wakeupEP9Co2System+0x10>)
 80801c4:	f003 fe63 	bl	8083e8e <_ZN5Print5printEPKc>
	return false;
}
 80801c8:	2000      	movs	r0, #0
 80801ca:	bd08      	pop	{r3, pc}
 80801cc:	0808775b 	.word	0x0808775b

080801d0 <_GLOBAL__sub_I__ZN5StateD2Ev>:
 80801d0:	f003 b952 	b.w	8083478 <HAL_Pin_Map>

080801d4 <_ZN10SleepState6wakeupEP9Co2System>:
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"


bool SleepState::wakeup(Co2System* pCo2Sys) {
 80801d4:	b510      	push	{r4, lr}
	pCo2Sys->setCurrentState(new PublishState());
 80801d6:	2004      	movs	r0, #4
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"


bool SleepState::wakeup(Co2System* pCo2Sys) {
 80801d8:	460c      	mov	r4, r1
	pCo2Sys->setCurrentState(new PublishState());
 80801da:	f7ff ff60 	bl	808009e <_Znwj>
 80801de:	4601      	mov	r1, r0
 80801e0:	b108      	cbz	r0, 80801e6 <_ZN10SleepState6wakeupEP9Co2System+0x12>
#pragma once
#include "State.h"
#include "SleepState.h"
#include "Co2System.h"

class PublishState : public State {
 80801e2:	4b06      	ldr	r3, [pc, #24]	; (80801fc <_ZN10SleepState6wakeupEP9Co2System+0x28>)
 80801e4:	6003      	str	r3, [r0, #0]
 80801e6:	4620      	mov	r0, r4
 80801e8:	f000 fb25 	bl	8080836 <_ZN9Co2System15setCurrentStateEP5State>
	Serial.print("Woke up!\n");
 80801ec:	f004 fc38 	bl	8084a60 <_Z16_fetch_usbserialv>
 80801f0:	4903      	ldr	r1, [pc, #12]	; (8080200 <_ZN10SleepState6wakeupEP9Co2System+0x2c>)
 80801f2:	f003 fe4c 	bl	8083e8e <_ZN5Print5printEPKc>
	return true;
}
 80801f6:	2001      	movs	r0, #1
 80801f8:	bd10      	pop	{r4, pc}
 80801fa:	bf00      	nop
 80801fc:	08087988 	.word	0x08087988
 8080200:	0808776b 	.word	0x0808776b

08080204 <_ZN10SleepStateD1Ev>:
#pragma once
#include "Co2System.h"
#include "State.h"
class SleepState : public State {
 8080204:	b510      	push	{r4, lr}
 8080206:	4604      	mov	r4, r0
 8080208:	4b02      	ldr	r3, [pc, #8]	; (8080214 <_ZN10SleepStateD1Ev+0x10>)
 808020a:	6003      	str	r3, [r0, #0]
 808020c:	f7ff ffac 	bl	8080168 <_ZN5StateD1Ev>
 8080210:	4620      	mov	r0, r4
 8080212:	bd10      	pop	{r4, pc}
 8080214:	08087780 	.word	0x08087780

08080218 <_ZN10SleepStateD0Ev>:
 8080218:	b510      	push	{r4, lr}
 808021a:	4604      	mov	r4, r0
 808021c:	f7ff fff2 	bl	8080204 <_ZN10SleepStateD1Ev>
 8080220:	4620      	mov	r0, r4
 8080222:	2104      	movs	r1, #4
 8080224:	f005 f884 	bl	8085330 <_ZdlPvj>
 8080228:	4620      	mov	r0, r4
 808022a:	bd10      	pop	{r4, pc}

0808022c <_GLOBAL__sub_I__ZN10SleepState6wakeupEP9Co2System>:
 808022c:	f003 b924 	b.w	8083478 <HAL_Pin_Map>

08080230 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080230:	4770      	bx	lr

08080232 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080232:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080234:	4602      	mov	r2, r0
 8080236:	f003 0308 	and.w	r3, r3, #8
 808023a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 808023e:	b12b      	cbz	r3, 808024c <_ZN4File9availableEv+0x1a>
 8080240:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080242:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080244:	1a18      	subs	r0, r3, r0
 8080246:	bf48      	it	mi
 8080248:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 808024c:	4770      	bx	lr

0808024e <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 808024e:	6803      	ldr	r3, [r0, #0]
 8080250:	4718      	bx	r3

08080252 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080252:	2a01      	cmp	r2, #1
 8080254:	d002      	beq.n	808025c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 8080256:	2a02      	cmp	r2, #2
 8080258:	d002      	beq.n	8080260 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 808025a:	e004      	b.n	8080266 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808025c:	6001      	str	r1, [r0, #0]
	      break;
 808025e:	e002      	b.n	8080266 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080260:	680b      	ldr	r3, [r1, #0]
 8080262:	b100      	cbz	r0, 8080266 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 8080264:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080266:	2000      	movs	r0, #0
 8080268:	4770      	bx	lr

0808026a <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 808026a:	4770      	bx	lr

0808026c <_ZN4FileD0Ev>:
 808026c:	b510      	push	{r4, lr}
 808026e:	4604      	mov	r4, r0
 8080270:	2134      	movs	r1, #52	; 0x34
 8080272:	f005 f85d 	bl	8085330 <_ZdlPvj>
 8080276:	4620      	mov	r0, r4
 8080278:	bd10      	pop	{r4, pc}
	...

0808027c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 808027c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 808027e:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 8080280:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080282:	4608      	mov	r0, r1
 8080284:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 8080286:	b133      	cbz	r3, 8080296 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 8080288:	b93d      	cbnz	r5, 808029a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 808028a:	490c      	ldr	r1, [pc, #48]	; (80802bc <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 808028c:	b004      	add	sp, #16
 808028e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 8080292:	f003 bdfc 	b.w	8083e8e <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 8080296:	4b0a      	ldr	r3, [pc, #40]	; (80802c0 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 8080298:	e000      	b.n	808029c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 808029a:	4b0a      	ldr	r3, [pc, #40]	; (80802c4 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 808029c:	7b16      	ldrb	r6, [r2, #12]
 808029e:	4c0a      	ldr	r4, [pc, #40]	; (80802c8 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80802a0:	490a      	ldr	r1, [pc, #40]	; (80802cc <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80802a2:	7b52      	ldrb	r2, [r2, #13]
 80802a4:	2e01      	cmp	r6, #1
 80802a6:	bf08      	it	eq
 80802a8:	4621      	moveq	r1, r4
 80802aa:	9202      	str	r2, [sp, #8]
 80802ac:	9101      	str	r1, [sp, #4]
 80802ae:	9500      	str	r5, [sp, #0]
 80802b0:	4a07      	ldr	r2, [pc, #28]	; (80802d0 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80802b2:	2100      	movs	r1, #0
 80802b4:	f003 fe2b 	bl	8083f0e <_ZN5Print11printf_implEbPKcz>
  }
 80802b8:	b004      	add	sp, #16
 80802ba:	bd70      	pop	{r4, r5, r6, pc}
 80802bc:	080877e3 	.word	0x080877e3
 80802c0:	080878c6 	.word	0x080878c6
 80802c4:	080877d2 	.word	0x080877d2
 80802c8:	080877db 	.word	0x080877db
 80802cc:	080877df 	.word	0x080877df
 80802d0:	080877f9 	.word	0x080877f9

080802d4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80802d4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80802d6:	2301      	movs	r3, #1
 80802d8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80802da:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80802dc:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80802de:	b10b      	cbz	r3, 80802e4 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80802e0:	68c0      	ldr	r0, [r0, #12]
 80802e2:	e006      	b.n	80802f2 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80802e4:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80802e6:	b128      	cbz	r0, 80802f4 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80802e8:	6883      	ldr	r3, [r0, #8]
 80802ea:	b90b      	cbnz	r3, 80802f0 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80802ec:	f005 f833 	bl	8085356 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80802f0:	68c3      	ldr	r3, [r0, #12]
 80802f2:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80802f4:	2301      	movs	r3, #1
 80802f6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 80802f8:	2000      	movs	r0, #0
    }
 80802fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 80802fe:	f003 b99b 	b.w	8083638 <os_thread_exit>

08080302 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080302:	3010      	adds	r0, #16
 8080304:	f001 bc4a 	b.w	8081b9c <_ZN7FatFile4syncEv>

08080308 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080308:	3010      	adds	r0, #16
 808030a:	f001 bb5f 	b.w	80819cc <_ZN7FatFile4peekEv>

0808030e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 808030e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080310:	2201      	movs	r2, #1
 8080312:	f10d 0107 	add.w	r1, sp, #7
 8080316:	3010      	adds	r0, #16
 8080318:	f001 faa5 	bl	8081866 <_ZN7FatFile4readEPvj>
 808031c:	2801      	cmp	r0, #1
 808031e:	bf0c      	ite	eq
 8080320:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080324:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080328:	b003      	add	sp, #12
 808032a:	f85d fb04 	ldr.w	pc, [sp], #4

0808032e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 808032e:	3010      	adds	r0, #16
 8080330:	f001 bcc0 	b.w	8081cb4 <_ZN7FatFile5writeEPKvj>

08080334 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080334:	b507      	push	{r0, r1, r2, lr}
 8080336:	ab02      	add	r3, sp, #8
 8080338:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 808033c:	2201      	movs	r2, #1
 808033e:	4619      	mov	r1, r3
 8080340:	3010      	adds	r0, #16
 8080342:	f001 fcb7 	bl	8081cb4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080346:	b003      	add	sp, #12
 8080348:	f85d fb04 	ldr.w	pc, [sp], #4

0808034c <_ZN9Co2System18serialReadToBufferEv>:
    fd.close();
  }
  
}

void Co2System::serialReadToBuffer() {
 808034c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	String serialCommandBuffer="";
 808034e:	4912      	ldr	r1, [pc, #72]	; (8080398 <_ZN9Co2System18serialReadToBufferEv+0x4c>)
 8080350:	4668      	mov	r0, sp
 8080352:	f003 fd3e 	bl	8083dd2 <_ZN6StringC1EPK19__FlashStringHelper>
    while(true)
      {
        if (Serial.available() > 0) {              //Device responded
 8080356:	f004 fb83 	bl	8084a60 <_Z16_fetch_usbserialv>
 808035a:	6803      	ldr	r3, [r0, #0]
 808035c:	691b      	ldr	r3, [r3, #16]
 808035e:	4798      	blx	r3
 8080360:	2800      	cmp	r0, #0
 8080362:	dd14      	ble.n	808038e <_ZN9Co2System18serialReadToBufferEv+0x42>
        char inchar = (char)Serial.read();         //get the char we just received
 8080364:	f004 fb7c 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080368:	6803      	ldr	r3, [r0, #0]
 808036a:	695b      	ldr	r3, [r3, #20]
 808036c:	4798      	blx	r3
 808036e:	b2c4      	uxtb	r4, r0

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8080370:	4621      	mov	r1, r4
 8080372:	4668      	mov	r0, sp
 8080374:	f003 fd68 	bl	8083e48 <_ZN6String6concatEc>
        serialCommandBuffer += inchar;                     //add the char to the var called sensorstring
        if (inchar == '\r') {                      //if the incoming character is a <CR> end of message
 8080378:	2c0d      	cmp	r4, #13
 808037a:	d108      	bne.n	808038e <_ZN9Co2System18serialReadToBufferEv+0x42>
          Serial.println(serialCommandBuffer);
 808037c:	f004 fb70 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080380:	9900      	ldr	r1, [sp, #0]
 8080382:	f003 fd9b 	bl	8083ebc <_ZN5Print7printlnEPKc>
		  serialCommandBuffer = "\0";
 8080386:	4905      	ldr	r1, [pc, #20]	; (808039c <_ZN9Co2System18serialReadToBufferEv+0x50>)
 8080388:	4668      	mov	r0, sp
 808038a:	f003 fd35 	bl	8083df8 <_ZN6StringaSEPKc>
        }
      }
        HAL_Delay_Milliseconds(10);
 808038e:	200a      	movs	r0, #10
 8080390:	f003 f8ea 	bl	8083568 <HAL_Delay_Milliseconds>
  
}

void Co2System::serialReadToBuffer() {
	String serialCommandBuffer="";
    while(true)
 8080394:	e7df      	b.n	8080356 <_ZN9Co2System18serialReadToBufferEv+0xa>
 8080396:	bf00      	nop
 8080398:	080878c6 	.word	0x080878c6
 808039c:	080877d0 	.word	0x080877d0

080803a0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80803a0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80803a2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80803a4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80803a6:	b113      	cbz	r3, 80803ae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80803a8:	2203      	movs	r2, #3
 80803aa:	4601      	mov	r1, r0
 80803ac:	4798      	blx	r3
    }
 80803ae:	4620      	mov	r0, r4
 80803b0:	bd10      	pop	{r4, pc}

080803b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.23>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
 80803b2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80803b4:	4604      	mov	r4, r0
 80803b6:	b170      	cbz	r0, 80803d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.23+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80803b8:	6805      	ldr	r5, [r0, #0]
 80803ba:	b135      	cbz	r5, 80803ca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.23+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80803bc:	4628      	mov	r0, r5
 80803be:	f7ff ffef 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80803c2:	2110      	movs	r1, #16
 80803c4:	4628      	mov	r0, r5
 80803c6:	f004 ffb3 	bl	8085330 <_ZdlPvj>
 80803ca:	4620      	mov	r0, r4
      }
 80803cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80803d0:	2114      	movs	r1, #20
 80803d2:	f004 bfad 	b.w	8085330 <_ZdlPvj>
 80803d6:	bd38      	pop	{r3, r4, r5, pc}

080803d8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
 80803d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80803dc:	4606      	mov	r6, r0
 80803de:	460f      	mov	r7, r1
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80803e0:	2014      	movs	r0, #20
 80803e2:	492b      	ldr	r1, [pc, #172]	; (8080490 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
 80803e4:	4615      	mov	r5, r2
 80803e6:	4698      	mov	r8, r3
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80803e8:	f004 ffa6 	bl	8085338 <_ZnwjRKSt9nothrow_t>
 80803ec:	4604      	mov	r4, r0
 80803ee:	b130      	cbz	r0, 80803fe <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80803f0:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80803f2:	7403      	strb	r3, [r0, #16]
 80803f4:	6003      	str	r3, [r0, #0]
 80803f6:	6043      	str	r3, [r0, #4]
 80803f8:	6083      	str	r3, [r0, #8]
 80803fa:	60c3      	str	r3, [r0, #12]
 80803fc:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80803fe:	6034      	str	r4, [r6, #0]

    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 8080400:	2c00      	cmp	r4, #0
 8080402:	d03a      	beq.n	808047a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa2>
            goto error;
        }
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
 8080404:	4922      	ldr	r1, [pc, #136]	; (8080490 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
 8080406:	2010      	movs	r0, #16
 8080408:	f004 ff96 	bl	8085338 <_ZnwjRKSt9nothrow_t>
 808040c:	4603      	mov	r3, r0
 808040e:	b1b0      	cbz	r0, 808043e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x66>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080410:	2200      	movs	r2, #0
 8080412:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080414:	aa02      	add	r2, sp, #8
 8080416:	e895 0003 	ldmia.w	r5, {r0, r1}
 808041a:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808041e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080422:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080426:	e892 0003 	ldmia.w	r2, {r0, r1}
 808042a:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808042e:	6899      	ldr	r1, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080430:	68aa      	ldr	r2, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 8080432:	60a9      	str	r1, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080434:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080436:	68ea      	ldr	r2, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080438:	68d9      	ldr	r1, [r3, #12]
 808043a:	60e9      	str	r1, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808043c:	60da      	str	r2, [r3, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808043e:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8080440:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 8080442:	b135      	cbz	r5, 8080452 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x7a>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080444:	4628      	mov	r0, r5
 8080446:	f7ff ffab 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 808044a:	2110      	movs	r1, #16
 808044c:	4628      	mov	r0, r5
 808044e:	f004 ff6f 	bl	8085330 <_ZdlPvj>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 8080452:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
 8080454:	6803      	ldr	r3, [r0, #0]
 8080456:	b183      	cbz	r3, 808047a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa2>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8080458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808045a:	4642      	mov	r2, r8
 808045c:	e88d 0009 	stmia.w	sp, {r0, r3}
 8080460:	4639      	mov	r1, r7
 8080462:	4b0c      	ldr	r3, [pc, #48]	; (8080494 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xbc>)
 8080464:	3004      	adds	r0, #4
 8080466:	f003 f8a7 	bl	80835b8 <os_thread_create>
 808046a:	b930      	cbnz	r0, 808047a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa2>
 808046c:	6833      	ldr	r3, [r6, #0]
            goto error;
        }
        while (!d_->started) {
 808046e:	7c1b      	ldrb	r3, [r3, #16]
 8080470:	b94b      	cbnz	r3, 8080486 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xae>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 8080472:	2001      	movs	r0, #1
 8080474:	f003 f878 	bl	8083568 <HAL_Delay_Milliseconds>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
            goto error;
        }
        while (!d_->started) {
 8080478:	e7f8      	b.n	808046c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x94>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808047a:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
 808047c:	2300      	movs	r3, #0
 808047e:	6033      	str	r3, [r6, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 8080480:	b108      	cbz	r0, 8080486 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xae>
	  get_deleter()(__p);
 8080482:	f7ff ff96 	bl	80803b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.23>
            HAL_Delay_Milliseconds(1);
        }
        return;
    error:
        d_.reset();
    }
 8080486:	4630      	mov	r0, r6
 8080488:	b004      	add	sp, #16
 808048a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808048e:	bf00      	nop
 8080490:	08087d30 	.word	0x08087d30
 8080494:	080802d5 	.word	0x080802d5

08080498 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
 8080498:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 808049a:	6803      	ldr	r3, [r0, #0]
 808049c:	4604      	mov	r4, r0
    {
        if (!isValid())
 808049e:	b1b3      	cbz	r3, 80804ce <_ZN6Thread7disposeEv+0x36>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
 80804a0:	6858      	ldr	r0, [r3, #4]
 80804a2:	f003 f891 	bl	80835c8 <os_thread_is_current>
 80804a6:	b100      	cbz	r0, 80804aa <_ZN6Thread7disposeEv+0x12>
 80804a8:	bd10      	pop	{r4, pc}
 80804aa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
 80804ac:	7c5a      	ldrb	r2, [r3, #17]
 80804ae:	b912      	cbnz	r2, 80804b6 <_ZN6Thread7disposeEv+0x1e>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
 80804b0:	6858      	ldr	r0, [r3, #4]
 80804b2:	f003 f891 	bl	80835d8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
 80804b6:	6823      	ldr	r3, [r4, #0]
 80804b8:	6858      	ldr	r0, [r3, #4]
 80804ba:	f003 f895 	bl	80835e8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80804be:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80804c0:	2300      	movs	r3, #0
 80804c2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80804c4:	b118      	cbz	r0, 80804ce <_ZN6Thread7disposeEv+0x36>

        d_.reset();
    }
 80804c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  get_deleter()(__p);
 80804ca:	f7ff bf72 	b.w	80803b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.23>
 80804ce:	bd10      	pop	{r4, pc}

080804d0 <_ZN11USARTSerialD0Ev>:
 80804d0:	b510      	push	{r4, lr}
 80804d2:	4604      	mov	r4, r0
 80804d4:	2114      	movs	r1, #20
 80804d6:	f004 ff2b 	bl	8085330 <_ZdlPvj>
 80804da:	4620      	mov	r0, r4
 80804dc:	bd10      	pop	{r4, pc}

080804de <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv>:
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
 80804de:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80804e2:	b113      	cbz	r3, 80804ea <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv+0xc>
 80804e4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 80804e8:	4770      	bx	lr
 80804ea:	4618      	mov	r0, r3
  }
 80804ec:	4770      	bx	lr

080804ee <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include <ArduinoJson/Collection/CollectionData.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 80804ee:	b510      	push	{r4, lr}
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes))
 80804f0:	684b      	ldr	r3, [r1, #4]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 80804f2:	688a      	ldr	r2, [r1, #8]
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes))
 80804f4:	3310      	adds	r3, #16
 80804f6:	429a      	cmp	r2, r3
 80804f8:	d201      	bcs.n	80804fe <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE+0x10>
  VariantSlot* slot = pool->allocVariant();
  if (!slot)
    return 0;
 80804fa:	2000      	movs	r0, #0
 80804fc:	bd10      	pop	{r4, pc}
      return 0;
    _right -= bytes;
 80804fe:	f1a2 0310 	sub.w	r3, r2, #16
 8080502:	608b      	str	r3, [r1, #8]

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
  VariantSlot* slot = pool->allocVariant();
  if (!slot)
 8080504:	2b00      	cmp	r3, #0
 8080506:	d0f8      	beq.n	80804fa <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE+0xc>
    return 0;

  if (_tail) {
 8080508:	6841      	ldr	r1, [r0, #4]
 808050a:	b119      	cbz	r1, 8080514 <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE+0x26>
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 808050c:	1a5c      	subs	r4, r3, r1
 808050e:	1124      	asrs	r4, r4, #4
 8080510:	814c      	strh	r4, [r1, #10]
 8080512:	e000      	b.n	8080516 <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE+0x28>
    _tail->setNextNotNull(slot);
    _tail = slot;
  } else {
    _head = slot;
 8080514:	6003      	str	r3, [r0, #0]
  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
    _next = 0;
 8080516:	2100      	movs	r1, #0
    _tail = slot;
 8080518:	6043      	str	r3, [r0, #4]
 808051a:	f822 1c06 	strh.w	r1, [r2, #-6]
    _flags = 0;
 808051e:	f802 1c08 	strb.w	r1, [r2, #-8]
    _key = 0;
 8080522:	f842 1c04 	str.w	r1, [r2, #-4]
  }

  slot->clear();
  return slot;
 8080526:	4618      	mov	r0, r3
}
 8080528:	bd10      	pop	{r4, pc}
	...

0808052c <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 808052c:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 808052e:	4c0c      	ldr	r4, [pc, #48]	; (8080560 <_Z22__fetch_global_Serial4v+0x34>)
 8080530:	6823      	ldr	r3, [r4, #0]
 8080532:	07db      	lsls	r3, r3, #31
 8080534:	d411      	bmi.n	808055a <_Z22__fetch_global_Serial4v+0x2e>
 8080536:	4620      	mov	r0, r4
 8080538:	f7ff fdb5 	bl	80800a6 <__cxa_guard_acquire>
 808053c:	b168      	cbz	r0, 808055a <_Z22__fetch_global_Serial4v+0x2e>
 808053e:	4a09      	ldr	r2, [pc, #36]	; (8080564 <_Z22__fetch_global_Serial4v+0x38>)
 8080540:	2103      	movs	r1, #3
 8080542:	4b09      	ldr	r3, [pc, #36]	; (8080568 <_Z22__fetch_global_Serial4v+0x3c>)
 8080544:	4809      	ldr	r0, [pc, #36]	; (808056c <_Z22__fetch_global_Serial4v+0x40>)
 8080546:	f004 fbd5 	bl	8084cf4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808054a:	4620      	mov	r0, r4
 808054c:	f7ff fdb0 	bl	80800b0 <__cxa_guard_release>
 8080550:	4a07      	ldr	r2, [pc, #28]	; (8080570 <_Z22__fetch_global_Serial4v+0x44>)
 8080552:	4908      	ldr	r1, [pc, #32]	; (8080574 <_Z22__fetch_global_Serial4v+0x48>)
 8080554:	4805      	ldr	r0, [pc, #20]	; (808056c <_Z22__fetch_global_Serial4v+0x40>)
 8080556:	f004 fedd 	bl	8085314 <__aeabi_atexit>
	return serial4;
}
 808055a:	4804      	ldr	r0, [pc, #16]	; (808056c <_Z22__fetch_global_Serial4v+0x40>)
 808055c:	bd10      	pop	{r4, pc}
 808055e:	bf00      	nop
 8080560:	2000031c 	.word	0x2000031c
 8080564:	20000338 	.word	0x20000338
 8080568:	200003bc 	.word	0x200003bc
 808056c:	20000320 	.word	0x20000320
 8080570:	200002c8 	.word	0x200002c8
 8080574:	08080231 	.word	0x08080231

08080578 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080578:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 808057a:	f7ff ffd7 	bl	808052c <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 808057e:	4b07      	ldr	r3, [pc, #28]	; (808059c <_Z15serialEventRun4v+0x24>)
 8080580:	4604      	mov	r4, r0
 8080582:	b153      	cbz	r3, 808059a <_Z15serialEventRun4v+0x22>
 8080584:	f004 fbd3 	bl	8084d2e <_ZN11USARTSerial9isEnabledEv>
 8080588:	b138      	cbz	r0, 808059a <_Z15serialEventRun4v+0x22>
 808058a:	6823      	ldr	r3, [r4, #0]
 808058c:	4620      	mov	r0, r4
 808058e:	691b      	ldr	r3, [r3, #16]
 8080590:	4798      	blx	r3
 8080592:	2800      	cmp	r0, #0
 8080594:	dd01      	ble.n	808059a <_Z15serialEventRun4v+0x22>
        handler();
 8080596:	f3af 8000 	nop.w
 808059a:	bd10      	pop	{r4, pc}
 808059c:	00000000 	.word	0x00000000

080805a0 <_ZN9Co2SystemC1Ejjf>:
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"
#include "Serial4/Serial4.h"

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
 80805a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	SYSTEM_THREAD(ENABLED);
 80805a4:	4e3a      	ldr	r6, [pc, #232]	; (8080690 <_ZN9Co2SystemC1Ejjf+0xf0>)
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"
#include "Serial4/Serial4.h"

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
 80805a6:	4689      	mov	r9, r1

	SYSTEM_THREAD(ENABLED);
 80805a8:	6831      	ldr	r1, [r6, #0]
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"
#include "Serial4/Serial4.h"

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
 80805aa:	461f      	mov	r7, r3

	SYSTEM_THREAD(ENABLED);
 80805ac:	f011 0501 	ands.w	r5, r1, #1

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80805b0:	f04f 0300 	mov.w	r3, #0
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"
#include "Serial4/Serial4.h"

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
 80805b4:	4604      	mov	r4, r0
 80805b6:	4690      	mov	r8, r2
 80805b8:	6383      	str	r3, [r0, #56]	; 0x38

	SYSTEM_THREAD(ENABLED);
 80805ba:	d10a      	bne.n	80805d2 <_ZN9Co2SystemC1Ejjf+0x32>
 80805bc:	4630      	mov	r0, r6
 80805be:	f7ff fd72 	bl	80800a6 <__cxa_guard_acquire>
 80805c2:	b130      	cbz	r0, 80805d2 <_ZN9Co2SystemC1Ejjf+0x32>
 80805c4:	2001      	movs	r0, #1
 80805c6:	4629      	mov	r1, r5
 80805c8:	f003 f936 	bl	8083838 <system_thread_set_state>
 80805cc:	4630      	mov	r0, r6
 80805ce:	f7ff fd6f 	bl	80800b0 <__cxa_guard_release>

	stateTime = 0;
 80805d2:	2300      	movs	r3, #0
 80805d4:	61e3      	str	r3, [r4, #28]
	samplingRate = sr;
 80805d6:	f8c4 9020 	str.w	r9, [r4, #32]
	samplingPeriod = sp; 
 80805da:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	loggingFrequency = lf; 
 80805de:	61a7      	str	r7, [r4, #24]
	m_CurrentState = new PublishState();
 80805e0:	2004      	movs	r0, #4
 80805e2:	f7ff fd5c 	bl	808009e <_Znwj>
 80805e6:	b108      	cbz	r0, 80805ec <_ZN9Co2SystemC1Ejjf+0x4c>
 80805e8:	4b2a      	ldr	r3, [pc, #168]	; (8080694 <_ZN9Co2SystemC1Ejjf+0xf4>)
 80805ea:	6003      	str	r3, [r0, #0]
 80805ec:	6360      	str	r0, [r4, #52]	; 0x34
	czr = new COZIR(Serial1);
 80805ee:	f004 fba1 	bl	8084d34 <_Z22__fetch_global_Serial1v>
 80805f2:	4606      	mov	r6, r0
 80805f4:	2018      	movs	r0, #24
 80805f6:	f7ff fd52 	bl	808009e <_Znwj>
 80805fa:	4605      	mov	r5, r0
 80805fc:	b110      	cbz	r0, 8080604 <_ZN9Co2SystemC1Ejjf+0x64>
 80805fe:	4631      	mov	r1, r6
 8080600:	f000 fd56 	bl	80810b0 <_ZN5COZIRC1ER11USARTSerial>
 8080604:	62e5      	str	r5, [r4, #44]	; 0x2c
	SD = new SdFat();
 8080606:	f240 4084 	movw	r0, #1156	; 0x484
 808060a:	f7ff fd48 	bl	808009e <_Znwj>
 808060e:	4605      	mov	r5, r0
 8080610:	b1d0      	cbz	r0, 8080648 <_ZN9Co2SystemC1Ejjf+0xa8>
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8080612:	2264      	movs	r2, #100	; 0x64
 8080614:	f880 2460 	strb.w	r2, [r0, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 8080618:	4a1f      	ldr	r2, [pc, #124]	; (8080698 <_ZN9Co2SystemC1Ejjf+0xf8>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 808061a:	2300      	movs	r3, #0
 808061c:	f8c0 2470 	str.w	r2, [r0, #1136]	; 0x470
 8080620:	2201      	movs	r2, #1
 8080622:	71c3      	strb	r3, [r0, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080624:	f880 343c 	strb.w	r3, [r0, #1084]	; 0x43c
 8080628:	f880 343d 	strb.w	r3, [r0, #1085]	; 0x43d
 808062c:	f880 346a 	strb.w	r3, [r0, #1130]	; 0x46a
 8080630:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 8080634:	f8c0 3478 	str.w	r3, [r0, #1144]	; 0x478
 8080638:	f880 347c 	strb.w	r3, [r0, #1148]	; 0x47c
 808063c:	f880 347d 	strb.w	r3, [r0, #1149]	; 0x47d
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 8080640:	f004 fdea 	bl	8085218 <_ZN8particle7globals11instanceSpiEv>
 8080644:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
	co2Level = 0;
 8080648:	2300      	movs	r3, #0
	samplingRate = sr;
	samplingPeriod = sp; 
	loggingFrequency = lf; 
	m_CurrentState = new PublishState();
	czr = new COZIR(Serial1);
	SD = new SdFat();
 808064a:	62a5      	str	r5, [r4, #40]	; 0x28
	co2Level = 0;
 808064c:	6023      	str	r3, [r4, #0]

	GPS = new Adafruit_GPS(&Serial4);
 808064e:	f7ff ff6d 	bl	808052c <_Z22__fetch_global_Serial4v>
 8080652:	4606      	mov	r6, r0
 8080654:	f640 3074 	movw	r0, #2932	; 0xb74
 8080658:	f7ff fd21 	bl	808009e <_Znwj>
 808065c:	4605      	mov	r5, r0
 808065e:	b110      	cbz	r0, 8080666 <_ZN9Co2SystemC1Ejjf+0xc6>
 8080660:	4631      	mov	r1, r6
 8080662:	f002 fc13 	bl	8082e8c <_ZN12Adafruit_GPSC1EP11USARTSerial>
 8080666:	6325      	str	r5, [r4, #48]	; 0x30
	GPS->begin(9600);
 8080668:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808066c:	4628      	mov	r0, r5
 808066e:	f002 fb8b 	bl	8082d88 <_ZN12Adafruit_GPS5beginEm>
	GPS->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 8080672:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8080674:	4909      	ldr	r1, [pc, #36]	; (808069c <_ZN9Co2SystemC1Ejjf+0xfc>)
 8080676:	f002 fdbb 	bl	80831f0 <_ZN12Adafruit_GPS11sendCommandEPKc>
	GPS->sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
 808067a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808067c:	4908      	ldr	r1, [pc, #32]	; (80806a0 <_ZN9Co2SystemC1Ejjf+0x100>)
 808067e:	f002 fdb7 	bl	80831f0 <_ZN12Adafruit_GPS11sendCommandEPKc>
	GPS->sendCommand(PGCMD_ANTENNA);
 8080682:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8080684:	4907      	ldr	r1, [pc, #28]	; (80806a4 <_ZN9Co2SystemC1Ejjf+0x104>)
 8080686:	f002 fdb3 	bl	80831f0 <_ZN12Adafruit_GPS11sendCommandEPKc>
}
 808068a:	4620      	mov	r0, r4
 808068c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080690:	20000334 	.word	0x20000334
 8080694:	08087988 	.word	0x08087988
 8080698:	080877a4 	.word	0x080877a4
 808069c:	08087817 	.word	0x08087817
 80806a0:	08087849 	.word	0x08087849
 80806a4:	0808785a 	.word	0x0808785a

080806a8 <_ZN9Co2SystemD1Ev>:

Co2System::~Co2System() {
 80806a8:	b510      	push	{r4, lr}
 80806aa:	4604      	mov	r4, r0
    {
    }

    ~Thread()
    {
        dispose();
 80806ac:	3038      	adds	r0, #56	; 0x38
 80806ae:	f7ff fef3 	bl	8080498 <_ZN6Thread7disposeEv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80806b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80806b4:	b108      	cbz	r0, 80806ba <_ZN9Co2SystemD1Ev+0x12>
	  get_deleter()(__ptr);
 80806b6:	f7ff fe7c 	bl	80803b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.23>

}
 80806ba:	4620      	mov	r0, r4
 80806bc:	bd10      	pop	{r4, pc}

080806be <_ZN9Co2System12setStateTimeEm>:
}
void Co2System::setLoggingFrequency(float Hz) {
	loggingFrequency = Hz;
}
void Co2System::setStateTime(unsigned long millsec){
	stateTime = millsec;
 80806be:	61c1      	str	r1, [r0, #28]
 80806c0:	4770      	bx	lr

080806c2 <_ZN9Co2System15getSamplingRateEv>:
	co2Level = aCo2;
}

unsigned int Co2System::getSamplingRate() {
	return samplingRate;
}
 80806c2:	6a00      	ldr	r0, [r0, #32]
 80806c4:	4770      	bx	lr

080806c6 <_ZN9Co2System17getSamplingPeriodEv>:
unsigned int Co2System::getSamplingPeriod() {
	return samplingPeriod;
}
 80806c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80806c8:	4770      	bx	lr

080806ca <_ZN9Co2System12getStateTimeEv>:
float Co2System::getLoggingFrequency() {
	return loggingFrequency;
}
unsigned long Co2System::getStateTime(){
	return stateTime;
}
 80806ca:	69c0      	ldr	r0, [r0, #28]
 80806cc:	4770      	bx	lr

080806ce <_ZN9Co2System11getCo2LevelEv>:
int Co2System::getCo2Level(){
	return co2Level;	
}
 80806ce:	6800      	ldr	r0, [r0, #0]
 80806d0:	4770      	bx	lr
	...

080806d4 <_ZN9Co2System8cmdStartEv>:
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

void Co2System::cmdStart(){
 80806d4:	b510      	push	{r4, lr}
 80806d6:	4604      	mov	r4, r0
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80806d8:	4b11      	ldr	r3, [pc, #68]	; (8080720 <_ZN9Co2System8cmdStartEv+0x4c>)
 80806da:	b088      	sub	sp, #32
 80806dc:	9304      	str	r3, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80806de:	4b11      	ldr	r3, [pc, #68]	; (8080724 <_ZN9Co2System8cmdStartEv+0x50>)

   hardwareThread = Thread("CommandBuffer", serialReadToBuffer, OS_THREAD_PRIORITY_DEFAULT + 1);
 80806e0:	aa04      	add	r2, sp, #16
 80806e2:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80806e4:	4b10      	ldr	r3, [pc, #64]	; (8080728 <_ZN9Co2System8cmdStartEv+0x54>)
 80806e6:	4911      	ldr	r1, [pc, #68]	; (808072c <_ZN9Co2System8cmdStartEv+0x58>)
 80806e8:	9306      	str	r3, [sp, #24]
 80806ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80806ee:	9300      	str	r3, [sp, #0]
 80806f0:	a803      	add	r0, sp, #12
 80806f2:	2303      	movs	r3, #3
 80806f4:	f7ff fe70 	bl	80803d8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80806f8:	9b03      	ldr	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80806fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
 80806fc:	2200      	movs	r2, #0
 80806fe:	9203      	str	r2, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080700:	63a3      	str	r3, [r4, #56]	; 0x38
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 8080702:	b108      	cbz	r0, 8080708 <_ZN9Co2System8cmdStartEv+0x34>
	  get_deleter()(__p);
 8080704:	f7ff fe55 	bl	80803b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.23>
 8080708:	a803      	add	r0, sp, #12
 808070a:	f7ff fec5 	bl	8080498 <_ZN6Thread7disposeEv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 808070e:	9803      	ldr	r0, [sp, #12]
 8080710:	b108      	cbz	r0, 8080716 <_ZN9Co2System8cmdStartEv+0x42>
	  get_deleter()(__ptr);
 8080712:	f7ff fe4e 	bl	80803b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.23>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080716:	a804      	add	r0, sp, #16
 8080718:	f7ff fe42 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
}
 808071c:	b008      	add	sp, #32
 808071e:	bd10      	pop	{r4, pc}
 8080720:	0808034d 	.word	0x0808034d
 8080724:	0808024f 	.word	0x0808024f
 8080728:	08080253 	.word	0x08080253
 808072c:	08087869 	.word	0x08087869

08080730 <_ZN9Co2System10initSdCardEPchh>:

bool Co2System::initSdCard(char* fileName, uint8_t chipSelect, uint8_t cardDetect)
{
 8080730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080732:	4605      	mov	r5, r0
 8080734:	b085      	sub	sp, #20
	// Is there even a card?
	if (!digitalRead(cardDetect))
 8080736:	4618      	mov	r0, r3

   hardwareThread = Thread("CommandBuffer", serialReadToBuffer, OS_THREAD_PRIORITY_DEFAULT + 1);
}

bool Co2System::initSdCard(char* fileName, uint8_t chipSelect, uint8_t cardDetect)
{
 8080738:	4617      	mov	r7, r2
	// Is there even a card?
	if (!digitalRead(cardDetect))
 808073a:	f004 fd5a 	bl	80851f2 <digitalRead>
 808073e:	4604      	mov	r4, r0
 8080740:	b948      	cbnz	r0, 8080756 <_ZN9Co2System10initSdCardEPchh+0x26>
	{
		Serial.print(F("No card detected. Waiting for card."));
 8080742:	f004 f98d 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080746:	4925      	ldr	r1, [pc, #148]	; (80807dc <_ZN9Co2System10initSdCardEPchh+0xac>)
 8080748:	f003 fba8 	bl	8083e9c <_ZN5Print5printEPK19__FlashStringHelper>
		delay(250);
 808074c:	20fa      	movs	r0, #250	; 0xfa
 808074e:	f003 fd33 	bl	80841b8 <delay>
		return false;
 8080752:	4620      	mov	r0, r4
 8080754:	e03f      	b.n	80807d6 <_ZN9Co2System10initSdCardEPchh+0xa6>
	}
	// Card seems to exist.  begin() returns failure
	// even if it worked if it's not the first call.
	if (!SD->begin(chipSelect, SPI_FULL_SPEED))  
 8080756:	6aac      	ldr	r4, [r5, #40]	; 0x28
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8080758:	4b21      	ldr	r3, [pc, #132]	; (80807e0 <_ZN9Co2System10initSdCardEPchh+0xb0>)
 808075a:	4a22      	ldr	r2, [pc, #136]	; (80807e4 <_ZN9Co2System10initSdCardEPchh+0xb4>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 808075c:	f504 658c 	add.w	r5, r4, #1120	; 0x460
 8080760:	9300      	str	r3, [sp, #0]
 8080762:	2300      	movs	r3, #0
 8080764:	f88d 3004 	strb.w	r3, [sp, #4]
 8080768:	9202      	str	r2, [sp, #8]
 808076a:	2601      	movs	r6, #1
 808076c:	f88d 300d 	strb.w	r3, [sp, #13]
 8080770:	463a      	mov	r2, r7
 8080772:	466b      	mov	r3, sp
 8080774:	f204 416c 	addw	r1, r4, #1132	; 0x46c
 8080778:	4628      	mov	r0, r5
 808077a:	f88d 600c 	strb.w	r6, [sp, #12]
 808077e:	f001 fde3 	bl	8082348 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 8080782:	b1f8      	cbz	r0, 80807c4 <_ZN9Co2System10initSdCardEPchh+0x94>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 8080784:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080786:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 808078a:	4628      	mov	r0, r5
 808078c:	f001 fa3c 	bl	8081c08 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080790:	4631      	mov	r1, r6
 8080792:	4620      	mov	r0, r4
 8080794:	f001 fc81 	bl	808209a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080798:	4601      	mov	r1, r0
 808079a:	b128      	cbz	r0, 80807a8 <_ZN9Co2System10initSdCardEPchh+0x78>
 808079c:	4621      	mov	r1, r4
 808079e:	4628      	mov	r0, r5
 80807a0:	f001 f849 	bl	8081836 <_ZN7FatFile8openRootEP9FatVolume>
 80807a4:	b170      	cbz	r0, 80807c4 <_ZN9Co2System10initSdCardEPchh+0x94>
 80807a6:	e005      	b.n	80807b4 <_ZN9Co2System10initSdCardEPchh+0x84>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 80807a8:	4620      	mov	r0, r4
 80807aa:	f001 fc76 	bl	808209a <_ZN9FatVolume4initEh>
 80807ae:	2800      	cmp	r0, #0
 80807b0:	d1f4      	bne.n	808079c <_ZN9Co2System10initSdCardEPchh+0x6c>
 80807b2:	e007      	b.n	80807c4 <_ZN9Co2System10initSdCardEPchh+0x94>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 80807b4:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 80807b8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80807bc:	d002      	beq.n	80807c4 <_ZN9Co2System10initSdCardEPchh+0x94>
      return false;
    }
    m_cwd = dir;
 80807be:	4b0a      	ldr	r3, [pc, #40]	; (80807e8 <_ZN9Co2System10initSdCardEPchh+0xb8>)
 80807c0:	601d      	str	r5, [r3, #0]
 80807c2:	e008      	b.n	80807d6 <_ZN9Co2System10initSdCardEPchh+0xa6>
	{
		Serial.print(F("SD Initialization failed!\n"));
 80807c4:	f004 f94c 	bl	8084a60 <_Z16_fetch_usbserialv>
 80807c8:	4908      	ldr	r1, [pc, #32]	; (80807ec <_ZN9Co2System10initSdCardEPchh+0xbc>)
 80807ca:	f003 fb67 	bl	8083e9c <_ZN5Print5printEPK19__FlashStringHelper>
		delay(250);
 80807ce:	20fa      	movs	r0, #250	; 0xfa
 80807d0:	f003 fcf2 	bl	80841b8 <delay>
		return false;
 80807d4:	2000      	movs	r0, #0
	}
	return true;
}
 80807d6:	b005      	add	sp, #20
 80807d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80807da:	bf00      	nop
 80807dc:	08087877 	.word	0x08087877
 80807e0:	080877a4 	.word	0x080877a4
 80807e4:	02faf080 	.word	0x02faf080
 80807e8:	20000448 	.word	0x20000448
 80807ec:	0808789b 	.word	0x0808789b

080807f0 <_ZN9Co2System3co2Ev>:
    }
int Co2System::gps(){

	return 0;
}
int Co2System::co2(){
 80807f0:	b510      	push	{r4, lr}
 80807f2:	4604      	mov	r4, r0
	co2Level = czr->CO2();
 80807f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80807f6:	f000 fc9f 	bl	8081138 <_ZN5COZIR3CO2Ev>
 80807fa:	6020      	str	r0, [r4, #0]
	return co2Level;
}
 80807fc:	bd10      	pop	{r4, pc}

080807fe <_ZN9Co2System5sleepEv>:
bool Co2System::publish() {
	if (m_CurrentState)
		return m_CurrentState->publish(this);
	return false;
}
bool Co2System::sleep() {
 80807fe:	4601      	mov	r1, r0
	if (m_CurrentState)
 8080800:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8080802:	b110      	cbz	r0, 808080a <_ZN9Co2System5sleepEv+0xc>
		return m_CurrentState->sleep(this);
 8080804:	6803      	ldr	r3, [r0, #0]
 8080806:	68db      	ldr	r3, [r3, #12]
 8080808:	4718      	bx	r3
	return false;
}
 808080a:	4770      	bx	lr

0808080c <_ZN9Co2System11readSensorsEv>:
bool Co2System::readSensors() {
 808080c:	4601      	mov	r1, r0
	if (m_CurrentState)
 808080e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8080810:	b110      	cbz	r0, 8080818 <_ZN9Co2System11readSensorsEv+0xc>
		return m_CurrentState->readSensors(this);
 8080812:	6803      	ldr	r3, [r0, #0]
 8080814:	689b      	ldr	r3, [r3, #8]
 8080816:	4718      	bx	r3
	return false;
}
 8080818:	4770      	bx	lr

0808081a <_ZN9Co2System3logEv>:
bool Co2System::log() {
 808081a:	4601      	mov	r1, r0
	if (m_CurrentState)
 808081c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 808081e:	b110      	cbz	r0, 8080826 <_ZN9Co2System3logEv+0xc>
		return m_CurrentState->log(this);
 8080820:	6803      	ldr	r3, [r0, #0]
 8080822:	699b      	ldr	r3, [r3, #24]
 8080824:	4718      	bx	r3
	return false;
}
 8080826:	4770      	bx	lr

08080828 <_ZN9Co2System6wakeupEv>:
bool Co2System::wakeup() {
 8080828:	4601      	mov	r1, r0
	if (m_CurrentState)
 808082a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 808082c:	b110      	cbz	r0, 8080834 <_ZN9Co2System6wakeupEv+0xc>
		return m_CurrentState->wakeup(this);
 808082e:	6803      	ldr	r3, [r0, #0]
 8080830:	691b      	ldr	r3, [r3, #16]
 8080832:	4718      	bx	r3
	return false;
}
 8080834:	4770      	bx	lr

08080836 <_ZN9Co2System15setCurrentStateEP5State>:
void Co2System::setCurrentState(State* currentState) {
 8080836:	b538      	push	{r3, r4, r5, lr}
 8080838:	4604      	mov	r4, r0
	if (m_CurrentState) {
 808083a:	6b40      	ldr	r0, [r0, #52]	; 0x34
bool Co2System::wakeup() {
	if (m_CurrentState)
		return m_CurrentState->wakeup(this);
	return false;
}
void Co2System::setCurrentState(State* currentState) {
 808083c:	460d      	mov	r5, r1
	if (m_CurrentState) {
 808083e:	b110      	cbz	r0, 8080846 <_ZN9Co2System15setCurrentStateEP5State+0x10>
		delete m_CurrentState;
 8080840:	6803      	ldr	r3, [r0, #0]
 8080842:	685b      	ldr	r3, [r3, #4]
 8080844:	4798      	blx	r3
		m_CurrentState = NULL;
	}
	m_CurrentState = currentState;
 8080846:	6365      	str	r5, [r4, #52]	; 0x34
 8080848:	bd38      	pop	{r3, r4, r5, pc}

0808084a <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>:
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.getMember(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
 808084a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808084c:	7a03      	ldrb	r3, [r0, #8]
 808084e:	4617      	mov	r7, r2
    if (isNull())
 8080850:	f013 027f 	ands.w	r2, r3, #127	; 0x7f
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.getMember(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
 8080854:	4605      	mov	r5, r0
 8080856:	460e      	mov	r6, r1
    if (isNull())
 8080858:	d106      	bne.n	8080868 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x1e>
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 808085a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 808085e:	f043 0320 	orr.w	r3, r3, #32
 8080862:	7203      	strb	r3, [r0, #8]
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
 8080864:	6002      	str	r2, [r0, #0]
  _tail = 0;
 8080866:	6042      	str	r2, [r0, #4]

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
    if (isNull())
      toObject();
    if (!isObject())
 8080868:	7a2b      	ldrb	r3, [r5, #8]
 808086a:	f003 0320 	and.w	r3, r3, #32
 808086e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080872:	b1eb      	cbz	r3, 80808b0 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x66>

template <typename TAdaptedString>
inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,
                                                   MemoryPool* pool) {
  // ignore null key
  if (key.isNull())
 8080874:	b1ce      	cbz	r6, 80808aa <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x60>
 8080876:	682c      	ldr	r4, [r5, #0]
}

template <typename TAdaptedString>
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
  VariantSlot* slot = _head;
  while (slot) {
 8080878:	b164      	cbz	r4, 8080894 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x4a>
 808087a:	68e1      	ldr	r1, [r4, #12]
#include <stdint.h>  // int8_t

namespace ARDUINOJSON_NAMESPACE {

inline int safe_strcmp(const char* a, const char* b) {
  if (a == b)
 808087c:	42b1      	cmp	r1, r6
 808087e:	d016      	beq.n	80808ae <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x64>
    return 0;
  if (!a)
    return -1;
  if (!b)
 8080880:	b119      	cbz	r1, 808088a <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x40>
    return 1;
  return strcmp(a, b);
 8080882:	4630      	mov	r0, r6
 8080884:	f005 fd8c 	bl	80863a0 <strcmp>
    if (key.equals(slot->key()))
 8080888:	b188      	cbz	r0, 80808ae <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x64>
      break;
    slot = slot->next();
 808088a:	4620      	mov	r0, r4
 808088c:	f7ff fe27 	bl	80804de <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv>
 8080890:	4604      	mov	r4, r0
 8080892:	e7f1      	b.n	8080878 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x2e>
}

template <typename TAdaptedString>
inline VariantData* CollectionData::addMember(TAdaptedString key,
                                              MemoryPool* pool) {
  VariantSlot* slot = addSlot(pool);
 8080894:	4639      	mov	r1, r7
 8080896:	4628      	mov	r0, r5
 8080898:	f7ff fe29 	bl	80804ee <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE>

namespace ARDUINOJSON_NAMESPACE {

template <typename TAdaptedString>
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
  if (!var)
 808089c:	b138      	cbz	r0, 80808ae <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x64>
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
 808089e:	7a03      	ldrb	r3, [r0, #8]
    _key = k.get();
 80808a0:	60c6      	str	r6, [r0, #12]
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
 80808a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80808a6:	7203      	strb	r3, [r0, #8]
 80808a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return 0;
 80808aa:	4630      	mov	r0, r6
 80808ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!slotSetKey(slot, key, pool)) {
    removeSlot(slot);
    return 0;
 80808ae:	4620      	mov	r0, r4
    return _content.asCollection.getOrAddMember(key, pool);
  }
 80808b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080808b2 <_ZN23ArduinoJson6141_00000106WriterI4FilevE5writeEPKhj>:
  size_t write(uint8_t c) {
    return _print->write(c);
  }

  size_t write(const uint8_t* s, size_t n) {
    return _print->write(s, n);
 80808b2:	6800      	ldr	r0, [r0, #0]
 80808b4:	6803      	ldr	r3, [r0, #0]
 80808b6:	68db      	ldr	r3, [r3, #12]
 80808b8:	4718      	bx	r3

080808ba <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
 80808ba:	b538      	push	{r3, r4, r5, lr}
 80808bc:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
 80808be:	4608      	mov	r0, r1

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
 80808c0:	460d      	mov	r5, r1
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
 80808c2:	f006 faaf 	bl	8086e24 <strlen>
 80808c6:	4629      	mov	r1, r5
 80808c8:	4602      	mov	r2, r0
 80808ca:	4620      	mov	r0, r4
 80808cc:	f7ff fff1 	bl	80808b2 <_ZN23ArduinoJson6141_00000106WriterI4FilevE5writeEPKhj>
 80808d0:	6863      	ldr	r3, [r4, #4]
 80808d2:	4418      	add	r0, r3
 80808d4:	6060      	str	r0, [r4, #4]
 80808d6:	bd38      	pop	{r3, r4, r5, pc}

080808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
 80808d8:	b510      	push	{r4, lr}
 80808da:	4604      	mov	r4, r0
    typename enable_if<is_base_of< ::Print, TDestination>::value>::type> {
 public:
  explicit Writer(::Print& print) : _print(&print) {}

  size_t write(uint8_t c) {
    return _print->write(c);
 80808dc:	6800      	ldr	r0, [r0, #0]
 80808de:	6803      	ldr	r3, [r0, #0]
 80808e0:	689b      	ldr	r3, [r3, #8]
 80808e2:	4798      	blx	r3
    _length += _writer.write(static_cast<uint8_t>(c));
 80808e4:	6863      	ldr	r3, [r4, #4]
 80808e6:	4418      	add	r0, r3
 80808e8:	6060      	str	r0, [r4, #4]
 80808ea:	bd10      	pop	{r4, pc}

080808ec <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc>:
      writeRaw("true");
    else
      writeRaw("false");
  }

  void writeString(const char *value) {
 80808ec:	b570      	push	{r4, r5, r6, lr}
 80808ee:	460d      	mov	r5, r1
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
 80808f0:	2122      	movs	r1, #34	; 0x22
      writeRaw("true");
    else
      writeRaw("false");
  }

  void writeString(const char *value) {
 80808f2:	4604      	mov	r4, r0
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
 80808f4:	f7ff fff0 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 80808f8:	3d01      	subs	r5, #1
    while (*value) writeChar(*value++);
 80808fa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80808fe:	b171      	cbz	r1, 808091e <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x32>
 8080900:	4b0b      	ldr	r3, [pc, #44]	; (8080930 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x44>)
class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
    const char *p = escapeTable(true);
    while (p[0] && p[1] != c) {
 8080902:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 8080906:	b17e      	cbz	r6, 8080928 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x3c>
 8080908:	3302      	adds	r3, #2
 808090a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 808090e:	428a      	cmp	r2, r1
 8080910:	d1f7      	bne.n	8080902 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x16>
  }

  void writeChar(char c) {
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
 8080912:	215c      	movs	r1, #92	; 0x5c
 8080914:	4620      	mov	r0, r4
 8080916:	f7ff ffdf 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
      writeRaw(specialChar);
 808091a:	4631      	mov	r1, r6
 808091c:	e004      	b.n	8080928 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x3c>

  void writeString(const char *value) {
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
    while (*value) writeChar(*value++);
    writeRaw('\"');
 808091e:	2122      	movs	r1, #34	; 0x22
 8080920:	4620      	mov	r0, r4
 8080922:	f7ff ffd9 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
  }
 8080926:	bd70      	pop	{r4, r5, r6, pc}
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
      writeRaw(specialChar);
    } else {
      writeRaw(c);
 8080928:	4620      	mov	r0, r4
 808092a:	f7ff ffd5 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 808092e:	e7e4      	b.n	80808fa <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0xe>
 8080930:	080878ba 	.word	0x080878ba
 8080934:	00000000 	.word	0x00000000

08080938 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef>:
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
 8080938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808093c:	460d      	mov	r5, r1
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 808093e:	2306      	movs	r3, #6
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
 8080940:	4606      	mov	r6, r0
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 8080942:	7283      	strb	r3, [r0, #10]
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8080944:	4954      	ldr	r1, [pc, #336]	; (8080a98 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x160>)
 8080946:	4628      	mov	r0, r5
 8080948:	f005 fb50 	bl	8085fec <__aeabi_fcmpge>
 808094c:	b300      	cbz	r0, 8080990 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x58>
 808094e:	2700      	movs	r7, #0
 8080950:	463c      	mov	r4, r7
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
 8080952:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8080a9c <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x164>
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
 8080956:	f8df a148 	ldr.w	sl, [pc, #328]	; 8080aa0 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x168>
 808095a:	f04f 0820 	mov.w	r8, #32
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
 808095e:	eb07 0309 	add.w	r3, r7, r9
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
 8080962:	4629      	mov	r1, r5
 8080964:	6958      	ldr	r0, [r3, #20]
 8080966:	f005 fb37 	bl	8085fd8 <__aeabi_fcmple>
 808096a:	b140      	cbz	r0, 808097e <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x46>
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
 808096c:	eb07 030a 	add.w	r3, r7, sl
          value *= traits::negativeBinaryPowerOfTen(index);
 8080970:	4628      	mov	r0, r5
 8080972:	6959      	ldr	r1, [r3, #20]
 8080974:	f005 f988 	bl	8085c88 <__aeabi_fmul>
 8080978:	4605      	mov	r5, r0
          powersOf10 = int16_t(powersOf10 + bit);
 808097a:	4444      	add	r4, r8
 808097c:	b224      	sxth	r4, r4
 808097e:	3f04      	subs	r7, #4

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
 8080980:	f117 0f18 	cmn.w	r7, #24
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
          value *= traits::negativeBinaryPowerOfTen(index);
          powersOf10 = int16_t(powersOf10 + bit);
        }
        bit >>= 1;
 8080984:	ea4f 0868 	mov.w	r8, r8, asr #1

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
 8080988:	d1e9      	bne.n	808095e <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x26>
 808098a:	f04f 37ff 	mov.w	r7, #4294967295
 808098e:	e003      	b.n	8080998 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x60>
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
 8080990:	4604      	mov	r4, r0

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
 8080992:	f04f 0820 	mov.w	r8, #32

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8080996:	2705      	movs	r7, #5
        }
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8080998:	2100      	movs	r1, #0
 808099a:	4628      	mov	r0, r5
 808099c:	f005 fb30 	bl	8086000 <__aeabi_fcmpgt>
 80809a0:	b310      	cbz	r0, 80809e8 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xb0>
 80809a2:	4628      	mov	r0, r5
 80809a4:	f004 ff86 	bl	80858b4 <__aeabi_f2d>
 80809a8:	a339      	add	r3, pc, #228	; (adr r3, 8080a90 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x158>)
 80809aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80809ae:	f005 f83f 	bl	8085a30 <__aeabi_dcmple>
 80809b2:	b1c8      	cbz	r0, 80809e8 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xb0>
  }

  static T negativeBinaryPowerOfTenPlusOne(int index) {
    static T factors[] = {1e0f, 1e-1f, 1e-3f, 1e-7f, 1e-15f, 1e-31f};
    return factors[index];
 80809b4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8080aa4 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x16c>
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
 80809b8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8080a9c <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x164>
      for (; index >= 0; index--) {
 80809bc:	1c7b      	adds	r3, r7, #1
 80809be:	d013      	beq.n	80809e8 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xb0>
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
 80809c0:	4629      	mov	r1, r5
 80809c2:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
 80809c6:	f005 fb1b 	bl	8086000 <__aeabi_fcmpgt>
 80809ca:	b140      	cbz	r0, 80809de <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xa6>
          value *= traits::positiveBinaryPowerOfTen(index);
 80809cc:	4628      	mov	r0, r5
 80809ce:	f85a 1027 	ldr.w	r1, [sl, r7, lsl #2]
 80809d2:	f005 f959 	bl	8085c88 <__aeabi_fmul>
 80809d6:	4605      	mov	r5, r0
          powersOf10 = int16_t(powersOf10 - bit);
 80809d8:	ebc8 0404 	rsb	r4, r8, r4
 80809dc:	b224      	sxth	r4, r4
 80809de:	3f01      	subs	r7, #1
        }
        bit >>= 1;
 80809e0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80809e4:	b27f      	sxtb	r7, r7
 80809e6:	e7e9      	b.n	80809bc <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x84>

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
 80809e8:	8134      	strh	r4, [r6, #8]

    integral = uint32_t(value);
 80809ea:	4628      	mov	r0, r5
 80809ec:	f005 fb28 	bl	8086040 <__aeabi_f2uiz>
 80809f0:	4607      	mov	r7, r0
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 80809f2:	4603      	mov	r3, r0
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 80809f4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8080aa8 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x170>
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
 80809f8:	6030      	str	r0, [r6, #0]
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
      maxDecimalPart /= 10;
 80809fa:	210a      	movs	r1, #10

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 80809fc:	2b09      	cmp	r3, #9
 80809fe:	d907      	bls.n	8080a10 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xd8>
      maxDecimalPart /= 10;
      decimalPlaces--;
 8080a00:	7ab2      	ldrb	r2, [r6, #10]
    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
      maxDecimalPart /= 10;
 8080a02:	fbb8 f8f1 	udiv	r8, r8, r1
      decimalPlaces--;
 8080a06:	3a01      	subs	r2, #1
 8080a08:	72b2      	strb	r2, [r6, #10]

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8080a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8080a0e:	e7f5      	b.n	80809fc <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xc4>
      maxDecimalPart /= 10;
      decimalPlaces--;
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 8080a10:	4638      	mov	r0, r7
 8080a12:	f005 f8e1 	bl	8085bd8 <__aeabi_ui2f>
 8080a16:	4601      	mov	r1, r0
 8080a18:	4628      	mov	r0, r5
 8080a1a:	f005 f82b 	bl	8085a74 <__aeabi_fsub>
 8080a1e:	4605      	mov	r5, r0
 8080a20:	4640      	mov	r0, r8
 8080a22:	f005 f8d9 	bl	8085bd8 <__aeabi_ui2f>
 8080a26:	4601      	mov	r1, r0
 8080a28:	4628      	mov	r0, r5
 8080a2a:	f005 f92d 	bl	8085c88 <__aeabi_fmul>
 8080a2e:	4681      	mov	r9, r0

    decimal = uint32_t(remainder);
 8080a30:	f005 fb06 	bl	8086040 <__aeabi_f2uiz>
 8080a34:	4605      	mov	r5, r0
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 8080a36:	f005 f8cf 	bl	8085bd8 <__aeabi_ui2f>
 8080a3a:	4601      	mov	r1, r0
 8080a3c:	4648      	mov	r0, r9
 8080a3e:	f005 f819 	bl	8085a74 <__aeabi_fsub>
 8080a42:	4601      	mov	r1, r0
 8080a44:	f005 f818 	bl	8085a78 <__addsf3>
 8080a48:	f005 fafa 	bl	8086040 <__aeabi_f2uiz>
 8080a4c:	4428      	add	r0, r5
    if (decimal >= maxDecimalPart) {
 8080a4e:	4580      	cmp	r8, r0
 8080a50:	d901      	bls.n	8080a56 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x11e>
    decimal = uint32_t(remainder);
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 8080a52:	6070      	str	r0, [r6, #4]
 8080a54:	e00a      	b.n	8080a6c <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x134>
    if (decimal >= maxDecimalPart) {
      decimal = 0;
 8080a56:	2300      	movs	r3, #0
      integral++;
 8080a58:	3701      	adds	r7, #1

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
 8080a5a:	6073      	str	r3, [r6, #4]
      integral++;
 8080a5c:	6037      	str	r7, [r6, #0]
      if (exponent && integral >= 10) {
 8080a5e:	b12c      	cbz	r4, 8080a6c <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x134>
 8080a60:	2f09      	cmp	r7, #9
        exponent++;
 8080a62:	bf81      	itttt	hi
 8080a64:	3401      	addhi	r4, #1
        integral = 1;
 8080a66:	2301      	movhi	r3, #1
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
      integral++;
      if (exponent && integral >= 10) {
        exponent++;
 8080a68:	8134      	strhhi	r4, [r6, #8]
        integral = 1;
 8080a6a:	6033      	strhi	r3, [r6, #0]
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 8080a6c:	210a      	movs	r1, #10
 8080a6e:	6873      	ldr	r3, [r6, #4]
 8080a70:	fbb3 f2f1 	udiv	r2, r3, r1
 8080a74:	fb01 3312 	mls	r3, r1, r2, r3
 8080a78:	b93b      	cbnz	r3, 8080a8a <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x152>
 8080a7a:	f996 300a 	ldrsb.w	r3, [r6, #10]
 8080a7e:	2b00      	cmp	r3, #0
 8080a80:	dd03      	ble.n	8080a8a <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x152>
      decimal /= 10;
      decimalPlaces--;
 8080a82:	3b01      	subs	r3, #1
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
      decimal /= 10;
 8080a84:	6072      	str	r2, [r6, #4]
      decimalPlaces--;
 8080a86:	72b3      	strb	r3, [r6, #10]
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 8080a88:	e7f1      	b.n	8080a6e <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x136>
      decimal /= 10;
      decimalPlaces--;
    }
  }
 8080a8a:	4630      	mov	r0, r6
 8080a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080a90:	88e368f1 	.word	0x88e368f1
 8080a94:	3ee4f8b5 	.word	0x3ee4f8b5
 8080a98:	4b189680 	.word	0x4b189680
 8080a9c:	20000030 	.word	0x20000030
 8080aa0:	20000018 	.word	0x20000018
 8080aa4:	20000000 	.word	0x20000000
 8080aa8:	000f4240 	.word	0x000f4240

08080aac <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>:

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
 8080aac:	b510      	push	{r4, lr}
 8080aae:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
 8080ab0:	1a52      	subs	r2, r2, r1
 8080ab2:	f7ff fefe 	bl	80808b2 <_ZN23ArduinoJson6141_00000106WriterI4FilevE5writeEPKhj>
 8080ab6:	6863      	ldr	r3, [r4, #4]
 8080ab8:	4418      	add	r0, r3
 8080aba:	6060      	str	r0, [r4, #4]
 8080abc:	bd10      	pop	{r4, pc}

08080abe <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE20writePositiveIntegerImEEvT_>:
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
 8080abe:	b530      	push	{r4, r5, lr}
 8080ac0:	b087      	sub	sp, #28
 8080ac2:	460b      	mov	r3, r1
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8080ac4:	f10d 0116 	add.w	r1, sp, #22
 8080ac8:	460a      	mov	r2, r1

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8080aca:	250a      	movs	r5, #10
 8080acc:	fbb3 f4f5 	udiv	r4, r3, r5
 8080ad0:	fb05 3314 	mls	r3, r5, r4, r3
 8080ad4:	3330      	adds	r3, #48	; 0x30
 8080ad6:	f801 3d01 	strb.w	r3, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 8080ada:	4623      	mov	r3, r4
 8080adc:	2c00      	cmp	r4, #0
 8080ade:	d1f5      	bne.n	8080acc <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE20writePositiveIntegerImEEvT_+0xe>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 8080ae0:	f7ff ffe4 	bl	8080aac <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>
  }
 8080ae4:	b007      	add	sp, #28
 8080ae6:	bd30      	pop	{r4, r5, pc}

08080ae8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_>:
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
 8080ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080aea:	4604      	mov	r4, r0
 8080aec:	b08b      	sub	sp, #44	; 0x2c
    if (isnan(value))
 8080aee:	4608      	mov	r0, r1
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
 8080af0:	460d      	mov	r5, r1
    if (isnan(value))
 8080af2:	f005 fa8f 	bl	8086014 <__aeabi_fcmpun>
 8080af6:	b120      	cbz	r0, 8080b02 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x1a>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 8080af8:	493d      	ldr	r1, [pc, #244]	; (8080bf0 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x108>)
 8080afa:	4620      	mov	r0, r4
 8080afc:	f7ff fedd 	bl	80808ba <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKc>
 8080b00:	e073      	b.n	8080bea <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x102>
    }

    if (isinf(value))
      return writeRaw("Infinity");
#else
    if (isinf(value))
 8080b02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8080b06:	493b      	ldr	r1, [pc, #236]	; (8080bf4 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x10c>)
 8080b08:	4630      	mov	r0, r6
 8080b0a:	f005 fa83 	bl	8086014 <__aeabi_fcmpun>
 8080b0e:	b928      	cbnz	r0, 8080b1c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x34>
 8080b10:	4938      	ldr	r1, [pc, #224]	; (8080bf4 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x10c>)
 8080b12:	4630      	mov	r0, r6
 8080b14:	f005 fa60 	bl	8085fd8 <__aeabi_fcmple>
 8080b18:	2800      	cmp	r0, #0
 8080b1a:	d0ed      	beq.n	8080af8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x10>
      return writeRaw("null");

    if (value < 0.0) {
 8080b1c:	2100      	movs	r1, #0
 8080b1e:	4628      	mov	r0, r5
 8080b20:	f005 fa50 	bl	8085fc4 <__aeabi_fcmplt>
 8080b24:	b128      	cbz	r0, 8080b32 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x4a>
      writeRaw('-');
 8080b26:	212d      	movs	r1, #45	; 0x2d
 8080b28:	4620      	mov	r0, r4
 8080b2a:	f7ff fed5 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
      value = -value;
 8080b2e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    }
#endif

    FloatParts<T> parts(value);
 8080b32:	4629      	mov	r1, r5
 8080b34:	a801      	add	r0, sp, #4
 8080b36:	f7ff feff 	bl	8080938 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef>

    writePositiveInteger(parts.integral);
 8080b3a:	9901      	ldr	r1, [sp, #4]
 8080b3c:	4620      	mov	r0, r4
 8080b3e:	f7ff ffbe 	bl	8080abe <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE20writePositiveIntegerImEEvT_>
    if (parts.decimalPlaces)
 8080b42:	f99d 100e 	ldrsb.w	r1, [sp, #14]
 8080b46:	b1c9      	cbz	r1, 8080b7c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x94>

  void writeDecimals(uint32_t value, int8_t width) {
    // buffer should be big enough for all digits and the dot
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8080b48:	ad08      	add	r5, sp, #32

    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);
 8080b4a:	4608      	mov	r0, r1
 8080b4c:	462a      	mov	r2, r5
 8080b4e:	9b02      	ldr	r3, [sp, #8]
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
      *--begin = char(value % 10 + '0');
 8080b50:	270a      	movs	r7, #10
 8080b52:	3801      	subs	r0, #1
 8080b54:	b240      	sxtb	r0, r0
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
 8080b56:	1c46      	adds	r6, r0, #1
 8080b58:	d008      	beq.n	8080b6c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x84>
      *--begin = char(value % 10 + '0');
 8080b5a:	fbb3 f6f7 	udiv	r6, r3, r7
 8080b5e:	fb07 3316 	mls	r3, r7, r6, r3
 8080b62:	3330      	adds	r3, #48	; 0x30
 8080b64:	f805 3d01 	strb.w	r3, [r5, #-1]!
      value /= 10;
 8080b68:	4633      	mov	r3, r6
 8080b6a:	e7f2      	b.n	8080b52 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x6a>
 8080b6c:	b2c9      	uxtb	r1, r1
    }
    *--begin = '.';
 8080b6e:	1a51      	subs	r1, r2, r1
 8080b70:	232e      	movs	r3, #46	; 0x2e
 8080b72:	f801 3d01 	strb.w	r3, [r1, #-1]!

    // and dump it in the right order
    writeRaw(begin, end);
 8080b76:	4620      	mov	r0, r4
 8080b78:	f7ff ff98 	bl	8080aac <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
 8080b7c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8080b80:	2b00      	cmp	r3, #0
 8080b82:	da17      	bge.n	8080bb4 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0xcc>
      writeRaw("e-");
 8080b84:	491c      	ldr	r1, [pc, #112]	; (8080bf8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x110>)
 8080b86:	4620      	mov	r0, r4
 8080b88:	f7ff fe97 	bl	80808ba <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKc>

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8080b8c:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8080b90:	460a      	mov	r2, r1
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
 8080b92:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8080b96:	250a      	movs	r5, #10
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
 8080b98:	425b      	negs	r3, r3
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8080b9a:	fb93 f0f5 	sdiv	r0, r3, r5
 8080b9e:	fb05 3310 	mls	r3, r5, r0, r3
 8080ba2:	3330      	adds	r3, #48	; 0x30
 8080ba4:	f801 3d01 	strb.w	r3, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 8080ba8:	4603      	mov	r3, r0
 8080baa:	2800      	cmp	r0, #0
 8080bac:	d1f5      	bne.n	8080b9a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0xb2>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 8080bae:	4620      	mov	r0, r4
 8080bb0:	f7ff ff7c 	bl	8080aac <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>
    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
 8080bb4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8080bb8:	2b00      	cmp	r3, #0
 8080bba:	dd16      	ble.n	8080bea <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x102>
      writeRaw('e');
 8080bbc:	2165      	movs	r1, #101	; 0x65
 8080bbe:	4620      	mov	r0, r4
 8080bc0:	f7ff fe8a 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8080bc4:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8080bc8:	460a      	mov	r2, r1
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
 8080bca:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8080bce:	250a      	movs	r5, #10
 8080bd0:	fb93 f0f5 	sdiv	r0, r3, r5
 8080bd4:	fb05 3310 	mls	r3, r5, r0, r3
 8080bd8:	3330      	adds	r3, #48	; 0x30
 8080bda:	f801 3d01 	strb.w	r3, [r1, #-1]!
      value = T(value / 10);
 8080bde:	b203      	sxth	r3, r0
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 8080be0:	2b00      	cmp	r3, #0
 8080be2:	d1f5      	bne.n	8080bd0 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0xe8>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 8080be4:	4620      	mov	r0, r4
 8080be6:	f7ff ff61 	bl	8080aac <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
    }
  }
 8080bea:	b00b      	add	sp, #44	; 0x2c
 8080bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080bee:	bf00      	nop
 8080bf0:	080878c7 	.word	0x080878c7
 8080bf4:	7f7fffff 	.word	0x7f7fffff
 8080bf8:	080878cc 	.word	0x080878cc

08080bfc <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_>:
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 8080bfc:	b538      	push	{r3, r4, r5, lr}
    switch (type()) {
 8080bfe:	7a03      	ldrb	r3, [r0, #8]
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 8080c00:	4605      	mov	r5, r0
    switch (type()) {
 8080c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8080c06:	2b06      	cmp	r3, #6
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 8080c08:	460c      	mov	r4, r1
    switch (type()) {
 8080c0a:	d066      	beq.n	8080cda <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xde>
 8080c0c:	d808      	bhi.n	8080c20 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x24>
 8080c0e:	2b02      	cmp	r3, #2
 8080c10:	d369      	bcc.n	8080ce6 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xea>
 8080c12:	2b03      	cmp	r3, #3
 8080c14:	d953      	bls.n	8080cbe <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xc2>
  void visitFloat(Float value) {
    _formatter.writeFloat(value);
  }

  void visitString(const char *value) {
    _formatter.writeString(value);
 8080c16:	6801      	ldr	r1, [r0, #0]
 8080c18:	4620      	mov	r0, r4
 8080c1a:	f7ff fe67 	bl	80808ec <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc>
 8080c1e:	bd38      	pop	{r3, r4, r5, pc}
 8080c20:	2b0c      	cmp	r3, #12
 8080c22:	d015      	beq.n	8080c50 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x54>
 8080c24:	d80a      	bhi.n	8080c3c <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x40>
 8080c26:	2b08      	cmp	r3, #8
 8080c28:	d052      	beq.n	8080cd0 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xd4>
 8080c2a:	2b0a      	cmp	r3, #10
 8080c2c:	d15b      	bne.n	8080ce6 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xea>
      case VALUE_IS_OWNED_RAW:
      case VALUE_IS_LINKED_RAW:
        return visitor.visitRawJson(_content.asRaw.data, _content.asRaw.size);

      case VALUE_IS_NEGATIVE_INTEGER:
        return visitor.visitNegativeInteger(_content.asInteger);
 8080c2e:	6805      	ldr	r5, [r0, #0]

  void writeNegativeInteger(UInt value) {
    writeRaw('-');
 8080c30:	212d      	movs	r1, #45	; 0x2d
 8080c32:	4620      	mov	r0, r4
 8080c34:	f7ff fe50 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
    writePositiveInteger(value);
 8080c38:	4629      	mov	r1, r5
 8080c3a:	e04a      	b.n	8080cd2 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xd6>
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
    switch (type()) {
 8080c3c:	2b20      	cmp	r3, #32
 8080c3e:	d01d      	beq.n	8080c7c <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x80>
 8080c40:	2b40      	cmp	r3, #64	; 0x40
 8080c42:	d150      	bne.n	8080ce6 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xea>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8080c44:	215b      	movs	r1, #91	; 0x5b
 8080c46:	4620      	mov	r0, r4
 8080c48:	f7ff fe46 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 8080c4c:	682d      	ldr	r5, [r5, #0]
 8080c4e:	e011      	b.n	8080c74 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x78>

    write('}');
  }

  void visitFloat(Float value) {
    _formatter.writeFloat(value);
 8080c50:	6801      	ldr	r1, [r0, #0]
 8080c52:	4620      	mov	r0, r4
 8080c54:	f7ff ff48 	bl	8080ae8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_>
 8080c58:	bd38      	pop	{r3, r4, r5, pc}
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
      slot->data()->accept(*this);
 8080c5a:	4628      	mov	r0, r5
 8080c5c:	4621      	mov	r1, r4
 8080c5e:	f7ff ffcd 	bl	8080bfc <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_>

      slot = slot->next();
 8080c62:	4628      	mov	r0, r5
 8080c64:	f7ff fc3b 	bl	80804de <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv>
      if (slot == 0)
 8080c68:	4605      	mov	r5, r0
 8080c6a:	b128      	cbz	r0, 8080c78 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x7c>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8080c6c:	212c      	movs	r1, #44	; 0x2c
 8080c6e:	4620      	mov	r0, r4
 8080c70:	f7ff fe32 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
  FORCE_INLINE void visitArray(const CollectionData &array) {
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
 8080c74:	2d00      	cmp	r5, #0
 8080c76:	d1f0      	bne.n	8080c5a <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x5e>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8080c78:	215d      	movs	r1, #93	; 0x5d
 8080c7a:	e01c      	b.n	8080cb6 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xba>
 8080c7c:	217b      	movs	r1, #123	; 0x7b
 8080c7e:	4620      	mov	r0, r4
 8080c80:	f7ff fe2a 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 8080c84:	682d      	ldr	r5, [r5, #0]
  void visitObject(const CollectionData &object) {
    write('{');

    VariantSlot *slot = object.head();

    while (slot != 0) {
 8080c86:	b1ad      	cbz	r5, 8080cb4 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xb8>
      _formatter.writeString(slot->key());
 8080c88:	68e9      	ldr	r1, [r5, #12]
 8080c8a:	4620      	mov	r0, r4
 8080c8c:	f7ff fe2e 	bl	80808ec <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8080c90:	213a      	movs	r1, #58	; 0x3a
 8080c92:	4620      	mov	r0, r4
 8080c94:	f7ff fe20 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
    VariantSlot *slot = object.head();

    while (slot != 0) {
      _formatter.writeString(slot->key());
      write(':');
      slot->data()->accept(*this);
 8080c98:	4628      	mov	r0, r5
 8080c9a:	4621      	mov	r1, r4
 8080c9c:	f7ff ffae 	bl	8080bfc <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_>

      slot = slot->next();
 8080ca0:	4628      	mov	r0, r5
 8080ca2:	f7ff fc1c 	bl	80804de <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv>
      if (slot == 0)
 8080ca6:	4605      	mov	r5, r0
 8080ca8:	b120      	cbz	r0, 8080cb4 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xb8>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8080caa:	212c      	movs	r1, #44	; 0x2c
 8080cac:	4620      	mov	r0, r4
 8080cae:	f7ff fe13 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 8080cb2:	e7e8      	b.n	8080c86 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x8a>
 8080cb4:	217d      	movs	r1, #125	; 0x7d
 8080cb6:	4620      	mov	r0, r4
 8080cb8:	f7ff fe0e 	bl	80808d8 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 8080cbc:	bd38      	pop	{r3, r4, r5, pc}
  void writeRaw(const char *s) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
  }

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
 8080cbe:	e890 0006 	ldmia.w	r0, {r1, r2}
 8080cc2:	4620      	mov	r0, r4
 8080cc4:	f7ff fdf5 	bl	80808b2 <_ZN23ArduinoJson6141_00000106WriterI4FilevE5writeEPKhj>
 8080cc8:	6863      	ldr	r3, [r4, #4]
 8080cca:	4418      	add	r0, r3
 8080ccc:	6060      	str	r0, [r4, #4]
 8080cce:	bd38      	pop	{r3, r4, r5, pc}
  void visitNegativeInteger(UInt value) {
    _formatter.writeNegativeInteger(value);
  }

  void visitPositiveInteger(UInt value) {
    _formatter.writePositiveInteger(value);
 8080cd0:	6801      	ldr	r1, [r0, #0]
 8080cd2:	4620      	mov	r0, r4
 8080cd4:	f7ff fef3 	bl	8080abe <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE20writePositiveIntegerImEEvT_>
 8080cd8:	bd38      	pop	{r3, r4, r5, pc}
  size_t bytesWritten() const {
    return _length;
  }

  void writeBoolean(bool value) {
    if (value)
 8080cda:	6803      	ldr	r3, [r0, #0]
 8080cdc:	b10b      	cbz	r3, 8080ce2 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xe6>
      writeRaw("true");
 8080cde:	4904      	ldr	r1, [pc, #16]	; (8080cf0 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xf4>)
 8080ce0:	e002      	b.n	8080ce8 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xec>
    else
      writeRaw("false");
 8080ce2:	4904      	ldr	r1, [pc, #16]	; (8080cf4 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xf8>)
 8080ce4:	e000      	b.n	8080ce8 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xec>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
 8080ce6:	4904      	ldr	r1, [pc, #16]	; (8080cf8 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xfc>)
 8080ce8:	4620      	mov	r0, r4
 8080cea:	f7ff fde6 	bl	80808ba <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKc>
 8080cee:	bd38      	pop	{r3, r4, r5, pc}
 8080cf0:	080878cf 	.word	0x080878cf
 8080cf4:	080878d4 	.word	0x080878d4
 8080cf8:	080878c7 	.word	0x080878c7

08080cfc <_ZN9Co2System9writeJsonEPc>:
	}
	return true;
}


void Co2System::writeJson(char* fileName){
 8080cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8080d00:	2300      	movs	r3, #0
 8080d02:	b0a2      	sub	sp, #136	; 0x88
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
 8080d04:	4c5d      	ldr	r4, [pc, #372]	; (8080e7c <_ZN9Co2System9writeJsonEPc+0x180>)
 8080d06:	4605      	mov	r5, r0
 8080d08:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8080d0c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080d10:	9309      	str	r3, [sp, #36]	; 0x24

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t size) {
    return malloc(size);
 8080d12:	20c8      	movs	r0, #200	; 0xc8
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080d18:	460e      	mov	r6, r1
 8080d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8080d1c:	9408      	str	r4, [sp, #32]
 8080d1e:	f002 fe3f 	bl	80839a0 <malloc>
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
 8080d22:	b118      	cbz	r0, 8080d2c <_ZN9Co2System9writeJsonEPc+0x30>
 8080d24:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
 8080d28:	461a      	mov	r2, r3
 8080d2a:	e001      	b.n	8080d30 <_ZN9Co2System9writeJsonEPc+0x34>
 8080d2c:	4603      	mov	r3, r0
 8080d2e:	4602      	mov	r2, r0
 protected:
  JsonDocument() : _pool(0, 0) {
    _data.setNull();
  }

  JsonDocument(MemoryPool pool) : _pool(pool) {
 8080d30:	9303      	str	r3, [sp, #12]
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
 8080d32:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8080d36:	9001      	str	r0, [sp, #4]
 8080d38:	9002      	str	r0, [sp, #8]
 8080d3a:	9204      	str	r2, [sp, #16]
 8080d3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
 8080d40:	aa01      	add	r2, sp, #4
 8080d42:	494f      	ldr	r1, [pc, #316]	; (8080e80 <_ZN9Co2System9writeJsonEPc+0x184>)
 8080d44:	a805      	add	r0, sp, #20
 8080d46:	f88d 301c 	strb.w	r3, [sp, #28]
 8080d4a:	f7ff fd7e 	bl	808084a <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  var->setSignedInteger(value);
  return true;
}

inline bool variantSetLinkedString(VariantData *var, const char *value) {
  if (!var)
 8080d4e:	b138      	cbz	r0, 8080d60 <_ZN9Co2System9writeJsonEPc+0x64>
    _flags |= t;
 8080d50:	7a03      	ldrb	r3, [r0, #8]
 8080d52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8080d56:	f043 0304 	orr.w	r3, r3, #4
 8080d5a:	7203      	strb	r3, [r0, #8]
  }

  void setLinkedString(const char *value) {
    if (value) {
      setType(VALUE_IS_LINKED_STRING);
      _content.asString = value;
 8080d5c:	4b49      	ldr	r3, [pc, #292]	; (8080e84 <_ZN9Co2System9writeJsonEPc+0x188>)
 8080d5e:	6003      	str	r3, [r0, #0]
  File fd;
  DynamicJsonDocument  doc(200);
  doc["sensor"] = "Co2";
  doc["time"] = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S");
 8080d60:	f003 fa19 	bl	8084196 <_ZN9TimeClass3nowEv>
 8080d64:	4b48      	ldr	r3, [pc, #288]	; (8080e88 <_ZN9Co2System9writeJsonEPc+0x18c>)
 8080d66:	4602      	mov	r2, r0
 8080d68:	4948      	ldr	r1, [pc, #288]	; (8080e8c <_ZN9Co2System9writeJsonEPc+0x190>)
 8080d6a:	a815      	add	r0, sp, #84	; 0x54
 8080d6c:	f003 f9c0 	bl	80840f0 <_ZN9TimeClass6formatElPKc>
 8080d70:	aa01      	add	r2, sp, #4
 8080d72:	4947      	ldr	r1, [pc, #284]	; (8080e90 <_ZN9Co2System9writeJsonEPc+0x194>)
 8080d74:	a805      	add	r0, sp, #20
 8080d76:	f7ff fd68 	bl	808084a <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  return true;
}

template <typename T>
inline bool variantSetOwnedString(VariantData *var, T value, MemoryPool *pool) {
  return var != 0 && var->setOwnedString(value, pool);
 8080d7a:	4607      	mov	r7, r0
 8080d7c:	b1d0      	cbz	r0, 8080db4 <_ZN9Co2System9writeJsonEPc+0xb8>
 8080d7e:	9915      	ldr	r1, [sp, #84]	; 0x54
class ArduinoStringAdapter {
 public:
  ArduinoStringAdapter(const ::String& str) : _str(&str) {}

  char* save(MemoryPool* pool) const {
    if (isNull())
 8080d80:	2900      	cmp	r1, #0
 8080d82:	d073      	beq.n	8080e6c <_ZN9Co2System9writeJsonEPc+0x170>
      return NULL;
    size_t n = _str->length() + 1;
 8080d84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 8080d86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8080d8a:	3201      	adds	r2, #1
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n))
 8080d8c:	9b03      	ldr	r3, [sp, #12]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 8080d8e:	eb08 0002 	add.w	r0, r8, r2
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n))
 8080d92:	4298      	cmp	r0, r3
 8080d94:	d86a      	bhi.n	8080e6c <_ZN9Co2System9writeJsonEPc+0x170>
      return 0;
    char* s = _left;
    _left += n;
 8080d96:	9002      	str	r0, [sp, #8]
    char* dup = pool->allocFrozenString(n);
    if (dup)
 8080d98:	f1b8 0f00 	cmp.w	r8, #0
 8080d9c:	d066      	beq.n	8080e6c <_ZN9Co2System9writeJsonEPc+0x170>
      memcpy(dup, _str->c_str(), n);
 8080d9e:	4640      	mov	r0, r8
 8080da0:	f005 fac3 	bl	808632a <memcpy>
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 8080da4:	7a3b      	ldrb	r3, [r7, #8]
    setType(VALUE_IS_NULL);
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
    _content.asString = s.get();
 8080da6:	f8c7 8000 	str.w	r8, [r7]
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 8080daa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8080dae:	f043 0305 	orr.w	r3, r3, #5
 8080db2:	723b      	strb	r3, [r7, #8]
 8080db4:	a815      	add	r0, sp, #84	; 0x54
 8080db6:	f002 ffc5 	bl	8083d44 <_ZN6StringD1Ev>
 8080dba:	aa01      	add	r2, sp, #4
 8080dbc:	4935      	ldr	r1, [pc, #212]	; (8080e94 <_ZN9Co2System9writeJsonEPc+0x198>)
 8080dbe:	a805      	add	r0, sp, #20
 8080dc0:	f7ff fd43 	bl	808084a <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
inline size_t variantSize(const VariantData *var) {
  return var != 0 ? var->size() : 0;
}

inline CollectionData *variantToArray(VariantData *var) {
  if (!var)
 8080dc4:	b1d8      	cbz	r0, 8080dfe <_ZN9Co2System9writeJsonEPc+0x102>
 8080dc6:	7a03      	ldrb	r3, [r0, #8]
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
  return slotData(addSlot(pool));
 8080dc8:	a901      	add	r1, sp, #4
 8080dca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8080dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8080dd2:	7203      	strb	r3, [r0, #8]
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
 8080dd4:	2300      	movs	r3, #0
 8080dd6:	6003      	str	r3, [r0, #0]
  _tail = 0;
 8080dd8:	6043      	str	r3, [r0, #4]
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
  return slotData(addSlot(pool));
 8080dda:	f7ff fb88 	bl	80804ee <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE>
  return var != 0 && var->setOwnedRaw(value, pool);
}

template <typename T>
inline bool variantSetSignedInteger(VariantData *var, T value) {
  if (!var)
 8080dde:	b170      	cbz	r0, 8080dfe <_ZN9Co2System9writeJsonEPc+0x102>
  // bool add(TValue);
  // TValue = bool, long, int, short, float, double, serialized, VariantRef,
  //          std::string, String, ObjectRef
  template <typename T>
  FORCE_INLINE bool add(const T &value) const {
    return impl()->addElement().set(value);
 8080de0:	682a      	ldr	r2, [r5, #0]
 8080de2:	7a03      	ldrb	r3, [r0, #8]
    setSignedInteger(value);
  }

  template <typename T>
  void setSignedInteger(T value) {
    if (value >= 0) {
 8080de4:	2a00      	cmp	r2, #0
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 8080de6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8080dea:	bfad      	iteet	ge
 8080dec:	f043 0308 	orrge.w	r3, r3, #8
 8080df0:	f043 030a 	orrlt.w	r3, r3, #10
    _content.asInteger = value;
  }

  void setNegativeInteger(UInt value) {
    setType(VALUE_IS_NEGATIVE_INTEGER);
    _content.asInteger = value;
 8080df4:	4252      	neglt	r2, r2
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 8080df6:	7203      	strbge	r3, [r0, #8]
 8080df8:	bfb8      	it	lt
 8080dfa:	7203      	strblt	r3, [r0, #8]
    _content.asInteger = value;
  }

  void setNegativeInteger(UInt value) {
    setType(VALUE_IS_NEGATIVE_INTEGER);
    _content.asInteger = value;
 8080dfc:	6002      	str	r2, [r0, #0]
  JsonArray data = doc.createNestedArray("data");
  data.add(co2Level);
  fd = SD->open(fileName, O_RDWR | O_CREAT | O_AT_END);
 8080dfe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8080e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080e04:	2700      	movs	r7, #0
 8080e06:	9317      	str	r3, [sp, #92]	; 0x5c
 8080e08:	9415      	str	r4, [sp, #84]	; 0x54
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
 8080e0a:	f244 2302 	movw	r3, #16898	; 0x4202
 8080e0e:	4632      	mov	r2, r6
 8080e10:	f201 413c 	addw	r1, r1, #1084	; 0x43c
 8080e14:	a819      	add	r0, sp, #100	; 0x64
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 8080e16:	ad0c      	add	r5, sp, #48	; 0x30
 8080e18:	ac19      	add	r4, sp, #100	; 0x64
 8080e1a:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
 8080e1e:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
 8080e22:	9716      	str	r7, [sp, #88]	; 0x58
 8080e24:	f000 fef7 	bl	8081c16 <_ZN7FatFile4openEPS_PKci>
 8080e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080e30:	6823      	ldr	r3, [r4, #0]
  delay(1);
 8080e32:	2001      	movs	r0, #1
 8080e34:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 8080e36:	9b16      	ldr	r3, [sp, #88]	; 0x58
    if (fd)
 8080e38:	ac22      	add	r4, sp, #136	; 0x88
 8080e3a:	9309      	str	r3, [sp, #36]	; 0x24
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 8080e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8080e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8080e40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8080e42:	930b      	str	r3, [sp, #44]	; 0x2c
  doc["sensor"] = "Co2";
  doc["time"] = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S");
  JsonArray data = doc.createNestedArray("data");
  data.add(co2Level);
  fd = SD->open(fileName, O_RDWR | O_CREAT | O_AT_END);
  delay(1);
 8080e44:	f003 f9b8 	bl	80841b8 <delay>
    if (fd)
 8080e48:	f814 3d58 	ldrb.w	r3, [r4, #-88]!
 8080e4c:	b14b      	cbz	r3, 8080e62 <_ZN9Co2System9writeJsonEPc+0x166>
namespace ARDUINOJSON_NAMESPACE {

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : _writer(writer), _length(0) {}
 8080e4e:	ab08      	add	r3, sp, #32
namespace ARDUINOJSON_NAMESPACE {

template <typename Visitor>
inline void variantAccept(const VariantData *var, Visitor &visitor) {
  if (var != 0)
    var->accept(visitor);
 8080e50:	a805      	add	r0, sp, #20
 8080e52:	a915      	add	r1, sp, #84	; 0x54
 8080e54:	9315      	str	r3, [sp, #84]	; 0x54
 8080e56:	9716      	str	r7, [sp, #88]	; 0x58
 8080e58:	f7ff fed0 	bl	8080bfc <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_>
  {
    serializeJson(doc, fd);
    fd.close();
 8080e5c:	4620      	mov	r0, r4
 8080e5e:	f000 fed3 	bl	8081c08 <_ZN7FatFile5closeEv>
 8080e62:	9801      	ldr	r0, [sp, #4]
  void* allocate(size_t size) {
    return _allocator.allocate(size);
  }

  void deallocate(void* ptr) {
    if (ptr)
 8080e64:	b138      	cbz	r0, 8080e76 <_ZN9Co2System9writeJsonEPc+0x17a>
  }

  void deallocate(void* ptr) {
    free(ptr);
 8080e66:	f002 fda3 	bl	80839b0 <free>
  }
  
}
 8080e6a:	e004      	b.n	8080e76 <_ZN9Co2System9writeJsonEPc+0x17a>
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
 8080e6c:	7a3b      	ldrb	r3, [r7, #8]
 8080e6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8080e72:	723b      	strb	r3, [r7, #8]
 8080e74:	e79e      	b.n	8080db4 <_ZN9Co2System9writeJsonEPc+0xb8>
 8080e76:	b022      	add	sp, #136	; 0x88
 8080e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080e7c:	080877b0 	.word	0x080877b0
 8080e80:	080878da 	.word	0x080878da
 8080e84:	08087930 	.word	0x08087930
 8080e88:	080878e1 	.word	0x080878e1
 8080e8c:	200004b4 	.word	0x200004b4
 8080e90:	08087c08 	.word	0x08087c08
 8080e94:	08087925 	.word	0x08087925

08080e98 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
 8080e98:	f002 baee 	b.w	8083478 <HAL_Pin_Map>

08080e9c <_ZN12PublishState5sleepEP9Co2System>:
#include "PublishState.h"

bool PublishState::sleep(Co2System* pCo2Sys) {
 8080e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pCo2Sys->setCurrentState(new SleepState());
 8080e9e:	2004      	movs	r0, #4
#include "PublishState.h"

bool PublishState::sleep(Co2System* pCo2Sys) {
 8080ea0:	460d      	mov	r5, r1
	pCo2Sys->setCurrentState(new SleepState());
 8080ea2:	f7ff f8fc 	bl	808009e <_Znwj>
 8080ea6:	4601      	mov	r1, r0
 8080ea8:	b108      	cbz	r0, 8080eae <_ZN12PublishState5sleepEP9Co2System+0x12>
 8080eaa:	4b0e      	ldr	r3, [pc, #56]	; (8080ee4 <_ZN12PublishState5sleepEP9Co2System+0x48>)
 8080eac:	6003      	str	r3, [r0, #0]
 8080eae:	4628      	mov	r0, r5
 8080eb0:	f7ff fcc1 	bl	8080836 <_ZN9Co2System15setCurrentStateEP5State>
	Serial.print("going to sleep\n");
 8080eb4:	f003 fdd4 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080eb8:	490b      	ldr	r1, [pc, #44]	; (8080ee8 <_ZN12PublishState5sleepEP9Co2System+0x4c>)
 8080eba:	f002 ffe8 	bl	8083e8e <_ZN5Print5printEPKc>
	System.sleep(SLEEP_MODE_DEEP, (pCo2Sys->getSamplingPeriod() - pCo2Sys->getSamplingRate()) * 60);
 8080ebe:	4628      	mov	r0, r5
 8080ec0:	f7ff fc01 	bl	80806c6 <_ZN9Co2System17getSamplingPeriodEv>
 8080ec4:	4604      	mov	r4, r0
 8080ec6:	4628      	mov	r0, r5
 8080ec8:	f7ff fbfb 	bl	80806c2 <_ZN9Co2System15getSamplingRateEv>
 8080ecc:	4b07      	ldr	r3, [pc, #28]	; (8080eec <_ZN12PublishState5sleepEP9Co2System+0x50>)
 8080ece:	1a20      	subs	r0, r4, r0
 8080ed0:	223c      	movs	r2, #60	; 0x3c
 8080ed2:	4342      	muls	r2, r0
 8080ed4:	681b      	ldr	r3, [r3, #0]
 8080ed6:	4668      	mov	r0, sp
 8080ed8:	2101      	movs	r1, #1
 8080eda:	f002 fef3 	bl	8083cc4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
	return true;
}
 8080ede:	2001      	movs	r0, #1
 8080ee0:	b003      	add	sp, #12
 8080ee2:	bd30      	pop	{r4, r5, pc}
 8080ee4:	08087780 	.word	0x08087780
 8080ee8:	080878f3 	.word	0x080878f3
 8080eec:	20000444 	.word	0x20000444

08080ef0 <_ZN12PublishState3logEP9Co2System>:
	// 	}
   
	// }
	return true;
}
bool PublishState::log(Co2System* pCo2Sys) {
 8080ef0:	b513      	push	{r0, r1, r4, lr}
    char fileName[] = "Log.txt"; // SD library only supports up to 8.3 names
 8080ef2:	466b      	mov	r3, sp
 8080ef4:	4a0c      	ldr	r2, [pc, #48]	; (8080f28 <_ZN12PublishState3logEP9Co2System+0x38>)
	// 	}
   
	// }
	return true;
}
bool PublishState::log(Co2System* pCo2Sys) {
 8080ef6:	460c      	mov	r4, r1
    char fileName[] = "Log.txt"; // SD library only supports up to 8.3 names
 8080ef8:	6810      	ldr	r0, [r2, #0]
 8080efa:	6851      	ldr	r1, [r2, #4]
 8080efc:	c303      	stmia	r3!, {r0, r1}
    while(!pCo2Sys->initSdCard(fileName, A2, A0));
 8080efe:	230a      	movs	r3, #10
 8080f00:	220c      	movs	r2, #12
 8080f02:	4669      	mov	r1, sp
 8080f04:	4620      	mov	r0, r4
 8080f06:	f7ff fc13 	bl	8080730 <_ZN9Co2System10initSdCardEPchh>
 8080f0a:	2800      	cmp	r0, #0
 8080f0c:	d0f7      	beq.n	8080efe <_ZN12PublishState3logEP9Co2System+0xe>
	pCo2Sys->writeJson(fileName);
 8080f0e:	4669      	mov	r1, sp
 8080f10:	4620      	mov	r0, r4
 8080f12:	f7ff fef3 	bl	8080cfc <_ZN9Co2System9writeJsonEPc>
	Serial.print("logging done!\n");
 8080f16:	f003 fda3 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080f1a:	4904      	ldr	r1, [pc, #16]	; (8080f2c <_ZN12PublishState3logEP9Co2System+0x3c>)
 8080f1c:	f002 ffb7 	bl	8083e8e <_ZN5Print5printEPKc>
	return true;
 8080f20:	2001      	movs	r0, #1
 8080f22:	b002      	add	sp, #8
 8080f24:	bd10      	pop	{r4, pc}
 8080f26:	bf00      	nop
 8080f28:	08087912 	.word	0x08087912
 8080f2c:	08087903 	.word	0x08087903

08080f30 <_ZN12PublishStateD1Ev>:
 8080f30:	b510      	push	{r4, lr}
 8080f32:	4604      	mov	r4, r0
 8080f34:	4b02      	ldr	r3, [pc, #8]	; (8080f40 <_ZN12PublishStateD1Ev+0x10>)
 8080f36:	6003      	str	r3, [r0, #0]
 8080f38:	f7ff f916 	bl	8080168 <_ZN5StateD1Ev>
 8080f3c:	4620      	mov	r0, r4
 8080f3e:	bd10      	pop	{r4, pc}
 8080f40:	08087988 	.word	0x08087988

08080f44 <_ZN12PublishStateD0Ev>:
 8080f44:	b510      	push	{r4, lr}
 8080f46:	4604      	mov	r4, r0
 8080f48:	f7ff fff2 	bl	8080f30 <_ZN12PublishStateD1Ev>
 8080f4c:	4620      	mov	r0, r4
 8080f4e:	2104      	movs	r1, #4
 8080f50:	f004 f9ee 	bl	8085330 <_ZdlPvj>
 8080f54:	4620      	mov	r0, r4
 8080f56:	bd10      	pop	{r4, pc}

08080f58 <_ZN12PublishState7publishEP9Co2System>:
bool PublishState::readSensors(Co2System* pCo2Sys) {
	Serial.print(Time.format(TIME_FORMAT_ISO8601_FULL));
 	Serial.print("-> CO2 : ");Serial.println(pCo2Sys->co2());
	return true;
}
bool PublishState::publish(Co2System* pCo2Sys) {
 8080f58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080f5a:	460d      	mov	r5, r1
	Serial.print("Publish\n");
 8080f5c:	f003 fd80 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080f60:	492a      	ldr	r1, [pc, #168]	; (808100c <_ZN12PublishState7publishEP9Co2System+0xb4>)
 8080f62:	f002 ff94 	bl	8083e8e <_ZN5Print5printEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080f66:	f002 fb0f 	bl	8083588 <HAL_Timer_Get_Milli_Seconds>
	bool isMaxTime = false;
	pCo2Sys->setStateTime(millis());
 8080f6a:	4601      	mov	r1, r0
 8080f6c:	4628      	mov	r0, r5
 8080f6e:	f7ff fba6 	bl	80806be <_ZN9Co2System12setStateTimeEm>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080f72:	f002 fcf5 	bl	8083960 <spark_cloud_flag_connected>
	
	while(!isMaxTime)
    {
      //connect particle to the cloud
      if (Particle.connected() == false)
 8080f76:	b908      	cbnz	r0, 8080f7c <_ZN12PublishState7publishEP9Co2System+0x24>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080f78:	f002 fcea 	bl	8083950 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080f7c:	f002 fcf0 	bl	8083960 <spark_cloud_flag_connected>
      {
        Particle.connect();
      }
	  // If connected, publish data buffer
      if (Particle.connected())
 8080f80:	4604      	mov	r4, r0
 8080f82:	b340      	cbz	r0, 8080fd6 <_ZN12PublishState7publishEP9Co2System+0x7e>
      {
        Serial.println("publishing data");
 8080f84:	f003 fd6c 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080f88:	4921      	ldr	r1, [pc, #132]	; (8081010 <_ZN12PublishState7publishEP9Co2System+0xb8>)
 8080f8a:	f002 ff97 	bl	8083ebc <_ZN5Print7printlnEPKc>
        Particle.publish("deltaPCo2", (char*)pCo2Sys->getCo2Level() , 60, PRIVATE);
 8080f8e:	4628      	mov	r0, r5
 8080f90:	f7ff fb9d 	bl	80806ce <_ZN9Co2System11getCo2LevelEv>
 8080f94:	4b1f      	ldr	r3, [pc, #124]	; (8081014 <_ZN12PublishState7publishEP9Co2System+0xbc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080f96:	4602      	mov	r2, r0
 8080f98:	781b      	ldrb	r3, [r3, #0]
 8080f9a:	491f      	ldr	r1, [pc, #124]	; (8081018 <_ZN12PublishState7publishEP9Co2System+0xc0>)
 8080f9c:	f88d 3000 	strb.w	r3, [sp]
 8080fa0:	a802      	add	r0, sp, #8
 8080fa2:	233c      	movs	r3, #60	; 0x3c
 8080fa4:	f003 fb1a 	bl	80845dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8080fa8:	9c03      	ldr	r4, [sp, #12]
 8080faa:	b17c      	cbz	r4, 8080fcc <_ZN12PublishState7publishEP9Co2System+0x74>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080fac:	6863      	ldr	r3, [r4, #4]
 8080fae:	3b01      	subs	r3, #1
 8080fb0:	6063      	str	r3, [r4, #4]
 8080fb2:	b95b      	cbnz	r3, 8080fcc <_ZN12PublishState7publishEP9Co2System+0x74>
        {
          _M_dispose();
 8080fb4:	6823      	ldr	r3, [r4, #0]
 8080fb6:	4620      	mov	r0, r4
 8080fb8:	689b      	ldr	r3, [r3, #8]
 8080fba:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080fbc:	68a3      	ldr	r3, [r4, #8]
 8080fbe:	3b01      	subs	r3, #1
 8080fc0:	60a3      	str	r3, [r4, #8]
 8080fc2:	b91b      	cbnz	r3, 8080fcc <_ZN12PublishState7publishEP9Co2System+0x74>
            _M_destroy();
 8080fc4:	6823      	ldr	r3, [r4, #0]
 8080fc6:	4620      	mov	r0, r4
 8080fc8:	68db      	ldr	r3, [r3, #12]
 8080fca:	4798      	blx	r3

        // Wait for the publish data
        delay(4000);
 8080fcc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8080fd0:	f003 f8f2 	bl	80841b8 <delay>
 8080fd4:	e016      	b.n	8081004 <_ZN12PublishState7publishEP9Co2System+0xac>
 8080fd6:	f002 fad7 	bl	8083588 <HAL_Timer_Get_Milli_Seconds>
 8080fda:	4606      	mov	r6, r0
        isMaxTime = true;
	  }
	  else
      {
        // Took too long to publish, just go to sleep
        if ((millis() - pCo2Sys->getStateTime()) >= 4000)
 8080fdc:	4628      	mov	r0, r5
 8080fde:	f7ff fb74 	bl	80806ca <_ZN9Co2System12getStateTimeEv>
 8080fe2:	1a30      	subs	r0, r6, r0
 8080fe4:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8080fe8:	d305      	bcc.n	8080ff6 <_ZN12PublishState7publishEP9Co2System+0x9e>
        {
          isMaxTime = true;
          Serial.println("max time for pulishing reach");
 8080fea:	f003 fd39 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080fee:	490b      	ldr	r1, [pc, #44]	; (808101c <_ZN12PublishState7publishEP9Co2System+0xc4>)
 8080ff0:	f002 ff64 	bl	8083ebc <_ZN5Print7printlnEPKc>
	  else
      {
        // Took too long to publish, just go to sleep
        if ((millis() - pCo2Sys->getStateTime()) >= 4000)
        {
          isMaxTime = true;
 8080ff4:	2401      	movs	r4, #1
          Serial.println("max time for pulishing reach");
        }
        Serial.println("Not max time, try again to publish");
 8080ff6:	f003 fd33 	bl	8084a60 <_Z16_fetch_usbserialv>
 8080ffa:	4909      	ldr	r1, [pc, #36]	; (8081020 <_ZN12PublishState7publishEP9Co2System+0xc8>)
 8080ffc:	f002 ff5e 	bl	8083ebc <_ZN5Print7printlnEPKc>
bool PublishState::publish(Co2System* pCo2Sys) {
	Serial.print("Publish\n");
	bool isMaxTime = false;
	pCo2Sys->setStateTime(millis());
	
	while(!isMaxTime)
 8081000:	2c00      	cmp	r4, #0
 8081002:	d0b6      	beq.n	8080f72 <_ZN12PublishState7publishEP9Co2System+0x1a>
	// 		Serial.print("max time for publishing reach\n");
	// 	}
   
	// }
	return true;
}
 8081004:	2001      	movs	r0, #1
 8081006:	b004      	add	sp, #16
 8081008:	bd70      	pop	{r4, r5, r6, pc}
 808100a:	bf00      	nop
 808100c:	08087720 	.word	0x08087720
 8081010:	0808791a 	.word	0x0808791a
 8081014:	20000440 	.word	0x20000440
 8081018:	0808792a 	.word	0x0808792a
 808101c:	08087934 	.word	0x08087934
 8081020:	08087951 	.word	0x08087951

08081024 <_ZN12PublishState11readSensorsEP9Co2System>:
	pCo2Sys->setCurrentState(new SleepState());
	Serial.print("going to sleep\n");
	System.sleep(SLEEP_MODE_DEEP, (pCo2Sys->getSamplingPeriod() - pCo2Sys->getSamplingRate()) * 60);
	return true;
}
bool PublishState::readSensors(Co2System* pCo2Sys) {
 8081024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8081026:	460c      	mov	r4, r1
	Serial.print(Time.format(TIME_FORMAT_ISO8601_FULL));
 8081028:	f003 fd1a 	bl	8084a60 <_Z16_fetch_usbserialv>
 808102c:	4b17      	ldr	r3, [pc, #92]	; (808108c <_ZN12PublishState11readSensorsEP9Co2System+0x68>)
 808102e:	4605      	mov	r5, r0
 8081030:	681e      	ldr	r6, [r3, #0]
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 8081032:	f003 f8b0 	bl	8084196 <_ZN9TimeClass3nowEv>
 8081036:	4633      	mov	r3, r6
 8081038:	4602      	mov	r2, r0
 808103a:	4915      	ldr	r1, [pc, #84]	; (8081090 <_ZN12PublishState11readSensorsEP9Co2System+0x6c>)
 808103c:	4668      	mov	r0, sp
 808103e:	f003 f857 	bl	80840f0 <_ZN9TimeClass6formatElPKc>
 8081042:	9900      	ldr	r1, [sp, #0]
 8081044:	4628      	mov	r0, r5
 8081046:	f002 ff22 	bl	8083e8e <_ZN5Print5printEPKc>
 808104a:	4668      	mov	r0, sp
 808104c:	f002 fe7a 	bl	8083d44 <_ZN6StringD1Ev>
 	Serial.print("-> CO2 : ");Serial.println(pCo2Sys->co2());
 8081050:	f003 fd06 	bl	8084a60 <_Z16_fetch_usbserialv>
 8081054:	490f      	ldr	r1, [pc, #60]	; (8081094 <_ZN12PublishState11readSensorsEP9Co2System+0x70>)
 8081056:	f002 ff1a 	bl	8083e8e <_ZN5Print5printEPKc>
 808105a:	f003 fd01 	bl	8084a60 <_Z16_fetch_usbserialv>
 808105e:	4605      	mov	r5, r0
 8081060:	4620      	mov	r0, r4
 8081062:	f7ff fbc5 	bl	80807f0 <_ZN9Co2System3co2Ev>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8081066:	1e04      	subs	r4, r0, #0
 8081068:	da05      	bge.n	8081076 <_ZN12PublishState11readSensorsEP9Co2System+0x52>
            t = print('-');
 808106a:	212d      	movs	r1, #45	; 0x2d
 808106c:	4628      	mov	r0, r5
 808106e:	f002 ff12 	bl	8083e96 <_ZN5Print5printEc>
            val = -n;
 8081072:	4261      	negs	r1, r4
 8081074:	e000      	b.n	8081078 <_ZN12PublishState11readSensorsEP9Co2System+0x54>
        } else {
            val = n;
 8081076:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
 8081078:	220a      	movs	r2, #10
 808107a:	4628      	mov	r0, r5
 808107c:	f002 ff28 	bl	8083ed0 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8081080:	4628      	mov	r0, r5
 8081082:	f002 ff0f 	bl	8083ea4 <_ZN5Print7printlnEv>
	return true;
}
 8081086:	2001      	movs	r0, #1
 8081088:	b004      	add	sp, #16
 808108a:	bd70      	pop	{r4, r5, r6, pc}
 808108c:	20000208 	.word	0x20000208
 8081090:	200004b4 	.word	0x200004b4
 8081094:	08087974 	.word	0x08087974

08081098 <_GLOBAL__sub_I__ZN12PublishState5sleepEP9Co2System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081098:	4b03      	ldr	r3, [pc, #12]	; (80810a8 <_GLOBAL__sub_I__ZN12PublishState5sleepEP9Co2System+0x10>)
 808109a:	2200      	movs	r2, #0
 808109c:	601a      	str	r2, [r3, #0]
 808109e:	4b03      	ldr	r3, [pc, #12]	; (80810ac <_GLOBAL__sub_I__ZN12PublishState5sleepEP9Co2System+0x14>)
 80810a0:	2201      	movs	r2, #1
 80810a2:	701a      	strb	r2, [r3, #0]
 80810a4:	f002 b9e8 	b.w	8083478 <HAL_Pin_Map>
 80810a8:	20000444 	.word	0x20000444
 80810ac:	20000440 	.word	0x20000440

080810b0 <_ZN5COZIRC1ER11USARTSerial>:

////////////////////////////////////////////////////////////
//
// CONSTRUCTOR
//
COZIR::COZIR(USARTSerial& nss) : CZR_Serial(nss)
 80810b0:	b510      	push	{r4, lr}
 80810b2:	4604      	mov	r4, r0
 80810b4:	4608      	mov	r0, r1
 80810b6:	6021      	str	r1, [r4, #0]
{
  CZR_Serial.begin(9600);
 80810b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80810bc:	f003 fe34 	bl	8084d28 <_ZN11USARTSerial5beginEm>
}
 80810c0:	4620      	mov	r0, r4
 80810c2:	bd10      	pop	{r4, pc}

080810c4 <_ZN5COZIR7CommandEPc>:

/////////////////////////////////////////////////////////
// PRIVATE
  
void COZIR::Command(char* s)
{
 80810c4:	b510      	push	{r4, lr}
 80810c6:	4604      	mov	r4, r0
  CZR_Serial.print(s);
 80810c8:	6800      	ldr	r0, [r0, #0]
 80810ca:	f002 fee0 	bl	8083e8e <_ZN5Print5printEPKc>
  CZR_Serial.print("\r\n");
 80810ce:	6820      	ldr	r0, [r4, #0]
 80810d0:	4902      	ldr	r1, [pc, #8]	; (80810dc <_ZN5COZIR7CommandEPc+0x18>)
}
 80810d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// PRIVATE
  
void COZIR::Command(char* s)
{
  CZR_Serial.print(s);
  CZR_Serial.print("\r\n");
 80810d6:	f002 beda 	b.w	8083e8e <_ZN5Print5printEPKc>
 80810da:	bf00      	nop
 80810dc:	080879a4 	.word	0x080879a4

080810e0 <_ZN5COZIR7RequestEPc>:
}

uint16_t COZIR::Request(char* s)
{
 80810e0:	b570      	push	{r4, r5, r6, lr}
 80810e2:	4604      	mov	r4, r0
  Command(s);
  // empty buffer
  buffer[0] = '\0';
 80810e4:	2500      	movs	r5, #0
  CZR_Serial.print("\r\n");
}

uint16_t COZIR::Request(char* s)
{
  Command(s);
 80810e6:	f7ff ffed 	bl	80810c4 <_ZN5COZIR7CommandEPc>
  // empty buffer
  buffer[0] = '\0';
 80810ea:	7125      	strb	r5, [r4, #4]
  // read answer; there may be a 100ms delay!
  // TODO: PROPER TIMEOUT CODE.
  delay(250);  
 80810ec:	20fa      	movs	r0, #250	; 0xfa
 80810ee:	f003 f863 	bl	80841b8 <delay>
 80810f2:	1ce6      	adds	r6, r4, #3
  int idx = 0;
  while(CZR_Serial.available())
 80810f4:	6820      	ldr	r0, [r4, #0]
 80810f6:	6803      	ldr	r3, [r0, #0]
 80810f8:	691b      	ldr	r3, [r3, #16]
 80810fa:	4798      	blx	r3
 80810fc:	b138      	cbz	r0, 808110e <_ZN5COZIR7RequestEPc+0x2e>
  {
	buffer[idx++] = CZR_Serial.read();
 80810fe:	6820      	ldr	r0, [r4, #0]
 8081100:	3501      	adds	r5, #1
 8081102:	6803      	ldr	r3, [r0, #0]
 8081104:	695b      	ldr	r3, [r3, #20]
 8081106:	4798      	blx	r3
 8081108:	f806 0f01 	strb.w	r0, [r6, #1]!
  buffer[0] = '\0';
  // read answer; there may be a 100ms delay!
  // TODO: PROPER TIMEOUT CODE.
  delay(250);  
  int idx = 0;
  while(CZR_Serial.available())
 808110c:	e7f2      	b.n	80810f4 <_ZN5COZIR7RequestEPc+0x14>
  {
	buffer[idx++] = CZR_Serial.read();
  }
  buffer[idx] = '\0';
 808110e:	4425      	add	r5, r4
 8081110:	7128      	strb	r0, [r5, #4]
  uint16_t rv = 0;

  switch(buffer[1])
 8081112:	7963      	ldrb	r3, [r4, #5]
 8081114:	2b54      	cmp	r3, #84	; 0x54
 8081116:	d10a      	bne.n	808112e <_ZN5COZIR7RequestEPc+0x4e>
  {
    case 'T' :
            rv = atoi(&buffer[5]);
 8081118:	f104 0009 	add.w	r0, r4, #9
 808111c:	f004 ffec 	bl	80860f8 <atoi>
            if (buffer[4] == 1) rv += 1000;
 8081120:	7a23      	ldrb	r3, [r4, #8]
  uint16_t rv = 0;

  switch(buffer[1])
  {
    case 'T' :
            rv = atoi(&buffer[5]);
 8081122:	b280      	uxth	r0, r0
            if (buffer[4] == 1) rv += 1000;
 8081124:	2b01      	cmp	r3, #1
 8081126:	d106      	bne.n	8081136 <_ZN5COZIR7RequestEPc+0x56>
 8081128:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808112c:	e002      	b.n	8081134 <_ZN5COZIR7RequestEPc+0x54>
            break;
    default :
            rv = atoi(&buffer[2]);
 808112e:	1da0      	adds	r0, r4, #6
 8081130:	f004 ffe2 	bl	80860f8 <atoi>
 8081134:	b280      	uxth	r0, r0
            break;
  }
  return rv;
}
 8081136:	bd70      	pop	{r4, r5, r6, pc}

08081138 <_ZN5COZIR3CO2Ev>:
  return 1.0 * Request("L");
}

uint16_t COZIR::CO2()
{
  return Request("Z");
 8081138:	4901      	ldr	r1, [pc, #4]	; (8081140 <_ZN5COZIR3CO2Ev+0x8>)
 808113a:	f7ff bfd1 	b.w	80810e0 <_ZN5COZIR7RequestEPc>
 808113e:	bf00      	nop
 8081140:	080881c9 	.word	0x080881c9

08081144 <_GLOBAL__sub_I__ZN5COZIRC2ER11USARTSerial>:
 8081144:	f002 b998 	b.w	8083478 <HAL_Pin_Map>

08081148 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 8081148:	f002 b996 	b.w	8083478 <HAL_Pin_Map>

0808114c <_GLOBAL__sub_I__ZN7istream3getEv>:
 808114c:	f002 b994 	b.w	8083478 <HAL_Pin_Map>

08081150 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8081150:	b510      	push	{r4, lr}
 8081152:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081154:	3024      	adds	r0, #36	; 0x24
 8081156:	f000 fe8d 	bl	8081e74 <_ZN8FatCache4syncEv>
 808115a:	b128      	cbz	r0, 8081168 <_ZN9FatVolume9cacheSyncEv+0x18>
 808115c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 8081160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081164:	f000 be86 	b.w	8081e74 <_ZN8FatCache4syncEv>
  }
 8081168:	bd10      	pop	{r4, pc}

0808116a <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 808116a:	1e41      	subs	r1, r0, #1
 808116c:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8081170:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8081172:	0843      	lsrs	r3, r0, #1
 8081174:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8081178:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 808117c:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808117e:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8081180:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8081184:	d1f5      	bne.n	8081172 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8081186:	4770      	bx	lr

08081188 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8081188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 808118c:	7803      	ldrb	r3, [r0, #0]
 808118e:	1c44      	adds	r4, r0, #1
 8081190:	2b20      	cmp	r3, #32
 8081192:	d101      	bne.n	8081198 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8081194:	4620      	mov	r0, r4
 8081196:	e7f9      	b.n	808118c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8081198:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808119a:	4f70      	ldr	r7, [pc, #448]	; (808135c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 808119c:	6088      	str	r0, [r1, #8]
 808119e:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 80811a0:	462e      	mov	r6, r5
 80811a2:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 80811a6:	b30b      	cbz	r3, 80811ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80811a8:	2b2f      	cmp	r3, #47	; 0x2f
 80811aa:	d101      	bne.n	80811b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 80811ac:	1903      	adds	r3, r0, r4
 80811ae:	e017      	b.n	80811e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80811b0:	2b5c      	cmp	r3, #92	; 0x5c
 80811b2:	d102      	bne.n	80811ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80811b4:	2000      	movs	r0, #0
 80811b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80811ba:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 80811be:	b2e4      	uxtb	r4, r4
 80811c0:	2c1d      	cmp	r4, #29
 80811c2:	d803      	bhi.n	80811cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 80811c4:	fa27 f404 	lsr.w	r4, r7, r4
 80811c8:	07e4      	lsls	r4, r4, #31
 80811ca:	d4f3      	bmi.n	80811b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80811cc:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80811d0:	2c3c      	cmp	r4, #60	; 0x3c
 80811d2:	d0ef      	beq.n	80811b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80811d4:	3b20      	subs	r3, #32
 80811d6:	2b5e      	cmp	r3, #94	; 0x5e
 80811d8:	d9e1      	bls.n	808119e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80811da:	e7eb      	b.n	80811b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80811dc:	2d2f      	cmp	r5, #47	; 0x2f
 80811de:	d105      	bne.n	80811ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80811e0:	461e      	mov	r6, r3
 80811e2:	f813 5b01 	ldrb.w	r5, [r3], #1
 80811e6:	2d20      	cmp	r5, #32
 80811e8:	d1f8      	bne.n	80811dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80811ea:	e7f9      	b.n	80811e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80811ec:	6016      	str	r6, [r2, #0]
 80811ee:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80811f0:	4298      	cmp	r0, r3
 80811f2:	ebc0 0803 	rsb	r8, r0, r3
 80811f6:	d009      	beq.n	808120c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80811f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80811fc:	2a2e      	cmp	r2, #46	; 0x2e
 80811fe:	d0f7      	beq.n	80811f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8081200:	2a20      	cmp	r2, #32
 8081202:	d0f5      	beq.n	80811f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8081204:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8081208:	dcd4      	bgt.n	80811b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 808120a:	e001      	b.n	8081210 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 808120c:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8081210:	f8c1 8004 	str.w	r8, [r1, #4]
 8081214:	f101 030c 	add.w	r3, r1, #12
 8081218:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 808121c:	2420      	movs	r4, #32
 808121e:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8081222:	4293      	cmp	r3, r2
 8081224:	d1fb      	bne.n	808121e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8081226:	4603      	mov	r3, r0
 8081228:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 808122a:	f813 4b01 	ldrb.w	r4, [r3], #1
 808122e:	2c2e      	cmp	r4, #46	; 0x2e
 8081230:	d0fa      	beq.n	8081228 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8081232:	2c20      	cmp	r4, #32
 8081234:	d0f8      	beq.n	8081228 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8081236:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808123a:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808123e:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8081240:	1c73      	adds	r3, r6, #1
 8081242:	d107      	bne.n	8081254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8081244:	2700      	movs	r7, #0
 8081246:	f04f 0e07 	mov.w	lr, #7
 808124a:	463d      	mov	r5, r7
 808124c:	46ba      	mov	sl, r7
 808124e:	f04f 0908 	mov.w	r9, #8
 8081252:	e009      	b.n	8081268 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8081254:	5d83      	ldrb	r3, [r0, r6]
 8081256:	2b2e      	cmp	r3, #46	; 0x2e
 8081258:	d0f4      	beq.n	8081244 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 808125a:	3e01      	subs	r6, #1
 808125c:	e7f0      	b.n	8081240 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 808125e:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8081260:	2b20      	cmp	r3, #32
 8081262:	d104      	bne.n	808126e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8081264:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8081266:	3201      	adds	r2, #1
 8081268:	4542      	cmp	r2, r8
 808126a:	dbf8      	blt.n	808125e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 808126c:	e04b      	b.n	8081306 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 808126e:	2b2e      	cmp	r3, #46	; 0x2e
 8081270:	d102      	bne.n	8081278 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8081272:	42b2      	cmp	r2, r6
 8081274:	d1f6      	bne.n	8081264 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8081276:	e003      	b.n	8081280 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8081278:	2b22      	cmp	r3, #34	; 0x22
 808127a:	d017      	beq.n	80812ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 808127c:	2b7c      	cmp	r3, #124	; 0x7c
 808127e:	d015      	beq.n	80812ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8081280:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8081284:	f1bc 0f05 	cmp.w	ip, #5
 8081288:	d801      	bhi.n	808128e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 808128a:	2b2d      	cmp	r3, #45	; 0x2d
 808128c:	d10e      	bne.n	80812ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 808128e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8081292:	f1bc 0f05 	cmp.w	ip, #5
 8081296:	d909      	bls.n	80812ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8081298:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 808129c:	f1bc 0f02 	cmp.w	ip, #2
 80812a0:	d904      	bls.n	80812ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 80812a2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80812a6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80812aa:	d902      	bls.n	80812b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 80812ac:	42b2      	cmp	r2, r6
 80812ae:	d10e      	bne.n	80812ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 80812b0:	e049      	b.n	8081346 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80812b2:	42b2      	cmp	r2, r6
 80812b4:	d047      	beq.n	8081346 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 80812b6:	4575      	cmp	r5, lr
 80812b8:	d821      	bhi.n	80812fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 80812ba:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80812be:	f1bc 0f19 	cmp.w	ip, #25
 80812c2:	d808      	bhi.n	80812d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80812c4:	3b20      	subs	r3, #32
 80812c6:	b2db      	uxtb	r3, r3
        lc |= bit;
 80812c8:	ea49 0707 	orr.w	r7, r9, r7
 80812cc:	e00a      	b.n	80812e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80812ce:	4575      	cmp	r5, lr
 80812d0:	d815      	bhi.n	80812fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80812d2:	2400      	movs	r4, #0
      c = '_';
 80812d4:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80812d6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80812da:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80812de:	bf98      	it	ls
 80812e0:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80812e4:	f105 0c01 	add.w	ip, r5, #1
 80812e8:	fa5f fc8c 	uxtb.w	ip, ip
 80812ec:	440d      	add	r5, r1
      if (i < 7) {
 80812ee:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 80812f2:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80812f4:	d801      	bhi.n	80812fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80812f6:	f881 c00c 	strb.w	ip, [r1, #12]
 80812fa:	4665      	mov	r5, ip
 80812fc:	e7b3      	b.n	8081266 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80812fe:	f1be 0f0a 	cmp.w	lr, #10
 8081302:	d117      	bne.n	8081334 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8081304:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8081306:	7b4b      	ldrb	r3, [r1, #13]
 8081308:	2b20      	cmp	r3, #32
 808130a:	f43f af53 	beq.w	80811b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 808130e:	b13c      	cbz	r4, 8081320 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8081310:	ea1a 0f07 	tst.w	sl, r7
 8081314:	bf18      	it	ne
 8081316:	2702      	movne	r7, #2
 8081318:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 808131a:	2001      	movs	r0, #1
 808131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8081320:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8081322:	2001      	movs	r0, #1
 8081324:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8081326:	4419      	add	r1, r3
 8081328:	237e      	movs	r3, #126	; 0x7e
 808132a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 808132c:	2331      	movs	r3, #49	; 0x31
 808132e:	738b      	strb	r3, [r1, #14]
 8081330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8081334:	42b2      	cmp	r2, r6
 8081336:	dce5      	bgt.n	8081304 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8081338:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808133a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808133e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8081340:	f04f 0910 	mov.w	r9, #16
 8081344:	e78e      	b.n	8081264 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8081346:	f1be 0f0a 	cmp.w	lr, #10
 808134a:	d0db      	beq.n	8081304 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 808134c:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808134e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8081352:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8081354:	f04f 0910 	mov.w	r9, #16
 8081358:	e785      	b.n	8081266 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808135a:	bf00      	nop
 808135c:	31000101 	.word	0x31000101

08081360 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8081360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8081364:	4606      	mov	r6, r0
 8081366:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8081368:	f891 900c 	ldrb.w	r9, [r1, #12]
 808136c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808136e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8081370:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8081374:	6869      	ldr	r1, [r5, #4]
 8081376:	68aa      	ldr	r2, [r5, #8]
 8081378:	1863      	adds	r3, r4, r1
 808137a:	b29b      	uxth	r3, r3
 808137c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 808137e:	4291      	cmp	r1, r2
 8081380:	d006      	beq.n	8081390 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8081382:	f812 0b01 	ldrb.w	r0, [r2], #1
 8081386:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808138a:	4043      	eors	r3, r0
 808138c:	b29b      	uxth	r3, r3
 808138e:	e7f6      	b.n	808137e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8081390:	f1b9 0f03 	cmp.w	r9, #3
 8081394:	bf28      	it	cs
 8081396:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808139a:	f109 0204 	add.w	r2, r9, #4
 808139e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80813a0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80813a4:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80813a6:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80813a8:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80813aa:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80813ac:	bf94      	ite	ls
 80813ae:	3130      	addls	r1, #48	; 0x30
 80813b0:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80813b2:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80813b4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80813b6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80813ba:	d3f1      	bcc.n	80813a0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80813bc:	eb05 0309 	add.w	r3, r5, r9
 80813c0:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80813c2:	2100      	movs	r1, #0
 80813c4:	4630      	mov	r0, r6
 80813c6:	f000 fb31 	bl	8081a2c <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80813ca:	2101      	movs	r1, #1
 80813cc:	4630      	mov	r0, r6
 80813ce:	f000 fb10 	bl	80819f2 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80813d2:	4601      	mov	r1, r0
 80813d4:	b928      	cbnz	r0, 80813e2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80813d6:	7870      	ldrb	r0, [r6, #1]
 80813d8:	fab0 f080 	clz	r0, r0
 80813dc:	0940      	lsrs	r0, r0, #5
 80813de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80813e2:	7803      	ldrb	r3, [r0, #0]
 80813e4:	b14b      	cbz	r3, 80813fa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80813e6:	7ac3      	ldrb	r3, [r0, #11]
 80813e8:	071b      	lsls	r3, r3, #28
 80813ea:	d4ee      	bmi.n	80813ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80813ec:	220b      	movs	r2, #11
 80813ee:	4640      	mov	r0, r8
 80813f0:	f004 ff8c 	bl	808630c <memcmp>
 80813f4:	2800      	cmp	r0, #0
 80813f6:	d1e8      	bne.n	80813ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80813f8:	e002      	b.n	8081400 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 80813fa:	2001      	movs	r0, #1
 80813fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8081400:	3401      	adds	r4, #1
 8081402:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8081404:	2c64      	cmp	r4, #100	; 0x64
 8081406:	d1b5      	bne.n	8081374 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8081408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808140c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 808140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081410:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081412:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8081414:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081416:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 808141a:	9005      	str	r0, [sp, #20]
 808141c:	460e      	mov	r6, r1
 808141e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081420:	d101      	bne.n	8081426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8081422:	2000      	movs	r0, #0
 8081424:	e1a0      	b.n	8081768 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8081426:	9b05      	ldr	r3, [sp, #20]
 8081428:	781b      	ldrb	r3, [r3, #0]
 808142a:	2b00      	cmp	r3, #0
 808142c:	d1f9      	bne.n	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 808142e:	6853      	ldr	r3, [r2, #4]
 8081430:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081432:	7813      	ldrb	r3, [r2, #0]
 8081434:	079b      	lsls	r3, r3, #30
 8081436:	f000 818d 	beq.w	8081754 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 808143a:	9b02      	ldr	r3, [sp, #8]
 808143c:	270d      	movs	r7, #13
 808143e:	330c      	adds	r3, #12
 8081440:	fbb3 f7f7 	udiv	r7, r3, r7
 8081444:	3701      	adds	r7, #1
 8081446:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8081448:	f04f 0800 	mov.w	r8, #0
 808144c:	2100      	movs	r1, #0
 808144e:	4630      	mov	r0, r6
 8081450:	f000 faec 	bl	8081a2c <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8081454:	4644      	mov	r4, r8
  uint8_t ord = 0;
 8081456:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8081458:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808145a:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 808145e:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 8081462:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8081466:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081468:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 808146a:	2101      	movs	r1, #1
 808146c:	4630      	mov	r0, r6
 808146e:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8081470:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8081474:	f000 fabd 	bl	80819f2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8081478:	9b07      	ldr	r3, [sp, #28]
 808147a:	b920      	cbnz	r0, 8081486 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 808147c:	7873      	ldrb	r3, [r6, #1]
 808147e:	2b00      	cmp	r3, #0
 8081480:	f000 8090 	beq.w	80815a4 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8081484:	e7cd      	b.n	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8081486:	7802      	ldrb	r2, [r0, #0]
 8081488:	2ae5      	cmp	r2, #229	; 0xe5
 808148a:	d000      	beq.n	808148e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 808148c:	b942      	cbnz	r2, 80814a0 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808148e:	2c00      	cmp	r4, #0
 8081490:	bf08      	it	eq
 8081492:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8081494:	42bc      	cmp	r4, r7
        freeFound++;
 8081496:	bf3c      	itt	cc
 8081498:	3401      	addcc	r4, #1
 808149a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 808149c:	b922      	cbnz	r2, 80814a8 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 808149e:	e081      	b.n	80815a4 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 80814a0:	42bc      	cmp	r4, r7
 80814a2:	bf38      	it	cc
 80814a4:	2400      	movcc	r4, #0
 80814a6:	e003      	b.n	80814b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80814a8:	2ae5      	cmp	r2, #229	; 0xe5
 80814aa:	d101      	bne.n	80814b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 80814ac:	2500      	movs	r5, #0
 80814ae:	e7db      	b.n	8081468 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80814b0:	2a2e      	cmp	r2, #46	; 0x2e
 80814b2:	d0fb      	beq.n	80814ac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80814b4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80814b6:	290f      	cmp	r1, #15
 80814b8:	d152      	bne.n	8081560 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 80814ba:	b93d      	cbnz	r5, 80814cc <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80814bc:	0651      	lsls	r1, r2, #25
 80814be:	d5d3      	bpl.n	8081468 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80814c0:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80814c2:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 80814c6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80814c8:	462b      	mov	r3, r5
 80814ca:	e007      	b.n	80814dc <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80814cc:	3b01      	subs	r3, #1
 80814ce:	b2db      	uxtb	r3, r3
 80814d0:	429a      	cmp	r2, r3
 80814d2:	d1eb      	bne.n	80814ac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80814d4:	7b42      	ldrb	r2, [r0, #13]
 80814d6:	9903      	ldr	r1, [sp, #12]
 80814d8:	4291      	cmp	r1, r2
 80814da:	d1e7      	bne.n	80814ac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 80814dc:	1e5a      	subs	r2, r3, #1
 80814de:	f04f 0c0d 	mov.w	ip, #13
 80814e2:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 80814e6:	9a02      	ldr	r2, [sp, #8]
 80814e8:	4562      	cmp	r2, ip
 80814ea:	d9df      	bls.n	80814ac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80814ec:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80814f0:	f1be 0f04 	cmp.w	lr, #4
 80814f4:	fa5f f28e 	uxtb.w	r2, lr
 80814f8:	d804      	bhi.n	8081504 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 80814fa:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 80814fe:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8081502:	e00c      	b.n	808151e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8081504:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081506:	bf95      	itete	ls
 8081508:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808150c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081510:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8081514:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8081518:	bf94      	ite	ls
 808151a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808151c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 808151e:	9902      	ldr	r1, [sp, #8]
 8081520:	4561      	cmp	r1, ip
 8081522:	d103      	bne.n	808152c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8081524:	2a00      	cmp	r2, #0
 8081526:	bf18      	it	ne
 8081528:	2500      	movne	r5, #0
 808152a:	e79d      	b.n	8081468 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808152c:	2aff      	cmp	r2, #255	; 0xff
 808152e:	d8bd      	bhi.n	80814ac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8081530:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081532:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8081536:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081538:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808153c:	bf98      	it	ls
 808153e:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081540:	f811 100c 	ldrb.w	r1, [r1, ip]
 8081544:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8081548:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 808154c:	bf98      	it	ls
 808154e:	b2d2      	uxtbls	r2, r2
 8081550:	f1bc 0f19 	cmp.w	ip, #25
 8081554:	bf9c      	itt	ls
 8081556:	3120      	addls	r1, #32
 8081558:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808155a:	4291      	cmp	r1, r2
 808155c:	d1a6      	bne.n	80814ac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 808155e:	e0fb      	b.n	8081758 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8081560:	0709      	lsls	r1, r1, #28
 8081562:	d4a3      	bmi.n	80814ac <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 8081564:	b14d      	cbz	r5, 808157a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8081566:	2b01      	cmp	r3, #1
 8081568:	f47f af5b 	bne.w	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 808156c:	f7ff fdfd 	bl	808116a <_ZN7FatFile11lfnChecksumEPh>
 8081570:	9b03      	ldr	r3, [sp, #12]
 8081572:	4283      	cmp	r3, r0
 8081574:	f47f af55 	bne.w	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8081578:	e00f      	b.n	808159a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808157a:	220b      	movs	r2, #11
 808157c:	9906      	ldr	r1, [sp, #24]
 808157e:	9307      	str	r3, [sp, #28]
 8081580:	f004 fec4 	bl	808630c <memcmp>
 8081584:	9b07      	ldr	r3, [sp, #28]
 8081586:	2800      	cmp	r0, #0
 8081588:	f47f af6e 	bne.w	8081468 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 808158c:	f899 2000 	ldrb.w	r2, [r9]
 8081590:	07d2      	lsls	r2, r2, #31
 8081592:	d502      	bpl.n	808159a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 8081594:	2201      	movs	r2, #1
 8081596:	9204      	str	r2, [sp, #16]
 8081598:	e766      	b.n	8081468 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 808159a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 808159e:	f000 80d1 	beq.w	8081744 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 80815a2:	e73e      	b.n	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 80815a4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80815a8:	f43f af3b 	beq.w	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80815ac:	f00b 0303 	and.w	r3, fp, #3
 80815b0:	3b01      	subs	r3, #1
 80815b2:	2b01      	cmp	r3, #1
 80815b4:	f63f af35 	bhi.w	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 80815b8:	2c00      	cmp	r4, #0
 80815ba:	bf08      	it	eq
 80815bc:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80815be:	42bc      	cmp	r4, r7
 80815c0:	d302      	bcc.n	80815c8 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 80815c2:	9b04      	ldr	r3, [sp, #16]
 80815c4:	b9cb      	cbnz	r3, 80815fa <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 80815c6:	e01f      	b.n	8081608 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 80815c8:	2100      	movs	r1, #0
 80815ca:	4630      	mov	r0, r6
 80815cc:	f000 fa11 	bl	80819f2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80815d0:	b910      	cbnz	r0, 80815d8 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 80815d2:	7873      	ldrb	r3, [r6, #1]
 80815d4:	b15b      	cbz	r3, 80815ee <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 80815d6:	e724      	b.n	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80815d8:	3401      	adds	r4, #1
 80815da:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80815dc:	e7ef      	b.n	80815be <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 80815de:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80815e0:	791b      	ldrb	r3, [r3, #4]
 80815e2:	2b01      	cmp	r3, #1
 80815e4:	d8ed      	bhi.n	80815c2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 80815e6:	3410      	adds	r4, #16
 80815e8:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 80815ea:	42a7      	cmp	r7, r4
 80815ec:	d9e9      	bls.n	80815c2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 80815ee:	4630      	mov	r0, r6
 80815f0:	f000 f8d2 	bl	8081798 <_ZN7FatFile13addDirClusterEv>
 80815f4:	2800      	cmp	r0, #0
 80815f6:	d1f2      	bne.n	80815de <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 80815f8:	e713      	b.n	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 80815fa:	4649      	mov	r1, r9
 80815fc:	4630      	mov	r0, r6
 80815fe:	f7ff feaf 	bl	8081360 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8081602:	2800      	cmp	r0, #0
 8081604:	f43f af0d 	beq.w	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8081608:	ea4f 1148 	mov.w	r1, r8, lsl #5
 808160c:	4630      	mov	r0, r6
 808160e:	f000 fa0d 	bl	8081a2c <_ZN7FatFile7seekSetEm>
 8081612:	2800      	cmp	r0, #0
 8081614:	f43f af05 	beq.w	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8081618:	1e7d      	subs	r5, r7, #1
 808161a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808161c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808161e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8081622:	f04f 080f 	mov.w	r8, #15
 8081626:	e041      	b.n	80816ac <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8081628:	2100      	movs	r1, #0
 808162a:	4630      	mov	r0, r6
 808162c:	f000 f9e1 	bl	80819f2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8081630:	4607      	mov	r7, r0
 8081632:	2800      	cmp	r0, #0
 8081634:	f43f aef5 	beq.w	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8081638:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808163a:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 808163c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8081640:	f043 0301 	orr.w	r3, r3, #1
 8081644:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8081648:	bf14      	ite	ne
 808164a:	4622      	movne	r2, r4
 808164c:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8081650:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8081652:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8081656:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808165a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808165e:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081660:	f7ff fd83 	bl	808116a <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081664:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8081666:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8081668:	f887 a01a 	strb.w	sl, [r7, #26]
 808166c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8081670:	f002 021f 	and.w	r2, r2, #31
 8081674:	230d      	movs	r3, #13
 8081676:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8081678:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 808167c:	435a      	muls	r2, r3
 808167e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8081680:	9902      	ldr	r1, [sp, #8]
 8081682:	4291      	cmp	r1, r2
 8081684:	d915      	bls.n	80816b2 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 8081686:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 808168a:	2b04      	cmp	r3, #4
 808168c:	fa5f fc83 	uxtb.w	ip, r3
 8081690:	f103 0001 	add.w	r0, r3, #1
 8081694:	d813      	bhi.n	80816be <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 8081696:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 808169a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 808169e:	280d      	cmp	r0, #13
 80816a0:	f102 0201 	add.w	r2, r2, #1
 80816a4:	4603      	mov	r3, r0
 80816a6:	d1eb      	bne.n	8081680 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80816a8:	3c01      	subs	r4, #1
 80816aa:	b2e4      	uxtb	r4, r4
 80816ac:	2c00      	cmp	r4, #0
 80816ae:	d1bb      	bne.n	8081628 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 80816b0:	e00e      	b.n	80816d0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80816b2:	bf14      	ite	ne
 80816b4:	f04f 31ff 	movne.w	r1, #4294967295
 80816b8:	2100      	moveq	r1, #0
 80816ba:	b289      	uxth	r1, r1
 80816bc:	e7e5      	b.n	808168a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80816be:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80816c2:	bf94      	ite	ls
 80816c4:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80816c8:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80816cc:	8099      	strh	r1, [r3, #4]
 80816ce:	e7e6      	b.n	808169e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80816d0:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80816d2:	4621      	mov	r1, r4
 80816d4:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80816d6:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80816da:	f000 f98a 	bl	80819f2 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80816de:	4607      	mov	r7, r0
 80816e0:	2800      	cmp	r0, #0
 80816e2:	f43f ae9e 	beq.w	8081422 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80816e6:	2220      	movs	r2, #32
 80816e8:	4621      	mov	r1, r4
 80816ea:	f004 fe29 	bl	8086340 <memset>
  memcpy(dir->name, fname->sfn, 11);
 80816ee:	464b      	mov	r3, r9
 80816f0:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80816f4:	603a      	str	r2, [r7, #0]
 80816f6:	685a      	ldr	r2, [r3, #4]
 80816f8:	607a      	str	r2, [r7, #4]
 80816fa:	891a      	ldrh	r2, [r3, #8]
 80816fc:	813a      	strh	r2, [r7, #8]
 80816fe:	7a9b      	ldrb	r3, [r3, #10]
 8081700:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8081702:	f899 3000 	ldrb.w	r3, [r9]
 8081706:	f003 0318 	and.w	r3, r3, #24
 808170a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 808170c:	4b18      	ldr	r3, [pc, #96]	; (8081770 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 808170e:	681b      	ldr	r3, [r3, #0]
 8081710:	b12b      	cbz	r3, 808171e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8081712:	f107 010e 	add.w	r1, r7, #14
 8081716:	f107 0010 	add.w	r0, r7, #16
 808171a:	4798      	blx	r3
 808171c:	e006      	b.n	808172c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 808171e:	2321      	movs	r3, #33	; 0x21
 8081720:	743b      	strb	r3, [r7, #16]
 8081722:	2328      	movs	r3, #40	; 0x28
 8081724:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8081726:	2308      	movs	r3, #8
 8081728:	73bc      	strb	r4, [r7, #14]
 808172a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 808172c:	8a3b      	ldrh	r3, [r7, #16]
 808172e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8081730:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8081732:	89fb      	ldrh	r3, [r7, #14]
 8081734:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8081736:	68b2      	ldr	r2, [r6, #8]
 8081738:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 808173c:	f043 0301 	orr.w	r3, r3, #1
 8081740:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8081744:	9500      	str	r5, [sp, #0]
 8081746:	465b      	mov	r3, fp
 8081748:	4652      	mov	r2, sl
 808174a:	4631      	mov	r1, r6
 808174c:	9805      	ldr	r0, [sp, #20]
 808174e:	f000 f9b6 	bl	8081abe <_ZN7FatFile15openCachedEntryEPS_tih>
 8081752:	e009      	b.n	8081768 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8081754:	2701      	movs	r7, #1
 8081756:	e677      	b.n	8081448 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 8081758:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 808175c:	f1be 0f0d 	cmp.w	lr, #13
 8081760:	f43f ae82 	beq.w	8081468 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8081764:	46d4      	mov	ip, sl
 8081766:	e6c3      	b.n	80814f0 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 8081768:	b009      	add	sp, #36	; 0x24
 808176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808176e:	bf00      	nop
 8081770:	2000044c 	.word	0x2000044c

08081774 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8081774:	f001 be80 	b.w	8083478 <HAL_Pin_Map>

08081778 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8081778:	f001 be7e 	b.w	8083478 <HAL_Pin_Map>

0808177c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 808177c:	f001 be7c 	b.w	8083478 <HAL_Pin_Map>

08081780 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8081780:	f001 be7a 	b.w	8083478 <HAL_Pin_Map>

08081784 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081784:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081786:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808178a:	f043 0304 	orr.w	r3, r3, #4
 808178e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081790:	6901      	ldr	r1, [r0, #16]
 8081792:	6880      	ldr	r0, [r0, #8]
 8081794:	f000 bc24 	b.w	8081fe0 <_ZN9FatVolume15allocateClusterEmPm>

08081798 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 808179c:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 808179e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80817a0:	f003 0320 	and.w	r3, r3, #32
 80817a4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80817a8:	b10b      	cbz	r3, 80817ae <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 80817aa:	2600      	movs	r6, #0
 80817ac:	e02e      	b.n	808180c <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 80817ae:	6942      	ldr	r2, [r0, #20]
 80817b0:	4b18      	ldr	r3, [pc, #96]	; (8081814 <_ZN7FatFile13addDirClusterEv+0x7c>)
 80817b2:	429a      	cmp	r2, r3
 80817b4:	d8f9      	bhi.n	80817aa <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 80817b6:	f7ff ffe5 	bl	8081784 <_ZN7FatFile10addClusterEv>
 80817ba:	4606      	mov	r6, r0
 80817bc:	2800      	cmp	r0, #0
 80817be:	d0f4      	beq.n	80817aa <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 80817c0:	6921      	ldr	r1, [r4, #16]
 80817c2:	68a0      	ldr	r0, [r4, #8]
 80817c4:	f000 fba1 	bl	8081f0a <_ZNK9FatVolume17clusterFirstBlockEm>
 80817c8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80817ca:	68a0      	ldr	r0, [r4, #8]
 80817cc:	2205      	movs	r2, #5
 80817ce:	4639      	mov	r1, r7
 80817d0:	3024      	adds	r0, #36	; 0x24
 80817d2:	f000 fb76 	bl	8081ec2 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 80817d6:	4680      	mov	r8, r0
 80817d8:	2800      	cmp	r0, #0
 80817da:	d0e6      	beq.n	80817aa <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 80817dc:	4629      	mov	r1, r5
 80817de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80817e2:	f004 fdad 	bl	8086340 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80817e6:	2501      	movs	r5, #1
 80817e8:	68a3      	ldr	r3, [r4, #8]
 80817ea:	791a      	ldrb	r2, [r3, #4]
 80817ec:	42aa      	cmp	r2, r5
 80817ee:	d909      	bls.n	8081804 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80817f0:	4642      	mov	r2, r8
 80817f2:	19e9      	adds	r1, r5, r7
 80817f4:	6818      	ldr	r0, [r3, #0]
 80817f6:	f000 fee5 	bl	80825c4 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80817fa:	2800      	cmp	r0, #0
 80817fc:	d0d5      	beq.n	80817aa <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80817fe:	3501      	adds	r5, #1
 8081800:	b2ed      	uxtb	r5, r5
 8081802:	e7f1      	b.n	80817e8 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8081804:	6963      	ldr	r3, [r4, #20]
 8081806:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 808180a:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 808180c:	4630      	mov	r0, r6
 808180e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081812:	bf00      	nop
 8081814:	001ffdff 	.word	0x001ffdff

08081818 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8081818:	b510      	push	{r4, lr}
 808181a:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808181c:	6880      	ldr	r0, [r0, #8]
 808181e:	460a      	mov	r2, r1
 8081820:	3024      	adds	r0, #36	; 0x24
 8081822:	69a1      	ldr	r1, [r4, #24]
 8081824:	f000 fb4d 	bl	8081ec2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8081828:	b120      	cbz	r0, 8081834 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 808182a:	88a3      	ldrh	r3, [r4, #4]
 808182c:	f003 030f 	and.w	r3, r3, #15
 8081830:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8081834:	bd10      	pop	{r4, pc}

08081836 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8081836:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8081838:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808183a:	4605      	mov	r5, r0
 808183c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 808183e:	b984      	cbnz	r4, 8081862 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8081840:	2224      	movs	r2, #36	; 0x24
 8081842:	4621      	mov	r1, r4
 8081844:	f004 fd7c 	bl	8086340 <memset>

  m_vol = vol;
 8081848:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 808184a:	79f3      	ldrb	r3, [r6, #7]
 808184c:	2b10      	cmp	r3, #16
 808184e:	d003      	beq.n	8081858 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8081850:	2b20      	cmp	r3, #32
 8081852:	d106      	bne.n	8081862 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8081854:	2340      	movs	r3, #64	; 0x40
 8081856:	e000      	b.n	808185a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8081858:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 808185a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 808185c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 808185e:	70a8      	strb	r0, [r5, #2]
 8081860:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8081862:	2000      	movs	r0, #0
 8081864:	bd70      	pop	{r4, r5, r6, pc}

08081866 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8081866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808186a:	7803      	ldrb	r3, [r0, #0]
 808186c:	4604      	mov	r4, r0
 808186e:	4689      	mov	r9, r1
 8081870:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 8081872:	b14b      	cbz	r3, 8081888 <_ZN7FatFile4readEPvj+0x22>
 8081874:	7882      	ldrb	r2, [r0, #2]
 8081876:	07d1      	lsls	r1, r2, #31
 8081878:	d506      	bpl.n	8081888 <_ZN7FatFile4readEPvj+0x22>
 808187a:	e00c      	b.n	8081896 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808187c:	465a      	mov	r2, fp
 808187e:	6921      	ldr	r1, [r4, #16]
 8081880:	f000 fb49 	bl	8081f16 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8081884:	2800      	cmp	r0, #0
 8081886:	da3d      	bge.n	8081904 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081888:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808188a:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808188e:	f043 0302 	orr.w	r3, r3, #2
 8081892:	7063      	strb	r3, [r4, #1]
  return -1;
 8081894:	e097      	b.n	80819c6 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8081896:	071a      	lsls	r2, r3, #28
 8081898:	d503      	bpl.n	80818a2 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808189a:	69e3      	ldr	r3, [r4, #28]
 808189c:	6962      	ldr	r2, [r4, #20]
 808189e:	1a9b      	subs	r3, r3, r2
 80818a0:	e007      	b.n	80818b2 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 80818a2:	069a      	lsls	r2, r3, #26
 80818a4:	d508      	bpl.n	80818b8 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80818a6:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 80818a8:	891a      	ldrh	r2, [r3, #8]
 80818aa:	6963      	ldr	r3, [r4, #20]
 80818ac:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 80818b0:	b29b      	uxth	r3, r3
 80818b2:	429d      	cmp	r5, r3
 80818b4:	bf28      	it	cs
 80818b6:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80818b8:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 80818ba:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80818be:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80818c2:	2e00      	cmp	r6, #0
 80818c4:	d035      	beq.n	8081932 <_ZN7FatFile4readEPvj+0xcc>
 80818c6:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80818c8:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80818ca:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80818ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80818d2:	68a0      	ldr	r0, [r4, #8]
 80818d4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80818d8:	d002      	beq.n	80818e0 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80818da:	6a03      	ldr	r3, [r0, #32]
 80818dc:	4419      	add	r1, r3
 80818de:	e01d      	b.n	808191c <_ZN7FatFile4readEPvj+0xb6>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count,
                       uint32_t* firstCluster, uint32_t startCluster = 0);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80818e0:	f890 8005 	ldrb.w	r8, [r0, #5]
 80818e4:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 80818e8:	f1ba 0f00 	cmp.w	sl, #0
 80818ec:	d110      	bne.n	8081910 <_ZN7FatFile4readEPvj+0xaa>
 80818ee:	f1b8 0f00 	cmp.w	r8, #0
 80818f2:	d10d      	bne.n	8081910 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 80818f4:	2b00      	cmp	r3, #0
 80818f6:	d1c1      	bne.n	808187c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80818f8:	0653      	lsls	r3, r2, #25
 80818fa:	bf4c      	ite	mi
 80818fc:	6a03      	ldrmi	r3, [r0, #32]
 80818fe:	6a23      	ldrpl	r3, [r4, #32]
 8081900:	6123      	str	r3, [r4, #16]
 8081902:	e005      	b.n	8081910 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8081904:	d104      	bne.n	8081910 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8081906:	7823      	ldrb	r3, [r4, #0]
 8081908:	f013 0f70 	tst.w	r3, #112	; 0x70
 808190c:	d111      	bne.n	8081932 <_ZN7FatFile4readEPvj+0xcc>
 808190e:	e7bb      	b.n	8081888 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8081910:	6921      	ldr	r1, [r4, #16]
 8081912:	68a0      	ldr	r0, [r4, #8]
 8081914:	f000 faf9 	bl	8081f0a <_ZNK9FatVolume17clusterFirstBlockEm>
 8081918:	eb08 0100 	add.w	r1, r8, r0
 808191c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808191e:	f1ba 0f00 	cmp.w	sl, #0
 8081922:	d135      	bne.n	8081990 <_ZN7FatFile4readEPvj+0x12a>
 8081924:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081928:	d332      	bcc.n	8081990 <_ZN7FatFile4readEPvj+0x12a>
 808192a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 808192c:	4299      	cmp	r1, r3
 808192e:	d102      	bne.n	8081936 <_ZN7FatFile4readEPvj+0xd0>
 8081930:	e02e      	b.n	8081990 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8081932:	1ba8      	subs	r0, r5, r6
 8081934:	e047      	b.n	80819c6 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8081936:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808193a:	d31b      	bcc.n	8081974 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 808193c:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 808193e:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 8081942:	0697      	lsls	r7, r2, #26
 8081944:	d406      	bmi.n	8081954 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 8081946:	7902      	ldrb	r2, [r0, #4]
 8081948:	ebc8 0202 	rsb	r2, r8, r2
 808194c:	b2d2      	uxtb	r2, r2
 808194e:	4592      	cmp	sl, r2
 8081950:	bf28      	it	cs
 8081952:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081954:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8081956:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808195a:	d207      	bcs.n	808196c <_ZN7FatFile4readEPvj+0x106>
 808195c:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 808195e:	4653      	mov	r3, sl
 8081960:	464a      	mov	r2, r9
 8081962:	6800      	ldr	r0, [r0, #0]
 8081964:	f000 fdec 	bl	8082540 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8081968:	b960      	cbnz	r0, 8081984 <_ZN7FatFile4readEPvj+0x11e>
 808196a:	e78d      	b.n	8081888 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808196c:	4453      	add	r3, sl
 808196e:	4299      	cmp	r1, r3
 8081970:	d321      	bcc.n	80819b6 <_ZN7FatFile4readEPvj+0x150>
 8081972:	e7f3      	b.n	808195c <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8081974:	464a      	mov	r2, r9
 8081976:	6800      	ldr	r0, [r0, #0]
 8081978:	f000 fd9a 	bl	80824b0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 808197c:	2800      	cmp	r0, #0
 808197e:	d083      	beq.n	8081888 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8081980:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8081984:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8081986:	44b9      	add	r9, r7
    m_curPosition += n;
 8081988:	443b      	add	r3, r7
 808198a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 808198c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808198e:	e798      	b.n	80818c2 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081990:	2200      	movs	r2, #0
 8081992:	3024      	adds	r0, #36	; 0x24
 8081994:	f000 fa95 	bl	8081ec2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8081998:	2800      	cmp	r0, #0
 808199a:	f43f af75 	beq.w	8081888 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 808199e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 80819a2:	42b7      	cmp	r7, r6
 80819a4:	bf28      	it	cs
 80819a6:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 80819a8:	eb00 010a 	add.w	r1, r0, sl
 80819ac:	463a      	mov	r2, r7
 80819ae:	4648      	mov	r0, r9
 80819b0:	f004 fcbb 	bl	808632a <memcpy>
 80819b4:	e7e6      	b.n	8081984 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80819b6:	3024      	adds	r0, #36	; 0x24
 80819b8:	9101      	str	r1, [sp, #4]
 80819ba:	f000 fa5b 	bl	8081e74 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 80819be:	9901      	ldr	r1, [sp, #4]
 80819c0:	2800      	cmp	r0, #0
 80819c2:	d1cb      	bne.n	808195c <_ZN7FatFile4readEPvj+0xf6>
 80819c4:	e760      	b.n	8081888 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 80819c6:	b003      	add	sp, #12
 80819c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080819cc <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 80819cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 80819ce:	2201      	movs	r2, #1
 80819d0:	f10d 0107 	add.w	r1, sp, #7
 80819d4:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 80819d6:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 80819d8:	6905      	ldr	r5, [r0, #16]
 80819da:	f7ff ff44 	bl	8081866 <_ZN7FatFile4readEPvj>
 80819de:	2801      	cmp	r0, #1
 80819e0:	bf09      	itett	eq
 80819e2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80819e6:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 80819ea:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80819ec:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80819ee:	b002      	add	sp, #8
 80819f0:	bd70      	pop	{r4, r5, r6, pc}

080819f2 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80819f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80819f4:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80819f6:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80819f8:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80819fc:	b105      	cbz	r5, 8081a00 <_ZN7FatFile12readDirCacheEb+0xe>
 80819fe:	b969      	cbnz	r1, 8081a1c <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8081a00:	2201      	movs	r2, #1
 8081a02:	f10d 0107 	add.w	r1, sp, #7
 8081a06:	4620      	mov	r0, r4
 8081a08:	f7ff ff2d 	bl	8081866 <_ZN7FatFile4readEPvj>
 8081a0c:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8081a0e:	2801      	cmp	r0, #1
 8081a10:	d001      	beq.n	8081a16 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8081a12:	2000      	movs	r0, #0
 8081a14:	e008      	b.n	8081a28 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8081a16:	6963      	ldr	r3, [r4, #20]
 8081a18:	331f      	adds	r3, #31
 8081a1a:	e000      	b.n	8081a1e <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 8081a1c:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8081a1e:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8081a20:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8081a22:	3030      	adds	r0, #48	; 0x30
 8081a24:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 8081a28:	b003      	add	sp, #12
 8081a2a:	bd30      	pop	{r4, r5, pc}

08081a2c <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 8081a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081a30:	460e      	mov	r6, r1
 8081a32:	7801      	ldrb	r1, [r0, #0]
 8081a34:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8081a36:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8081a38:	2900      	cmp	r1, #0
 8081a3a:	d039      	beq.n	8081ab0 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 8081a3c:	6945      	ldr	r5, [r0, #20]
 8081a3e:	42b5      	cmp	r5, r6
 8081a40:	d03a      	beq.n	8081ab8 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8081a42:	b90e      	cbnz	r6, 8081a48 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8081a44:	6106      	str	r6, [r0, #16]
    goto done;
 8081a46:	e031      	b.n	8081aac <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8081a48:	070b      	lsls	r3, r1, #28
 8081a4a:	d503      	bpl.n	8081a54 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 8081a4c:	69c3      	ldr	r3, [r0, #28]
 8081a4e:	429e      	cmp	r6, r3
 8081a50:	d82e      	bhi.n	8081ab0 <_ZN7FatFile7seekSetEm+0x84>
 8081a52:	e007      	b.n	8081a64 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8081a54:	0688      	lsls	r0, r1, #26
 8081a56:	d505      	bpl.n	8081a64 <_ZN7FatFile7seekSetEm+0x38>
 8081a58:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8081a5a:	891b      	ldrh	r3, [r3, #8]
 8081a5c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8081a60:	d826      	bhi.n	8081ab0 <_ZN7FatFile7seekSetEm+0x84>
 8081a62:	e023      	b.n	8081aac <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081a64:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8081a68:	1e6a      	subs	r2, r5, #1
 8081a6a:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8081a6e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081a72:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081a74:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081a76:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8081a78:	429a      	cmp	r2, r3
 8081a7a:	d800      	bhi.n	8081a7e <_ZN7FatFile7seekSetEm+0x52>
 8081a7c:	b94d      	cbnz	r5, 8081a92 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8081a7e:	064a      	lsls	r2, r1, #25
 8081a80:	bf4c      	ite	mi
 8081a82:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8081a86:	6a22      	ldrpl	r2, [r4, #32]
 8081a88:	6122      	str	r2, [r4, #16]
 8081a8a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081a8c:	f104 0810 	add.w	r8, r4, #16
 8081a90:	e00a      	b.n	8081aa8 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8081a92:	1a9b      	subs	r3, r3, r2
 8081a94:	e7f9      	b.n	8081a8a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081a96:	4642      	mov	r2, r8
 8081a98:	6921      	ldr	r1, [r4, #16]
 8081a9a:	68a0      	ldr	r0, [r4, #8]
 8081a9c:	f000 fa3b 	bl	8081f16 <_ZN9FatVolume6fatGetEmPm>
 8081aa0:	2800      	cmp	r0, #0
 8081aa2:	f105 35ff 	add.w	r5, r5, #4294967295
 8081aa6:	dd03      	ble.n	8081ab0 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8081aa8:	2d00      	cmp	r5, #0
 8081aaa:	d1f4      	bne.n	8081a96 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8081aac:	6166      	str	r6, [r4, #20]
 8081aae:	e003      	b.n	8081ab8 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8081ab0:	6127      	str	r7, [r4, #16]
  return false;
 8081ab2:	2000      	movs	r0, #0
 8081ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8081ab8:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8081aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081abe <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8081abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081ac0:	460f      	mov	r7, r1
 8081ac2:	4604      	mov	r4, r0
 8081ac4:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8081ac6:	2100      	movs	r1, #0
 8081ac8:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8081aca:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8081acc:	f004 fc38 	bl	8086340 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8081ad0:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8081ad2:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8081ad4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8081ad6:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8081ad8:	f005 020f 	and.w	r2, r5, #15
 8081adc:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8081ae0:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8081ae2:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8081ae4:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8081ae6:	7acb      	ldrb	r3, [r1, #11]
 8081ae8:	071d      	lsls	r5, r3, #28
 8081aea:	d44c      	bmi.n	8081b86 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8081aec:	1883      	adds	r3, r0, r2
 8081aee:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8081af2:	f003 0317 	and.w	r3, r3, #23
 8081af6:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8081af8:	7ac9      	ldrb	r1, [r1, #11]
 8081afa:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 8081afe:	bf04      	itt	eq
 8081b00:	f043 0308 	orreq.w	r3, r3, #8
 8081b04:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 8081b06:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8081b0a:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 8081b0c:	f006 0303 	and.w	r3, r6, #3
 8081b10:	2b01      	cmp	r3, #1
 8081b12:	d009      	beq.n	8081b28 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 8081b14:	2b02      	cmp	r3, #2
 8081b16:	d005      	beq.n	8081b24 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 8081b18:	2b00      	cmp	r3, #0
 8081b1a:	d134      	bne.n	8081b86 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 8081b1c:	0571      	lsls	r1, r6, #21
 8081b1e:	d432      	bmi.n	8081b86 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 8081b20:	2301      	movs	r3, #1
 8081b22:	e002      	b.n	8081b2a <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 8081b24:	2303      	movs	r3, #3
 8081b26:	e000      	b.n	8081b2a <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 8081b28:	2302      	movs	r3, #2
 8081b2a:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 8081b2c:	78a1      	ldrb	r1, [r4, #2]
 8081b2e:	078b      	lsls	r3, r1, #30
 8081b30:	d503      	bpl.n	8081b3a <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 8081b32:	7823      	ldrb	r3, [r4, #0]
 8081b34:	f013 0f11 	tst.w	r3, #17
 8081b38:	d125      	bne.n	8081b86 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 8081b3a:	b24b      	sxtb	r3, r1
 8081b3c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8081b40:	f006 0108 	and.w	r1, r6, #8
 8081b44:	bf14      	ite	ne
 8081b46:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 8081b4a:	2700      	moveq	r7, #0
 8081b4c:	4319      	orrs	r1, r3
 8081b4e:	4339      	orrs	r1, r7
 8081b50:	70a1      	strb	r1, [r4, #2]
 8081b52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8081b54:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 8081b56:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8081b58:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8081b5c:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 8081b60:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8081b62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 8081b66:	d504      	bpl.n	8081b72 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8081b68:	b181      	cbz	r1, 8081b8c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8081b6a:	f000 fa74 	bl	8082056 <_ZN9FatVolume9freeChainEm>
 8081b6e:	b968      	cbnz	r0, 8081b8c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8081b70:	e009      	b.n	8081b86 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8081b72:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8081b74:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8081b76:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8081b78:	0473      	lsls	r3, r6, #17
 8081b7a:	d50c      	bpl.n	8081b96 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 8081b7c:	69e1      	ldr	r1, [r4, #28]
 8081b7e:	4620      	mov	r0, r4
 8081b80:	f7ff ff54 	bl	8081a2c <_ZN7FatFile7seekSetEm>
 8081b84:	b938      	cbnz	r0, 8081b96 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 8081b86:	2000      	movs	r0, #0
 8081b88:	7020      	strb	r0, [r4, #0]
  return false;
 8081b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8081b8c:	78a3      	ldrb	r3, [r4, #2]
 8081b8e:	f043 0304 	orr.w	r3, r3, #4
 8081b92:	70a3      	strb	r3, [r4, #2]
 8081b94:	e7f0      	b.n	8081b78 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8081b96:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8081b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081b9c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081b9c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8081b9e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081ba0:	4604      	mov	r4, r0
  if (!isOpen()) {
 8081ba2:	b90b      	cbnz	r3, 8081ba8 <_ZN7FatFile4syncEv+0xc>
    return true;
 8081ba4:	2001      	movs	r0, #1
 8081ba6:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 8081ba8:	7883      	ldrb	r3, [r0, #2]
 8081baa:	075a      	lsls	r2, r3, #29
 8081bac:	d523      	bpl.n	8081bf6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8081bae:	2101      	movs	r1, #1
 8081bb0:	f7ff fe32 	bl	8081818 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081bb4:	4605      	mov	r5, r0
 8081bb6:	b928      	cbnz	r0, 8081bc4 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081bb8:	7863      	ldrb	r3, [r4, #1]
  return false;
 8081bba:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081bbc:	f043 0301 	orr.w	r3, r3, #1
 8081bc0:	7063      	strb	r3, [r4, #1]
 8081bc2:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081bc4:	7803      	ldrb	r3, [r0, #0]
 8081bc6:	2be5      	cmp	r3, #229	; 0xe5
 8081bc8:	d0f6      	beq.n	8081bb8 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8081bca:	7823      	ldrb	r3, [r4, #0]
 8081bcc:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8081bce:	bf44      	itt	mi
 8081bd0:	69e3      	ldrmi	r3, [r4, #28]
 8081bd2:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8081bd4:	8c23      	ldrh	r3, [r4, #32]
 8081bd6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8081bd8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8081bda:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8081bdc:	4b09      	ldr	r3, [pc, #36]	; (8081c04 <_ZN7FatFile4syncEv+0x68>)
 8081bde:	681b      	ldr	r3, [r3, #0]
 8081be0:	b12b      	cbz	r3, 8081bee <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8081be2:	f100 0116 	add.w	r1, r0, #22
 8081be6:	3018      	adds	r0, #24
 8081be8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8081bea:	8b2b      	ldrh	r3, [r5, #24]
 8081bec:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8081bee:	78a3      	ldrb	r3, [r4, #2]
 8081bf0:	f023 0304 	bic.w	r3, r3, #4
 8081bf4:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8081bf6:	68a0      	ldr	r0, [r4, #8]
 8081bf8:	f7ff faaa 	bl	8081150 <_ZN9FatVolume9cacheSyncEv>
 8081bfc:	2800      	cmp	r0, #0
 8081bfe:	d0db      	beq.n	8081bb8 <_ZN7FatFile4syncEv+0x1c>
 8081c00:	e7d0      	b.n	8081ba4 <_ZN7FatFile4syncEv+0x8>
 8081c02:	bf00      	nop
 8081c04:	2000044c 	.word	0x2000044c

08081c08 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8081c08:	b510      	push	{r4, lr}
 8081c0a:	4604      	mov	r4, r0
  bool rtn = sync();
 8081c0c:	f7ff ffc6 	bl	8081b9c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8081c10:	2300      	movs	r3, #0
 8081c12:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8081c14:	bd10      	pop	{r4, pc}

08081c16 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8081c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081c18:	461f      	mov	r7, r3
 8081c1a:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081c1c:	2300      	movs	r3, #0
 8081c1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8081c22:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081c26:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8081c28:	4606      	mov	r6, r0
 8081c2a:	460c      	mov	r4, r1
 8081c2c:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081c2e:	b10b      	cbz	r3, 8081c34 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8081c30:	2000      	movs	r0, #0
 8081c32:	e03d      	b.n	8081cb0 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081c34:	780b      	ldrb	r3, [r1, #0]
 8081c36:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081c3a:	d0f9      	beq.n	8081c30 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8081c3c:	7813      	ldrb	r3, [r2, #0]
 8081c3e:	2b2f      	cmp	r3, #47	; 0x2f
 8081c40:	d112      	bne.n	8081c68 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 8081c42:	9b01      	ldr	r3, [sp, #4]
 8081c44:	781a      	ldrb	r2, [r3, #0]
 8081c46:	2a2f      	cmp	r2, #47	; 0x2f
 8081c48:	d102      	bne.n	8081c50 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 8081c4a:	3301      	adds	r3, #1
 8081c4c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8081c4e:	e7f8      	b.n	8081c42 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8081c50:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8081c52:	b91a      	cbnz	r2, 8081c5c <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 8081c54:	4630      	mov	r0, r6
 8081c56:	f7ff fdee 	bl	8081836 <_ZN7FatFile8openRootEP9FatVolume>
 8081c5a:	e029      	b.n	8081cb0 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8081c5c:	a809      	add	r0, sp, #36	; 0x24
 8081c5e:	f7ff fdea 	bl	8081836 <_ZN7FatFile8openRootEP9FatVolume>
 8081c62:	2800      	cmp	r0, #0
 8081c64:	d0e4      	beq.n	8081c30 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8081c66:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8081c68:	aa01      	add	r2, sp, #4
 8081c6a:	a903      	add	r1, sp, #12
 8081c6c:	9801      	ldr	r0, [sp, #4]
 8081c6e:	f7ff fa8b 	bl	8081188 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8081c72:	2800      	cmp	r0, #0
 8081c74:	d0dc      	beq.n	8081c30 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8081c76:	9b01      	ldr	r3, [sp, #4]
 8081c78:	781b      	ldrb	r3, [r3, #0]
 8081c7a:	b19b      	cbz	r3, 8081ca4 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 8081c7c:	2300      	movs	r3, #0
 8081c7e:	aa03      	add	r2, sp, #12
 8081c80:	4621      	mov	r1, r4
 8081c82:	4630      	mov	r0, r6
 8081c84:	f7ff fbc2 	bl	808140c <_ZN7FatFile4openEPS_P7fname_ti>
 8081c88:	2800      	cmp	r0, #0
 8081c8a:	d0d1      	beq.n	8081c30 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8081c8c:	4635      	mov	r5, r6
 8081c8e:	ac09      	add	r4, sp, #36	; 0x24
 8081c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081c98:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 8081c9a:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8081c9c:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8081c9e:	f7ff ffb3 	bl	8081c08 <_ZN7FatFile5closeEv>
 8081ca2:	e7e0      	b.n	8081c66 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 8081ca4:	463b      	mov	r3, r7
 8081ca6:	aa03      	add	r2, sp, #12
 8081ca8:	4621      	mov	r1, r4
 8081caa:	4630      	mov	r0, r6
 8081cac:	f7ff fbae 	bl	808140c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 8081cb0:	b013      	add	sp, #76	; 0x4c
 8081cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081cb4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8081cb8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081cba:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8081cbc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081cbe:	4604      	mov	r4, r0
 8081cc0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8081cc2:	d508      	bpl.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
 8081cc4:	7883      	ldrb	r3, [r0, #2]
 8081cc6:	079a      	lsls	r2, r3, #30
 8081cc8:	d505      	bpl.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 8081cca:	071b      	lsls	r3, r3, #28
 8081ccc:	d50b      	bpl.n	8081ce6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8081cce:	69e1      	ldr	r1, [r4, #28]
 8081cd0:	f7ff feac 	bl	8081a2c <_ZN7FatFile7seekSetEm>
 8081cd4:	b938      	cbnz	r0, 8081ce6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8081cd6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8081cd8:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8081cdc:	f043 0301 	orr.w	r3, r3, #1
 8081ce0:	7063      	strb	r3, [r4, #1]
  return -1;
 8081ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8081ce6:	6963      	ldr	r3, [r4, #20]
 8081ce8:	43db      	mvns	r3, r3
 8081cea:	4598      	cmp	r8, r3
 8081cec:	d8f3      	bhi.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
 8081cee:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081cf0:	f04f 0a00 	mov.w	sl, #0
 8081cf4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081cf6:	2e00      	cmp	r6, #0
 8081cf8:	d07f      	beq.n	8081dfa <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8081cfa:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8081cfc:	f3c3 0708 	ubfx	r7, r3, #0, #9
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count,
                       uint32_t* firstCluster, uint32_t startCluster = 0);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8081d00:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8081d02:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 8081d06:	d11c      	bne.n	8081d42 <_ZN7FatFile5writeEPKvj+0x8e>
 8081d08:	b9df      	cbnz	r7, 8081d42 <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 8081d0a:	6921      	ldr	r1, [r4, #16]
 8081d0c:	b171      	cbz	r1, 8081d2c <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081d0e:	f104 0210 	add.w	r2, r4, #16
 8081d12:	f000 f900 	bl	8081f16 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8081d16:	2800      	cmp	r0, #0
 8081d18:	dbdd      	blt.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8081d1a:	f040 808d 	bne.w	8081e38 <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 8081d1e:	4620      	mov	r0, r4
 8081d20:	f7ff fd30 	bl	8081784 <_ZN7FatFile10addClusterEv>
 8081d24:	2800      	cmp	r0, #0
 8081d26:	f040 8087 	bne.w	8081e38 <_ZN7FatFile5writeEPKvj+0x184>
 8081d2a:	e7d4      	b.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8081d2c:	6a23      	ldr	r3, [r4, #32]
 8081d2e:	b93b      	cbnz	r3, 8081d40 <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 8081d30:	4620      	mov	r0, r4
 8081d32:	f7ff fd27 	bl	8081784 <_ZN7FatFile10addClusterEv>
 8081d36:	2800      	cmp	r0, #0
 8081d38:	d0cd      	beq.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8081d3a:	6923      	ldr	r3, [r4, #16]
 8081d3c:	6223      	str	r3, [r4, #32]
 8081d3e:	e000      	b.n	8081d42 <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 8081d40:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8081d42:	6921      	ldr	r1, [r4, #16]
 8081d44:	68a0      	ldr	r0, [r4, #8]
 8081d46:	f000 f8e0 	bl	8081f0a <_ZNK9FatVolume17clusterFirstBlockEm>
 8081d4a:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8081d4c:	b917      	cbnz	r7, 8081d54 <_ZN7FatFile5writeEPKvj+0xa0>
 8081d4e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081d52:	d221      	bcs.n	8081d98 <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8081d54:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 8081d58:	42b5      	cmp	r5, r6
 8081d5a:	bf28      	it	cs
 8081d5c:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8081d5e:	b937      	cbnz	r7, 8081d6e <_ZN7FatFile5writeEPKvj+0xba>
 8081d60:	6963      	ldr	r3, [r4, #20]
 8081d62:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8081d64:	4293      	cmp	r3, r2
 8081d66:	bf34      	ite	cc
 8081d68:	2201      	movcc	r2, #1
 8081d6a:	2205      	movcs	r2, #5
 8081d6c:	e000      	b.n	8081d70 <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8081d6e:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081d70:	68a0      	ldr	r0, [r4, #8]
 8081d72:	3024      	adds	r0, #36	; 0x24
 8081d74:	f000 f8a5 	bl	8081ec2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8081d78:	2800      	cmp	r0, #0
 8081d7a:	d0ac      	beq.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081d7c:	4438      	add	r0, r7
 8081d7e:	462a      	mov	r2, r5
 8081d80:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8081d82:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081d84:	f004 fad1 	bl	808632a <memcpy>
      if (512 == (n + blockOffset)) {
 8081d88:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8081d8c:	d12f      	bne.n	8081dee <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8081d8e:	68a0      	ldr	r0, [r4, #8]
 8081d90:	3024      	adds	r0, #36	; 0x24
 8081d92:	f000 f86f 	bl	8081e74 <_ZN8FatCache4syncEv>
 8081d96:	e016      	b.n	8081dc6 <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8081d98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8081d9c:	68a0      	ldr	r0, [r4, #8]
 8081d9e:	d314      	bcc.n	8081dca <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 8081da0:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 8081da2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 8081da4:	1b52      	subs	r2, r2, r5
 8081da6:	b2d2      	uxtb	r2, r2
 8081da8:	4293      	cmp	r3, r2
 8081daa:	bf28      	it	cs
 8081dac:	4613      	movcs	r3, r2
 8081dae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 8081db0:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081db2:	4291      	cmp	r1, r2
 8081db4:	d302      	bcc.n	8081dbc <_ZN7FatFile5writeEPKvj+0x108>
 8081db6:	441a      	add	r2, r3
 8081db8:	4291      	cmp	r1, r2
 8081dba:	d337      	bcc.n	8081e2c <_ZN7FatFile5writeEPKvj+0x178>
 8081dbc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 8081dbe:	464a      	mov	r2, r9
 8081dc0:	6838      	ldr	r0, [r7, #0]
 8081dc2:	f000 fc71 	bl	80826a8 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 8081dc6:	b990      	cbnz	r0, 8081dee <_ZN7FatFile5writeEPKvj+0x13a>
 8081dc8:	e785      	b.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8081dca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8081dcc:	464a      	mov	r2, r9
 8081dce:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8081dd0:	bf02      	ittt	eq
 8081dd2:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081dd6:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8081dda:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8081ddc:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8081dde:	6818      	ldr	r0, [r3, #0]
 8081de0:	f000 fbf0 	bl	80825c4 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8081de4:	2800      	cmp	r0, #0
 8081de6:	f43f af76 	beq.w	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8081dea:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081dee:	6963      	ldr	r3, [r4, #20]
    src += n;
 8081df0:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081df2:	442b      	add	r3, r5
 8081df4:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8081df6:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081df8:	e77c      	b.n	8081cf4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8081dfa:	69e2      	ldr	r2, [r4, #28]
 8081dfc:	4293      	cmp	r3, r2
 8081dfe:	d901      	bls.n	8081e04 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8081e00:	61e3      	str	r3, [r4, #28]
 8081e02:	e002      	b.n	8081e0a <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8081e04:	4b0f      	ldr	r3, [pc, #60]	; (8081e44 <_ZN7FatFile5writeEPKvj+0x190>)
 8081e06:	681b      	ldr	r3, [r3, #0]
 8081e08:	b11b      	cbz	r3, 8081e12 <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8081e0a:	78a3      	ldrb	r3, [r4, #2]
 8081e0c:	f043 0304 	orr.w	r3, r3, #4
 8081e10:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 8081e12:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8081e16:	2b00      	cmp	r3, #0
 8081e18:	db02      	blt.n	8081e20 <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8081e1a:	4640      	mov	r0, r8
 8081e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 8081e20:	4620      	mov	r0, r4
 8081e22:	f7ff febb 	bl	8081b9c <_ZN7FatFile4syncEv>
 8081e26:	2800      	cmp	r0, #0
 8081e28:	d1f7      	bne.n	8081e1a <_ZN7FatFile5writeEPKvj+0x166>
 8081e2a:	e754      	b.n	8081cd6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8081e2c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081e30:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8081e34:	62c2      	str	r2, [r0, #44]	; 0x2c
 8081e36:	e7c1      	b.n	8081dbc <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8081e38:	6921      	ldr	r1, [r4, #16]
 8081e3a:	68a0      	ldr	r0, [r4, #8]
 8081e3c:	f000 f865 	bl	8081f0a <_ZNK9FatVolume17clusterFirstBlockEm>
 8081e40:	4601      	mov	r1, r0
 8081e42:	e784      	b.n	8081d4e <_ZN7FatFile5writeEPKvj+0x9a>
 8081e44:	2000044c 	.word	0x2000044c

08081e48 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8081e48:	f001 bb16 	b.w	8083478 <HAL_Pin_Map>

08081e4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081e4c:	b570      	push	{r4, r5, r6, lr}
 8081e4e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081e50:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081e52:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081e54:	b149      	cbz	r1, 8081e6a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081e56:	f004 ffe5 	bl	8086e24 <strlen>
 8081e5a:	682b      	ldr	r3, [r5, #0]
 8081e5c:	4602      	mov	r2, r0
 8081e5e:	4621      	mov	r1, r4
 8081e60:	4628      	mov	r0, r5
    }
 8081e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081e66:	68db      	ldr	r3, [r3, #12]
 8081e68:	4718      	bx	r3
    }
 8081e6a:	bd70      	pop	{r4, r5, r6, pc}

08081e6c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8081e6c:	f001 bb04 	b.w	8083478 <HAL_Pin_Map>

08081e70 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8081e70:	f001 bb02 	b.w	8083478 <HAL_Pin_Map>

08081e74 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081e74:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8081e76:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081e78:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8081e7a:	07da      	lsls	r2, r3, #31
 8081e7c:	d51e      	bpl.n	8081ebc <_ZN8FatCache4syncEv+0x48>
 8081e7e:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8081e80:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8081e84:	6881      	ldr	r1, [r0, #8]
 8081e86:	4632      	mov	r2, r6
 8081e88:	6818      	ldr	r0, [r3, #0]
 8081e8a:	f000 fb9b 	bl	80825c4 <_ZN9SdSpiCard10writeBlockEmPKh>
 8081e8e:	4605      	mov	r5, r0
 8081e90:	b908      	cbnz	r0, 8081e96 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8081e92:	2500      	movs	r5, #0
 8081e94:	e013      	b.n	8081ebe <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8081e96:	7823      	ldrb	r3, [r4, #0]
 8081e98:	079b      	lsls	r3, r3, #30
 8081e9a:	d404      	bmi.n	8081ea6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8081e9c:	7823      	ldrb	r3, [r4, #0]
 8081e9e:	f023 0301 	bic.w	r3, r3, #1
 8081ea2:	7023      	strb	r3, [r4, #0]
 8081ea4:	e00b      	b.n	8081ebe <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8081ea6:	6863      	ldr	r3, [r4, #4]
 8081ea8:	68a0      	ldr	r0, [r4, #8]
 8081eaa:	6919      	ldr	r1, [r3, #16]
 8081eac:	4632      	mov	r2, r6
 8081eae:	4401      	add	r1, r0
 8081eb0:	6818      	ldr	r0, [r3, #0]
 8081eb2:	f000 fb87 	bl	80825c4 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8081eb6:	2800      	cmp	r0, #0
 8081eb8:	d1f0      	bne.n	8081e9c <_ZN8FatCache4syncEv+0x28>
 8081eba:	e7ea      	b.n	8081e92 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8081ebc:	2501      	movs	r5, #1

fail:
  return false;
}
 8081ebe:	4628      	mov	r0, r5
 8081ec0:	bd70      	pop	{r4, r5, r6, pc}

08081ec2 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081ec2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8081ec4:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081ec6:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8081ec8:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081eca:	460e      	mov	r6, r1
 8081ecc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8081ece:	d014      	beq.n	8081efa <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8081ed0:	f7ff ffd0 	bl	8081e74 <_ZN8FatCache4syncEv>
 8081ed4:	b908      	cbnz	r0, 8081eda <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 8081ed6:	2000      	movs	r0, #0
 8081ed8:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8081eda:	076b      	lsls	r3, r5, #29
 8081edc:	d503      	bpl.n	8081ee6 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8081ede:	2300      	movs	r3, #0
 8081ee0:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8081ee2:	60a6      	str	r6, [r4, #8]
 8081ee4:	e009      	b.n	8081efa <_ZN8FatCache4readEmh+0x38>
 8081ee6:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8081ee8:	f104 020c 	add.w	r2, r4, #12
 8081eec:	4631      	mov	r1, r6
 8081eee:	6818      	ldr	r0, [r3, #0]
 8081ef0:	f000 fade 	bl	80824b0 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8081ef4:	2800      	cmp	r0, #0
 8081ef6:	d1f2      	bne.n	8081ede <_ZN8FatCache4readEmh+0x1c>
 8081ef8:	e7ed      	b.n	8081ed6 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8081efa:	4620      	mov	r0, r4
 8081efc:	7823      	ldrb	r3, [r4, #0]
 8081efe:	f005 0503 	and.w	r5, r5, #3
 8081f02:	431d      	orrs	r5, r3
 8081f04:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 8081f08:	bd70      	pop	{r4, r5, r6, pc}

08081f0a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8081f0a:	7983      	ldrb	r3, [r0, #6]
 8081f0c:	3902      	subs	r1, #2
 8081f0e:	6940      	ldr	r0, [r0, #20]
 8081f10:	4099      	lsls	r1, r3
}
 8081f12:	4408      	add	r0, r1
 8081f14:	4770      	bx	lr

08081f16 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081f16:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081f18:	b570      	push	{r4, r5, r6, lr}
 8081f1a:	4605      	mov	r5, r0
 8081f1c:	460c      	mov	r4, r1
 8081f1e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081f20:	d802      	bhi.n	8081f28 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8081f22:	f04f 30ff 	mov.w	r0, #4294967295
 8081f26:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081f28:	69c3      	ldr	r3, [r0, #28]
 8081f2a:	4299      	cmp	r1, r3
 8081f2c:	d8f9      	bhi.n	8081f22 <_ZN9FatVolume6fatGetEmPm+0xc>
 8081f2e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8081f30:	2b20      	cmp	r3, #32
 8081f32:	d110      	bne.n	8081f56 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8081f34:	6981      	ldr	r1, [r0, #24]
 8081f36:	2202      	movs	r2, #2
 8081f38:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081f3c:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8081f40:	f7ff ffbf 	bl	8081ec2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081f44:	2800      	cmp	r0, #0
 8081f46:	d0ec      	beq.n	8081f22 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8081f48:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081f4c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8081f50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8081f54:	e00f      	b.n	8081f76 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 8081f56:	2b10      	cmp	r3, #16
 8081f58:	d1e3      	bne.n	8081f22 <_ZN9FatVolume6fatGetEmPm+0xc>
 8081f5a:	6983      	ldr	r3, [r0, #24]
 8081f5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081f60:	2202      	movs	r2, #2
 8081f62:	4419      	add	r1, r3
 8081f64:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8081f68:	f7ff ffab 	bl	8081ec2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081f6c:	2800      	cmp	r0, #0
 8081f6e:	d0d8      	beq.n	8081f22 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8081f70:	b2e4      	uxtb	r4, r4
 8081f72:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8081f76:	69ea      	ldr	r2, [r5, #28]
 8081f78:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8081f7a:	bf9a      	itte	ls
 8081f7c:	6033      	strls	r3, [r6, #0]
  return 1;
 8081f7e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8081f80:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8081f82:	bd70      	pop	{r4, r5, r6, pc}

08081f84 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081f84:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081f86:	b538      	push	{r3, r4, r5, lr}
 8081f88:	460c      	mov	r4, r1
 8081f8a:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081f8c:	d801      	bhi.n	8081f92 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8081f8e:	2000      	movs	r0, #0
 8081f90:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8081f92:	69c3      	ldr	r3, [r0, #28]
 8081f94:	4299      	cmp	r1, r3
 8081f96:	d8fa      	bhi.n	8081f8e <_ZN9FatVolume6fatPutEmm+0xa>
 8081f98:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8081f9a:	2b20      	cmp	r3, #32
 8081f9c:	d10e      	bne.n	8081fbc <_ZN9FatVolume6fatPutEmm+0x38>
 8081f9e:	6981      	ldr	r1, [r0, #24]
 8081fa0:	2203      	movs	r2, #3
 8081fa2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081fa6:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8081faa:	f7ff ff8a 	bl	8081ec2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081fae:	2800      	cmp	r0, #0
 8081fb0:	d0ed      	beq.n	8081f8e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8081fb2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081fb6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8081fba:	e00f      	b.n	8081fdc <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 8081fbc:	2b10      	cmp	r3, #16
 8081fbe:	d1e6      	bne.n	8081f8e <_ZN9FatVolume6fatPutEmm+0xa>
 8081fc0:	6983      	ldr	r3, [r0, #24]
 8081fc2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081fc6:	2203      	movs	r2, #3
 8081fc8:	4419      	add	r1, r3
 8081fca:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8081fce:	f7ff ff78 	bl	8081ec2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081fd2:	2800      	cmp	r0, #0
 8081fd4:	d0db      	beq.n	8081f8e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8081fd6:	b2e4      	uxtb	r4, r4
 8081fd8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8081fdc:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8081fde:	bd38      	pop	{r3, r4, r5, pc}

08081fe0 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8081fe0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8081fe4:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8081fe6:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8081fe8:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8081fea:	460e      	mov	r6, r1
 8081fec:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8081fee:	d207      	bcs.n	8082000 <_ZN9FatVolume15allocateClusterEmPm+0x20>
 8081ff0:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 8081ff2:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 8081ff4:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 8081ff6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 8081ff8:	429c      	cmp	r4, r3
 8081ffa:	d903      	bls.n	8082004 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 8081ffc:	b9cf      	cbnz	r7, 8082032 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 8081ffe:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 8082000:	2701      	movs	r7, #1
 8082002:	e7f7      	b.n	8081ff4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 8082004:	42a6      	cmp	r6, r4
 8082006:	d014      	beq.n	8082032 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8082008:	aa01      	add	r2, sp, #4
 808200a:	4621      	mov	r1, r4
 808200c:	4628      	mov	r0, r5
 808200e:	f7ff ff82 	bl	8081f16 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8082012:	2800      	cmp	r0, #0
 8082014:	db0d      	blt.n	8082032 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8082016:	d0ed      	beq.n	8081ff4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8082018:	9b01      	ldr	r3, [sp, #4]
 808201a:	2b00      	cmp	r3, #0
 808201c:	d1ea      	bne.n	8081ff4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 808201e:	b107      	cbz	r7, 8082022 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 8082020:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8082022:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8082026:	4621      	mov	r1, r4
 8082028:	4628      	mov	r0, r5
 808202a:	f7ff ffab 	bl	8081f84 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 808202e:	4607      	mov	r7, r0
 8082030:	b908      	cbnz	r0, 8082036 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8082032:	2700      	movs	r7, #0
 8082034:	e00b      	b.n	808204e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8082036:	b916      	cbnz	r6, 808203e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 8082038:	f8c8 4000 	str.w	r4, [r8]
  return true;
 808203c:	e007      	b.n	808204e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 808203e:	4622      	mov	r2, r4
 8082040:	4631      	mov	r1, r6
 8082042:	4628      	mov	r0, r5
 8082044:	f7ff ff9e 	bl	8081f84 <_ZN9FatVolume6fatPutEmm>
 8082048:	2800      	cmp	r0, #0
 808204a:	d1f5      	bne.n	8082038 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 808204c:	e7f1      	b.n	8082032 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 808204e:	4638      	mov	r0, r7
 8082050:	b002      	add	sp, #8
 8082052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082056 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8082056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082058:	4605      	mov	r5, r0
 808205a:	460c      	mov	r4, r1
  uint32_t next = 0;
 808205c:	ae02      	add	r6, sp, #8
 808205e:	2300      	movs	r3, #0
 8082060:	f846 3d04 	str.w	r3, [r6, #-4]!
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8082064:	4632      	mov	r2, r6
 8082066:	4621      	mov	r1, r4
 8082068:	4628      	mov	r0, r5
 808206a:	f7ff ff54 	bl	8081f16 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808206e:	1e07      	subs	r7, r0, #0
 8082070:	da01      	bge.n	8082076 <_ZN9FatVolume9freeChainEm+0x20>
  } while (fg);

  return true;

fail:
  return false;
 8082072:	2000      	movs	r0, #0
 8082074:	e00f      	b.n	8082096 <_ZN9FatVolume9freeChainEm+0x40>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8082076:	2200      	movs	r2, #0
 8082078:	4621      	mov	r1, r4
 808207a:	4628      	mov	r0, r5
 808207c:	f7ff ff82 	bl	8081f84 <_ZN9FatVolume6fatPutEmm>
 8082080:	2800      	cmp	r0, #0
 8082082:	d0f6      	beq.n	8082072 <_ZN9FatVolume9freeChainEm+0x1c>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 8082084:	68eb      	ldr	r3, [r5, #12]
 8082086:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 8082088:	bf9c      	itt	ls
 808208a:	f104 34ff 	addls.w	r4, r4, #4294967295
 808208e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 8082090:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next = 0;
  int8_t fg;
  do {
 8082092:	2f00      	cmp	r7, #0
 8082094:	d1e6      	bne.n	8082064 <_ZN9FatVolume9freeChainEm+0xe>

  return true;

fail:
  return false;
}
 8082096:	b003      	add	sp, #12
 8082098:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808209a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 808209a:	b570      	push	{r4, r5, r6, lr}
 808209c:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 808209e:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80820a0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80820a2:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80820a4:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80820a8:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80820aa:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80820ac:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80820ae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80820b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80820b4:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80820b8:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 80820bc:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 80820c0:	b1a1      	cbz	r1, 80820ec <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 80820c2:	2904      	cmp	r1, #4
 80820c4:	d85d      	bhi.n	8082182 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80820c6:	4611      	mov	r1, r2
 80820c8:	3024      	adds	r0, #36	; 0x24
 80820ca:	f7ff fefa 	bl	8081ec2 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80820ce:	2800      	cmp	r0, #0
 80820d0:	d057      	beq.n	8082182 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80820d2:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80820d6:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80820da:	065b      	lsls	r3, r3, #25
 80820dc:	d151      	bne.n	8082182 <_ZN9FatVolume4initEh+0xe8>
 80820de:	351b      	adds	r5, #27
 80820e0:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80820e4:	f8d5 5006 	ldr.w	r5, [r5, #6]
 80820e8:	2d00      	cmp	r5, #0
 80820ea:	d04a      	beq.n	8082182 <_ZN9FatVolume4initEh+0xe8>
 80820ec:	2200      	movs	r2, #0
 80820ee:	4629      	mov	r1, r5
 80820f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80820f4:	f7ff fee5 	bl	8081ec2 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 80820f8:	2800      	cmp	r0, #0
 80820fa:	d042      	beq.n	8082182 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 80820fc:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8082100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8082104:	d13d      	bne.n	8082182 <_ZN9FatVolume4initEh+0xe8>
 8082106:	7c03      	ldrb	r3, [r0, #16]
 8082108:	2b02      	cmp	r3, #2
 808210a:	d13a      	bne.n	8082182 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 808210c:	89c3      	ldrh	r3, [r0, #14]
 808210e:	2b00      	cmp	r3, #0
 8082110:	d037      	beq.n	8082182 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8082112:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8082114:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8082116:	1e4b      	subs	r3, r1, #1
 8082118:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 808211a:	2300      	movs	r3, #0
 808211c:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 808211e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8082120:	2301      	movs	r3, #1
 8082122:	428b      	cmp	r3, r1
 8082124:	d007      	beq.n	8082136 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8082126:	3e01      	subs	r6, #1
 8082128:	d02b      	beq.n	8082182 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 808212a:	79a2      	ldrb	r2, [r4, #6]
 808212c:	005b      	lsls	r3, r3, #1
 808212e:	3201      	adds	r2, #1
 8082130:	b2db      	uxtb	r3, r3
 8082132:	71a2      	strb	r2, [r4, #6]
 8082134:	e7f5      	b.n	8082122 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8082136:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8082138:	b902      	cbnz	r2, 808213c <_ZN9FatVolume4initEh+0xa2>
 808213a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 808213c:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 808213e:	89c6      	ldrh	r6, [r0, #14]
 8082140:	442e      	add	r6, r5
 8082142:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8082144:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8082148:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 808214c:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 808214e:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8082150:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8082154:	0152      	lsls	r2, r2, #5
 8082156:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 808215a:	eb01 2262 	add.w	r2, r1, r2, asr #9
 808215e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8082160:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8082164:	b903      	cbnz	r3, 8082168 <_ZN9FatVolume4initEh+0xce>
 8082166:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8082168:	1aad      	subs	r5, r5, r2
 808216a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 808216c:	79a5      	ldrb	r5, [r4, #6]
 808216e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8082172:	1c6b      	adds	r3, r5, #1
 8082174:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8082176:	f640 73f4 	movw	r3, #4084	; 0xff4
 808217a:	429d      	cmp	r5, r3
 808217c:	d803      	bhi.n	8082186 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 808217e:	230c      	movs	r3, #12
 8082180:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8082182:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8082184:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8082186:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 808218a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 808218c:	bf89      	itett	hi
 808218e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8082190:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082192:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8082194:	2320      	movhi	r3, #32
 8082196:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8082198:	2001      	movs	r0, #1

fail:
  return false;
}
 808219a:	bd70      	pop	{r4, r5, r6, pc}

0808219c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 808219c:	f001 b96c 	b.w	8083478 <HAL_Pin_Map>

080821a0 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 80821a0:	f001 b96a 	b.w	8083478 <HAL_Pin_Map>

080821a4 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 80821a4:	f001 b968 	b.w	8083478 <HAL_Pin_Map>

080821a8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 80821a8:	b570      	push	{r4, r5, r6, lr}
 80821aa:	460e      	mov	r6, r1
 80821ac:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80821ae:	f001 f9e3 	bl	8083578 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 80821b2:	4c0c      	ldr	r4, [pc, #48]	; (80821e4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 80821b4:	6823      	ldr	r3, [r4, #0]
 80821b6:	1ac0      	subs	r0, r0, r3
 80821b8:	4b0b      	ldr	r3, [pc, #44]	; (80821e8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 80821ba:	4298      	cmp	r0, r3
 80821bc:	d908      	bls.n	80821d0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80821be:	f001 f9e3 	bl	8083588 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80821c2:	4b0a      	ldr	r3, [pc, #40]	; (80821ec <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 80821c4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80821c6:	f001 fbbb 	bl	8083940 <spark_process>
 80821ca:	f001 f9d5 	bl	8083578 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 80821ce:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80821d0:	f001 f9da 	bl	8083588 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 80821d4:	b280      	uxth	r0, r0
 80821d6:	1b80      	subs	r0, r0, r6
}
 80821d8:	42a8      	cmp	r0, r5
 80821da:	bfd4      	ite	le
 80821dc:	2000      	movle	r0, #0
 80821de:	2001      	movgt	r0, #1
 80821e0:	bd70      	pop	{r4, r5, r6, pc}
 80821e2:	bf00      	nop
 80821e4:	20000450 	.word	0x20000450
 80821e8:	000186a0 	.word	0x000186a0
 80821ec:	20000978 	.word	0x20000978

080821f0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80821f0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 80821f2:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80821f4:	4604      	mov	r4, r0
  if (!m_spiActive) {
 80821f6:	b94d      	cbnz	r5, 808220c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 80821f8:	6840      	ldr	r0, [r0, #4]
 80821fa:	f000 fa7d 	bl	80826f8 <_ZN14SdSpiAltDriver8activateEv>
 80821fe:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 8082200:	4629      	mov	r1, r5
 8082202:	7d18      	ldrb	r0, [r3, #20]
 8082204:	f002 ffdc 	bl	80851c0 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 8082208:	2301      	movs	r3, #1
 808220a:	7223      	strb	r3, [r4, #8]
 808220c:	bd38      	pop	{r3, r4, r5, pc}

0808220e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 808220e:	b510      	push	{r4, lr}
  if (m_spiActive) {
 8082210:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 8082212:	4604      	mov	r4, r0
  if (m_spiActive) {
 8082214:	b16b      	cbz	r3, 8082232 <_ZN9SdSpiCard7spiStopEv+0x24>
 8082216:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 8082218:	2101      	movs	r1, #1
 808221a:	7d18      	ldrb	r0, [r3, #20]
 808221c:	f002 ffd0 	bl	80851c0 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082220:	21ff      	movs	r1, #255	; 0xff
 8082222:	6860      	ldr	r0, [r4, #4]
 8082224:	f000 fa9a 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 8082228:	6860      	ldr	r0, [r4, #4]
 808222a:	f000 fa79 	bl	8082720 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 808222e:	2300      	movs	r3, #0
 8082230:	7223      	strb	r3, [r4, #8]
 8082232:	bd10      	pop	{r4, pc}

08082234 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8082234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082236:	4604      	mov	r4, r0
 8082238:	460d      	mov	r5, r1
 808223a:	4616      	mov	r6, r2
 808223c:	f001 f9a4 	bl	8083588 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 8082240:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082242:	6860      	ldr	r0, [r4, #4]
 8082244:	f000 fa6f 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 8082248:	28ff      	cmp	r0, #255	; 0xff
 808224a:	7260      	strb	r0, [r4, #9]
 808224c:	d109      	bne.n	8082262 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 808224e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8082252:	4639      	mov	r1, r7
 8082254:	4620      	mov	r0, r4
 8082256:	f7ff ffa7 	bl	80821a8 <_ZN9SdSpiCard10isTimedOutEtt>
 808225a:	2800      	cmp	r0, #0
 808225c:	d0f1      	beq.n	8082242 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808225e:	2355      	movs	r3, #85	; 0x55
 8082260:	e00b      	b.n	808227a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 8082262:	28fe      	cmp	r0, #254	; 0xfe
 8082264:	d001      	beq.n	808226a <_ZN9SdSpiCard8readDataEPhj+0x36>
 8082266:	2350      	movs	r3, #80	; 0x50
 8082268:	e007      	b.n	808227a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 808226a:	4632      	mov	r2, r6
 808226c:	4629      	mov	r1, r5
 808226e:	6860      	ldr	r0, [r4, #4]
 8082270:	f000 fa5e 	bl	8082730 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8082274:	7260      	strb	r0, [r4, #9]
 8082276:	b130      	cbz	r0, 8082286 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082278:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 808227a:	4620      	mov	r0, r4
 808227c:	7023      	strb	r3, [r4, #0]
 808227e:	f7ff ffc6 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082282:	2000      	movs	r0, #0
}
 8082284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082286:	6860      	ldr	r0, [r4, #4]
 8082288:	f000 fa4d 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
 808228c:	6860      	ldr	r0, [r4, #4]
 808228e:	f000 fa4a 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
 8082292:	2001      	movs	r0, #1
 8082294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082296 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 8082296:	b570      	push	{r4, r5, r6, lr}
 8082298:	4604      	mov	r4, r0
 808229a:	460e      	mov	r6, r1
 808229c:	f001 f974 	bl	8083588 <HAL_Timer_Get_Milli_Seconds>
 80822a0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 80822a2:	4632      	mov	r2, r6
 80822a4:	4629      	mov	r1, r5
 80822a6:	4620      	mov	r0, r4
 80822a8:	f7ff ff7e 	bl	80821a8 <_ZN9SdSpiCard10isTimedOutEtt>
 80822ac:	b930      	cbnz	r0, 80822bc <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 80822ae:	6860      	ldr	r0, [r4, #4]
 80822b0:	f000 fa39 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 80822b4:	28ff      	cmp	r0, #255	; 0xff
 80822b6:	d1f4      	bne.n	80822a2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 80822b8:	2001      	movs	r0, #1
 80822ba:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 80822bc:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 80822be:	bd70      	pop	{r4, r5, r6, pc}

080822c0 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80822c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 80822c2:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80822c4:	4604      	mov	r4, r0
 80822c6:	460d      	mov	r5, r1
 80822c8:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 80822ca:	b90b      	cbnz	r3, 80822d0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 80822cc:	f7ff ff90 	bl	80821f0 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 80822d0:	b125      	cbz	r5, 80822dc <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 80822d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80822d6:	4620      	mov	r0, r4
 80822d8:	f7ff ffdd 	bl	8082296 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80822dc:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80822e0:	6860      	ldr	r0, [r4, #4]
 80822e2:	f000 fa3b 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
 80822e6:	f10d 0607 	add.w	r6, sp, #7
 80822ea:	f10d 0703 	add.w	r7, sp, #3
 80822ee:	f816 1901 	ldrb.w	r1, [r6], #-1
 80822f2:	6860      	ldr	r0, [r4, #4]
 80822f4:	f000 fa32 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 80822f8:	42be      	cmp	r6, r7
 80822fa:	d1f8      	bne.n	80822ee <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80822fc:	2d00      	cmp	r5, #0
 80822fe:	bf0c      	ite	eq
 8082300:	2195      	moveq	r1, #149	; 0x95
 8082302:	2187      	movne	r1, #135	; 0x87
 8082304:	6860      	ldr	r0, [r4, #4]
 8082306:	f000 fa29 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808230a:	6860      	ldr	r0, [r4, #4]
 808230c:	f000 fa0b 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
 8082310:	250b      	movs	r5, #11
 8082312:	6860      	ldr	r0, [r4, #4]
 8082314:	f000 fa07 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 8082318:	0603      	lsls	r3, r0, #24
 808231a:	7260      	strb	r0, [r4, #9]
 808231c:	d503      	bpl.n	8082326 <_ZN9SdSpiCard11cardCommandEhm+0x66>
 808231e:	3d01      	subs	r5, #1
 8082320:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8082324:	d1f5      	bne.n	8082312 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 8082326:	b003      	add	sp, #12
 8082328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808232a <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 808232a:	b570      	push	{r4, r5, r6, lr}
 808232c:	4604      	mov	r4, r0
 808232e:	460d      	mov	r5, r1
 8082330:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 8082332:	2137      	movs	r1, #55	; 0x37
 8082334:	2200      	movs	r2, #0
 8082336:	f7ff ffc3 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808233a:	4632      	mov	r2, r6
 808233c:	4629      	mov	r1, r5
 808233e:	4620      	mov	r0, r4
  }
 8082340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 8082344:	f7ff bfbc 	b.w	80822c0 <_ZN9SdSpiCard11cardCommandEhm>

08082348 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8082348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 808234c:	2500      	movs	r5, #0
 808234e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 8082350:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 8082352:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 8082354:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8082356:	4604      	mov	r4, r0
 8082358:	4690      	mov	r8, r2
 808235a:	461e      	mov	r6, r3
 808235c:	f001 f914 	bl	8083588 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 8082360:	4641      	mov	r1, r8
 8082362:	4607      	mov	r7, r0
 8082364:	6860      	ldr	r0, [r4, #4]
 8082366:	f000 f9cb 	bl	8082700 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 808236a:	6863      	ldr	r3, [r4, #4]
 808236c:	4a4f      	ldr	r2, [pc, #316]	; (80824ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 808236e:	f04f 0801 	mov.w	r8, #1
 8082372:	721d      	strb	r5, [r3, #8]
 8082374:	60da      	str	r2, [r3, #12]
 8082376:	745d      	strb	r5, [r3, #17]
 8082378:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 808237c:	4620      	mov	r0, r4
 808237e:	f7ff ff37 	bl	80821f0 <_ZN9SdSpiCard8spiStartEv>
 8082382:	6863      	ldr	r3, [r4, #4]
 8082384:	4641      	mov	r1, r8
 8082386:	7d18      	ldrb	r0, [r3, #20]
 8082388:	f002 ff1a 	bl	80851c0 <digitalWrite>
 808238c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808238e:	21ff      	movs	r1, #255	; 0xff
 8082390:	6860      	ldr	r0, [r4, #4]
 8082392:	3d01      	subs	r5, #1
 8082394:	f000 f9e2 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 8082398:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 808239c:	d1f7      	bne.n	808238e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 808239e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80823a0:	4629      	mov	r1, r5
 80823a2:	7d18      	ldrb	r0, [r3, #20]
 80823a4:	f002 ff0c 	bl	80851c0 <digitalWrite>
 80823a8:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 80823aa:	2200      	movs	r2, #0
 80823ac:	4611      	mov	r1, r2
 80823ae:	4620      	mov	r0, r4
 80823b0:	f7ff ff86 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 80823b4:	2801      	cmp	r0, #1
 80823b6:	4680      	mov	r8, r0
 80823b8:	d012      	beq.n	80823e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 80823ba:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 80823bc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80823c0:	d101      	bne.n	80823c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80823c2:	2320      	movs	r3, #32
 80823c4:	e057      	b.n	8082476 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80823c6:	21fd      	movs	r1, #253	; 0xfd
 80823c8:	6860      	ldr	r0, [r4, #4]
 80823ca:	f000 f9c7 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
 80823ce:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80823d2:	6860      	ldr	r0, [r4, #4]
 80823d4:	f000 f9a7 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 80823d8:	f1b8 0801 	subs.w	r8, r8, #1
 80823dc:	d1f9      	bne.n	80823d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 80823de:	e7e4      	b.n	80823aa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80823e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80823e4:	2108      	movs	r1, #8
 80823e6:	4620      	mov	r0, r4
 80823e8:	f7ff ff6a 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 80823ec:	2805      	cmp	r0, #5
 80823ee:	d102      	bne.n	80823f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80823f0:	f884 800a 	strb.w	r8, [r4, #10]
 80823f4:	e00f      	b.n	8082416 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 80823f6:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80823f8:	6860      	ldr	r0, [r4, #4]
 80823fa:	f000 f994 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
 80823fe:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 8082400:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8082404:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 8082406:	d1f7      	bne.n	80823f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8082408:	28aa      	cmp	r0, #170	; 0xaa
 808240a:	d102      	bne.n	8082412 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 808240c:	2302      	movs	r3, #2
 808240e:	72a3      	strb	r3, [r4, #10]
 8082410:	e001      	b.n	8082416 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8082412:	2325      	movs	r3, #37	; 0x25
 8082414:	e02f      	b.n	8082476 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8082416:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8082418:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 808241a:	2b02      	cmp	r3, #2
 808241c:	bf0c      	ite	eq
 808241e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8082422:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8082424:	462a      	mov	r2, r5
 8082426:	2129      	movs	r1, #41	; 0x29
 8082428:	4620      	mov	r0, r4
 808242a:	f7ff ff7e 	bl	808232a <_ZN9SdSpiCard8cardAcmdEhm>
 808242e:	4602      	mov	r2, r0
 8082430:	b148      	cbz	r0, 8082446 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8082432:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8082436:	4639      	mov	r1, r7
 8082438:	4620      	mov	r0, r4
 808243a:	f7ff feb5 	bl	80821a8 <_ZN9SdSpiCard10isTimedOutEtt>
 808243e:	2800      	cmp	r0, #0
 8082440:	d0f0      	beq.n	8082424 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 8082442:	2343      	movs	r3, #67	; 0x43
 8082444:	e017      	b.n	8082476 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8082446:	7aa3      	ldrb	r3, [r4, #10]
 8082448:	2b02      	cmp	r3, #2
 808244a:	d00e      	beq.n	808246a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 808244c:	4620      	mov	r0, r4
 808244e:	f7ff fede 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 8082452:	6863      	ldr	r3, [r4, #4]
 8082454:	68b0      	ldr	r0, [r6, #8]
 8082456:	7934      	ldrb	r4, [r6, #4]
 8082458:	7b31      	ldrb	r1, [r6, #12]
 808245a:	7b72      	ldrb	r2, [r6, #13]
 808245c:	60d8      	str	r0, [r3, #12]
 808245e:	721c      	strb	r4, [r3, #8]
 8082460:	7419      	strb	r1, [r3, #16]
 8082462:	745a      	strb	r2, [r3, #17]
  return true;
 8082464:	2001      	movs	r0, #1
 8082466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 808246a:	213a      	movs	r1, #58	; 0x3a
 808246c:	4620      	mov	r0, r4
 808246e:	f7ff ff27 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 8082472:	b138      	cbz	r0, 8082484 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8082474:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 8082476:	4620      	mov	r0, r4
 8082478:	7023      	strb	r3, [r4, #0]
 808247a:	f7ff fec8 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 808247e:	2000      	movs	r0, #0
}
 8082480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082484:	6860      	ldr	r0, [r4, #4]
 8082486:	f000 f94e 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 808248a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 808248e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8082490:	bf04      	itt	eq
 8082492:	2303      	moveq	r3, #3
 8082494:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8082496:	6860      	ldr	r0, [r4, #4]
 8082498:	f000 f945 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
 808249c:	6860      	ldr	r0, [r4, #4]
 808249e:	f000 f942 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
 80824a2:	6860      	ldr	r0, [r4, #4]
 80824a4:	f000 f93f 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
 80824a8:	e7d0      	b.n	808244c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 80824aa:	bf00      	nop
 80824ac:	0003d090 	.word	0x0003d090

080824b0 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80824b0:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80824b2:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80824b4:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80824b6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80824b8:	bf18      	it	ne
 80824ba:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 80824bc:	460a      	mov	r2, r1
 80824be:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80824c0:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 80824c2:	f7ff fefd 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 80824c6:	b110      	cbz	r0, 80824ce <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80824c8:	2330      	movs	r3, #48	; 0x30
 80824ca:	7023      	strb	r3, [r4, #0]
 80824cc:	e00b      	b.n	80824e6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80824ce:	4629      	mov	r1, r5
 80824d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80824d4:	4620      	mov	r0, r4
 80824d6:	f7ff fead 	bl	8082234 <_ZN9SdSpiCard8readDataEPhj>
 80824da:	4605      	mov	r5, r0
 80824dc:	b118      	cbz	r0, 80824e6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 80824de:	4620      	mov	r0, r4
 80824e0:	f7ff fe95 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return true;
 80824e4:	e003      	b.n	80824ee <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 80824e6:	4620      	mov	r0, r4
 80824e8:	f7ff fe91 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80824ec:	2500      	movs	r5, #0
}
 80824ee:	4628      	mov	r0, r5
 80824f0:	bd38      	pop	{r3, r4, r5, pc}

080824f2 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80824f2:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80824f4:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80824f6:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80824f8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80824fa:	bf18      	it	ne
 80824fc:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 80824fe:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8082500:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8082502:	f7ff fedd 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 8082506:	b130      	cbz	r0, 8082516 <_ZN9SdSpiCard9readStartEm+0x24>
 8082508:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 808250a:	4620      	mov	r0, r4
 808250c:	7023      	strb	r3, [r4, #0]
 808250e:	f7ff fe7e 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082512:	2000      	movs	r0, #0
 8082514:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 8082516:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8082518:	bd10      	pop	{r4, pc}

0808251a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 808251a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 808251c:	2200      	movs	r2, #0
 808251e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8082520:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8082522:	f7ff fecd 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 8082526:	b130      	cbz	r0, 8082536 <_ZN9SdSpiCard8readStopEv+0x1c>
 8082528:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 808252a:	4620      	mov	r0, r4
 808252c:	7023      	strb	r3, [r4, #0]
 808252e:	f7ff fe6e 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082532:	2000      	movs	r0, #0
 8082534:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 8082536:	4620      	mov	r0, r4
 8082538:	f7ff fe69 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return true;
 808253c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 808253e:	bd10      	pop	{r4, pc}

08082540 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8082540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082542:	4605      	mov	r5, r0
 8082544:	4616      	mov	r6, r2
 8082546:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8082548:	f7ff ffd3 	bl	80824f2 <_ZN9SdSpiCard9readStartEm>
 808254c:	b198      	cbz	r0, 8082576 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 808254e:	2400      	movs	r4, #0
 8082550:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8082552:	429f      	cmp	r7, r3
 8082554:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8082558:	d908      	bls.n	808256c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 808255a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808255e:	4628      	mov	r0, r5
 8082560:	f7ff fe68 	bl	8082234 <_ZN9SdSpiCard8readDataEPhj>
 8082564:	3401      	adds	r4, #1
 8082566:	2800      	cmp	r0, #0
 8082568:	d1f2      	bne.n	8082550 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 808256a:	e004      	b.n	8082576 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 808256c:	4628      	mov	r0, r5
}
 808256e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8082572:	f7ff bfd2 	b.w	808251a <_ZN9SdSpiCard8readStopEv>
}
 8082576:	2000      	movs	r0, #0
 8082578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808257a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 808257a:	b538      	push	{r3, r4, r5, lr}
 808257c:	4604      	mov	r4, r0
 808257e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082580:	6840      	ldr	r0, [r0, #4]
 8082582:	f000 f8eb 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 8082586:	f44f 7200 	mov.w	r2, #512	; 0x200
 808258a:	4629      	mov	r1, r5
 808258c:	6860      	ldr	r0, [r4, #4]
 808258e:	f000 f8e9 	bl	8082764 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082592:	21ff      	movs	r1, #255	; 0xff
 8082594:	6860      	ldr	r0, [r4, #4]
 8082596:	f000 f8e1 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
 808259a:	21ff      	movs	r1, #255	; 0xff
 808259c:	6860      	ldr	r0, [r4, #4]
 808259e:	f000 f8dd 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80825a2:	6860      	ldr	r0, [r4, #4]
 80825a4:	f000 f8bf 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 80825a8:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80825aa:	f000 001f 	and.w	r0, r0, #31
 80825ae:	2805      	cmp	r0, #5
 80825b0:	d006      	beq.n	80825c0 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80825b2:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 80825b4:	4620      	mov	r0, r4
 80825b6:	7023      	strb	r3, [r4, #0]
 80825b8:	f7ff fe29 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80825bc:	2000      	movs	r0, #0
 80825be:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 80825c0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80825c2:	bd38      	pop	{r3, r4, r5, pc}

080825c4 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80825c4:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80825c6:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80825c8:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80825ca:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80825cc:	bf18      	it	ne
 80825ce:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 80825d0:	460a      	mov	r2, r1
 80825d2:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80825d4:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 80825d6:	f7ff fe73 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 80825da:	4606      	mov	r6, r0
 80825dc:	b108      	cbz	r0, 80825e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 80825de:	2332      	movs	r3, #50	; 0x32
 80825e0:	e01d      	b.n	808261e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 80825e2:	462a      	mov	r2, r5
 80825e4:	21fe      	movs	r1, #254	; 0xfe
 80825e6:	4620      	mov	r0, r4
 80825e8:	f7ff ffc7 	bl	808257a <_ZN9SdSpiCard9writeDataEhPKh>
 80825ec:	b1c0      	cbz	r0, 8082620 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80825ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80825f2:	4620      	mov	r0, r4
 80825f4:	f7ff fe4f 	bl	8082296 <_ZN9SdSpiCard11waitNotBusyEt>
 80825f8:	4605      	mov	r5, r0
 80825fa:	b908      	cbnz	r0, 8082600 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 80825fc:	235a      	movs	r3, #90	; 0x5a
 80825fe:	e00e      	b.n	808261e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 8082600:	4632      	mov	r2, r6
 8082602:	210d      	movs	r1, #13
 8082604:	4620      	mov	r0, r4
 8082606:	f7ff fe5b 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 808260a:	b938      	cbnz	r0, 808261c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808260c:	6860      	ldr	r0, [r4, #4]
 808260e:	f000 f88a 	bl	8082726 <_ZN14SdSpiAltDriver7receiveEv>
 8082612:	b918      	cbnz	r0, 808261c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 8082614:	4620      	mov	r0, r4
 8082616:	f7ff fdfa 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return true;
 808261a:	e005      	b.n	8082628 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808261c:	2329      	movs	r3, #41	; 0x29
 808261e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 8082620:	4620      	mov	r0, r4
 8082622:	f7ff fdf4 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082626:	2500      	movs	r5, #0
}
 8082628:	4628      	mov	r0, r5
 808262a:	bd70      	pop	{r4, r5, r6, pc}

0808262c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 808262c:	b538      	push	{r3, r4, r5, lr}
 808262e:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082630:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8082634:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082636:	f7ff fe2e 	bl	8082296 <_ZN9SdSpiCard11waitNotBusyEt>
 808263a:	b910      	cbnz	r0, 8082642 <_ZN9SdSpiCard9writeDataEPKh+0x16>
 808263c:	235b      	movs	r3, #91	; 0x5b
 808263e:	7023      	strb	r3, [r4, #0]
 8082640:	e005      	b.n	808264e <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8082642:	462a      	mov	r2, r5
 8082644:	21fc      	movs	r1, #252	; 0xfc
 8082646:	4620      	mov	r0, r4
 8082648:	f7ff ff97 	bl	808257a <_ZN9SdSpiCard9writeDataEhPKh>
 808264c:	b918      	cbnz	r0, 8082656 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 808264e:	4620      	mov	r0, r4
 8082650:	f7ff fddd 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082654:	2000      	movs	r0, #0
}
 8082656:	bd38      	pop	{r3, r4, r5, pc}

08082658 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082658:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808265a:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 808265c:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808265e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8082660:	bf18      	it	ne
 8082662:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8082664:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8082666:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8082668:	f7ff fe2a 	bl	80822c0 <_ZN9SdSpiCard11cardCommandEhm>
 808266c:	b130      	cbz	r0, 808267c <_ZN9SdSpiCard10writeStartEm+0x24>
 808266e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 8082670:	4620      	mov	r0, r4
 8082672:	7023      	strb	r3, [r4, #0]
 8082674:	f7ff fdcb 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8082678:	2000      	movs	r0, #0
 808267a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 808267c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 808267e:	bd10      	pop	{r4, pc}

08082680 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8082680:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082682:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8082686:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8082688:	f7ff fe05 	bl	8082296 <_ZN9SdSpiCard11waitNotBusyEt>
 808268c:	4605      	mov	r5, r0
 808268e:	b120      	cbz	r0, 808269a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8082690:	21fd      	movs	r1, #253	; 0xfd
 8082692:	6860      	ldr	r0, [r4, #4]
 8082694:	f000 f862 	bl	808275c <_ZN14SdSpiAltDriver4sendEh>
 8082698:	e001      	b.n	808269e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808269a:	2356      	movs	r3, #86	; 0x56
 808269c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 808269e:	4620      	mov	r0, r4
 80826a0:	f7ff fdb5 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80826a4:	4628      	mov	r0, r5
 80826a6:	bd38      	pop	{r3, r4, r5, pc}

080826a8 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80826a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80826aa:	4605      	mov	r5, r0
 80826ac:	4616      	mov	r6, r2
 80826ae:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 80826b0:	f7ff ffd2 	bl	8082658 <_ZN9SdSpiCard10writeStartEm>
 80826b4:	b170      	cbz	r0, 80826d4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 80826b6:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80826b8:	42bc      	cmp	r4, r7
 80826ba:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80826be:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80826c0:	d004      	beq.n	80826cc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 80826c2:	f7ff ffb3 	bl	808262c <_ZN9SdSpiCard9writeDataEPKh>
 80826c6:	b128      	cbz	r0, 80826d4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80826c8:	3401      	adds	r4, #1
 80826ca:	e7f5      	b.n	80826b8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 80826cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80826d0:	f7ff bfd6 	b.w	8082680 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 80826d4:	4628      	mov	r0, r5
 80826d6:	f7ff fd9a 	bl	808220e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80826da:	2000      	movs	r0, #0
 80826dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080826de <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 80826de:	f000 becb 	b.w	8083478 <HAL_Pin_Map>

080826e2 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 80826e2:	f000 bec9 	b.w	8083478 <HAL_Pin_Map>

080826e6 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 80826e6:	f000 bec7 	b.w	8083478 <HAL_Pin_Map>
	...

080826ec <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80826ec:	4b01      	ldr	r3, [pc, #4]	; (80826f4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80826ee:	2201      	movs	r2, #1
 80826f0:	701a      	strb	r2, [r3, #0]
 80826f2:	4770      	bx	lr
 80826f4:	20000454 	.word	0x20000454

080826f8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 80826f8:	1d01      	adds	r1, r0, #4
 80826fa:	6800      	ldr	r0, [r0, #0]
 80826fc:	f001 b9fc 	b.w	8083af8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

08082700 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 8082700:	b510      	push	{r4, lr}
 8082702:	4604      	mov	r4, r0
  m_csPin = csPin;
 8082704:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 8082706:	6800      	ldr	r0, [r0, #0]
 8082708:	f001 f9ca 	bl	8083aa0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 808270c:	7d20      	ldrb	r0, [r4, #20]
 808270e:	2101      	movs	r1, #1
 8082710:	f002 fd45 	bl	808519e <pinMode>
  digitalWrite(m_csPin, HIGH);
 8082714:	7d20      	ldrb	r0, [r4, #20]
 8082716:	2101      	movs	r1, #1
}
 8082718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 808271c:	f002 bd50 	b.w	80851c0 <digitalWrite>

08082720 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 8082720:	6800      	ldr	r0, [r0, #0]
 8082722:	f001 b9cd 	b.w	8083ac0 <_ZN8SPIClass14endTransactionEv>

08082726 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 8082726:	21ff      	movs	r1, #255	; 0xff
 8082728:	6800      	ldr	r0, [r0, #0]
 808272a:	f001 ba54 	b.w	8083bd6 <_ZN8SPIClass8transferEh>
	...

08082730 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 8082730:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082732:	4b08      	ldr	r3, [pc, #32]	; (8082754 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082734:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082736:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082738:	4c07      	ldr	r4, [pc, #28]	; (8082758 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808273a:	4613      	mov	r3, r2
 808273c:	6800      	ldr	r0, [r0, #0]
 808273e:	460a      	mov	r2, r1
 8082740:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082742:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8082744:	f001 fa59 	bl	8083bfa <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8082748:	7823      	ldrb	r3, [r4, #0]
 808274a:	2b00      	cmp	r3, #0
 808274c:	d0fc      	beq.n	8082748 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 808274e:	2000      	movs	r0, #0
 8082750:	b003      	add	sp, #12
 8082752:	bd30      	pop	{r4, r5, pc}
 8082754:	080826ed 	.word	0x080826ed
 8082758:	20000454 	.word	0x20000454

0808275c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 808275c:	6800      	ldr	r0, [r0, #0]
 808275e:	f001 ba3a 	b.w	8083bd6 <_ZN8SPIClass8transferEh>
	...

08082764 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 8082764:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082766:	4b07      	ldr	r3, [pc, #28]	; (8082784 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082768:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808276a:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 808276c:	4c06      	ldr	r4, [pc, #24]	; (8082788 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808276e:	4613      	mov	r3, r2
 8082770:	6800      	ldr	r0, [r0, #0]
 8082772:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8082774:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8082776:	f001 fa40 	bl	8083bfa <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 808277a:	7823      	ldrb	r3, [r4, #0]
 808277c:	2b00      	cmp	r3, #0
 808277e:	d0fc      	beq.n	808277a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 8082780:	b003      	add	sp, #12
 8082782:	bd30      	pop	{r4, r5, pc}
 8082784:	080826ed 	.word	0x080826ed
 8082788:	20000454 	.word	0x20000454

0808278c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 808278c:	f000 be74 	b.w	8083478 <HAL_Pin_Map>

08082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>:
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::initDataValue(nmea_index_t idx, char *label, char *fmt,
                                 char *unit, unsigned long response,
                                 nmea_value_type_t type) {
 8082790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082792:	b085      	sub	sp, #20
 8082794:	4605      	mov	r5, r0
 8082796:	460c      	mov	r4, r1
 8082798:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 808279a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808279c:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
      val[idx].response = response;
    val[idx].type = type;
    if ((int)(val[idx].type / 10) ==
        1) { // angle with sin/cos component recording
      initDataValue((nmea_index_t)(
          idx + 1)); // initialize the next two data values as well
 80827a0:	2600      	movs	r6, #0
*/
/**************************************************************************/
void Adafruit_GPS::initDataValue(nmea_index_t idx, char *label, char *fmt,
                                 char *unit, unsigned long response,
                                 nmea_value_type_t type) {
  if (idx < NMEA_MAX_INDEX) {
 80827a2:	2c3f      	cmp	r4, #63	; 0x3f
 80827a4:	d82a      	bhi.n	80827fc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x6c>
    if (label)
 80827a6:	b11a      	cbz	r2, 80827b0 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x20>
      val[idx].label = label;
 80827a8:	eb05 1e44 	add.w	lr, r5, r4, lsl #5
 80827ac:	f8ce 20a4 	str.w	r2, [lr, #164]	; 0xa4
 80827b0:	0162      	lsls	r2, r4, #5
    if (fmt)
 80827b2:	b11b      	cbz	r3, 80827bc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x2c>
      val[idx].fmt = fmt;
 80827b4:	eb05 0e02 	add.w	lr, r5, r2
 80827b8:	f8ce 30ac 	str.w	r3, [lr, #172]	; 0xac
    if (unit)
 80827bc:	b117      	cbz	r7, 80827c4 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x34>
      val[idx].unit = unit;
 80827be:	18ab      	adds	r3, r5, r2
 80827c0:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
    if (response)
 80827c4:	b110      	cbz	r0, 80827cc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x3c>
      val[idx].response = response;
 80827c6:	18ab      	adds	r3, r5, r2
 80827c8:	f8a3 009c 	strh.w	r0, [r3, #156]	; 0x9c
    val[idx].type = type;
 80827cc:	442a      	add	r2, r5
 80827ce:	f882 109e 	strb.w	r1, [r2, #158]	; 0x9e
    if ((int)(val[idx].type / 10) ==
 80827d2:	390a      	subs	r1, #10
 80827d4:	2909      	cmp	r1, #9
 80827d6:	d811      	bhi.n	80827fc <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x6c>
        1) { // angle with sin/cos component recording
      initDataValue((nmea_index_t)(
          idx + 1)); // initialize the next two data values as well
 80827d8:	2300      	movs	r3, #0
 80827da:	1c61      	adds	r1, r4, #1
 80827dc:	461a      	mov	r2, r3
 80827de:	b2c9      	uxtb	r1, r1
 80827e0:	4628      	mov	r0, r5
 80827e2:	9602      	str	r6, [sp, #8]
 80827e4:	9601      	str	r6, [sp, #4]
 80827e6:	9600      	str	r6, [sp, #0]
 80827e8:	f7ff ffd2 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
      initDataValue((nmea_index_t)(idx + 2));
 80827ec:	3402      	adds	r4, #2
 80827ee:	2200      	movs	r2, #0
 80827f0:	b2e4      	uxtb	r4, r4
 80827f2:	4613      	mov	r3, r2
 80827f4:	4617      	mov	r7, r2
 80827f6:	4610      	mov	r0, r2
 80827f8:	4611      	mov	r1, r2
 80827fa:	e7d2      	b.n	80827a2 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t+0x12>
    }
  }
}
 80827fc:	b005      	add	sp, #20
 80827fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082800 <_ZN12Adafruit_GPS9data_initEv>:
    sketch to decide which data values should carry the extra memory burden
    of history.
    @return   none
*/
/**************************************************************************/
void Adafruit_GPS::data_init() {
 8082800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
 8082804:	2600      	movs	r6, #0
    sketch to decide which data values should carry the extra memory burden
    of history.
    @return   none
*/
/**************************************************************************/
void Adafruit_GPS::data_init() {
 8082806:	4605      	mov	r5, r0
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
 8082808:	4637      	mov	r7, r6
    sketch to decide which data values should carry the extra memory burden
    of history.
    @return   none
*/
/**************************************************************************/
void Adafruit_GPS::data_init() {
 808280a:	b085      	sub	sp, #20
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
 808280c:	2400      	movs	r4, #0
 808280e:	b2f1      	uxtb	r1, r6
 8082810:	9702      	str	r7, [sp, #8]
 8082812:	9701      	str	r7, [sp, #4]
 8082814:	9700      	str	r7, [sp, #0]
 8082816:	4623      	mov	r3, r4
 8082818:	4ab0      	ldr	r2, [pc, #704]	; (8082adc <_ZN12Adafruit_GPS9data_initEv+0x2dc>)
 808281a:	4628      	mov	r0, r5
/**************************************************************************/
void Adafruit_GPS::data_init() {
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
 808281c:	3601      	adds	r6, #1
    initDataValue((nmea_index_t)i, c, NULL, NULL, 0, (nmea_value_type_t)0);
 808281e:	f7ff ffb7 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
/**************************************************************************/
void Adafruit_GPS::data_init() {
#ifdef NMEA_EXTENSIONS
  // fill all the data values with nothing
  static char c[] = "NUL";
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++) {
 8082822:	2e40      	cmp	r6, #64	; 0x40
 8082824:	d1f2      	bne.n	808280c <_ZN12Adafruit_GPS9data_initEv+0xc>
  static char LATlabel[] = "Lat";
  static char LATfmt[] = "%9.4f";
  static char LATunit[] = "DDD.dddd";
  initDataValue(
      NMEA_LAT, LATlabel, LATfmt, LATunit, 0,
      NMEA_BOAT_ANGLE); // angle from -180 to 180, or actually -90 to 90 for lat
 8082826:	4fae      	ldr	r7, [pc, #696]	; (8082ae0 <_ZN12Adafruit_GPS9data_initEv+0x2e0>)
 8082828:	2602      	movs	r6, #2
  static char BoatAngleunit[] = "Degrees";
  static char TrueAngleunit[] = "Deg True";
  static char MagAngleunit[] = "Deg Mag";

  static char HDOPlabel[] = "HDOP";
  initDataValue(NMEA_HDOP, HDOPlabel);
 808282a:	4623      	mov	r3, r4
 808282c:	4621      	mov	r1, r4
 808282e:	4628      	mov	r0, r5
 8082830:	9402      	str	r4, [sp, #8]
 8082832:	9401      	str	r4, [sp, #4]
 8082834:	9400      	str	r4, [sp, #0]
 8082836:	4aab      	ldr	r2, [pc, #684]	; (8082ae4 <_ZN12Adafruit_GPS9data_initEv+0x2e4>)
 8082838:	f7ff ffaa 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  static char LATlabel[] = "Lat";
  static char LATfmt[] = "%9.4f";
  static char LATunit[] = "DDD.dddd";
  initDataValue(
      NMEA_LAT, LATlabel, LATfmt, LATunit, 0,
      NMEA_BOAT_ANGLE); // angle from -180 to 180, or actually -90 to 90 for lat
 808283c:	9602      	str	r6, [sp, #8]
 808283e:	9700      	str	r7, [sp, #0]
 8082840:	4628      	mov	r0, r5
 8082842:	9401      	str	r4, [sp, #4]
 8082844:	4ba8      	ldr	r3, [pc, #672]	; (8082ae8 <_ZN12Adafruit_GPS9data_initEv+0x2e8>)
 8082846:	4aa9      	ldr	r2, [pc, #676]	; (8082aec <_ZN12Adafruit_GPS9data_initEv+0x2ec>)
 8082848:	2101      	movs	r1, #1
 808284a:	f7ff ffa1 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LONlabel[] = "Lon";
  initDataValue(NMEA_LON, LONlabel, LATfmt, LATunit, 0,
                NMEA_BOAT_ANGLE); // angle from -180 to 180
 808284e:	9602      	str	r6, [sp, #8]
 8082850:	9700      	str	r7, [sp, #0]
 8082852:	4631      	mov	r1, r6
 8082854:	4628      	mov	r0, r5
 8082856:	9401      	str	r4, [sp, #4]
 8082858:	4ba3      	ldr	r3, [pc, #652]	; (8082ae8 <_ZN12Adafruit_GPS9data_initEv+0x2e8>)
 808285a:	4aa5      	ldr	r2, [pc, #660]	; (8082af0 <_ZN12Adafruit_GPS9data_initEv+0x2f0>)
 808285c:	f7ff ff98 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LATWPlabel[] = "WP Lat";
  initDataValue(NMEA_LATWP, LATWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
 8082860:	9602      	str	r6, [sp, #8]
 8082862:	9700      	str	r7, [sp, #0]
 8082864:	4628      	mov	r0, r5
 8082866:	9401      	str	r4, [sp, #4]
 8082868:	4b9f      	ldr	r3, [pc, #636]	; (8082ae8 <_ZN12Adafruit_GPS9data_initEv+0x2e8>)
 808286a:	4aa2      	ldr	r2, [pc, #648]	; (8082af4 <_ZN12Adafruit_GPS9data_initEv+0x2f4>)
 808286c:	2103      	movs	r1, #3
 808286e:	f7ff ff8f 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LONWPlabel[] = "WP Lon";
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
 8082872:	9700      	str	r7, [sp, #0]

  static char SOGlabel[] = "SOG";
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);
 8082874:	4fa0      	ldr	r7, [pc, #640]	; (8082af8 <_ZN12Adafruit_GPS9data_initEv+0x2f8>)

  static char COGlabel[] = "COG";
  // types with sin/cos need two extra spots in the values matrix!
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
 8082876:	f8df 9344 	ldr.w	r9, [pc, #836]	; 8082bbc <_ZN12Adafruit_GPS9data_initEv+0x3bc>

  static char LATWPlabel[] = "WP Lat";
  initDataValue(NMEA_LATWP, LATWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);

  static char LONWPlabel[] = "WP Lon";
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);
 808287a:	9602      	str	r6, [sp, #8]
 808287c:	4628      	mov	r0, r5
 808287e:	9401      	str	r4, [sp, #4]
 8082880:	4b99      	ldr	r3, [pc, #612]	; (8082ae8 <_ZN12Adafruit_GPS9data_initEv+0x2e8>)
 8082882:	4a9e      	ldr	r2, [pc, #632]	; (8082afc <_ZN12Adafruit_GPS9data_initEv+0x2fc>)
 8082884:	2104      	movs	r1, #4
 8082886:	f7ff ff83 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);

  static char COGlabel[] = "COG";
  // types with sin/cos need two extra spots in the values matrix!
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
 808288a:	f04f 080b 	mov.w	r8, #11

  static char LONWPlabel[] = "WP Lon";
  initDataValue(NMEA_LONWP, LONWPlabel, LATfmt, LATunit, 0, NMEA_BOAT_ANGLE);

  static char SOGlabel[] = "SOG";
  initDataValue(NMEA_SOG, SOGlabel, BoatSpeedfmt, Speedunit);
 808288e:	9700      	str	r7, [sp, #0]
 8082890:	4628      	mov	r0, r5
 8082892:	9402      	str	r4, [sp, #8]
 8082894:	9401      	str	r4, [sp, #4]
 8082896:	4b9a      	ldr	r3, [pc, #616]	; (8082b00 <_ZN12Adafruit_GPS9data_initEv+0x300>)
 8082898:	4a9a      	ldr	r2, [pc, #616]	; (8082b04 <_ZN12Adafruit_GPS9data_initEv+0x304>)
 808289a:	2105      	movs	r1, #5
 808289c:	f7ff ff78 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char COGlabel[] = "COG";
  // types with sin/cos need two extra spots in the values matrix!
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
 80828a0:	f8cd 8008 	str.w	r8, [sp, #8]
 80828a4:	f8cd 9000 	str.w	r9, [sp]
 80828a8:	4628      	mov	r0, r5
 80828aa:	9401      	str	r4, [sp, #4]
 80828ac:	4b96      	ldr	r3, [pc, #600]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 80828ae:	4a97      	ldr	r2, [pc, #604]	; (8082b0c <_ZN12Adafruit_GPS9data_initEv+0x30c>)
 80828b0:	2106      	movs	r1, #6
 80828b2:	f7ff ff6d 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
                NMEA_COMPASS_ANGLE); // type: angle 0-360 1

  static char XTElabel[] = "XTE";
  static char XTEfmt[] = "%6.2f";
  static char XTEunit[] = "NM";
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);
 80828b6:	f8df a308 	ldr.w	sl, [pc, #776]	; 8082bc0 <_ZN12Adafruit_GPS9data_initEv+0x3c0>
  initDataValue(NMEA_COG, COGlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11

  static char COGWPlabel[] = "WP COG";
  initDataValue(NMEA_COGWP, COGWPlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE); // type: angle 0-360 1
 80828ba:	2301      	movs	r3, #1
 80828bc:	9302      	str	r3, [sp, #8]
 80828be:	f8cd 9000 	str.w	r9, [sp]
 80828c2:	4628      	mov	r0, r5
 80828c4:	9401      	str	r4, [sp, #4]
 80828c6:	4b90      	ldr	r3, [pc, #576]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 80828c8:	4a91      	ldr	r2, [pc, #580]	; (8082b10 <_ZN12Adafruit_GPS9data_initEv+0x310>)
 80828ca:	2109      	movs	r1, #9
 80828cc:	f7ff ff60 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  static char DISTWPlabel[] = "WP Dist";
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);

  static char AWAlabel[] = "AWA";
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
 80828d0:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 8082bc4 <_ZN12Adafruit_GPS9data_initEv+0x3c4>
                NMEA_COMPASS_ANGLE); // type: angle 0-360 1

  static char XTElabel[] = "XTE";
  static char XTEfmt[] = "%6.2f";
  static char XTEunit[] = "NM";
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);
 80828d4:	f8cd a000 	str.w	sl, [sp]
 80828d8:	4628      	mov	r0, r5
 80828da:	9402      	str	r4, [sp, #8]
 80828dc:	9401      	str	r4, [sp, #4]
 80828de:	4b8d      	ldr	r3, [pc, #564]	; (8082b14 <_ZN12Adafruit_GPS9data_initEv+0x314>)
 80828e0:	4a8d      	ldr	r2, [pc, #564]	; (8082b18 <_ZN12Adafruit_GPS9data_initEv+0x318>)
 80828e2:	210a      	movs	r1, #10
 80828e4:	f7ff ff54 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char DISTWPlabel[] = "WP Dist";
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);
 80828e8:	f8cd a000 	str.w	sl, [sp]
 80828ec:	4641      	mov	r1, r8

  static char AWAlabel[] = "AWA";
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
 80828ee:	f04f 0a0c 	mov.w	sl, #12
  static char XTEfmt[] = "%6.2f";
  static char XTEunit[] = "NM";
  initDataValue(NMEA_XTE, XTElabel, XTEfmt, XTEunit);

  static char DISTWPlabel[] = "WP Dist";
  initDataValue(NMEA_DISTWP, DISTWPlabel, XTEfmt, XTEunit);
 80828f2:	4628      	mov	r0, r5
 80828f4:	9402      	str	r4, [sp, #8]
 80828f6:	9401      	str	r4, [sp, #4]
 80828f8:	4b86      	ldr	r3, [pc, #536]	; (8082b14 <_ZN12Adafruit_GPS9data_initEv+0x314>)
 80828fa:	4a88      	ldr	r2, [pc, #544]	; (8082b1c <_ZN12Adafruit_GPS9data_initEv+0x31c>)
 80828fc:	f7ff ff48 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char AWAlabel[] = "AWA";
  initDataValue(NMEA_AWA, AWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
 8082900:	f8cd a008 	str.w	sl, [sp, #8]
 8082904:	4651      	mov	r1, sl
 8082906:	4628      	mov	r0, r5
 8082908:	9401      	str	r4, [sp, #4]
 808290a:	f8cd b000 	str.w	fp, [sp]
 808290e:	4b7e      	ldr	r3, [pc, #504]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 8082910:	4a83      	ldr	r2, [pc, #524]	; (8082b20 <_ZN12Adafruit_GPS9data_initEv+0x320>)
 8082912:	f7ff ff3d 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char AWSlabel[] = "AWS";
  initDataValue(NMEA_AWS, AWSlabel, WindSpeedfmt, Speedunit);
 8082916:	9700      	str	r7, [sp, #0]
 8082918:	4628      	mov	r0, r5
 808291a:	9402      	str	r4, [sp, #8]
 808291c:	9401      	str	r4, [sp, #4]
 808291e:	4b81      	ldr	r3, [pc, #516]	; (8082b24 <_ZN12Adafruit_GPS9data_initEv+0x324>)
 8082920:	4a81      	ldr	r2, [pc, #516]	; (8082b28 <_ZN12Adafruit_GPS9data_initEv+0x328>)
 8082922:	210f      	movs	r1, #15
 8082924:	f7ff ff34 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TWAlabel[] = "TWA";
  initDataValue(NMEA_TWA, TWAlabel, Anglefmt, BoatAngleunit, 0,
                NMEA_BOAT_ANGLE_SIN); // type: +-180 angle with sin/cos 12
 8082928:	f8cd a008 	str.w	sl, [sp, #8]
 808292c:	4628      	mov	r0, r5
 808292e:	9401      	str	r4, [sp, #4]
 8082930:	f8cd b000 	str.w	fp, [sp]
 8082934:	4b74      	ldr	r3, [pc, #464]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 8082936:	4a7d      	ldr	r2, [pc, #500]	; (8082b2c <_ZN12Adafruit_GPS9data_initEv+0x32c>)
 8082938:	2110      	movs	r1, #16
 808293a:	f7ff ff29 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TWDlabel[] = "TWD";
  initDataValue(NMEA_TWD, TWDlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
 808293e:	f8cd 8008 	str.w	r8, [sp, #8]
 8082942:	f8cd 9000 	str.w	r9, [sp]
 8082946:	4628      	mov	r0, r5
 8082948:	9401      	str	r4, [sp, #4]
 808294a:	4b6f      	ldr	r3, [pc, #444]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 808294c:	4a78      	ldr	r2, [pc, #480]	; (8082b30 <_ZN12Adafruit_GPS9data_initEv+0x330>)
 808294e:	2113      	movs	r1, #19
 8082950:	f7ff ff1e 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TWSlabel[] = "TWS";
  initDataValue(NMEA_TWS, TWSlabel, WindSpeedfmt, Speedunit);
 8082954:	9700      	str	r7, [sp, #0]
 8082956:	4628      	mov	r0, r5
 8082958:	9402      	str	r4, [sp, #8]
 808295a:	9401      	str	r4, [sp, #4]
 808295c:	4b71      	ldr	r3, [pc, #452]	; (8082b24 <_ZN12Adafruit_GPS9data_initEv+0x324>)
 808295e:	4a75      	ldr	r2, [pc, #468]	; (8082b34 <_ZN12Adafruit_GPS9data_initEv+0x334>)
 8082960:	2116      	movs	r1, #22
 8082962:	f7ff ff15 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VMGlabel[] = "VMG";
  initDataValue(NMEA_VMG, VMGlabel, BoatSpeedfmt, Speedunit);
 8082966:	9700      	str	r7, [sp, #0]
 8082968:	4628      	mov	r0, r5
 808296a:	9402      	str	r4, [sp, #8]
 808296c:	9401      	str	r4, [sp, #4]
 808296e:	4b64      	ldr	r3, [pc, #400]	; (8082b00 <_ZN12Adafruit_GPS9data_initEv+0x300>)
 8082970:	4a71      	ldr	r2, [pc, #452]	; (8082b38 <_ZN12Adafruit_GPS9data_initEv+0x338>)
 8082972:	2117      	movs	r1, #23
 8082974:	f7ff ff0c 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VMGWPlabel[] = "WP VMG";
  initDataValue(NMEA_VMGWP, VMGWPlabel, BoatSpeedfmt, Speedunit);
 8082978:	9700      	str	r7, [sp, #0]
 808297a:	4628      	mov	r0, r5
 808297c:	9402      	str	r4, [sp, #8]
 808297e:	9401      	str	r4, [sp, #4]
 8082980:	4b5f      	ldr	r3, [pc, #380]	; (8082b00 <_ZN12Adafruit_GPS9data_initEv+0x300>)
 8082982:	4a6e      	ldr	r2, [pc, #440]	; (8082b3c <_ZN12Adafruit_GPS9data_initEv+0x33c>)
 8082984:	2118      	movs	r1, #24
 8082986:	f7ff ff03 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char HEELlabel[] = "Heel";
  static char HEELunit[] = "Deg Stbd";
  initDataValue(NMEA_HEEL, HEELlabel, Anglefmt, HEELunit, 0,
                NMEA_BOAT_ANGLE); // type: angle +/-180 2
 808298a:	4b6d      	ldr	r3, [pc, #436]	; (8082b40 <_ZN12Adafruit_GPS9data_initEv+0x340>)
 808298c:	9602      	str	r6, [sp, #8]
 808298e:	9300      	str	r3, [sp, #0]
 8082990:	4628      	mov	r0, r5
 8082992:	9401      	str	r4, [sp, #4]
 8082994:	4b5c      	ldr	r3, [pc, #368]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 8082996:	4a6b      	ldr	r2, [pc, #428]	; (8082b44 <_ZN12Adafruit_GPS9data_initEv+0x344>)
 8082998:	2119      	movs	r1, #25
 808299a:	f7ff fef9 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char PITCHlabel[] = "Pitch";
  static char PITCHunit[] = "Deg Bow Up";
  initDataValue(NMEA_PITCH, PITCHlabel, Anglefmt, PITCHunit, 0,
                NMEA_BOAT_ANGLE); // type: angle +/-180 2
 808299e:	4b6a      	ldr	r3, [pc, #424]	; (8082b48 <_ZN12Adafruit_GPS9data_initEv+0x348>)
 80829a0:	9602      	str	r6, [sp, #8]
 80829a2:	9300      	str	r3, [sp, #0]
 80829a4:	4628      	mov	r0, r5
 80829a6:	9401      	str	r4, [sp, #4]
 80829a8:	4b57      	ldr	r3, [pc, #348]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 80829aa:	4a68      	ldr	r2, [pc, #416]	; (8082b4c <_ZN12Adafruit_GPS9data_initEv+0x34c>)
 80829ac:	211a      	movs	r1, #26
 80829ae:	f7ff feef 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  static char HDGlabel[] = "HDG";
  initDataValue(NMEA_HDG, HDGlabel, Anglefmt, MagAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
 80829b2:	4b67      	ldr	r3, [pc, #412]	; (8082b50 <_ZN12Adafruit_GPS9data_initEv+0x350>)
 80829b4:	f8cd 8008 	str.w	r8, [sp, #8]
 80829b8:	9300      	str	r3, [sp, #0]
 80829ba:	4628      	mov	r0, r5
 80829bc:	9401      	str	r4, [sp, #4]
 80829be:	4b52      	ldr	r3, [pc, #328]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 80829c0:	4a64      	ldr	r2, [pc, #400]	; (8082b54 <_ZN12Adafruit_GPS9data_initEv+0x354>)
 80829c2:	211b      	movs	r1, #27
 80829c4:	f7ff fee4 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
  initDataValue(NMEA_VTW, VTWlabel, BoatSpeedfmt, Speedunit);

  static char LOGlabel[] = "Log";
  static char LOGfmt[] = "%6.0f";
  static char LOGunit[] = "NM";
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);
 80829c8:	4e63      	ldr	r6, [pc, #396]	; (8082b58 <_ZN12Adafruit_GPS9data_initEv+0x358>)
  initDataValue(NMEA_HDG, HDGlabel, Anglefmt, MagAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11

  static char HDTlabel[] = "HDG";
  initDataValue(NMEA_HDT, HDTlabel, Anglefmt, TrueAngleunit, 0,
                NMEA_COMPASS_ANGLE_SIN); // type: 0-360 angle with sin/cos 11
 80829ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80829ce:	f8cd 9000 	str.w	r9, [sp]
 80829d2:	4628      	mov	r0, r5
 80829d4:	9401      	str	r4, [sp, #4]
 80829d6:	4b4c      	ldr	r3, [pc, #304]	; (8082b08 <_ZN12Adafruit_GPS9data_initEv+0x308>)
 80829d8:	4a60      	ldr	r2, [pc, #384]	; (8082b5c <_ZN12Adafruit_GPS9data_initEv+0x35c>)
 80829da:	211e      	movs	r1, #30
 80829dc:	f7ff fed8 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VTWlabel[] = "VTW";
  initDataValue(NMEA_VTW, VTWlabel, BoatSpeedfmt, Speedunit);
 80829e0:	9700      	str	r7, [sp, #0]
 80829e2:	4628      	mov	r0, r5
 80829e4:	9402      	str	r4, [sp, #8]
 80829e6:	9401      	str	r4, [sp, #4]
 80829e8:	4b45      	ldr	r3, [pc, #276]	; (8082b00 <_ZN12Adafruit_GPS9data_initEv+0x300>)
 80829ea:	4a5d      	ldr	r2, [pc, #372]	; (8082b60 <_ZN12Adafruit_GPS9data_initEv+0x360>)
 80829ec:	2121      	movs	r1, #33	; 0x21
 80829ee:	f7ff fecf 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LOGlabel[] = "Log";
  static char LOGfmt[] = "%6.0f";
  static char LOGunit[] = "NM";
  initDataValue(NMEA_LOG, LOGlabel, LOGfmt, LOGunit);
 80829f2:	9600      	str	r6, [sp, #0]
 80829f4:	4628      	mov	r0, r5
 80829f6:	9402      	str	r4, [sp, #8]
 80829f8:	9401      	str	r4, [sp, #4]
 80829fa:	4b5a      	ldr	r3, [pc, #360]	; (8082b64 <_ZN12Adafruit_GPS9data_initEv+0x364>)
 80829fc:	4a5a      	ldr	r2, [pc, #360]	; (8082b68 <_ZN12Adafruit_GPS9data_initEv+0x368>)
 80829fe:	2122      	movs	r1, #34	; 0x22
 8082a00:	f7ff fec6 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char LOGRlabel[] = "Trip";
  static char LOGRfmt[] = "%6.2f";
  initDataValue(NMEA_LOG, LOGRlabel, LOGRfmt, LOGunit);
 8082a04:	9600      	str	r6, [sp, #0]
 8082a06:	4628      	mov	r0, r5
 8082a08:	9402      	str	r4, [sp, #8]
 8082a0a:	9401      	str	r4, [sp, #4]
 8082a0c:	4b57      	ldr	r3, [pc, #348]	; (8082b6c <_ZN12Adafruit_GPS9data_initEv+0x36c>)
 8082a0e:	4a58      	ldr	r2, [pc, #352]	; (8082b70 <_ZN12Adafruit_GPS9data_initEv+0x370>)
 8082a10:	2122      	movs	r1, #34	; 0x22
 8082a12:	f7ff febd 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char DEPTHlabel[] = "Depth";
  static char DEPTHfmt[] = "%6.1f";
  static char DEPTHunit[] = "m";
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);
 8082a16:	4b57      	ldr	r3, [pc, #348]	; (8082b74 <_ZN12Adafruit_GPS9data_initEv+0x374>)

  static char RPM_M1label[] = "Motor 1";
  static char RPM_M1fmt[] = "%6.0f";
  static char RPM_M1unit[] = "RPM";
  initDataValue(NMEA_RPM_M1, RPM_M1label, RPM_M1fmt, RPM_M1unit);
 8082a18:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8082bc8 <_ZN12Adafruit_GPS9data_initEv+0x3c8>
  initDataValue(NMEA_LOG, LOGRlabel, LOGRfmt, LOGunit);

  static char DEPTHlabel[] = "Depth";
  static char DEPTHfmt[] = "%6.1f";
  static char DEPTHunit[] = "m";
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);
 8082a1c:	9300      	str	r3, [sp, #0]
 8082a1e:	4628      	mov	r0, r5

  static char TEMPERATURE_M1label[] = "Temp 1";
  static char TEMPERATURE_M1fmt[] = "%6.0f";
  static char TEMPERATURE_M1unit[] = "Deg C";
  initDataValue(NMEA_TEMPERATURE_M1, TEMPERATURE_M1label, TEMPERATURE_M1fmt,
                TEMPERATURE_M1unit);
 8082a20:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8082bcc <_ZN12Adafruit_GPS9data_initEv+0x3cc>
  initDataValue(NMEA_LOG, LOGRlabel, LOGRfmt, LOGunit);

  static char DEPTHlabel[] = "Depth";
  static char DEPTHfmt[] = "%6.1f";
  static char DEPTHunit[] = "m";
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);
 8082a24:	9402      	str	r4, [sp, #8]
 8082a26:	9401      	str	r4, [sp, #4]
 8082a28:	4b53      	ldr	r3, [pc, #332]	; (8082b78 <_ZN12Adafruit_GPS9data_initEv+0x378>)
 8082a2a:	4a54      	ldr	r2, [pc, #336]	; (8082b7c <_ZN12Adafruit_GPS9data_initEv+0x37c>)
 8082a2c:	2124      	movs	r1, #36	; 0x24
 8082a2e:	f7ff feaf 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char PRESSURE_M1label[] = "Oil 1";
  static char PRESSURE_M1fmt[] = "%6.0f";
  static char PRESSURE_M1unit[] = "kPa";
  initDataValue(NMEA_PRESSURE_M1, PRESSURE_M1label, PRESSURE_M1fmt,
                PRESSURE_M1unit);
 8082a32:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8082bd0 <_ZN12Adafruit_GPS9data_initEv+0x3d0>
  initDataValue(NMEA_DEPTH, DEPTHlabel, DEPTHfmt, DEPTHunit);

  static char RPM_M1label[] = "Motor 1";
  static char RPM_M1fmt[] = "%6.0f";
  static char RPM_M1unit[] = "RPM";
  initDataValue(NMEA_RPM_M1, RPM_M1label, RPM_M1fmt, RPM_M1unit);
 8082a36:	4628      	mov	r0, r5
 8082a38:	9402      	str	r4, [sp, #8]
 8082a3a:	9401      	str	r4, [sp, #4]
 8082a3c:	f8cd a000 	str.w	sl, [sp]
 8082a40:	4b4f      	ldr	r3, [pc, #316]	; (8082b80 <_ZN12Adafruit_GPS9data_initEv+0x380>)
 8082a42:	4a50      	ldr	r2, [pc, #320]	; (8082b84 <_ZN12Adafruit_GPS9data_initEv+0x384>)
 8082a44:	2125      	movs	r1, #37	; 0x25
 8082a46:	f7ff fea3 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VOLTAGE_M1label[] = "Motor 1";
  static char VOLTAGE_M1fmt[] = "%6.2f";
  static char VOLTAGE_M1unit[] = "Volts";
  initDataValue(NMEA_VOLTAGE_M1, VOLTAGE_M1label, VOLTAGE_M1fmt,
                VOLTAGE_M1unit);
 8082a4a:	4f4f      	ldr	r7, [pc, #316]	; (8082b88 <_ZN12Adafruit_GPS9data_initEv+0x388>)

  static char TEMPERATURE_M1label[] = "Temp 1";
  static char TEMPERATURE_M1fmt[] = "%6.0f";
  static char TEMPERATURE_M1unit[] = "Deg C";
  initDataValue(NMEA_TEMPERATURE_M1, TEMPERATURE_M1label, TEMPERATURE_M1fmt,
                TEMPERATURE_M1unit);
 8082a4c:	4628      	mov	r0, r5
 8082a4e:	9402      	str	r4, [sp, #8]
 8082a50:	9401      	str	r4, [sp, #4]
 8082a52:	f8cd 9000 	str.w	r9, [sp]
 8082a56:	4b4d      	ldr	r3, [pc, #308]	; (8082b8c <_ZN12Adafruit_GPS9data_initEv+0x38c>)
 8082a58:	4a4d      	ldr	r2, [pc, #308]	; (8082b90 <_ZN12Adafruit_GPS9data_initEv+0x390>)
 8082a5a:	2126      	movs	r1, #38	; 0x26
 8082a5c:	f7ff fe98 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char CURRENT_M1label[] = "Motor 1";
  static char CURRENT_M1fmt[] = "%6.1f";
  static char CURRENT_M1unit[] = "Amps";
  initDataValue(NMEA_CURRENT_M1, CURRENT_M1label, CURRENT_M1fmt,
                CURRENT_M1unit);
 8082a60:	4e4c      	ldr	r6, [pc, #304]	; (8082b94 <_ZN12Adafruit_GPS9data_initEv+0x394>)

  static char PRESSURE_M1label[] = "Oil 1";
  static char PRESSURE_M1fmt[] = "%6.0f";
  static char PRESSURE_M1unit[] = "kPa";
  initDataValue(NMEA_PRESSURE_M1, PRESSURE_M1label, PRESSURE_M1fmt,
                PRESSURE_M1unit);
 8082a62:	4628      	mov	r0, r5
 8082a64:	9402      	str	r4, [sp, #8]
 8082a66:	9401      	str	r4, [sp, #4]
 8082a68:	f8cd 8000 	str.w	r8, [sp]
 8082a6c:	4b4a      	ldr	r3, [pc, #296]	; (8082b98 <_ZN12Adafruit_GPS9data_initEv+0x398>)
 8082a6e:	4a4b      	ldr	r2, [pc, #300]	; (8082b9c <_ZN12Adafruit_GPS9data_initEv+0x39c>)
 8082a70:	2127      	movs	r1, #39	; 0x27
 8082a72:	f7ff fe8d 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VOLTAGE_M1label[] = "Motor 1";
  static char VOLTAGE_M1fmt[] = "%6.2f";
  static char VOLTAGE_M1unit[] = "Volts";
  initDataValue(NMEA_VOLTAGE_M1, VOLTAGE_M1label, VOLTAGE_M1fmt,
                VOLTAGE_M1unit);
 8082a76:	4628      	mov	r0, r5
 8082a78:	9402      	str	r4, [sp, #8]
 8082a7a:	9401      	str	r4, [sp, #4]
 8082a7c:	9700      	str	r7, [sp, #0]
 8082a7e:	4b48      	ldr	r3, [pc, #288]	; (8082ba0 <_ZN12Adafruit_GPS9data_initEv+0x3a0>)
 8082a80:	4a48      	ldr	r2, [pc, #288]	; (8082ba4 <_ZN12Adafruit_GPS9data_initEv+0x3a4>)
 8082a82:	2128      	movs	r1, #40	; 0x28
 8082a84:	f7ff fe84 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char CURRENT_M1label[] = "Motor 1";
  static char CURRENT_M1fmt[] = "%6.1f";
  static char CURRENT_M1unit[] = "Amps";
  initDataValue(NMEA_CURRENT_M1, CURRENT_M1label, CURRENT_M1fmt,
                CURRENT_M1unit);
 8082a88:	4628      	mov	r0, r5
 8082a8a:	9402      	str	r4, [sp, #8]
 8082a8c:	9401      	str	r4, [sp, #4]
 8082a8e:	9600      	str	r6, [sp, #0]
 8082a90:	4b45      	ldr	r3, [pc, #276]	; (8082ba8 <_ZN12Adafruit_GPS9data_initEv+0x3a8>)
 8082a92:	4a46      	ldr	r2, [pc, #280]	; (8082bac <_ZN12Adafruit_GPS9data_initEv+0x3ac>)
 8082a94:	2129      	movs	r1, #41	; 0x29
 8082a96:	f7ff fe7b 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char RPM_M2label[] = "Motor 2";
  initDataValue(NMEA_RPM_M2, RPM_M2label, RPM_M1fmt, RPM_M1unit);
 8082a9a:	4628      	mov	r0, r5
 8082a9c:	9402      	str	r4, [sp, #8]
 8082a9e:	9401      	str	r4, [sp, #4]
 8082aa0:	f8cd a000 	str.w	sl, [sp]
 8082aa4:	4b36      	ldr	r3, [pc, #216]	; (8082b80 <_ZN12Adafruit_GPS9data_initEv+0x380>)
 8082aa6:	4a42      	ldr	r2, [pc, #264]	; (8082bb0 <_ZN12Adafruit_GPS9data_initEv+0x3b0>)
 8082aa8:	212a      	movs	r1, #42	; 0x2a
 8082aaa:	f7ff fe71 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TEMPERATURE_M2label[] = "Temp 2";
  initDataValue(NMEA_TEMPERATURE_M2, TEMPERATURE_M2label, TEMPERATURE_M1fmt,
                TEMPERATURE_M1unit);
 8082aae:	4628      	mov	r0, r5
 8082ab0:	9402      	str	r4, [sp, #8]
 8082ab2:	9401      	str	r4, [sp, #4]
 8082ab4:	f8cd 9000 	str.w	r9, [sp]
 8082ab8:	4b34      	ldr	r3, [pc, #208]	; (8082b8c <_ZN12Adafruit_GPS9data_initEv+0x38c>)
 8082aba:	4a3e      	ldr	r2, [pc, #248]	; (8082bb4 <_ZN12Adafruit_GPS9data_initEv+0x3b4>)
 8082abc:	212b      	movs	r1, #43	; 0x2b
 8082abe:	f7ff fe67 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char PRESSURE_M2label[] = "Oil 2";
  initDataValue(NMEA_PRESSURE_M2, PRESSURE_M2label, PRESSURE_M1fmt,
                PRESSURE_M1unit);
 8082ac2:	4628      	mov	r0, r5
 8082ac4:	9402      	str	r4, [sp, #8]
 8082ac6:	9401      	str	r4, [sp, #4]
 8082ac8:	f8cd 8000 	str.w	r8, [sp]
 8082acc:	4b32      	ldr	r3, [pc, #200]	; (8082b98 <_ZN12Adafruit_GPS9data_initEv+0x398>)
 8082ace:	4a3a      	ldr	r2, [pc, #232]	; (8082bb8 <_ZN12Adafruit_GPS9data_initEv+0x3b8>)
 8082ad0:	212c      	movs	r1, #44	; 0x2c
 8082ad2:	f7ff fe5d 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char VOLTAGE_M2label[] = "Motor 2";
  initDataValue(NMEA_VOLTAGE_M2, VOLTAGE_M2label, VOLTAGE_M1fmt,
                VOLTAGE_M1unit);
 8082ad6:	4628      	mov	r0, r5
 8082ad8:	e07c      	b.n	8082bd4 <_ZN12Adafruit_GPS9data_initEv+0x3d4>
 8082ada:	bf00      	nop
 8082adc:	20000155 	.word	0x20000155
 8082ae0:	200000ce 	.word	0x200000ce
 8082ae4:	2000016f 	.word	0x2000016f
 8082ae8:	20000147 	.word	0x20000147
 8082aec:	200000e4 	.word	0x200000e4
 8082af0:	20000180 	.word	0x20000180
 8082af4:	200001c8 	.word	0x200001c8
 8082af8:	200001ae 	.word	0x200001ae
 8082afc:	200000f6 	.word	0x200000f6
 8082b00:	20000127 	.word	0x20000127
 8082b04:	20000091 	.word	0x20000091
 8082b08:	200001a8 	.word	0x200001a8
 8082b0c:	2000009f 	.word	0x2000009f
 8082b10:	2000004c 	.word	0x2000004c
 8082b14:	2000010b 	.word	0x2000010b
 8082b18:	20000107 	.word	0x20000107
 8082b1c:	2000013f 	.word	0x2000013f
 8082b20:	2000015d 	.word	0x2000015d
 8082b24:	20000169 	.word	0x20000169
 8082b28:	2000005e 	.word	0x2000005e
 8082b2c:	20000159 	.word	0x20000159
 8082b30:	20000196 	.word	0x20000196
 8082b34:	20000201 	.word	0x20000201
 8082b38:	200000fd 	.word	0x200000fd
 8082b3c:	20000115 	.word	0x20000115
 8082b40:	20000130 	.word	0x20000130
 8082b44:	20000070 	.word	0x20000070
 8082b48:	200001f6 	.word	0x200001f6
 8082b4c:	20000089 	.word	0x20000089
 8082b50:	2000019a 	.word	0x2000019a
 8082b54:	200000ca 	.word	0x200000ca
 8082b58:	2000012d 	.word	0x2000012d
 8082b5c:	200000e0 	.word	0x200000e0
 8082b60:	20000048 	.word	0x20000048
 8082b64:	200000b6 	.word	0x200000b6
 8082b68:	20000111 	.word	0x20000111
 8082b6c:	20000101 	.word	0x20000101
 8082b70:	20000059 	.word	0x20000059
 8082b74:	2000008f 	.word	0x2000008f
 8082b78:	200000f0 	.word	0x200000f0
 8082b7c:	20000139 	.word	0x20000139
 8082b80:	20000184 	.word	0x20000184
 8082b84:	200000c2 	.word	0x200000c2
 8082b88:	200000b0 	.word	0x200000b0
 8082b8c:	200001f0 	.word	0x200001f0
 8082b90:	200001c1 	.word	0x200001c1
 8082b94:	2000011c 	.word	0x2000011c
 8082b98:	20000174 	.word	0x20000174
 8082b9c:	200000aa 	.word	0x200000aa
 8082ba0:	20000062 	.word	0x20000062
 8082ba4:	20000068 	.word	0x20000068
 8082ba8:	2000007d 	.word	0x2000007d
 8082bac:	20000161 	.word	0x20000161
 8082bb0:	2000014d 	.word	0x2000014d
 8082bb4:	200000a3 	.word	0x200000a3
 8082bb8:	20000053 	.word	0x20000053
 8082bbc:	200000d7 	.word	0x200000d7
 8082bc0:	2000018a 	.word	0x2000018a
 8082bc4:	200000e8 	.word	0x200000e8
 8082bc8:	20000079 	.word	0x20000079
 8082bcc:	200001ea 	.word	0x200001ea
 8082bd0:	20000075 	.word	0x20000075
 8082bd4:	9402      	str	r4, [sp, #8]
 8082bd6:	9401      	str	r4, [sp, #4]
 8082bd8:	9700      	str	r7, [sp, #0]
 8082bda:	4b1c      	ldr	r3, [pc, #112]	; (8082c4c <_ZN12Adafruit_GPS9data_initEv+0x44c>)
 8082bdc:	4a1c      	ldr	r2, [pc, #112]	; (8082c50 <_ZN12Adafruit_GPS9data_initEv+0x450>)
 8082bde:	212d      	movs	r1, #45	; 0x2d
 8082be0:	f7ff fdd6 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char CURRENT_M2label[] = "Motor 2";
  initDataValue(NMEA_CURRENT_M2, CURRENT_M2label, CURRENT_M1fmt,
                CURRENT_M1unit);
 8082be4:	4628      	mov	r0, r5
 8082be6:	9402      	str	r4, [sp, #8]
 8082be8:	9401      	str	r4, [sp, #4]
 8082bea:	9600      	str	r6, [sp, #0]
 8082bec:	4b19      	ldr	r3, [pc, #100]	; (8082c54 <_ZN12Adafruit_GPS9data_initEv+0x454>)
 8082bee:	4a1a      	ldr	r2, [pc, #104]	; (8082c58 <_ZN12Adafruit_GPS9data_initEv+0x458>)
 8082bf0:	212e      	movs	r1, #46	; 0x2e
 8082bf2:	f7ff fdcd 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TEMPERATURE_AIRlabel[] = "Air";
  static char TEMPERATURE_AIRfmt[] = "%6.1f";
  static char TEMPERATURE_AIRunit[] = "Deg C";
  initDataValue(NMEA_TEMPERATURE_AIR, TEMPERATURE_AIRlabel, TEMPERATURE_AIRfmt,
                TEMPERATURE_AIRunit);
 8082bf6:	4b19      	ldr	r3, [pc, #100]	; (8082c5c <_ZN12Adafruit_GPS9data_initEv+0x45c>)
 8082bf8:	4628      	mov	r0, r5
 8082bfa:	9300      	str	r3, [sp, #0]
 8082bfc:	9402      	str	r4, [sp, #8]
 8082bfe:	9401      	str	r4, [sp, #4]
 8082c00:	4b17      	ldr	r3, [pc, #92]	; (8082c60 <_ZN12Adafruit_GPS9data_initEv+0x460>)
 8082c02:	4a18      	ldr	r2, [pc, #96]	; (8082c64 <_ZN12Adafruit_GPS9data_initEv+0x464>)
 8082c04:	212f      	movs	r1, #47	; 0x2f
 8082c06:	f7ff fdc3 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char TEMPERATURE_WATERlabel[] = "Water";
  static char TEMPERATURE_WATERfmt[] = "%6.1f";
  static char TEMPERATURE_WATERunit[] = "Deg C";
  initDataValue(NMEA_TEMPERATURE_WATER, TEMPERATURE_WATERlabel,
                TEMPERATURE_WATERfmt, TEMPERATURE_WATERunit);
 8082c0a:	4b17      	ldr	r3, [pc, #92]	; (8082c68 <_ZN12Adafruit_GPS9data_initEv+0x468>)
 8082c0c:	4628      	mov	r0, r5
 8082c0e:	9300      	str	r3, [sp, #0]
 8082c10:	9402      	str	r4, [sp, #8]
 8082c12:	9401      	str	r4, [sp, #4]
 8082c14:	4b15      	ldr	r3, [pc, #84]	; (8082c6c <_ZN12Adafruit_GPS9data_initEv+0x46c>)
 8082c16:	4a16      	ldr	r2, [pc, #88]	; (8082c70 <_ZN12Adafruit_GPS9data_initEv+0x470>)
 8082c18:	2130      	movs	r1, #48	; 0x30
 8082c1a:	f7ff fdb9 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char HUMIDITYlabel[] = "Humidity";
  static char HUMIDITYfmt[] = "%6.0f";
  static char HUMIDITYunit[] = "% RH";
  initDataValue(NMEA_HUMIDITY, HUMIDITYlabel, HUMIDITYfmt, HUMIDITYunit);
 8082c1e:	4b15      	ldr	r3, [pc, #84]	; (8082c74 <_ZN12Adafruit_GPS9data_initEv+0x474>)
 8082c20:	4628      	mov	r0, r5
 8082c22:	9300      	str	r3, [sp, #0]
 8082c24:	9402      	str	r4, [sp, #8]
 8082c26:	9401      	str	r4, [sp, #4]
 8082c28:	4b13      	ldr	r3, [pc, #76]	; (8082c78 <_ZN12Adafruit_GPS9data_initEv+0x478>)
 8082c2a:	4a14      	ldr	r2, [pc, #80]	; (8082c7c <_ZN12Adafruit_GPS9data_initEv+0x47c>)
 8082c2c:	2131      	movs	r1, #49	; 0x31
 8082c2e:	f7ff fdaf 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>

  static char BAROMETERlabel[] = "Barometer";
  static char BAROMETERfmt[] = "%6.0f";
  static char BAROMETERunit[] = "Pa";
  initDataValue(NMEA_BAROMETER, BAROMETERlabel, BAROMETERfmt, BAROMETERunit);
 8082c32:	4b13      	ldr	r3, [pc, #76]	; (8082c80 <_ZN12Adafruit_GPS9data_initEv+0x480>)
 8082c34:	9402      	str	r4, [sp, #8]
 8082c36:	9300      	str	r3, [sp, #0]
 8082c38:	9401      	str	r4, [sp, #4]
 8082c3a:	4b12      	ldr	r3, [pc, #72]	; (8082c84 <_ZN12Adafruit_GPS9data_initEv+0x484>)
 8082c3c:	4a12      	ldr	r2, [pc, #72]	; (8082c88 <_ZN12Adafruit_GPS9data_initEv+0x488>)
 8082c3e:	2132      	movs	r1, #50	; 0x32
 8082c40:	4628      	mov	r0, r5
 8082c42:	f7ff fda5 	bl	8082790 <_ZN12Adafruit_GPS13initDataValueE12nmea_index_tPcS1_S1_m17nmea_value_type_t>
#endif // NMEA_EXTENSIONS
}
 8082c46:	b005      	add	sp, #20
 8082c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082c4c:	20000062 	.word	0x20000062
 8082c50:	200001dc 	.word	0x200001dc
 8082c54:	2000007d 	.word	0x2000007d
 8082c58:	200001cf 	.word	0x200001cf
 8082c5c:	200000bc 	.word	0x200000bc
 8082c60:	200001b4 	.word	0x200001b4
 8082c64:	200001bd 	.word	0x200001bd
 8082c68:	2000017a 	.word	0x2000017a
 8082c6c:	200001a2 	.word	0x200001a2
 8082c70:	20000083 	.word	0x20000083
 8082c74:	200001d7 	.word	0x200001d7
 8082c78:	20000121 	.word	0x20000121
 8082c7c:	2000018d 	.word	0x2000018d
 8082c80:	200001ba 	.word	0x200001ba
 8082c84:	200001e4 	.word	0x200001e4
 8082c88:	20000095 	.word	0x20000095

08082c8c <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t>:
    @param idx The data index for the value to have history removed
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::removeHistory(nmea_index_t idx) {
  if (idx < NMEA_MAX_INDEX) {
 8082c8c:	293f      	cmp	r1, #63	; 0x3f
    @brief Remove history from a data value table entry, if it has been added.
    @param idx The data index for the value to have history removed
    @return none
*/
/**************************************************************************/
void Adafruit_GPS::removeHistory(nmea_index_t idx) {
 8082c8e:	b510      	push	{r4, lr}
  if (idx < NMEA_MAX_INDEX) {
 8082c90:	d80e      	bhi.n	8082cb0 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t+0x24>
 8082c92:	eb00 1441 	add.w	r4, r0, r1, lsl #5
    if (val[idx].hist == NULL)
 8082c96:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8082c9a:	b14b      	cbz	r3, 8082cb0 <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t+0x24>
      return;
    free(val[idx].hist->data);
 8082c9c:	6818      	ldr	r0, [r3, #0]
 8082c9e:	f000 fe87 	bl	80839b0 <free>
    free(val[idx].hist);
 8082ca2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8082ca6:	f000 fe83 	bl	80839b0 <free>
    val[idx].hist = NULL;
 8082caa:	2300      	movs	r3, #0
 8082cac:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8082cb0:	bd10      	pop	{r4, pc}

08082cb2 <_GLOBAL__sub_I__ZN12Adafruit_GPS12newDataValueE12nmea_index_tf>:
 8082cb2:	f000 bbe1 	b.w	8083478 <HAL_Pin_Map>

08082cb6 <_GLOBAL__sub_I__ZN12Adafruit_GPS5parseEPc>:
 8082cb6:	f000 bbdf 	b.w	8083478 <HAL_Pin_Map>

08082cba <_GLOBAL__sub_I__ZN12Adafruit_GPS5buildEPcPKcS2_cb>:
 8082cba:	f000 bbdd 	b.w	8083478 <HAL_Pin_Map>
	...

08082cc0 <_ZN12Adafruit_GPSD1Ev>:
/*!
    @brief    Destroy the object.
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
 8082cc0:	b538      	push	{r3, r4, r5, lr}
 8082cc2:	4605      	mov	r5, r0
 8082cc4:	4b05      	ldr	r3, [pc, #20]	; (8082cdc <_ZN12Adafruit_GPSD1Ev+0x1c>)
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
 8082cc6:	2400      	movs	r4, #0
/*!
    @brief    Destroy the object.
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
 8082cc8:	6003      	str	r3, [r0, #0]
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
    removeHistory((nmea_index_t)i); // to free any history mallocs
 8082cca:	b2e1      	uxtb	r1, r4
 8082ccc:	4628      	mov	r0, r5
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
 8082cce:	3401      	adds	r4, #1
    removeHistory((nmea_index_t)i); // to free any history mallocs
 8082cd0:	f7ff ffdc 	bl	8082c8c <_ZN12Adafruit_GPS13removeHistoryE12nmea_index_t>
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
 8082cd4:	2c40      	cmp	r4, #64	; 0x40
 8082cd6:	d1f8      	bne.n	8082cca <_ZN12Adafruit_GPSD1Ev+0xa>
    removeHistory((nmea_index_t)i); // to free any history mallocs
#endif
}
 8082cd8:	4628      	mov	r0, r5
 8082cda:	bd38      	pop	{r3, r4, r5, pc}
 8082cdc:	080879f8 	.word	0x080879f8

08082ce0 <_ZN12Adafruit_GPSD0Ev>:
/*!
    @brief    Destroy the object.
    @return   none
*/
/**************************************************************************/
Adafruit_GPS::~Adafruit_GPS() {
 8082ce0:	b510      	push	{r4, lr}
 8082ce2:	4604      	mov	r4, r0
#ifdef NMEA_EXTENSIONS
  for (int i = 0; i < (int)NMEA_MAX_INDEX; i++)
    removeHistory((nmea_index_t)i); // to free any history mallocs
#endif
}
 8082ce4:	f7ff ffec 	bl	8082cc0 <_ZN12Adafruit_GPSD1Ev>
 8082ce8:	4620      	mov	r0, r4
 8082cea:	f640 3174 	movw	r1, #2932	; 0xb74
 8082cee:	f002 fb1f 	bl	8085330 <_ZdlPvj>
 8082cf2:	4620      	mov	r0, r4
 8082cf4:	bd10      	pop	{r4, pc}

08082cf6 <_ZN12Adafruit_GPS5writeEh>:
   functionality
    @param c A single byte to send
    @return Bytes written - 1 on success, 0 on failure
*/
/**************************************************************************/
size_t Adafruit_GPS::write(uint8_t c) {
 8082cf6:	b570      	push	{r4, r5, r6, lr}
 8082cf8:	4604      	mov	r4, r0
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    return gpsSwSerial->write(c);
  }
#endif
  if (gpsHwSerial) {
 8082cfa:	f8d0 09cc 	ldr.w	r0, [r0, #2508]	; 0x9cc
   functionality
    @param c A single byte to send
    @return Bytes written - 1 on success, 0 on failure
*/
/**************************************************************************/
size_t Adafruit_GPS::write(uint8_t c) {
 8082cfe:	460e      	mov	r6, r1
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    return gpsSwSerial->write(c);
  }
#endif
  if (gpsHwSerial) {
 8082d00:	b120      	cbz	r0, 8082d0c <_ZN12Adafruit_GPS5writeEh+0x16>
    gpsSPI->endTransaction();
    return 1;
  }

  return 0;
}
 8082d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (gpsSwSerial) {
    return gpsSwSerial->write(c);
  }
#endif
  if (gpsHwSerial) {
    return gpsHwSerial->write(c);
 8082d06:	6803      	ldr	r3, [r0, #0]
 8082d08:	689b      	ldr	r3, [r3, #8]
 8082d0a:	4718      	bx	r3
  }
  if (gpsI2C) {
 8082d0c:	f8d4 09d0 	ldr.w	r0, [r4, #2512]	; 0x9d0
 8082d10:	b918      	cbnz	r0, 8082d1a <_ZN12Adafruit_GPS5writeEh+0x24>
    }
    if (gpsI2C->endTransmission(true) == 0) {
      return 1;
    }
  }
  if (gpsSPI) {
 8082d12:	f8d4 09d4 	ldr.w	r0, [r4, #2516]	; 0x9d4
 8082d16:	b9b8      	cbnz	r0, 8082d48 <_ZN12Adafruit_GPS5writeEh+0x52>
 8082d18:	e00c      	b.n	8082d34 <_ZN12Adafruit_GPS5writeEh+0x3e>
#endif
  if (gpsHwSerial) {
    return gpsHwSerial->write(c);
  }
  if (gpsI2C) {
    gpsI2C->beginTransmission(_i2caddr);
 8082d1a:	f894 1a50 	ldrb.w	r1, [r4, #2640]	; 0xa50
 8082d1e:	f002 f887 	bl	8084e30 <_ZN7TwoWire17beginTransmissionEh>
    if (gpsI2C->write(c) != 1) {
 8082d22:	f8d4 09d0 	ldr.w	r0, [r4, #2512]	; 0x9d0
 8082d26:	4631      	mov	r1, r6
 8082d28:	6803      	ldr	r3, [r0, #0]
 8082d2a:	689b      	ldr	r3, [r3, #8]
 8082d2c:	4798      	blx	r3
 8082d2e:	2801      	cmp	r0, #1
 8082d30:	4605      	mov	r5, r0
 8082d32:	d001      	beq.n	8082d38 <_ZN12Adafruit_GPS5writeEh+0x42>
      return 0;
 8082d34:	2500      	movs	r5, #0
 8082d36:	e025      	b.n	8082d84 <_ZN12Adafruit_GPS5writeEh+0x8e>
    }
    if (gpsI2C->endTransmission(true) == 0) {
 8082d38:	4601      	mov	r1, r0
 8082d3a:	f8d4 09d0 	ldr.w	r0, [r4, #2512]	; 0x9d0
 8082d3e:	f002 f87b 	bl	8084e38 <_ZN7TwoWire15endTransmissionEh>
 8082d42:	2800      	cmp	r0, #0
 8082d44:	d1e5      	bne.n	8082d12 <_ZN12Adafruit_GPS5writeEh+0x1c>
 8082d46:	e01d      	b.n	8082d84 <_ZN12Adafruit_GPS5writeEh+0x8e>
      return 1;
    }
  }
  if (gpsSPI) {
    gpsSPI->beginTransaction(gpsSPI_settings);
 8082d48:	f604 11dc 	addw	r1, r4, #2524	; 0x9dc
 8082d4c:	f000 fed4 	bl	8083af8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
    if (gpsSPI_cs >= 0) {
 8082d50:	f994 09d8 	ldrsb.w	r0, [r4, #2520]	; 0x9d8
 8082d54:	2800      	cmp	r0, #0
 8082d56:	db03      	blt.n	8082d60 <_ZN12Adafruit_GPS5writeEh+0x6a>
      digitalWrite(gpsSPI_cs, LOW);
 8082d58:	2100      	movs	r1, #0
 8082d5a:	b280      	uxth	r0, r0
 8082d5c:	f002 fa30 	bl	80851c0 <digitalWrite>
    }
    c = gpsSPI->transfer(c);
 8082d60:	4631      	mov	r1, r6
 8082d62:	f8d4 09d4 	ldr.w	r0, [r4, #2516]	; 0x9d4
 8082d66:	f000 ff36 	bl	8083bd6 <_ZN8SPIClass8transferEh>
    if (gpsSPI_cs >= 0) {
 8082d6a:	f994 09d8 	ldrsb.w	r0, [r4, #2520]	; 0x9d8
 8082d6e:	2800      	cmp	r0, #0
 8082d70:	db03      	blt.n	8082d7a <_ZN12Adafruit_GPS5writeEh+0x84>
      digitalWrite(gpsSPI_cs, HIGH);
 8082d72:	2101      	movs	r1, #1
 8082d74:	b280      	uxth	r0, r0
 8082d76:	f002 fa23 	bl	80851c0 <digitalWrite>
    }
    gpsSPI->endTransaction();
 8082d7a:	f8d4 09d4 	ldr.w	r0, [r4, #2516]	; 0x9d4
 8082d7e:	f000 fe9f 	bl	8083ac0 <_ZN8SPIClass14endTransactionEv>
    return 1;
 8082d82:	2501      	movs	r5, #1
  }

  return 0;
}
 8082d84:	4628      	mov	r0, r5
 8082d86:	bd70      	pop	{r4, r5, r6, pc}

08082d88 <_ZN12Adafruit_GPS5beginEm>:
    @brief Start the HW or SW serial port
    @param baud_or_i2caddr Baud rate if using serial, I2C address if using I2C
    @returns True on successful hardware init, False on failure
*/
/**************************************************************************/
bool Adafruit_GPS::begin(uint32_t baud_or_i2caddr) {
 8082d88:	b570      	push	{r4, r5, r6, lr}
 8082d8a:	4604      	mov	r4, r0
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    gpsSwSerial->begin(baud_or_i2caddr);
  }
#endif
  if (gpsHwSerial) {
 8082d8c:	f8d0 09cc 	ldr.w	r0, [r0, #2508]	; 0x9cc
    @brief Start the HW or SW serial port
    @param baud_or_i2caddr Baud rate if using serial, I2C address if using I2C
    @returns True on successful hardware init, False on failure
*/
/**************************************************************************/
bool Adafruit_GPS::begin(uint32_t baud_or_i2caddr) {
 8082d90:	460e      	mov	r6, r1
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  if (gpsSwSerial) {
    gpsSwSerial->begin(baud_or_i2caddr);
  }
#endif
  if (gpsHwSerial) {
 8082d92:	b108      	cbz	r0, 8082d98 <_ZN12Adafruit_GPS5beginEm+0x10>
    gpsHwSerial->begin(baud_or_i2caddr);
 8082d94:	f001 ffc8 	bl	8084d28 <_ZN11USARTSerial5beginEm>
  }
  if (gpsI2C) {
 8082d98:	f8d4 59d0 	ldr.w	r5, [r4, #2512]	; 0x9d0
 8082d9c:	b1bd      	cbz	r5, 8082dce <_ZN12Adafruit_GPS5beginEm+0x46>
    gpsI2C->begin();
 8082d9e:	4628      	mov	r0, r5
 8082da0:	f002 f840 	bl	8084e24 <_ZN7TwoWire5beginEv>
    if (baud_or_i2caddr > 0x7F) {
 8082da4:	2e7f      	cmp	r6, #127	; 0x7f
      _i2caddr = GPS_DEFAULT_I2C_ADDR;
 8082da6:	bf86      	itte	hi
 8082da8:	2310      	movhi	r3, #16
 8082daa:	f884 3a50 	strbhi.w	r3, [r4, #2640]	; 0xa50
    } else {
      _i2caddr = baud_or_i2caddr;
 8082dae:	f884 6a50 	strbls.w	r6, [r4, #2640]	; 0xa50
    }
    // A basic scanner, see if it ACK's
    gpsI2C->beginTransmission(_i2caddr);
 8082db2:	f894 1a50 	ldrb.w	r1, [r4, #2640]	; 0xa50
 8082db6:	f8d4 09d0 	ldr.w	r0, [r4, #2512]	; 0x9d0
 8082dba:	f002 f839 	bl	8084e30 <_ZN7TwoWire17beginTransmissionEh>
    return (gpsI2C->endTransmission() == 0);
 8082dbe:	f8d4 09d0 	ldr.w	r0, [r4, #2512]	; 0x9d0
 8082dc2:	f002 f83d 	bl	8084e40 <_ZN7TwoWire15endTransmissionEv>
 8082dc6:	fab0 f080 	clz	r0, r0
 8082dca:	0940      	lsrs	r0, r0, #5
 8082dcc:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (gpsSPI) {
 8082dce:	f8d4 09d4 	ldr.w	r0, [r4, #2516]	; 0x9d4
 8082dd2:	b1c8      	cbz	r0, 8082e08 <_ZN12Adafruit_GPS5beginEm+0x80>
    gpsSPI->begin();
 8082dd4:	f000 fe64 	bl	8083aa0 <_ZN8SPIClass5beginEv>
    gpsSPI_settings = SPISettings(baud_or_i2caddr, MSBFIRST, SPI_MODE0);
    if (gpsSPI_cs >= 0) {
 8082dd8:	f994 09d8 	ldrsb.w	r0, [r4, #2520]	; 0x9d8
 8082ddc:	f8c4 69e4 	str.w	r6, [r4, #2532]	; 0x9e4
 8082de0:	2800      	cmp	r0, #0
 8082de2:	f04f 0601 	mov.w	r6, #1
 8082de6:	f884 59e0 	strb.w	r5, [r4, #2528]	; 0x9e0
 8082dea:	f884 69e8 	strb.w	r6, [r4, #2536]	; 0x9e8
 8082dee:	f884 59e9 	strb.w	r5, [r4, #2537]	; 0x9e9
 8082df2:	db09      	blt.n	8082e08 <_ZN12Adafruit_GPS5beginEm+0x80>
      pinMode(gpsSPI_cs, OUTPUT);
 8082df4:	4631      	mov	r1, r6
 8082df6:	b280      	uxth	r0, r0
 8082df8:	f002 f9d1 	bl	808519e <pinMode>
      digitalWrite(gpsSPI_cs, HIGH);
 8082dfc:	f994 09d8 	ldrsb.w	r0, [r4, #2520]	; 0x9d8
 8082e00:	4631      	mov	r1, r6
 8082e02:	b280      	uxth	r0, r0
 8082e04:	f002 f9dc 	bl	80851c0 <digitalWrite>
    }
  }

  delay(10);
 8082e08:	200a      	movs	r0, #10
 8082e0a:	f001 f9d5 	bl	80841b8 <delay>
  return true;
 8082e0e:	2001      	movs	r0, #1
}
 8082e10:	bd70      	pop	{r4, r5, r6, pc}

08082e12 <_ZN12Adafruit_GPS11common_initEv>:
/**************************************************************************/
void Adafruit_GPS::common_init(void) {
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 8082e12:	2200      	movs	r2, #0
  gpsI2C = NULL;
  gpsSPI = NULL;
  recvdflag = false;
  paused = false;
  lineidx = 0;
  currentline = line1;
 8082e14:	f600 2174 	addw	r1, r0, #2676	; 0xa74
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  gpsI2C = NULL;
  gpsSPI = NULL;
  recvdflag = false;
 8082e18:	f880 2b70 	strb.w	r2, [r0, #2928]	; 0xb70
/**************************************************************************/
void Adafruit_GPS::common_init(void) {
#if (defined(__AVR__) || defined(ESP8266)) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 8082e1c:	f8c0 29cc 	str.w	r2, [r0, #2508]	; 0x9cc
  gpsI2C = NULL;
 8082e20:	f8c0 29d0 	str.w	r2, [r0, #2512]	; 0x9d0
  gpsSPI = NULL;
 8082e24:	f8c0 29d4 	str.w	r2, [r0, #2516]	; 0x9d4
  recvdflag = false;
  paused = false;
 8082e28:	f880 29c8 	strb.w	r2, [r0, #2504]	; 0x9c8
  lineidx = 0;
 8082e2c:	f880 2b64 	strb.w	r2, [r0, #2916]	; 0xb64
  currentline = line1;
 8082e30:	f8c0 1b68 	str.w	r1, [r0, #2920]	; 0xb68
  lastline = line2;

  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
      satellites = 0;  // uint8_t
 8082e34:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82
  gpsSPI = NULL;
  recvdflag = false;
  paused = false;
  lineidx = 0;
  currentline = line1;
  lastline = line2;
 8082e38:	f600 21ec 	addw	r1, r0, #2796	; 0xaec

  hour = minute = seconds = year = month = day = fixquality = fixquality_3d =
      satellites = 0;  // uint8_t
 8082e3c:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
 8082e40:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
 8082e44:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
 8082e48:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 8082e4c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8082e50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8082e54:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
 8082e58:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  lat = lon = mag = 0; // char
 8082e5c:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
 8082e60:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
 8082e64:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
  fix = false;         // bool
 8082e68:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
  milliseconds = 0;    // uint16_t
 8082e6c:	87c2      	strh	r2, [r0, #62]	; 0x3e
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
      HDOP = VDOP = PDOP = 0.0; // nmea_float_t
 8082e6e:	2200      	movs	r2, #0
  gpsSPI = NULL;
  recvdflag = false;
  paused = false;
  lineidx = 0;
  currentline = line1;
  lastline = line2;
 8082e70:	f8c0 1b6c 	str.w	r1, [r0, #2924]	; 0xb6c
      satellites = 0;  // uint8_t
  lat = lon = mag = 0; // char
  fix = false;         // bool
  milliseconds = 0;    // uint16_t
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation =
      HDOP = VDOP = PDOP = 0.0; // nmea_float_t
 8082e74:	6782      	str	r2, [r0, #120]	; 0x78
 8082e76:	6742      	str	r2, [r0, #116]	; 0x74
 8082e78:	6702      	str	r2, [r0, #112]	; 0x70
 8082e7a:	66c2      	str	r2, [r0, #108]	; 0x6c
 8082e7c:	6682      	str	r2, [r0, #104]	; 0x68
 8082e7e:	6642      	str	r2, [r0, #100]	; 0x64
 8082e80:	6602      	str	r2, [r0, #96]	; 0x60
 8082e82:	65c2      	str	r2, [r0, #92]	; 0x5c
 8082e84:	6482      	str	r2, [r0, #72]	; 0x48
 8082e86:	6442      	str	r2, [r0, #68]	; 0x44
#ifdef NMEA_EXTENSIONS
  data_init();
 8082e88:	f7ff bcba 	b.w	8082800 <_ZN12Adafruit_GPS9data_initEv>

08082e8c <_ZN12Adafruit_GPSC1EP11USARTSerial>:
/*!
    @brief Constructor when using HardwareSerial
    @param ser Pointer to a HardwareSerial object
*/
/**************************************************************************/
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
 8082e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082e90:	4604      	mov	r4, r0
 8082e92:	4bb3      	ldr	r3, [pc, #716]	; (8083160 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2d4>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082e94:	2500      	movs	r5, #0
 8082e96:	2614      	movs	r6, #20
 8082e98:	6003      	str	r3, [r0, #0]
 8082e9a:	4688      	mov	r8, r1
 8082e9c:	6045      	str	r5, [r0, #4]
 8082e9e:	6085      	str	r5, [r0, #8]
 8082ea0:	8185      	strh	r5, [r0, #12]
 8082ea2:	7385      	strb	r5, [r0, #14]
 8082ea4:	4632      	mov	r2, r6
 8082ea6:	4629      	mov	r1, r5
 8082ea8:	300f      	adds	r0, #15
 8082eaa:	f003 fa49 	bl	8086340 <memset>
 8082eae:	4632      	mov	r2, r6
 8082eb0:	4629      	mov	r1, r5
 8082eb2:	f8a4 5023 	strh.w	r5, [r4, #35]	; 0x23
 8082eb6:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8082eba:	f104 0026 	add.w	r0, r4, #38	; 0x26
 8082ebe:	f003 fa3f 	bl	8086340 <memset>
 8082ec2:	2358      	movs	r3, #88	; 0x58
 8082ec4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
 8082ec8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 8082ecc:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
 8082ed0:	4629      	mov	r1, r5
 8082ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8082ed6:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8082eda:	f003 fa31 	bl	8086340 <memset>
 8082ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082ee2:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8082ee6:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 8082eea:	f8a4 30dc 	strh.w	r3, [r4, #220]	; 0xdc
 8082eee:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8082ef2:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
 8082ef6:	f8a4 313c 	strh.w	r3, [r4, #316]	; 0x13c
 8082efa:	f8a4 315c 	strh.w	r3, [r4, #348]	; 0x15c
 8082efe:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
 8082f02:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
 8082f06:	f8a4 31bc 	strh.w	r3, [r4, #444]	; 0x1bc
 8082f0a:	f8a4 31dc 	strh.w	r3, [r4, #476]	; 0x1dc
 8082f0e:	f8a4 31fc 	strh.w	r3, [r4, #508]	; 0x1fc
 8082f12:	f8a4 321c 	strh.w	r3, [r4, #540]	; 0x21c
 8082f16:	f8a4 323c 	strh.w	r3, [r4, #572]	; 0x23c
 8082f1a:	f8a4 325c 	strh.w	r3, [r4, #604]	; 0x25c
 8082f1e:	f8a4 327c 	strh.w	r3, [r4, #636]	; 0x27c
 8082f22:	f8a4 329c 	strh.w	r3, [r4, #668]	; 0x29c
 8082f26:	f8a4 32bc 	strh.w	r3, [r4, #700]	; 0x2bc
 8082f2a:	f8a4 32dc 	strh.w	r3, [r4, #732]	; 0x2dc
 8082f2e:	f8a4 32fc 	strh.w	r3, [r4, #764]	; 0x2fc
 8082f32:	f8a4 331c 	strh.w	r3, [r4, #796]	; 0x31c
 8082f36:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
 8082f3a:	f8a4 335c 	strh.w	r3, [r4, #860]	; 0x35c
 8082f3e:	f8a4 337c 	strh.w	r3, [r4, #892]	; 0x37c
 8082f42:	f8a4 339c 	strh.w	r3, [r4, #924]	; 0x39c
 8082f46:	f8a4 33bc 	strh.w	r3, [r4, #956]	; 0x3bc
 8082f4a:	f8a4 33dc 	strh.w	r3, [r4, #988]	; 0x3dc
 8082f4e:	f8a4 33fc 	strh.w	r3, [r4, #1020]	; 0x3fc
 8082f52:	f8a4 341c 	strh.w	r3, [r4, #1052]	; 0x41c
 8082f56:	f8a4 343c 	strh.w	r3, [r4, #1084]	; 0x43c
 8082f5a:	f8a4 345c 	strh.w	r3, [r4, #1116]	; 0x45c
 8082f5e:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
 8082f62:	f8a4 349c 	strh.w	r3, [r4, #1180]	; 0x49c
 8082f66:	f8a4 34bc 	strh.w	r3, [r4, #1212]	; 0x4bc
 8082f6a:	f8a4 34dc 	strh.w	r3, [r4, #1244]	; 0x4dc
 8082f6e:	f8a4 34fc 	strh.w	r3, [r4, #1276]	; 0x4fc
 8082f72:	f8a4 351c 	strh.w	r3, [r4, #1308]	; 0x51c
 8082f76:	f8a4 353c 	strh.w	r3, [r4, #1340]	; 0x53c
 8082f7a:	f8a4 355c 	strh.w	r3, [r4, #1372]	; 0x55c
 8082f7e:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 8082f82:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c
 8082f86:	f8a4 35bc 	strh.w	r3, [r4, #1468]	; 0x5bc
 8082f8a:	f8a4 35dc 	strh.w	r3, [r4, #1500]	; 0x5dc
 8082f8e:	f8a4 35fc 	strh.w	r3, [r4, #1532]	; 0x5fc
 8082f92:	f8a4 361c 	strh.w	r3, [r4, #1564]	; 0x61c
 8082f96:	f8a4 363c 	strh.w	r3, [r4, #1596]	; 0x63c
 8082f9a:	f8a4 365c 	strh.w	r3, [r4, #1628]	; 0x65c
 8082f9e:	f8a4 367c 	strh.w	r3, [r4, #1660]	; 0x67c
 8082fa2:	f8a4 369c 	strh.w	r3, [r4, #1692]	; 0x69c
 8082fa6:	f8a4 36bc 	strh.w	r3, [r4, #1724]	; 0x6bc
 8082faa:	f8a4 36dc 	strh.w	r3, [r4, #1756]	; 0x6dc
 8082fae:	f8a4 36fc 	strh.w	r3, [r4, #1788]	; 0x6fc
 8082fb2:	f8a4 371c 	strh.w	r3, [r4, #1820]	; 0x71c
 8082fb6:	f8a4 373c 	strh.w	r3, [r4, #1852]	; 0x73c
 8082fba:	f8a4 375c 	strh.w	r3, [r4, #1884]	; 0x75c
 8082fbe:	f8a4 377c 	strh.w	r3, [r4, #1916]	; 0x77c
 8082fc2:	f8a4 379c 	strh.w	r3, [r4, #1948]	; 0x79c
 8082fc6:	f8a4 37bc 	strh.w	r3, [r4, #1980]	; 0x7bc
 8082fca:	f8a4 37dc 	strh.w	r3, [r4, #2012]	; 0x7dc
 8082fce:	f8a4 37fc 	strh.w	r3, [r4, #2044]	; 0x7fc
 8082fd2:	f8a4 381c 	strh.w	r3, [r4, #2076]	; 0x81c
 8082fd6:	f8a4 383c 	strh.w	r3, [r4, #2108]	; 0x83c
 8082fda:	f8a4 385c 	strh.w	r3, [r4, #2140]	; 0x85c
 8082fde:	f8a4 387c 	strh.w	r3, [r4, #2172]	; 0x87c
 8082fe2:	4b60      	ldr	r3, [pc, #384]	; (8083164 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2d8>)
 8082fe4:	4632      	mov	r2, r6
 8082fe6:	f8c4 3890 	str.w	r3, [r4, #2192]	; 0x890
 8082fea:	4629      	mov	r1, r5
 8082fec:	2300      	movs	r3, #0
 8082fee:	f604 0098 	addw	r0, r4, #2200	; 0x898
 8082ff2:	f8c4 3894 	str.w	r3, [r4, #2196]	; 0x894
 8082ff6:	4f5c      	ldr	r7, [pc, #368]	; (8083168 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2dc>)
 8082ff8:	f003 f9a2 	bl	8086340 <memset>
 8082ffc:	4632      	mov	r2, r6
 8082ffe:	4629      	mov	r1, r5
 8083000:	f604 00ac 	addw	r0, r4, #2220	; 0x8ac
 8083004:	f003 f99c 	bl	8086340 <memset>
 8083008:	f604 160c 	addw	r6, r4, #2316	; 0x90c
 808300c:	4629      	mov	r1, r5
 808300e:	223f      	movs	r2, #63	; 0x3f
 8083010:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
 8083014:	f003 f994 	bl	8086340 <memset>
 8083018:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 808301a:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
 808301e:	f8c4 5904 	str.w	r5, [r4, #2308]	; 0x904
 8083022:	f8c4 5908 	str.w	r5, [r4, #2312]	; 0x908
 8083026:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8083028:	e897 0003 	ldmia.w	r7, {r0, r1}
 808302c:	2250      	movs	r2, #80	; 0x50
 808302e:	e886 0003 	stmia.w	r6, {r0, r1}
 8083032:	4629      	mov	r1, r5
 8083034:	f604 1024 	addw	r0, r4, #2340	; 0x924
 8083038:	f003 f982 	bl	8086340 <memset>
 808303c:	4b4b      	ldr	r3, [pc, #300]	; (808316c <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2e0>)
 808303e:	4e4c      	ldr	r6, [pc, #304]	; (8083170 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2e4>)
 8083040:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 8083044:	4b4b      	ldr	r3, [pc, #300]	; (8083174 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2e8>)
 8083046:	4629      	mov	r1, r5
 8083048:	f8c4 3928 	str.w	r3, [r4, #2344]	; 0x928
 808304c:	4b4a      	ldr	r3, [pc, #296]	; (8083178 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2ec>)
 808304e:	f8c4 696c 	str.w	r6, [r4, #2412]	; 0x96c
 8083052:	f8c4 392c 	str.w	r3, [r4, #2348]	; 0x92c
 8083056:	4b49      	ldr	r3, [pc, #292]	; (808317c <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2f0>)
 8083058:	223c      	movs	r2, #60	; 0x3c
 808305a:	f8c4 3930 	str.w	r3, [r4, #2352]	; 0x930
 808305e:	4b48      	ldr	r3, [pc, #288]	; (8083180 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2f4>)
 8083060:	f604 1074 	addw	r0, r4, #2420	; 0x974
 8083064:	f8c4 3934 	str.w	r3, [r4, #2356]	; 0x934
 8083068:	4b46      	ldr	r3, [pc, #280]	; (8083184 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2f8>)
 808306a:	f8c4 3938 	str.w	r3, [r4, #2360]	; 0x938
 808306e:	4b46      	ldr	r3, [pc, #280]	; (8083188 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x2fc>)
 8083070:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
 8083074:	4b45      	ldr	r3, [pc, #276]	; (808318c <_ZN12Adafruit_GPSC1EP11USARTSerial+0x300>)
 8083076:	f8c4 3940 	str.w	r3, [r4, #2368]	; 0x940
 808307a:	4b45      	ldr	r3, [pc, #276]	; (8083190 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x304>)
 808307c:	f8c4 3944 	str.w	r3, [r4, #2372]	; 0x944
 8083080:	4b44      	ldr	r3, [pc, #272]	; (8083194 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x308>)
 8083082:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
 8083086:	4b44      	ldr	r3, [pc, #272]	; (8083198 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x30c>)
 8083088:	f8c4 394c 	str.w	r3, [r4, #2380]	; 0x94c
 808308c:	4b43      	ldr	r3, [pc, #268]	; (808319c <_ZN12Adafruit_GPSC1EP11USARTSerial+0x310>)
 808308e:	f8c4 3950 	str.w	r3, [r4, #2384]	; 0x950
 8083092:	4b43      	ldr	r3, [pc, #268]	; (80831a0 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x314>)
 8083094:	f8c4 3954 	str.w	r3, [r4, #2388]	; 0x954
 8083098:	4b42      	ldr	r3, [pc, #264]	; (80831a4 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x318>)
 808309a:	f8c4 3958 	str.w	r3, [r4, #2392]	; 0x958
 808309e:	4b42      	ldr	r3, [pc, #264]	; (80831a8 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x31c>)
 80830a0:	f8c4 395c 	str.w	r3, [r4, #2396]	; 0x95c
 80830a4:	4b41      	ldr	r3, [pc, #260]	; (80831ac <_ZN12Adafruit_GPSC1EP11USARTSerial+0x320>)
 80830a6:	f8c4 3960 	str.w	r3, [r4, #2400]	; 0x960
 80830aa:	4b41      	ldr	r3, [pc, #260]	; (80831b0 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x324>)
 80830ac:	f8c4 3964 	str.w	r3, [r4, #2404]	; 0x964
 80830b0:	4b40      	ldr	r3, [pc, #256]	; (80831b4 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x328>)
 80830b2:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
 80830b6:	f003 f943 	bl	8086340 <memset>
 80830ba:	4b3f      	ldr	r3, [pc, #252]	; (80831b8 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x32c>)
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 80830bc:	4a3f      	ldr	r2, [pc, #252]	; (80831bc <_ZN12Adafruit_GPSC1EP11USARTSerial+0x330>)
 80830be:	f8c4 3974 	str.w	r3, [r4, #2420]	; 0x974
 80830c2:	4b3f      	ldr	r3, [pc, #252]	; (80831c0 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x334>)
 80830c4:	f8c4 29dc 	str.w	r2, [r4, #2524]	; 0x9dc
 80830c8:	f8c4 3978 	str.w	r3, [r4, #2424]	; 0x978
 80830cc:	4b3d      	ldr	r3, [pc, #244]	; (80831c4 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x338>)
 80830ce:	4a3e      	ldr	r2, [pc, #248]	; (80831c8 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x33c>)
 80830d0:	f8c4 397c 	str.w	r3, [r4, #2428]	; 0x97c
 80830d4:	4b3d      	ldr	r3, [pc, #244]	; (80831cc <_ZN12Adafruit_GPSC1EP11USARTSerial+0x340>)
 80830d6:	f8c4 29e4 	str.w	r2, [r4, #2532]	; 0x9e4
 80830da:	f8c4 3980 	str.w	r3, [r4, #2432]	; 0x980
 80830de:	4b3c      	ldr	r3, [pc, #240]	; (80831d0 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x344>)
 80830e0:	2201      	movs	r2, #1
 80830e2:	f8c4 3984 	str.w	r3, [r4, #2436]	; 0x984
 80830e6:	4b3b      	ldr	r3, [pc, #236]	; (80831d4 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x348>)
  common_init();     // Set everything to common state, then...
 80830e8:	4620      	mov	r0, r4
/*!
    @brief Constructor when using HardwareSerial
    @param ser Pointer to a HardwareSerial object
*/
/**************************************************************************/
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
 80830ea:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
 80830ee:	4b3a      	ldr	r3, [pc, #232]	; (80831d8 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x34c>)
 80830f0:	f8c4 69a0 	str.w	r6, [r4, #2464]	; 0x9a0
 80830f4:	f8c4 398c 	str.w	r3, [r4, #2444]	; 0x98c
 80830f8:	4b38      	ldr	r3, [pc, #224]	; (80831dc <_ZN12Adafruit_GPSC1EP11USARTSerial+0x350>)
 80830fa:	f884 59c9 	strb.w	r5, [r4, #2505]	; 0x9c9
 80830fe:	f8c4 3990 	str.w	r3, [r4, #2448]	; 0x990
 8083102:	4b37      	ldr	r3, [pc, #220]	; (80831e0 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x354>)
 8083104:	f884 59e0 	strb.w	r5, [r4, #2528]	; 0x9e0
 8083108:	f8c4 3994 	str.w	r3, [r4, #2452]	; 0x994
 808310c:	4b35      	ldr	r3, [pc, #212]	; (80831e4 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x358>)
 808310e:	f884 29e8 	strb.w	r2, [r4, #2536]	; 0x9e8
 8083112:	f8c4 3998 	str.w	r3, [r4, #2456]	; 0x998
 8083116:	4b34      	ldr	r3, [pc, #208]	; (80831e8 <_ZN12Adafruit_GPSC1EP11USARTSerial+0x35c>)
 8083118:	f884 59e9 	strb.w	r5, [r4, #2537]	; 0x9e9
 808311c:	f8c4 399c 	str.w	r3, [r4, #2460]	; 0x99c
 8083120:	4b32      	ldr	r3, [pc, #200]	; (80831ec <_ZN12Adafruit_GPSC1EP11USARTSerial+0x360>)
 8083122:	f884 5a72 	strb.w	r5, [r4, #2674]	; 0xa72
 8083126:	f8c4 39b0 	str.w	r3, [r4, #2480]	; 0x9b0
 808312a:	f8c4 39b4 	str.w	r3, [r4, #2484]	; 0x9b4
 808312e:	f8c4 39b8 	str.w	r3, [r4, #2488]	; 0x9b8
 8083132:	f8c4 39bc 	str.w	r3, [r4, #2492]	; 0x9bc
 8083136:	f8c4 39c0 	str.w	r3, [r4, #2496]	; 0x9c0
 808313a:	f8c4 39c4 	str.w	r3, [r4, #2500]	; 0x9c4
 808313e:	23ff      	movs	r3, #255	; 0xff
 8083140:	f884 39d8 	strb.w	r3, [r4, #2520]	; 0x9d8
 8083144:	f884 3a71 	strb.w	r3, [r4, #2673]	; 0xa71
 8083148:	f884 5a73 	strb.w	r5, [r4, #2675]	; 0xa73
 808314c:	f884 5b64 	strb.w	r5, [r4, #2916]	; 0xb64
  common_init();     // Set everything to common state, then...
 8083150:	f7ff fe5f 	bl	8082e12 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
 8083154:	f8c4 89cc 	str.w	r8, [r4, #2508]	; 0x9cc
}
 8083158:	4620      	mov	r0, r4
 808315a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808315e:	bf00      	nop
 8083160:	080879f8 	.word	0x080879f8
 8083164:	4019999a 	.word	0x4019999a
 8083168:	080879d8 	.word	0x080879d8
 808316c:	08087a08 	.word	0x08087a08
 8083170:	08087a50 	.word	0x08087a50
 8083174:	08087a0c 	.word	0x08087a0c
 8083178:	08087a10 	.word	0x08087a10
 808317c:	08087a14 	.word	0x08087a14
 8083180:	08087a18 	.word	0x08087a18
 8083184:	08087a1c 	.word	0x08087a1c
 8083188:	08087a20 	.word	0x08087a20
 808318c:	08087a24 	.word	0x08087a24
 8083190:	08087a28 	.word	0x08087a28
 8083194:	08087a2c 	.word	0x08087a2c
 8083198:	08087a30 	.word	0x08087a30
 808319c:	08087a34 	.word	0x08087a34
 80831a0:	08087a38 	.word	0x08087a38
 80831a4:	08087a3c 	.word	0x08087a3c
 80831a8:	08087a40 	.word	0x08087a40
 80831ac:	08087a44 	.word	0x08087a44
 80831b0:	08087a48 	.word	0x08087a48
 80831b4:	08087a4c 	.word	0x08087a4c
 80831b8:	08087a54 	.word	0x08087a54
 80831bc:	080877a4 	.word	0x080877a4
 80831c0:	08087a58 	.word	0x08087a58
 80831c4:	08087a5c 	.word	0x08087a5c
 80831c8:	000f4240 	.word	0x000f4240
 80831cc:	08087a60 	.word	0x08087a60
 80831d0:	08087a64 	.word	0x08087a64
 80831d4:	08087a68 	.word	0x08087a68
 80831d8:	08087a6c 	.word	0x08087a6c
 80831dc:	08087a70 	.word	0x08087a70
 80831e0:	08087a74 	.word	0x08087a74
 80831e4:	08087a78 	.word	0x08087a78
 80831e8:	08087a7c 	.word	0x08087a7c
 80831ec:	77359400 	.word	0x77359400

080831f0 <_ZN12Adafruit_GPS11sendCommandEPKc>:
/*!
    @brief Send a command to the GPS device
    @param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void Adafruit_GPS::sendCommand(const char *str) { println(str); }
 80831f0:	f000 be64 	b.w	8083ebc <_ZN5Print7printlnEPKc>

080831f4 <_GLOBAL__sub_I__ZN12Adafruit_GPS5beginEm>:
 80831f4:	f000 b940 	b.w	8083478 <HAL_Pin_Map>

080831f8 <_ZN13IntervalTimerD1Ev>:
	}
#endif

    }

    ~IntervalTimer() { end(); }
 80831f8:	b510      	push	{r4, lr}
 80831fa:	4604      	mov	r4, r0
 80831fc:	f000 f930 	bl	8083460 <_ZN13IntervalTimer3endEv>
 8083200:	4620      	mov	r0, r4
 8083202:	bd10      	pop	{r4, pc}

08083204 <_ZN13IntervalTimerC1Ev>:
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8083204:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8083206:	223b      	movs	r2, #59	; 0x3b
 8083208:	8042      	strh	r2, [r0, #2]
 808320a:	f247 522f 	movw	r2, #29999	; 0x752f
 808320e:	8082      	strh	r2, [r0, #4]
 8083210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8083214:	80c2      	strh	r2, [r0, #6]
	status = TIMER_OFF;

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 8083216:	4a25      	ldr	r2, [pc, #148]	; (80832ac <_ZN13IntervalTimerC1Ev+0xa8>)
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8083218:	2300      	movs	r3, #0
 808321a:	7003      	strb	r3, [r0, #0]
	status = TIMER_OFF;
 808321c:	7203      	strb	r3, [r0, #8]

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 808321e:	7013      	strb	r3, [r2, #0]
 8083220:	7053      	strb	r3, [r2, #1]
 8083222:	7093      	strb	r3, [r2, #2]
 8083224:	70d3      	strb	r3, [r2, #3]
 8083226:	7113      	strb	r3, [r2, #4]
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8083228:	7803      	ldrb	r3, [r0, #0]
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 808322a:	4604      	mov	r4, r0
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 808322c:	2b00      	cmp	r3, #0
 808322e:	d13a      	bne.n	80832a6 <_ZN13IntervalTimerC1Ev+0xa2>
		sysIntSetupDone = true;
 8083230:	2301      	movs	r3, #1
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083232:	4e1f      	ldr	r6, [pc, #124]	; (80832b0 <_ZN13IntervalTimerC1Ev+0xac>)
	    _M_manager = &_My_handler::_M_manager;
 8083234:	4d1f      	ldr	r5, [pc, #124]	; (80832b4 <_ZN13IntervalTimerC1Ev+0xb0>)
 8083236:	7003      	strb	r3, [r0, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083238:	4b1f      	ldr	r3, [pc, #124]	; (80832b8 <_ZN13IntervalTimerC1Ev+0xb4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
 808323a:	4669      	mov	r1, sp
 808323c:	2013      	movs	r0, #19
 808323e:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083240:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083242:	9502      	str	r5, [sp, #8]
 8083244:	f001 fc86 	bl	8084b54 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083248:	4668      	mov	r0, sp
 808324a:	f7fd f8a9 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808324e:	4b1b      	ldr	r3, [pc, #108]	; (80832bc <_ZN13IntervalTimerC1Ev+0xb8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
 8083250:	4669      	mov	r1, sp
 8083252:	201a      	movs	r0, #26
 8083254:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083256:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083258:	9502      	str	r5, [sp, #8]
 808325a:	f001 fc7b 	bl	8084b54 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808325e:	4668      	mov	r0, sp
 8083260:	f7fd f89e 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083264:	4b16      	ldr	r3, [pc, #88]	; (80832c0 <_ZN13IntervalTimerC1Ev+0xbc>)
		if (!attachSystemInterrupt(SysInterrupt_TIM5_Update, Wiring_TIM5_Interrupt_Handler_override)) ;	//error
 8083266:	4669      	mov	r1, sp
 8083268:	2021      	movs	r0, #33	; 0x21
 808326a:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808326c:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 808326e:	9502      	str	r5, [sp, #8]
 8083270:	f001 fc70 	bl	8084b54 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8083274:	4668      	mov	r0, sp
 8083276:	f7fd f893 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808327a:	4b12      	ldr	r3, [pc, #72]	; (80832c4 <_ZN13IntervalTimerC1Ev+0xc0>)
		if (!attachSystemInterrupt(SysInterrupt_TIM6_Update, Wiring_TIM6_Interrupt_Handler_override));	//error
 808327c:	4669      	mov	r1, sp
 808327e:	2024      	movs	r0, #36	; 0x24
 8083280:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083282:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8083284:	9502      	str	r5, [sp, #8]
 8083286:	f001 fc65 	bl	8084b54 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808328a:	4668      	mov	r0, sp
 808328c:	f7fd f888 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8083290:	4b0d      	ldr	r3, [pc, #52]	; (80832c8 <_ZN13IntervalTimerC1Ev+0xc4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM7_Update, Wiring_TIM7_Interrupt_Handler_override));	//error
 8083292:	4669      	mov	r1, sp
 8083294:	2026      	movs	r0, #38	; 0x26
 8083296:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8083298:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 808329a:	9502      	str	r5, [sp, #8]
 808329c:	f001 fc5a 	bl	8084b54 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80832a0:	4668      	mov	r0, sp
 80832a2:	f7fd f87d 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
	}
#endif

    }
 80832a6:	4620      	mov	r0, r4
 80832a8:	b004      	add	sp, #16
 80832aa:	bd70      	pop	{r4, r5, r6, pc}
 80832ac:	20000490 	.word	0x20000490
 80832b0:	0808024f 	.word	0x0808024f
 80832b4:	08080253 	.word	0x08080253
 80832b8:	08083319 	.word	0x08083319
 80832bc:	08083341 	.word	0x08083341
 80832c0:	08083369 	.word	0x08083369
 80832c4:	08083391 	.word	0x08083391
 80832c8:	080833b9 	.word	0x080833b9

080832cc <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE>:
  }
  else
  {
    _txBitPos++;
  }
}
 80832cc:	b570      	push	{r4, r5, r6, lr}
 80832ce:	f000 f8d3 	bl	8083478 <HAL_Pin_Map>
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 80832d2:	4c0c      	ldr	r4, [pc, #48]	; (8083304 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x38>)
 80832d4:	4b0c      	ldr	r3, [pc, #48]	; (8083308 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x3c>)
 80832d6:	4e0d      	ldr	r6, [pc, #52]	; (808330c <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x40>)
 80832d8:	6018      	str	r0, [r3, #0]
 80832da:	4d0d      	ldr	r5, [pc, #52]	; (8083310 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x44>)
 80832dc:	4620      	mov	r0, r4
 80832de:	f7ff ff91 	bl	8083204 <_ZN13IntervalTimerC1Ev>
 80832e2:	4620      	mov	r0, r4
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 80832e4:	4c0b      	ldr	r4, [pc, #44]	; (8083314 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x48>)
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 80832e6:	4632      	mov	r2, r6
 80832e8:	4629      	mov	r1, r5
 80832ea:	f002 f813 	bl	8085314 <__aeabi_atexit>
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 80832ee:	4620      	mov	r0, r4
 80832f0:	f7ff ff88 	bl	8083204 <_ZN13IntervalTimerC1Ev>
 80832f4:	4632      	mov	r2, r6
 80832f6:	4629      	mov	r1, r5
 80832f8:	4620      	mov	r0, r4
  }
  else
  {
    _txBitPos++;
  }
}
 80832fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 80832fe:	f002 b809 	b.w	8085314 <__aeabi_atexit>
 8083302:	bf00      	nop
 8083304:	2000046c 	.word	0x2000046c
 8083308:	20000468 	.word	0x20000468
 808330c:	200002c8 	.word	0x200002c8
 8083310:	080831f9 	.word	0x080831f9
 8083314:	20000458 	.word	0x20000458

08083318 <Wiring_TIM3_Interrupt_Handler_override>:
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
void Wiring_TIM3_Interrupt_Handler_override()
{
 8083318:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 808331a:	2101      	movs	r1, #1
 808331c:	4806      	ldr	r0, [pc, #24]	; (8083338 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 808331e:	f001 ff0d 	bl	808513c <TIM_GetITStatus>
 8083322:	b140      	cbz	r0, 8083336 <Wiring_TIM3_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8083324:	2101      	movs	r1, #1
 8083326:	4804      	ldr	r0, [pc, #16]	; (8083338 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8083328:	f001 ff13 	bl	8085152 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[0]();
	}
}
 808332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM3_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[0]();
 8083330:	4b02      	ldr	r3, [pc, #8]	; (808333c <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 8083332:	681b      	ldr	r3, [r3, #0]
 8083334:	4718      	bx	r3
 8083336:	bd10      	pop	{r4, pc}
 8083338:	40000400 	.word	0x40000400
 808333c:	2000047c 	.word	0x2000047c

08083340 <Wiring_TIM4_Interrupt_Handler_override>:
	}
}

void Wiring_TIM4_Interrupt_Handler_override()
{
 8083340:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 8083342:	2101      	movs	r1, #1
 8083344:	4806      	ldr	r0, [pc, #24]	; (8083360 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8083346:	f001 fef9 	bl	808513c <TIM_GetITStatus>
 808334a:	b140      	cbz	r0, 808335e <Wiring_TIM4_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 808334c:	2101      	movs	r1, #1
 808334e:	4804      	ldr	r0, [pc, #16]	; (8083360 <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8083350:	f001 feff 	bl	8085152 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[1]();
	}
}
 8083354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM4_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[1]();
 8083358:	4b02      	ldr	r3, [pc, #8]	; (8083364 <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 808335a:	685b      	ldr	r3, [r3, #4]
 808335c:	4718      	bx	r3
 808335e:	bd10      	pop	{r4, pc}
 8083360:	40000800 	.word	0x40000800
 8083364:	2000047c 	.word	0x2000047c

08083368 <Wiring_TIM5_Interrupt_Handler_override>:
	}
}

void Wiring_TIM5_Interrupt_Handler_override()
{
 8083368:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 808336a:	2101      	movs	r1, #1
 808336c:	4806      	ldr	r0, [pc, #24]	; (8083388 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 808336e:	f001 fee5 	bl	808513c <TIM_GetITStatus>
 8083372:	b140      	cbz	r0, 8083386 <Wiring_TIM5_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 8083374:	2101      	movs	r1, #1
 8083376:	4804      	ldr	r0, [pc, #16]	; (8083388 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 8083378:	f001 feeb 	bl	8085152 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
 808337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM5_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[2]();
 8083380:	4b02      	ldr	r3, [pc, #8]	; (808338c <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 8083382:	689b      	ldr	r3, [r3, #8]
 8083384:	4718      	bx	r3
 8083386:	bd10      	pop	{r4, pc}
 8083388:	40000c00 	.word	0x40000c00
 808338c:	2000047c 	.word	0x2000047c

08083390 <Wiring_TIM6_Interrupt_Handler_override>:
	}
}

void Wiring_TIM6_Interrupt_Handler_override()
{
 8083390:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
 8083392:	2101      	movs	r1, #1
 8083394:	4806      	ldr	r0, [pc, #24]	; (80833b0 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8083396:	f001 fed1 	bl	808513c <TIM_GetITStatus>
 808339a:	b140      	cbz	r0, 80833ae <Wiring_TIM6_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 808339c:	2101      	movs	r1, #1
 808339e:	4804      	ldr	r0, [pc, #16]	; (80833b0 <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 80833a0:	f001 fed7 	bl	8085152 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[3]();
	}
}
 80833a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM6_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[3]();
 80833a8:	4b02      	ldr	r3, [pc, #8]	; (80833b4 <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 80833aa:	68db      	ldr	r3, [r3, #12]
 80833ac:	4718      	bx	r3
 80833ae:	bd10      	pop	{r4, pc}
 80833b0:	40001000 	.word	0x40001000
 80833b4:	2000047c 	.word	0x2000047c

080833b8 <Wiring_TIM7_Interrupt_Handler_override>:
	}
}

void Wiring_TIM7_Interrupt_Handler_override()
{
 80833b8:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 80833ba:	2101      	movs	r1, #1
 80833bc:	4806      	ldr	r0, [pc, #24]	; (80833d8 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 80833be:	f001 febd 	bl	808513c <TIM_GetITStatus>
 80833c2:	b140      	cbz	r0, 80833d6 <Wiring_TIM7_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80833c4:	2101      	movs	r1, #1
 80833c6:	4804      	ldr	r0, [pc, #16]	; (80833d8 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 80833c8:	f001 fec3 	bl	8085152 <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[4]();
	}
}
 80833cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM7_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[4]();
 80833d0:	4b02      	ldr	r3, [pc, #8]	; (80833dc <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 80833d2:	691b      	ldr	r3, [r3, #16]
 80833d4:	4718      	bx	r3
 80833d6:	bd10      	pop	{r4, pc}
 80833d8:	40001400 	.word	0x40001400
 80833dc:	2000047c 	.word	0x2000047c

080833e0 <_ZN13IntervalTimer8stop_SITEv>:

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 80833e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80833e2:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 80833e4:	4606      	mov	r6, r0
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 80833e6:	2b04      	cmp	r3, #4
 80833e8:	d81c      	bhi.n	8083424 <_ZN13IntervalTimer8stop_SITEv+0x44>
 80833ea:	e8df f003 	tbb	[pc, r3]
 80833ee:	0803      	.short	0x0803
 80833f0:	120d      	.short	0x120d
 80833f2:	17          	.byte	0x17
 80833f3:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 80833f4:	231d      	movs	r3, #29
 80833f6:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM3;
 80833fa:	4c13      	ldr	r4, [pc, #76]	; (8083448 <_ZN13IntervalTimer8stop_SITEv+0x68>)
		break;
 80833fc:	e012      	b.n	8083424 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 1:		// TIM4
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 80833fe:	231e      	movs	r3, #30
 8083400:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM4;
 8083404:	4c11      	ldr	r4, [pc, #68]	; (808344c <_ZN13IntervalTimer8stop_SITEv+0x6c>)
		break;
 8083406:	e00d      	b.n	8083424 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 2:		// TIM5
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8083408:	2332      	movs	r3, #50	; 0x32
 808340a:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM5;
 808340e:	4c10      	ldr	r4, [pc, #64]	; (8083450 <_ZN13IntervalTimer8stop_SITEv+0x70>)
		break;
 8083410:	e008      	b.n	8083424 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8083412:	2336      	movs	r3, #54	; 0x36
 8083414:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM6;
 8083418:	4c0e      	ldr	r4, [pc, #56]	; (8083454 <_ZN13IntervalTimer8stop_SITEv+0x74>)
		break;
 808341a:	e003      	b.n	8083424 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 808341c:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 808341e:	4c0e      	ldr	r4, [pc, #56]	; (8083458 <_ZN13IntervalTimer8stop_SITEv+0x78>)
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8083420:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM7;
		break;
#endif
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
 8083424:	2100      	movs	r1, #0
 8083426:	4620      	mov	r0, r4
 8083428:	f001 fe7c 	bl	8085124 <TIM_Cmd>
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 808342c:	2500      	movs	r5, #0
    NVIC_Init(&nvicStructure);
 808342e:	a801      	add	r0, sp, #4
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8083430:	f88d 5007 	strb.w	r5, [sp, #7]
    NVIC_Init(&nvicStructure);
 8083434:	f001 fd70 	bl	8084f18 <NVIC_Init>
	
	// disable timer peripheral
	TIM_DeInit(TIMx);
 8083438:	4620      	mov	r0, r4
 808343a:	f001 fdbd 	bl	8084fb8 <TIM_DeInit>
	
	// free SIT for future use
	SIT_used[SIT_id] = false;
 808343e:	7a73      	ldrb	r3, [r6, #9]
 8083440:	4a06      	ldr	r2, [pc, #24]	; (808345c <_ZN13IntervalTimer8stop_SITEv+0x7c>)
 8083442:	54d5      	strb	r5, [r2, r3]
}
 8083444:	b002      	add	sp, #8
 8083446:	bd70      	pop	{r4, r5, r6, pc}
 8083448:	40000400 	.word	0x40000400
 808344c:	40000800 	.word	0x40000800
 8083450:	40000c00 	.word	0x40000c00
 8083454:	40001000 	.word	0x40001000
 8083458:	40001400 	.word	0x40001400
 808345c:	20000490 	.word	0x20000490

08083460 <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
	if (status == TIMER_SIT) stop_SIT();
 8083460:	7a03      	ldrb	r3, [r0, #8]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
 8083462:	b510      	push	{r4, lr}
 8083464:	4604      	mov	r4, r0
	if (status == TIMER_SIT) stop_SIT();
 8083466:	b10b      	cbz	r3, 808346c <_ZN13IntervalTimer3endEv+0xc>
 8083468:	f7ff ffba 	bl	80833e0 <_ZN13IntervalTimer8stop_SITEv>
	status = TIMER_OFF;
 808346c:	2300      	movs	r3, #0
 808346e:	7223      	strb	r3, [r4, #8]
 8083470:	bd10      	pop	{r4, pc}

08083472 <_GLOBAL__sub_I__ZN13IntervalTimer8SIT_usedE>:
 8083472:	f000 b801 	b.w	8083478 <HAL_Pin_Map>
	...

08083478 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8083478:	b508      	push	{r3, lr}
 808347a:	4b02      	ldr	r3, [pc, #8]	; (8083484 <HAL_Pin_Map+0xc>)
 808347c:	681b      	ldr	r3, [r3, #0]
 808347e:	681b      	ldr	r3, [r3, #0]
 8083480:	9301      	str	r3, [sp, #4]
 8083482:	bd08      	pop	{r3, pc}
 8083484:	080401b0 	.word	0x080401b0

08083488 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8083488:	b508      	push	{r3, lr}
 808348a:	4b02      	ldr	r3, [pc, #8]	; (8083494 <HAL_Pin_Mode+0xc>)
 808348c:	681b      	ldr	r3, [r3, #0]
 808348e:	689b      	ldr	r3, [r3, #8]
 8083490:	9301      	str	r3, [sp, #4]
 8083492:	bd08      	pop	{r3, pc}
 8083494:	080401b0 	.word	0x080401b0

08083498 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8083498:	b508      	push	{r3, lr}
 808349a:	4b02      	ldr	r3, [pc, #8]	; (80834a4 <HAL_Get_Pin_Mode+0xc>)
 808349c:	681b      	ldr	r3, [r3, #0]
 808349e:	68db      	ldr	r3, [r3, #12]
 80834a0:	9301      	str	r3, [sp, #4]
 80834a2:	bd08      	pop	{r3, pc}
 80834a4:	080401b0 	.word	0x080401b0

080834a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80834a8:	b508      	push	{r3, lr}
 80834aa:	4b02      	ldr	r3, [pc, #8]	; (80834b4 <HAL_GPIO_Write+0xc>)
 80834ac:	681b      	ldr	r3, [r3, #0]
 80834ae:	691b      	ldr	r3, [r3, #16]
 80834b0:	9301      	str	r3, [sp, #4]
 80834b2:	bd08      	pop	{r3, pc}
 80834b4:	080401b0 	.word	0x080401b0

080834b8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80834b8:	b508      	push	{r3, lr}
 80834ba:	4b02      	ldr	r3, [pc, #8]	; (80834c4 <HAL_GPIO_Read+0xc>)
 80834bc:	681b      	ldr	r3, [r3, #0]
 80834be:	695b      	ldr	r3, [r3, #20]
 80834c0:	9301      	str	r3, [sp, #4]
 80834c2:	bd08      	pop	{r3, pc}
 80834c4:	080401b0 	.word	0x080401b0

080834c8 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, HAL_PWM_Get_Frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, HAL_PWM_Get_AnalogValue, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 80834c8:	b508      	push	{r3, lr}
 80834ca:	4b02      	ldr	r3, [pc, #8]	; (80834d4 <HAL_Set_System_Interrupt_Handler+0xc>)
 80834cc:	681b      	ldr	r3, [r3, #0]
 80834ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80834d0:	9301      	str	r3, [sp, #4]
 80834d2:	bd08      	pop	{r3, pc}
 80834d4:	080401b0 	.word	0x080401b0

080834d8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80834d8:	b508      	push	{r3, lr}
 80834da:	4b02      	ldr	r3, [pc, #8]	; (80834e4 <HAL_SPI_Begin+0xc>)
 80834dc:	681b      	ldr	r3, [r3, #0]
 80834de:	681b      	ldr	r3, [r3, #0]
 80834e0:	9301      	str	r3, [sp, #4]
 80834e2:	bd08      	pop	{r3, pc}
 80834e4:	080401b4 	.word	0x080401b4

080834e8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80834e8:	b508      	push	{r3, lr}
 80834ea:	4b02      	ldr	r3, [pc, #8]	; (80834f4 <HAL_SPI_Send_Receive_Data+0xc>)
 80834ec:	681b      	ldr	r3, [r3, #0]
 80834ee:	695b      	ldr	r3, [r3, #20]
 80834f0:	9301      	str	r3, [sp, #4]
 80834f2:	bd08      	pop	{r3, pc}
 80834f4:	080401b4 	.word	0x080401b4

080834f8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80834f8:	b508      	push	{r3, lr}
 80834fa:	4b02      	ldr	r3, [pc, #8]	; (8083504 <HAL_SPI_Init+0xc>)
 80834fc:	681b      	ldr	r3, [r3, #0]
 80834fe:	69db      	ldr	r3, [r3, #28]
 8083500:	9301      	str	r3, [sp, #4]
 8083502:	bd08      	pop	{r3, pc}
 8083504:	080401b4 	.word	0x080401b4

08083508 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8083508:	b508      	push	{r3, lr}
 808350a:	4b02      	ldr	r3, [pc, #8]	; (8083514 <HAL_SPI_Is_Enabled+0xc>)
 808350c:	681b      	ldr	r3, [r3, #0]
 808350e:	6a1b      	ldr	r3, [r3, #32]
 8083510:	9301      	str	r3, [sp, #4]
 8083512:	bd08      	pop	{r3, pc}
 8083514:	080401b4 	.word	0x080401b4

08083518 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8083518:	b508      	push	{r3, lr}
 808351a:	4b02      	ldr	r3, [pc, #8]	; (8083524 <HAL_SPI_Info+0xc>)
 808351c:	681b      	ldr	r3, [r3, #0]
 808351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083520:	9301      	str	r3, [sp, #4]
 8083522:	bd08      	pop	{r3, pc}
 8083524:	080401b4 	.word	0x080401b4

08083528 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8083528:	b508      	push	{r3, lr}
 808352a:	4b02      	ldr	r3, [pc, #8]	; (8083534 <HAL_SPI_DMA_Transfer+0xc>)
 808352c:	681b      	ldr	r3, [r3, #0]
 808352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083530:	9301      	str	r3, [sp, #4]
 8083532:	bd08      	pop	{r3, pc}
 8083534:	080401b4 	.word	0x080401b4

08083538 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8083538:	b508      	push	{r3, lr}
 808353a:	4b02      	ldr	r3, [pc, #8]	; (8083544 <HAL_SPI_DMA_Transfer_Status+0xc>)
 808353c:	681b      	ldr	r3, [r3, #0]
 808353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8083540:	9301      	str	r3, [sp, #4]
 8083542:	bd08      	pop	{r3, pc}
 8083544:	080401b4 	.word	0x080401b4

08083548 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 8083548:	b508      	push	{r3, lr}
 808354a:	4b02      	ldr	r3, [pc, #8]	; (8083554 <HAL_SPI_Set_Settings+0xc>)
 808354c:	681b      	ldr	r3, [r3, #0]
 808354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8083550:	9301      	str	r3, [sp, #4]
 8083552:	bd08      	pop	{r3, pc}
 8083554:	080401b4 	.word	0x080401b4

08083558 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8083558:	b508      	push	{r3, lr}
 808355a:	4b02      	ldr	r3, [pc, #8]	; (8083564 <HAL_RNG_GetRandomNumber+0xc>)
 808355c:	681b      	ldr	r3, [r3, #0]
 808355e:	685b      	ldr	r3, [r3, #4]
 8083560:	9301      	str	r3, [sp, #4]
 8083562:	bd08      	pop	{r3, pc}
 8083564:	0804019c 	.word	0x0804019c

08083568 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8083568:	b508      	push	{r3, lr}
 808356a:	4b02      	ldr	r3, [pc, #8]	; (8083574 <HAL_Delay_Milliseconds+0xc>)
 808356c:	681b      	ldr	r3, [r3, #0]
 808356e:	689b      	ldr	r3, [r3, #8]
 8083570:	9301      	str	r3, [sp, #4]
 8083572:	bd08      	pop	{r3, pc}
 8083574:	0804019c 	.word	0x0804019c

08083578 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8083578:	b508      	push	{r3, lr}
 808357a:	4b02      	ldr	r3, [pc, #8]	; (8083584 <HAL_Timer_Get_Micro_Seconds+0xc>)
 808357c:	681b      	ldr	r3, [r3, #0]
 808357e:	691b      	ldr	r3, [r3, #16]
 8083580:	9301      	str	r3, [sp, #4]
 8083582:	bd08      	pop	{r3, pc}
 8083584:	0804019c 	.word	0x0804019c

08083588 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8083588:	b508      	push	{r3, lr}
 808358a:	4b02      	ldr	r3, [pc, #8]	; (8083594 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808358c:	681b      	ldr	r3, [r3, #0]
 808358e:	695b      	ldr	r3, [r3, #20]
 8083590:	9301      	str	r3, [sp, #4]
 8083592:	bd08      	pop	{r3, pc}
 8083594:	0804019c 	.word	0x0804019c

08083598 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8083598:	b508      	push	{r3, lr}
 808359a:	4b02      	ldr	r3, [pc, #8]	; (80835a4 <HAL_RTC_Get_UnixTime+0xc>)
 808359c:	681b      	ldr	r3, [r3, #0]
 808359e:	69db      	ldr	r3, [r3, #28]
 80835a0:	9301      	str	r3, [sp, #4]
 80835a2:	bd08      	pop	{r3, pc}
 80835a4:	0804019c 	.word	0x0804019c

080835a8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80835a8:	b508      	push	{r3, lr}
 80835aa:	4b02      	ldr	r3, [pc, #8]	; (80835b4 <HAL_RTC_Time_Is_Valid+0xc>)
 80835ac:	681b      	ldr	r3, [r3, #0]
 80835ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80835b0:	9301      	str	r3, [sp, #4]
 80835b2:	bd08      	pop	{r3, pc}
 80835b4:	0804019c 	.word	0x0804019c

080835b8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80835b8:	b508      	push	{r3, lr}
 80835ba:	4b02      	ldr	r3, [pc, #8]	; (80835c4 <os_thread_create+0xc>)
 80835bc:	681b      	ldr	r3, [r3, #0]
 80835be:	685b      	ldr	r3, [r3, #4]
 80835c0:	9301      	str	r3, [sp, #4]
 80835c2:	bd08      	pop	{r3, pc}
 80835c4:	080401d0 	.word	0x080401d0

080835c8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80835c8:	b508      	push	{r3, lr}
 80835ca:	4b02      	ldr	r3, [pc, #8]	; (80835d4 <os_thread_is_current+0xc>)
 80835cc:	681b      	ldr	r3, [r3, #0]
 80835ce:	689b      	ldr	r3, [r3, #8]
 80835d0:	9301      	str	r3, [sp, #4]
 80835d2:	bd08      	pop	{r3, pc}
 80835d4:	080401d0 	.word	0x080401d0

080835d8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80835d8:	b508      	push	{r3, lr}
 80835da:	4b02      	ldr	r3, [pc, #8]	; (80835e4 <os_thread_join+0xc>)
 80835dc:	681b      	ldr	r3, [r3, #0]
 80835de:	691b      	ldr	r3, [r3, #16]
 80835e0:	9301      	str	r3, [sp, #4]
 80835e2:	bd08      	pop	{r3, pc}
 80835e4:	080401d0 	.word	0x080401d0

080835e8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80835e8:	b508      	push	{r3, lr}
 80835ea:	4b02      	ldr	r3, [pc, #8]	; (80835f4 <os_thread_cleanup+0xc>)
 80835ec:	681b      	ldr	r3, [r3, #0]
 80835ee:	695b      	ldr	r3, [r3, #20]
 80835f0:	9301      	str	r3, [sp, #4]
 80835f2:	bd08      	pop	{r3, pc}
 80835f4:	080401d0 	.word	0x080401d0

080835f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80835f8:	b508      	push	{r3, lr}
 80835fa:	4b02      	ldr	r3, [pc, #8]	; (8083604 <os_mutex_recursive_create+0xc>)
 80835fc:	681b      	ldr	r3, [r3, #0]
 80835fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8083600:	9301      	str	r3, [sp, #4]
 8083602:	bd08      	pop	{r3, pc}
 8083604:	080401d0 	.word	0x080401d0

08083608 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8083608:	b508      	push	{r3, lr}
 808360a:	4b02      	ldr	r3, [pc, #8]	; (8083614 <os_mutex_recursive_destroy+0xc>)
 808360c:	681b      	ldr	r3, [r3, #0]
 808360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8083610:	9301      	str	r3, [sp, #4]
 8083612:	bd08      	pop	{r3, pc}
 8083614:	080401d0 	.word	0x080401d0

08083618 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8083618:	b508      	push	{r3, lr}
 808361a:	4b02      	ldr	r3, [pc, #8]	; (8083624 <os_mutex_recursive_lock+0xc>)
 808361c:	681b      	ldr	r3, [r3, #0]
 808361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8083620:	9301      	str	r3, [sp, #4]
 8083622:	bd08      	pop	{r3, pc}
 8083624:	080401d0 	.word	0x080401d0

08083628 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8083628:	b508      	push	{r3, lr}
 808362a:	4b02      	ldr	r3, [pc, #8]	; (8083634 <os_mutex_recursive_unlock+0xc>)
 808362c:	681b      	ldr	r3, [r3, #0]
 808362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8083630:	9301      	str	r3, [sp, #4]
 8083632:	bd08      	pop	{r3, pc}
 8083634:	080401d0 	.word	0x080401d0

08083638 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8083638:	b508      	push	{r3, lr}
 808363a:	4b02      	ldr	r3, [pc, #8]	; (8083644 <os_thread_exit+0xc>)
 808363c:	681b      	ldr	r3, [r3, #0]
 808363e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8083640:	9301      	str	r3, [sp, #4]
 8083642:	bd08      	pop	{r3, pc}
 8083644:	080401d0 	.word	0x080401d0

08083648 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8083648:	b508      	push	{r3, lr}
 808364a:	4b02      	ldr	r3, [pc, #8]	; (8083654 <HAL_USART_Init+0xc>)
 808364c:	681b      	ldr	r3, [r3, #0]
 808364e:	699b      	ldr	r3, [r3, #24]
 8083650:	9301      	str	r3, [sp, #4]
 8083652:	bd08      	pop	{r3, pc}
 8083654:	080401c4 	.word	0x080401c4

08083658 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8083658:	b508      	push	{r3, lr}
 808365a:	4b02      	ldr	r3, [pc, #8]	; (8083664 <HAL_USART_Write_Data+0xc>)
 808365c:	681b      	ldr	r3, [r3, #0]
 808365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083660:	9301      	str	r3, [sp, #4]
 8083662:	bd08      	pop	{r3, pc}
 8083664:	080401c4 	.word	0x080401c4

08083668 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8083668:	b508      	push	{r3, lr}
 808366a:	4b02      	ldr	r3, [pc, #8]	; (8083674 <HAL_USART_Available_Data+0xc>)
 808366c:	681b      	ldr	r3, [r3, #0]
 808366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083670:	9301      	str	r3, [sp, #4]
 8083672:	bd08      	pop	{r3, pc}
 8083674:	080401c4 	.word	0x080401c4

08083678 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8083678:	b508      	push	{r3, lr}
 808367a:	4b02      	ldr	r3, [pc, #8]	; (8083684 <HAL_USART_Read_Data+0xc>)
 808367c:	681b      	ldr	r3, [r3, #0]
 808367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083680:	9301      	str	r3, [sp, #4]
 8083682:	bd08      	pop	{r3, pc}
 8083684:	080401c4 	.word	0x080401c4

08083688 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8083688:	b508      	push	{r3, lr}
 808368a:	4b02      	ldr	r3, [pc, #8]	; (8083694 <HAL_USART_Peek_Data+0xc>)
 808368c:	681b      	ldr	r3, [r3, #0]
 808368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083690:	9301      	str	r3, [sp, #4]
 8083692:	bd08      	pop	{r3, pc}
 8083694:	080401c4 	.word	0x080401c4

08083698 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8083698:	b508      	push	{r3, lr}
 808369a:	4b02      	ldr	r3, [pc, #8]	; (80836a4 <HAL_USART_Flush_Data+0xc>)
 808369c:	681b      	ldr	r3, [r3, #0]
 808369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80836a0:	9301      	str	r3, [sp, #4]
 80836a2:	bd08      	pop	{r3, pc}
 80836a4:	080401c4 	.word	0x080401c4

080836a8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80836a8:	b508      	push	{r3, lr}
 80836aa:	4b02      	ldr	r3, [pc, #8]	; (80836b4 <HAL_USART_Is_Enabled+0xc>)
 80836ac:	681b      	ldr	r3, [r3, #0]
 80836ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80836b0:	9301      	str	r3, [sp, #4]
 80836b2:	bd08      	pop	{r3, pc}
 80836b4:	080401c4 	.word	0x080401c4

080836b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80836b8:	b508      	push	{r3, lr}
 80836ba:	4b02      	ldr	r3, [pc, #8]	; (80836c4 <HAL_USART_Available_Data_For_Write+0xc>)
 80836bc:	681b      	ldr	r3, [r3, #0]
 80836be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80836c0:	9301      	str	r3, [sp, #4]
 80836c2:	bd08      	pop	{r3, pc}
 80836c4:	080401c4 	.word	0x080401c4

080836c8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80836c8:	b508      	push	{r3, lr}
 80836ca:	4b02      	ldr	r3, [pc, #8]	; (80836d4 <HAL_USART_BeginConfig+0xc>)
 80836cc:	681b      	ldr	r3, [r3, #0]
 80836ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80836d0:	9301      	str	r3, [sp, #4]
 80836d2:	bd08      	pop	{r3, pc}
 80836d4:	080401c4 	.word	0x080401c4

080836d8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80836d8:	b508      	push	{r3, lr}
 80836da:	4b02      	ldr	r3, [pc, #8]	; (80836e4 <HAL_I2C_Begin+0xc>)
 80836dc:	681b      	ldr	r3, [r3, #0]
 80836de:	68db      	ldr	r3, [r3, #12]
 80836e0:	9301      	str	r3, [sp, #4]
 80836e2:	bd08      	pop	{r3, pc}
 80836e4:	080401ac 	.word	0x080401ac

080836e8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80836e8:	b508      	push	{r3, lr}
 80836ea:	4b02      	ldr	r3, [pc, #8]	; (80836f4 <HAL_I2C_Begin_Transmission+0xc>)
 80836ec:	681b      	ldr	r3, [r3, #0]
 80836ee:	699b      	ldr	r3, [r3, #24]
 80836f0:	9301      	str	r3, [sp, #4]
 80836f2:	bd08      	pop	{r3, pc}
 80836f4:	080401ac 	.word	0x080401ac

080836f8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80836f8:	b508      	push	{r3, lr}
 80836fa:	4b02      	ldr	r3, [pc, #8]	; (8083704 <HAL_I2C_End_Transmission+0xc>)
 80836fc:	681b      	ldr	r3, [r3, #0]
 80836fe:	69db      	ldr	r3, [r3, #28]
 8083700:	9301      	str	r3, [sp, #4]
 8083702:	bd08      	pop	{r3, pc}
 8083704:	080401ac 	.word	0x080401ac

08083708 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8083708:	b508      	push	{r3, lr}
 808370a:	4b02      	ldr	r3, [pc, #8]	; (8083714 <HAL_I2C_Write_Data+0xc>)
 808370c:	681b      	ldr	r3, [r3, #0]
 808370e:	6a1b      	ldr	r3, [r3, #32]
 8083710:	9301      	str	r3, [sp, #4]
 8083712:	bd08      	pop	{r3, pc}
 8083714:	080401ac 	.word	0x080401ac

08083718 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8083718:	b508      	push	{r3, lr}
 808371a:	4b02      	ldr	r3, [pc, #8]	; (8083724 <HAL_I2C_Available_Data+0xc>)
 808371c:	681b      	ldr	r3, [r3, #0]
 808371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083720:	9301      	str	r3, [sp, #4]
 8083722:	bd08      	pop	{r3, pc}
 8083724:	080401ac 	.word	0x080401ac

08083728 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8083728:	b508      	push	{r3, lr}
 808372a:	4b02      	ldr	r3, [pc, #8]	; (8083734 <HAL_I2C_Read_Data+0xc>)
 808372c:	681b      	ldr	r3, [r3, #0]
 808372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083730:	9301      	str	r3, [sp, #4]
 8083732:	bd08      	pop	{r3, pc}
 8083734:	080401ac 	.word	0x080401ac

08083738 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8083738:	b508      	push	{r3, lr}
 808373a:	4b02      	ldr	r3, [pc, #8]	; (8083744 <HAL_I2C_Peek_Data+0xc>)
 808373c:	681b      	ldr	r3, [r3, #0]
 808373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083740:	9301      	str	r3, [sp, #4]
 8083742:	bd08      	pop	{r3, pc}
 8083744:	080401ac 	.word	0x080401ac

08083748 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8083748:	b508      	push	{r3, lr}
 808374a:	4b02      	ldr	r3, [pc, #8]	; (8083754 <HAL_I2C_Flush_Data+0xc>)
 808374c:	681b      	ldr	r3, [r3, #0]
 808374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083750:	9301      	str	r3, [sp, #4]
 8083752:	bd08      	pop	{r3, pc}
 8083754:	080401ac 	.word	0x080401ac

08083758 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8083758:	b508      	push	{r3, lr}
 808375a:	4b02      	ldr	r3, [pc, #8]	; (8083764 <HAL_I2C_Is_Enabled+0xc>)
 808375c:	681b      	ldr	r3, [r3, #0]
 808375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8083760:	9301      	str	r3, [sp, #4]
 8083762:	bd08      	pop	{r3, pc}
 8083764:	080401ac 	.word	0x080401ac

08083768 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 8083768:	b508      	push	{r3, lr}
 808376a:	4b02      	ldr	r3, [pc, #8]	; (8083774 <HAL_I2C_Init+0xc>)
 808376c:	681b      	ldr	r3, [r3, #0]
 808376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083770:	9301      	str	r3, [sp, #4]
 8083772:	bd08      	pop	{r3, pc}
 8083774:	080401ac 	.word	0x080401ac

08083778 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8083778:	b508      	push	{r3, lr}
 808377a:	4b02      	ldr	r3, [pc, #8]	; (8083784 <inet_gethostbyname+0xc>)
 808377c:	681b      	ldr	r3, [r3, #0]
 808377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8083780:	9301      	str	r3, [sp, #4]
 8083782:	bd08      	pop	{r3, pc}
 8083784:	08060020 	.word	0x08060020

08083788 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8083788:	b508      	push	{r3, lr}
 808378a:	4b02      	ldr	r3, [pc, #8]	; (8083794 <HAL_USB_USART_Init+0xc>)
 808378c:	681b      	ldr	r3, [r3, #0]
 808378e:	681b      	ldr	r3, [r3, #0]
 8083790:	9301      	str	r3, [sp, #4]
 8083792:	bd08      	pop	{r3, pc}
 8083794:	0806001c 	.word	0x0806001c

08083798 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8083798:	b508      	push	{r3, lr}
 808379a:	4b02      	ldr	r3, [pc, #8]	; (80837a4 <HAL_USB_USART_Begin+0xc>)
 808379c:	681b      	ldr	r3, [r3, #0]
 808379e:	685b      	ldr	r3, [r3, #4]
 80837a0:	9301      	str	r3, [sp, #4]
 80837a2:	bd08      	pop	{r3, pc}
 80837a4:	0806001c 	.word	0x0806001c

080837a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80837a8:	b508      	push	{r3, lr}
 80837aa:	4b02      	ldr	r3, [pc, #8]	; (80837b4 <HAL_USB_USART_Available_Data+0xc>)
 80837ac:	681b      	ldr	r3, [r3, #0]
 80837ae:	691b      	ldr	r3, [r3, #16]
 80837b0:	9301      	str	r3, [sp, #4]
 80837b2:	bd08      	pop	{r3, pc}
 80837b4:	0806001c 	.word	0x0806001c

080837b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80837b8:	b508      	push	{r3, lr}
 80837ba:	4b02      	ldr	r3, [pc, #8]	; (80837c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80837bc:	681b      	ldr	r3, [r3, #0]
 80837be:	695b      	ldr	r3, [r3, #20]
 80837c0:	9301      	str	r3, [sp, #4]
 80837c2:	bd08      	pop	{r3, pc}
 80837c4:	0806001c 	.word	0x0806001c

080837c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80837c8:	b508      	push	{r3, lr}
 80837ca:	4b02      	ldr	r3, [pc, #8]	; (80837d4 <HAL_USB_USART_Receive_Data+0xc>)
 80837cc:	681b      	ldr	r3, [r3, #0]
 80837ce:	699b      	ldr	r3, [r3, #24]
 80837d0:	9301      	str	r3, [sp, #4]
 80837d2:	bd08      	pop	{r3, pc}
 80837d4:	0806001c 	.word	0x0806001c

080837d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80837d8:	b508      	push	{r3, lr}
 80837da:	4b02      	ldr	r3, [pc, #8]	; (80837e4 <HAL_USB_USART_Send_Data+0xc>)
 80837dc:	681b      	ldr	r3, [r3, #0]
 80837de:	69db      	ldr	r3, [r3, #28]
 80837e0:	9301      	str	r3, [sp, #4]
 80837e2:	bd08      	pop	{r3, pc}
 80837e4:	0806001c 	.word	0x0806001c

080837e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80837e8:	b508      	push	{r3, lr}
 80837ea:	4b02      	ldr	r3, [pc, #8]	; (80837f4 <HAL_USB_USART_Flush_Data+0xc>)
 80837ec:	681b      	ldr	r3, [r3, #0]
 80837ee:	6a1b      	ldr	r3, [r3, #32]
 80837f0:	9301      	str	r3, [sp, #4]
 80837f2:	bd08      	pop	{r3, pc}
 80837f4:	0806001c 	.word	0x0806001c

080837f8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80837f8:	b508      	push	{r3, lr}
 80837fa:	4b02      	ldr	r3, [pc, #8]	; (8083804 <system_mode+0xc>)
 80837fc:	681b      	ldr	r3, [r3, #0]
 80837fe:	681b      	ldr	r3, [r3, #0]
 8083800:	9301      	str	r3, [sp, #4]
 8083802:	bd08      	pop	{r3, pc}
 8083804:	080401a4 	.word	0x080401a4

08083808 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8083808:	b508      	push	{r3, lr}
 808380a:	4b02      	ldr	r3, [pc, #8]	; (8083814 <set_system_mode+0xc>)
 808380c:	681b      	ldr	r3, [r3, #0]
 808380e:	685b      	ldr	r3, [r3, #4]
 8083810:	9301      	str	r3, [sp, #4]
 8083812:	bd08      	pop	{r3, pc}
 8083814:	080401a4 	.word	0x080401a4

08083818 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8083818:	b508      	push	{r3, lr}
 808381a:	4b02      	ldr	r3, [pc, #8]	; (8083824 <system_delay_ms+0xc>)
 808381c:	681b      	ldr	r3, [r3, #0]
 808381e:	695b      	ldr	r3, [r3, #20]
 8083820:	9301      	str	r3, [sp, #4]
 8083822:	bd08      	pop	{r3, pc}
 8083824:	080401a4 	.word	0x080401a4

08083828 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8083828:	b508      	push	{r3, lr}
 808382a:	4b02      	ldr	r3, [pc, #8]	; (8083834 <system_sleep+0xc>)
 808382c:	681b      	ldr	r3, [r3, #0]
 808382e:	699b      	ldr	r3, [r3, #24]
 8083830:	9301      	str	r3, [sp, #4]
 8083832:	bd08      	pop	{r3, pc}
 8083834:	080401a4 	.word	0x080401a4

08083838 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8083838:	b508      	push	{r3, lr}
 808383a:	4b02      	ldr	r3, [pc, #8]	; (8083844 <system_thread_set_state+0xc>)
 808383c:	681b      	ldr	r3, [r3, #0]
 808383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083840:	9301      	str	r3, [sp, #4]
 8083842:	bd08      	pop	{r3, pc}
 8083844:	080401a4 	.word	0x080401a4

08083848 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8083848:	b508      	push	{r3, lr}
 808384a:	4b02      	ldr	r3, [pc, #8]	; (8083854 <application_thread_current+0xc>)
 808384c:	681b      	ldr	r3, [r3, #0]
 808384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8083850:	9301      	str	r3, [sp, #4]
 8083852:	bd08      	pop	{r3, pc}
 8083854:	080401a4 	.word	0x080401a4

08083858 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8083858:	b508      	push	{r3, lr}
 808385a:	4b02      	ldr	r3, [pc, #8]	; (8083864 <application_thread_invoke+0xc>)
 808385c:	681b      	ldr	r3, [r3, #0]
 808385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8083860:	9301      	str	r3, [sp, #4]
 8083862:	bd08      	pop	{r3, pc}
 8083864:	080401a4 	.word	0x080401a4

08083868 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8083868:	b508      	push	{r3, lr}
 808386a:	4b02      	ldr	r3, [pc, #8]	; (8083874 <system_thread_get_state+0xc>)
 808386c:	681b      	ldr	r3, [r3, #0]
 808386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8083870:	9301      	str	r3, [sp, #4]
 8083872:	bd08      	pop	{r3, pc}
 8083874:	080401a4 	.word	0x080401a4

08083878 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8083878:	b508      	push	{r3, lr}
 808387a:	4b03      	ldr	r3, [pc, #12]	; (8083888 <system_ctrl_set_app_request_handler+0x10>)
 808387c:	681b      	ldr	r3, [r3, #0]
 808387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8083882:	9301      	str	r3, [sp, #4]
 8083884:	bd08      	pop	{r3, pc}
 8083886:	0000      	.short	0x0000
 8083888:	080401a4 	.word	0x080401a4

0808388c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808388c:	b508      	push	{r3, lr}
 808388e:	4b03      	ldr	r3, [pc, #12]	; (808389c <system_ctrl_set_result+0x10>)
 8083890:	681b      	ldr	r3, [r3, #0]
 8083892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8083896:	9301      	str	r3, [sp, #4]
 8083898:	bd08      	pop	{r3, pc}
 808389a:	0000      	.short	0x0000
 808389c:	080401a4 	.word	0x080401a4

080838a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80838a0:	b508      	push	{r3, lr}
 80838a2:	4b02      	ldr	r3, [pc, #8]	; (80838ac <network_connect+0xc>)
 80838a4:	681b      	ldr	r3, [r3, #0]
 80838a6:	685b      	ldr	r3, [r3, #4]
 80838a8:	9301      	str	r3, [sp, #4]
 80838aa:	bd08      	pop	{r3, pc}
 80838ac:	080401c8 	.word	0x080401c8

080838b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80838b0:	b508      	push	{r3, lr}
 80838b2:	4b02      	ldr	r3, [pc, #8]	; (80838bc <network_connecting+0xc>)
 80838b4:	681b      	ldr	r3, [r3, #0]
 80838b6:	689b      	ldr	r3, [r3, #8]
 80838b8:	9301      	str	r3, [sp, #4]
 80838ba:	bd08      	pop	{r3, pc}
 80838bc:	080401c8 	.word	0x080401c8

080838c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80838c0:	b508      	push	{r3, lr}
 80838c2:	4b02      	ldr	r3, [pc, #8]	; (80838cc <network_disconnect+0xc>)
 80838c4:	681b      	ldr	r3, [r3, #0]
 80838c6:	68db      	ldr	r3, [r3, #12]
 80838c8:	9301      	str	r3, [sp, #4]
 80838ca:	bd08      	pop	{r3, pc}
 80838cc:	080401c8 	.word	0x080401c8

080838d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80838d0:	b508      	push	{r3, lr}
 80838d2:	4b02      	ldr	r3, [pc, #8]	; (80838dc <network_ready+0xc>)
 80838d4:	681b      	ldr	r3, [r3, #0]
 80838d6:	691b      	ldr	r3, [r3, #16]
 80838d8:	9301      	str	r3, [sp, #4]
 80838da:	bd08      	pop	{r3, pc}
 80838dc:	080401c8 	.word	0x080401c8

080838e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80838e0:	b508      	push	{r3, lr}
 80838e2:	4b02      	ldr	r3, [pc, #8]	; (80838ec <network_on+0xc>)
 80838e4:	681b      	ldr	r3, [r3, #0]
 80838e6:	695b      	ldr	r3, [r3, #20]
 80838e8:	9301      	str	r3, [sp, #4]
 80838ea:	bd08      	pop	{r3, pc}
 80838ec:	080401c8 	.word	0x080401c8

080838f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80838f0:	b508      	push	{r3, lr}
 80838f2:	4b02      	ldr	r3, [pc, #8]	; (80838fc <network_off+0xc>)
 80838f4:	681b      	ldr	r3, [r3, #0]
 80838f6:	699b      	ldr	r3, [r3, #24]
 80838f8:	9301      	str	r3, [sp, #4]
 80838fa:	bd08      	pop	{r3, pc}
 80838fc:	080401c8 	.word	0x080401c8

08083900 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8083900:	b508      	push	{r3, lr}
 8083902:	4b02      	ldr	r3, [pc, #8]	; (808390c <network_listen+0xc>)
 8083904:	681b      	ldr	r3, [r3, #0]
 8083906:	69db      	ldr	r3, [r3, #28]
 8083908:	9301      	str	r3, [sp, #4]
 808390a:	bd08      	pop	{r3, pc}
 808390c:	080401c8 	.word	0x080401c8

08083910 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8083910:	b508      	push	{r3, lr}
 8083912:	4b02      	ldr	r3, [pc, #8]	; (808391c <network_listening+0xc>)
 8083914:	681b      	ldr	r3, [r3, #0]
 8083916:	6a1b      	ldr	r3, [r3, #32]
 8083918:	9301      	str	r3, [sp, #4]
 808391a:	bd08      	pop	{r3, pc}
 808391c:	080401c8 	.word	0x080401c8

08083920 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8083920:	b508      	push	{r3, lr}
 8083922:	4b02      	ldr	r3, [pc, #8]	; (808392c <network_set_listen_timeout+0xc>)
 8083924:	681b      	ldr	r3, [r3, #0]
 8083926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083928:	9301      	str	r3, [sp, #4]
 808392a:	bd08      	pop	{r3, pc}
 808392c:	080401c8 	.word	0x080401c8

08083930 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8083930:	b508      	push	{r3, lr}
 8083932:	4b02      	ldr	r3, [pc, #8]	; (808393c <network_get_listen_timeout+0xc>)
 8083934:	681b      	ldr	r3, [r3, #0]
 8083936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8083938:	9301      	str	r3, [sp, #4]
 808393a:	bd08      	pop	{r3, pc}
 808393c:	080401c8 	.word	0x080401c8

08083940 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8083940:	b508      	push	{r3, lr}
 8083942:	4b02      	ldr	r3, [pc, #8]	; (808394c <spark_process+0xc>)
 8083944:	681b      	ldr	r3, [r3, #0]
 8083946:	689b      	ldr	r3, [r3, #8]
 8083948:	9301      	str	r3, [sp, #4]
 808394a:	bd08      	pop	{r3, pc}
 808394c:	080401cc 	.word	0x080401cc

08083950 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8083950:	b508      	push	{r3, lr}
 8083952:	4b02      	ldr	r3, [pc, #8]	; (808395c <spark_cloud_flag_connect+0xc>)
 8083954:	681b      	ldr	r3, [r3, #0]
 8083956:	68db      	ldr	r3, [r3, #12]
 8083958:	9301      	str	r3, [sp, #4]
 808395a:	bd08      	pop	{r3, pc}
 808395c:	080401cc 	.word	0x080401cc

08083960 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8083960:	b508      	push	{r3, lr}
 8083962:	4b02      	ldr	r3, [pc, #8]	; (808396c <spark_cloud_flag_connected+0xc>)
 8083964:	681b      	ldr	r3, [r3, #0]
 8083966:	695b      	ldr	r3, [r3, #20]
 8083968:	9301      	str	r3, [sp, #4]
 808396a:	bd08      	pop	{r3, pc}
 808396c:	080401cc 	.word	0x080401cc

08083970 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8083970:	b508      	push	{r3, lr}
 8083972:	4b02      	ldr	r3, [pc, #8]	; (808397c <spark_send_event+0xc>)
 8083974:	681b      	ldr	r3, [r3, #0]
 8083976:	6a1b      	ldr	r3, [r3, #32]
 8083978:	9301      	str	r3, [sp, #4]
 808397a:	bd08      	pop	{r3, pc}
 808397c:	080401cc 	.word	0x080401cc

08083980 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8083980:	b508      	push	{r3, lr}
 8083982:	4b02      	ldr	r3, [pc, #8]	; (808398c <spark_sync_time_pending+0xc>)
 8083984:	681b      	ldr	r3, [r3, #0]
 8083986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083988:	9301      	str	r3, [sp, #4]
 808398a:	bd08      	pop	{r3, pc}
 808398c:	080401cc 	.word	0x080401cc

08083990 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8083990:	b508      	push	{r3, lr}
 8083992:	4b02      	ldr	r3, [pc, #8]	; (808399c <spark_set_random_seed_from_cloud_handler+0xc>)
 8083994:	681b      	ldr	r3, [r3, #0]
 8083996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8083998:	9301      	str	r3, [sp, #4]
 808399a:	bd08      	pop	{r3, pc}
 808399c:	080401cc 	.word	0x080401cc

080839a0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80839a0:	b508      	push	{r3, lr}
 80839a2:	4b02      	ldr	r3, [pc, #8]	; (80839ac <malloc+0xc>)
 80839a4:	681b      	ldr	r3, [r3, #0]
 80839a6:	681b      	ldr	r3, [r3, #0]
 80839a8:	9301      	str	r3, [sp, #4]
 80839aa:	bd08      	pop	{r3, pc}
 80839ac:	080401a0 	.word	0x080401a0

080839b0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80839b0:	b508      	push	{r3, lr}
 80839b2:	4b02      	ldr	r3, [pc, #8]	; (80839bc <free+0xc>)
 80839b4:	681b      	ldr	r3, [r3, #0]
 80839b6:	685b      	ldr	r3, [r3, #4]
 80839b8:	9301      	str	r3, [sp, #4]
 80839ba:	bd08      	pop	{r3, pc}
 80839bc:	080401a0 	.word	0x080401a0

080839c0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80839c0:	b508      	push	{r3, lr}
 80839c2:	4b02      	ldr	r3, [pc, #8]	; (80839cc <realloc+0xc>)
 80839c4:	681b      	ldr	r3, [r3, #0]
 80839c6:	689b      	ldr	r3, [r3, #8]
 80839c8:	9301      	str	r3, [sp, #4]
 80839ca:	bd08      	pop	{r3, pc}
 80839cc:	080401a0 	.word	0x080401a0

080839d0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80839d0:	b508      	push	{r3, lr}
 80839d2:	4b02      	ldr	r3, [pc, #8]	; (80839dc <siprintf+0xc>)
 80839d4:	681b      	ldr	r3, [r3, #0]
 80839d6:	691b      	ldr	r3, [r3, #16]
 80839d8:	9301      	str	r3, [sp, #4]
 80839da:	bd08      	pop	{r3, pc}
 80839dc:	080401a0 	.word	0x080401a0

080839e0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80839e0:	b508      	push	{r3, lr}
 80839e2:	4b02      	ldr	r3, [pc, #8]	; (80839ec <siscanf+0xc>)
 80839e4:	681b      	ldr	r3, [r3, #0]
 80839e6:	699b      	ldr	r3, [r3, #24]
 80839e8:	9301      	str	r3, [sp, #4]
 80839ea:	bd08      	pop	{r3, pc}
 80839ec:	080401a0 	.word	0x080401a0

080839f0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80839f0:	b508      	push	{r3, lr}
 80839f2:	4b02      	ldr	r3, [pc, #8]	; (80839fc <snprintf+0xc>)
 80839f4:	681b      	ldr	r3, [r3, #0]
 80839f6:	69db      	ldr	r3, [r3, #28]
 80839f8:	9301      	str	r3, [sp, #4]
 80839fa:	bd08      	pop	{r3, pc}
 80839fc:	080401a0 	.word	0x080401a0

08083a00 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8083a00:	b508      	push	{r3, lr}
 8083a02:	4b02      	ldr	r3, [pc, #8]	; (8083a0c <sniprintf+0xc>)
 8083a04:	681b      	ldr	r3, [r3, #0]
 8083a06:	6a1b      	ldr	r3, [r3, #32]
 8083a08:	9301      	str	r3, [sp, #4]
 8083a0a:	bd08      	pop	{r3, pc}
 8083a0c:	080401a0 	.word	0x080401a0

08083a10 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8083a10:	b508      	push	{r3, lr}
 8083a12:	4b02      	ldr	r3, [pc, #8]	; (8083a1c <vsnprintf+0xc>)
 8083a14:	681b      	ldr	r3, [r3, #0]
 8083a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083a18:	9301      	str	r3, [sp, #4]
 8083a1a:	bd08      	pop	{r3, pc}
 8083a1c:	080401a0 	.word	0x080401a0

08083a20 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8083a20:	b508      	push	{r3, lr}
 8083a22:	4b02      	ldr	r3, [pc, #8]	; (8083a2c <abort+0xc>)
 8083a24:	681b      	ldr	r3, [r3, #0]
 8083a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083a28:	9301      	str	r3, [sp, #4]
 8083a2a:	bd08      	pop	{r3, pc}
 8083a2c:	080401a0 	.word	0x080401a0

08083a30 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8083a30:	b508      	push	{r3, lr}
 8083a32:	4b02      	ldr	r3, [pc, #8]	; (8083a3c <_malloc_r+0xc>)
 8083a34:	681b      	ldr	r3, [r3, #0]
 8083a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8083a38:	9301      	str	r3, [sp, #4]
 8083a3a:	bd08      	pop	{r3, pc}
 8083a3c:	080401a0 	.word	0x080401a0

08083a40 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8083a40:	b510      	push	{r4, lr}
 8083a42:	4b04      	ldr	r3, [pc, #16]	; (8083a54 <_ZN8SPIClassD1Ev+0x14>)
 8083a44:	4604      	mov	r4, r0
 8083a46:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8083a48:	68c0      	ldr	r0, [r0, #12]
 8083a4a:	b108      	cbz	r0, 8083a50 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 8083a4c:	f7ff fddc 	bl	8083608 <os_mutex_recursive_destroy>
 8083a50:	4620      	mov	r0, r4
 8083a52:	bd10      	pop	{r4, pc}
 8083a54:	08087af8 	.word	0x08087af8

08083a58 <_ZN8SPIClassD0Ev>:
 8083a58:	b510      	push	{r4, lr}
 8083a5a:	4604      	mov	r4, r0
 8083a5c:	f7ff fff0 	bl	8083a40 <_ZN8SPIClassD1Ev>
 8083a60:	4620      	mov	r0, r4
 8083a62:	2110      	movs	r1, #16
 8083a64:	f001 fc64 	bl	8085330 <_ZdlPvj>
 8083a68:	4620      	mov	r0, r4
 8083a6a:	bd10      	pop	{r4, pc}

08083a6c <_ZN14RecursiveMutex4lockEv>:
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 8083a6c:	6800      	ldr	r0, [r0, #0]
 8083a6e:	f7ff bdd3 	b.w	8083618 <os_mutex_recursive_lock>

08083a72 <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8083a72:	6800      	ldr	r0, [r0, #0]
 8083a74:	f7ff bdd8 	b.w	8083628 <os_mutex_recursive_unlock>

08083a78 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8083a78:	b570      	push	{r4, r5, r6, lr}
 8083a7a:	4604      	mov	r4, r0
 8083a7c:	460e      	mov	r6, r1
 8083a7e:	4b07      	ldr	r3, [pc, #28]	; (8083a9c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8083a80:	2500      	movs	r5, #0
 8083a82:	6003      	str	r3, [r0, #0]
 8083a84:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 8083a88:	f7ff fdb6 	bl	80835f8 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8083a8c:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 8083a8e:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 8083a90:	f7ff fd32 	bl	80834f8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8083a94:	60a5      	str	r5, [r4, #8]
}
 8083a96:	4620      	mov	r0, r4
 8083a98:	bd70      	pop	{r4, r5, r6, pc}
 8083a9a:	bf00      	nop
 8083a9c:	08087af8 	.word	0x08087af8

08083aa0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 8083aa0:	b538      	push	{r3, r4, r5, lr}
 8083aa2:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8083aa4:	f100 040c 	add.w	r4, r0, #12
 8083aa8:	4620      	mov	r0, r4
 8083aaa:	f7ff ffdf 	bl	8083a6c <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8083aae:	7928      	ldrb	r0, [r5, #4]
 8083ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8083ab4:	f7ff fd10 	bl	80834d8 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8083ab8:	4620      	mov	r0, r4
 8083aba:	f7ff ffda 	bl	8083a72 <_ZN14RecursiveMutex6unlockEv>
 8083abe:	bd38      	pop	{r3, r4, r5, pc}

08083ac0 <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 8083ac0:	b508      	push	{r3, lr}
 8083ac2:	300c      	adds	r0, #12
 8083ac4:	f7ff ffd5 	bl	8083a72 <_ZN14RecursiveMutex6unlockEv>
 8083ac8:	bd08      	pop	{r3, pc}
	...

08083acc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8083acc:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8083ace:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8083ad0:	6018      	str	r0, [r3, #0]
 8083ad2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 8083ad4:	6818      	ldr	r0, [r3, #0]
 8083ad6:	b2e5      	uxtb	r5, r4
 8083ad8:	4288      	cmp	r0, r1
 8083ada:	d906      	bls.n	8083aea <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8083adc:	3401      	adds	r4, #1
 8083ade:	2c08      	cmp	r4, #8
 8083ae0:	d002      	beq.n	8083ae8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8083ae2:	0840      	lsrs	r0, r0, #1
 8083ae4:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 8083ae6:	e7f5      	b.n	8083ad4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8083ae8:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8083aea:	4b02      	ldr	r3, [pc, #8]	; (8083af4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8083aec:	5d5b      	ldrb	r3, [r3, r5]
 8083aee:	7013      	strb	r3, [r2, #0]
 8083af0:	bd30      	pop	{r4, r5, pc}
 8083af2:	bf00      	nop
 8083af4:	08087b00 	.word	0x08087b00

08083af8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 8083af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8083afc:	4680      	mov	r8, r0
 8083afe:	b08f      	sub	sp, #60	; 0x3c
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8083b00:	300c      	adds	r0, #12
 8083b02:	460e      	mov	r6, r1
 8083b04:	f7ff ffb2 	bl	8083a6c <_ZN14RecursiveMutex4lockEv>
    // Lock peripheral
    CHECK(lock());

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
 8083b08:	f898 4004 	ldrb.w	r4, [r8, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 8083b0c:	2214      	movs	r2, #20
 8083b0e:	2100      	movs	r1, #0
 8083b10:	a809      	add	r0, sp, #36	; 0x24
 8083b12:	f002 fc15 	bl	8086340 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8083b16:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 8083b18:	4620      	mov	r0, r4
 8083b1a:	2200      	movs	r2, #0
 8083b1c:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 8083b1e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
 8083b22:	f7ff fcf9 	bl	8083518 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
 8083b26:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 8083b2a:	b14c      	cbz	r4, 8083b40 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 8083b2c:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8083b30:	b92d      	cbnz	r5, 8083b3e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 8083b32:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8083b34:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8083b38:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 8083b3c:	e003      	b.n	8083b46 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 8083b3e:	2400      	movs	r4, #0
 8083b40:	46a1      	mov	r9, r4
 8083b42:	4627      	mov	r7, r4
 8083b44:	2501      	movs	r5, #1
 8083b46:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8083b48:	b10d      	cbz	r5, 8083b4e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 8083b4a:	2b00      	cmp	r3, #0
 8083b4c:	d13f      	bne.n	8083bce <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
      return true;

    if (default_ == other.default_ &&
 8083b4e:	429d      	cmp	r5, r3
 8083b50:	d10b      	bne.n	8083b6a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 8083b52:	68b2      	ldr	r2, [r6, #8]
 8083b54:	42ba      	cmp	r2, r7
 8083b56:	d108      	bne.n	8083b6a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8083b58:	f88d 9020 	strb.w	r9, [sp, #32]
 8083b5c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8083b60:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8083b64:	89b2      	ldrh	r2, [r6, #12]
 8083b66:	4291      	cmp	r1, r2
 8083b68:	d031      	beq.n	8083bce <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
 8083b6a:	b13b      	cbz	r3, 8083b7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
 8083b6c:	2300      	movs	r3, #0
 8083b6e:	f898 0004 	ldrb.w	r0, [r8, #4]
 8083b72:	9301      	str	r3, [sp, #4]
 8083b74:	9300      	str	r3, [sp, #0]
 8083b76:	461a      	mov	r2, r3
 8083b78:	2101      	movs	r1, #1
 8083b7a:	e016      	b.n	8083baa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb2>
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
 8083b7c:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
 8083b80:	68b1      	ldr	r1, [r6, #8]
 8083b82:	ab04      	add	r3, sp, #16
 8083b84:	f10d 020f 	add.w	r2, sp, #15
 8083b88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8083b8a:	f7ff ff9f 	bl	8083acc <_ZN8SPIClass19computeClockDividerEjjRhRj>
 8083b8e:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8083b90:	b105      	cbz	r5, 8083b94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x9c>
 8083b92:	b9c9      	cbnz	r1, 8083bc8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd0>
      return true;

    if (default_ == other.default_ &&
 8083b94:	42a9      	cmp	r1, r5
 8083b96:	d00b      	beq.n	8083bb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb8>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
 8083b98:	2400      	movs	r4, #0
 8083b9a:	9401      	str	r4, [sp, #4]
 8083b9c:	7b74      	ldrb	r4, [r6, #13]
 8083b9e:	7b33      	ldrb	r3, [r6, #12]
 8083ba0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8083ba4:	f898 0004 	ldrb.w	r0, [r8, #4]
 8083ba8:	9400      	str	r4, [sp, #0]
 8083baa:	f7ff fccd 	bl	8083548 <HAL_SPI_Set_Settings>
 8083bae:	e00e      	b.n	8083bce <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
 8083bb0:	68b3      	ldr	r3, [r6, #8]
 8083bb2:	42bb      	cmp	r3, r7
 8083bb4:	d3f0      	bcc.n	8083b98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8083bb6:	f88d 9020 	strb.w	r9, [sp, #32]
 8083bba:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8083bbe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8083bc2:	89b3      	ldrh	r3, [r6, #12]
 8083bc4:	429a      	cmp	r2, r3
 8083bc6:	d1e7      	bne.n	8083b98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 8083bc8:	9b04      	ldr	r3, [sp, #16]
 8083bca:	42bb      	cmp	r3, r7
 8083bcc:	d1e4      	bne.n	8083b98 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            }
        }
    }

    return 0;
}
 8083bce:	2000      	movs	r0, #0
 8083bd0:	b00f      	add	sp, #60	; 0x3c
 8083bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08083bd6 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8083bd6:	b570      	push	{r4, r5, r6, lr}
 8083bd8:	4605      	mov	r5, r0
 8083bda:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8083bdc:	f100 040c 	add.w	r4, r0, #12
 8083be0:	4620      	mov	r0, r4
 8083be2:	f7ff ff43 	bl	8083a6c <_ZN14RecursiveMutex4lockEv>
    uint16_t result = 0;
    if (!lock())
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
 8083be6:	4631      	mov	r1, r6
 8083be8:	7928      	ldrb	r0, [r5, #4]
 8083bea:	f7ff fc7d 	bl	80834e8 <HAL_SPI_Send_Receive_Data>
 8083bee:	4605      	mov	r5, r0
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8083bf0:	4620      	mov	r0, r4
 8083bf2:	f7ff ff3e 	bl	8083a72 <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }
    return static_cast<byte>(result);
}
 8083bf6:	b2e8      	uxtb	r0, r5
 8083bf8:	bd70      	pop	{r4, r5, r6, pc}

08083bfa <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8083bfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8083bfe:	4604      	mov	r4, r0
 8083c00:	460f      	mov	r7, r1
 8083c02:	4690      	mov	r8, r2
 8083c04:	4699      	mov	r9, r3
 8083c06:	b087      	sub	sp, #28
 8083c08:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8083c0a:	f100 050c 	add.w	r5, r0, #12
 8083c0e:	4628      	mov	r0, r5
 8083c10:	f7ff ff2c 	bl	8083a6c <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8083c14:	7920      	ldrb	r0, [r4, #4]
 8083c16:	9600      	str	r6, [sp, #0]
 8083c18:	464b      	mov	r3, r9
 8083c1a:	4642      	mov	r2, r8
 8083c1c:	4639      	mov	r1, r7
 8083c1e:	f7ff fc83 	bl	8083528 <HAL_SPI_DMA_Transfer>
        if (user_callback == NULL)
 8083c22:	b93e      	cbnz	r6, 8083c34 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x3a>
        {
            HAL_SPI_TransferStatus st;
            do
            {
                HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8083c24:	a902      	add	r1, sp, #8
 8083c26:	7920      	ldrb	r0, [r4, #4]
 8083c28:	f7ff fc86 	bl	8083538 <HAL_SPI_DMA_Transfer_Status>
    {
        HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
        if (user_callback == NULL)
        {
            HAL_SPI_TransferStatus st;
            do
 8083c2c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8083c30:	07db      	lsls	r3, r3, #31
 8083c32:	d4f7      	bmi.n	8083c24 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x2a>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8083c34:	4628      	mov	r0, r5
 8083c36:	f7ff ff1c 	bl	8083a72 <_ZN14RecursiveMutex6unlockEv>
                HAL_SPI_DMA_Transfer_Status(_spi, &st);
            } while (st.transfer_ongoing);
        }
        unlock();
    }
}
 8083c3a:	b007      	add	sp, #28
 8083c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08083c40 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 8083c40:	7900      	ldrb	r0, [r0, #4]
 8083c42:	f7ff bc61 	b.w	8083508 <HAL_SPI_Is_Enabled>

08083c46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8083c46:	b510      	push	{r4, lr}
 8083c48:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8083c4a:	6800      	ldr	r0, [r0, #0]
 8083c4c:	b118      	cbz	r0, 8083c56 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 8083c4e:	f7ff feaf 	bl	80839b0 <free>
            wakeupSource_ = nullptr;
 8083c52:	2300      	movs	r3, #0
 8083c54:	6023      	str	r3, [r4, #0]
 8083c56:	bd10      	pop	{r4, pc}

08083c58 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083c58:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8083c5a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083c5e:	460d      	mov	r5, r1
        error_ = result.error_;
 8083c60:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8083c62:	460b      	mov	r3, r1
 8083c64:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083c68:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8083c6a:	f8c0 2006 	str.w	r2, [r0, #6]
 8083c6e:	889b      	ldrh	r3, [r3, #4]
 8083c70:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8083c72:	f7ff ffe8 	bl	8083c46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 8083c76:	682b      	ldr	r3, [r5, #0]
 8083c78:	b113      	cbz	r3, 8083c80 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8083c7a:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8083c7c:	2300      	movs	r3, #0
 8083c7e:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 8083c80:	4620      	mov	r0, r4
 8083c82:	bd38      	pop	{r3, r4, r5, pc}

08083c84 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8083c84:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 8083c88:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8083c8a:	b90b      	cbnz	r3, 8083c90 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 8083c8c:	680a      	ldr	r2, [r1, #0]
 8083c8e:	b19a      	cbz	r2, 8083cb8 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 8083c90:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 8083c92:	b15c      	cbz	r4, 8083cac <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 8083c94:	88a2      	ldrh	r2, [r4, #4]
 8083c96:	2a01      	cmp	r2, #1
 8083c98:	d003      	beq.n	8083ca2 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 8083c9a:	2a04      	cmp	r2, #4
 8083c9c:	d106      	bne.n	8083cac <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8083c9e:	2202      	movs	r2, #2
 8083ca0:	e005      	b.n	8083cae <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8083ca2:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8083ca4:	718a      	strb	r2, [r1, #6]
 8083ca6:	810b      	strh	r3, [r1, #8]
 8083ca8:	814c      	strh	r4, [r1, #10]
                    break;
 8083caa:	e005      	b.n	8083cb8 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8083cac:	2204      	movs	r2, #4
 8083cae:	810b      	strh	r3, [r1, #8]
 8083cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083cb4:	718a      	strb	r2, [r1, #6]
 8083cb6:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 8083cb8:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8083cbc:	6003      	str	r3, [r0, #0]
 8083cbe:	888b      	ldrh	r3, [r1, #4]
 8083cc0:	8083      	strh	r3, [r0, #4]
    }
 8083cc2:	bd10      	pop	{r4, pc}

08083cc4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8083cc4:	b530      	push	{r4, r5, lr}
 8083cc6:	4604      	mov	r4, r0
 8083cc8:	b085      	sub	sp, #20
 8083cca:	4608      	mov	r0, r1
 8083ccc:	4611      	mov	r1, r2
 8083cce:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8083cd0:	2300      	movs	r3, #0
 8083cd2:	f7ff fda9 	bl	8083828 <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 8083cd6:	2300      	movs	r3, #0
 8083cd8:	9301      	str	r3, [sp, #4]
 8083cda:	f8ad 3008 	strh.w	r3, [sp, #8]
 8083cde:	f88d 300a 	strb.w	r3, [sp, #10]
 8083ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8083ce6:	4d09      	ldr	r5, [pc, #36]	; (8083d0c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8083ce8:	a901      	add	r1, sp, #4
 8083cea:	f8ad 000c 	strh.w	r0, [sp, #12]
 8083cee:	4628      	mov	r0, r5
 8083cf0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8083cf4:	f7ff ffb0 	bl	8083c58 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8083cf8:	a801      	add	r0, sp, #4
 8083cfa:	f7ff ffa4 	bl	8083c46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8083cfe:	4620      	mov	r0, r4
 8083d00:	4629      	mov	r1, r5
 8083d02:	f7ff ffbf 	bl	8083c84 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8083d06:	4620      	mov	r0, r4
 8083d08:	b005      	add	sp, #20
 8083d0a:	bd30      	pop	{r4, r5, pc}
 8083d0c:	20000498 	.word	0x20000498

08083d10 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8083d14:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8083d16:	4c08      	ldr	r4, [pc, #32]	; (8083d38 <_GLOBAL__sub_I_System+0x28>)
 8083d18:	2000      	movs	r0, #0
 8083d1a:	6020      	str	r0, [r4, #0]
 8083d1c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083d1e:	71a0      	strb	r0, [r4, #6]
 8083d20:	8120      	strh	r0, [r4, #8]
 8083d22:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8083d24:	f7ff fd70 	bl	8083808 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8083d28:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8083d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8083d2e:	4a03      	ldr	r2, [pc, #12]	; (8083d3c <_GLOBAL__sub_I_System+0x2c>)
 8083d30:	4903      	ldr	r1, [pc, #12]	; (8083d40 <_GLOBAL__sub_I_System+0x30>)
 8083d32:	f001 baef 	b.w	8085314 <__aeabi_atexit>
 8083d36:	bf00      	nop
 8083d38:	20000498 	.word	0x20000498
 8083d3c:	200002c8 	.word	0x200002c8
 8083d40:	080800b7 	.word	0x080800b7

08083d44 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8083d44:	b510      	push	{r4, lr}
 8083d46:	4604      	mov	r4, r0
{
	free(buffer);
 8083d48:	6800      	ldr	r0, [r0, #0]
 8083d4a:	f7ff fe31 	bl	80839b0 <free>
}
 8083d4e:	4620      	mov	r0, r4
 8083d50:	bd10      	pop	{r4, pc}

08083d52 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8083d52:	b510      	push	{r4, lr}
 8083d54:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8083d56:	6800      	ldr	r0, [r0, #0]
 8083d58:	b108      	cbz	r0, 8083d5e <_ZN6String10invalidateEv+0xc>
 8083d5a:	f7ff fe29 	bl	80839b0 <free>
	buffer = NULL;
 8083d5e:	2300      	movs	r3, #0
 8083d60:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8083d62:	60a3      	str	r3, [r4, #8]
 8083d64:	6063      	str	r3, [r4, #4]
 8083d66:	bd10      	pop	{r4, pc}

08083d68 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8083d68:	b538      	push	{r3, r4, r5, lr}
 8083d6a:	4604      	mov	r4, r0
 8083d6c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8083d6e:	6800      	ldr	r0, [r0, #0]
 8083d70:	3101      	adds	r1, #1
 8083d72:	f7ff fe25 	bl	80839c0 <realloc>
	if (newbuffer) {
 8083d76:	b110      	cbz	r0, 8083d7e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8083d78:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8083d7c:	2001      	movs	r0, #1
	}
	return 0;
}
 8083d7e:	bd38      	pop	{r3, r4, r5, pc}

08083d80 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083d80:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8083d82:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083d84:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8083d86:	b113      	cbz	r3, 8083d8e <_ZN6String7reserveEj+0xe>
 8083d88:	6843      	ldr	r3, [r0, #4]
 8083d8a:	428b      	cmp	r3, r1
 8083d8c:	d207      	bcs.n	8083d9e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8083d8e:	4620      	mov	r0, r4
 8083d90:	f7ff ffea 	bl	8083d68 <_ZN6String12changeBufferEj>
 8083d94:	b120      	cbz	r0, 8083da0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8083d96:	68a3      	ldr	r3, [r4, #8]
 8083d98:	b90b      	cbnz	r3, 8083d9e <_ZN6String7reserveEj+0x1e>
 8083d9a:	6822      	ldr	r2, [r4, #0]
 8083d9c:	7013      	strb	r3, [r2, #0]
 8083d9e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8083da0:	bd10      	pop	{r4, pc}

08083da2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083da2:	b570      	push	{r4, r5, r6, lr}
 8083da4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8083da6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083da8:	4604      	mov	r4, r0
 8083daa:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8083dac:	f7ff ffe8 	bl	8083d80 <_ZN6String7reserveEj>
 8083db0:	b918      	cbnz	r0, 8083dba <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8083db2:	4620      	mov	r0, r4
 8083db4:	f7ff ffcd 	bl	8083d52 <_ZN6String10invalidateEv>
		return *this;
 8083db8:	e009      	b.n	8083dce <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8083dba:	462a      	mov	r2, r5
 8083dbc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8083dbe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8083dc0:	6820      	ldr	r0, [r4, #0]
 8083dc2:	f002 fab2 	bl	808632a <memcpy>
	buffer[len] = 0;
 8083dc6:	6822      	ldr	r2, [r4, #0]
 8083dc8:	68a3      	ldr	r3, [r4, #8]
 8083dca:	2100      	movs	r1, #0
 8083dcc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8083dce:	4620      	mov	r0, r4
 8083dd0:	bd70      	pop	{r4, r5, r6, pc}

08083dd2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083dd2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083dd4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083dd6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083dd8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8083dda:	6043      	str	r3, [r0, #4]
	len = 0;
 8083ddc:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083dde:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8083de0:	460d      	mov	r5, r1
 8083de2:	b139      	cbz	r1, 8083df4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8083de4:	4608      	mov	r0, r1
 8083de6:	f003 f81d 	bl	8086e24 <strlen>
 8083dea:	4629      	mov	r1, r5
 8083dec:	4602      	mov	r2, r0
 8083dee:	4620      	mov	r0, r4
 8083df0:	f7ff ffd7 	bl	8083da2 <_ZN6String4copyEPKcj>
}
 8083df4:	4620      	mov	r0, r4
 8083df6:	bd38      	pop	{r3, r4, r5, pc}

08083df8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8083df8:	b538      	push	{r3, r4, r5, lr}
 8083dfa:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8083dfc:	460c      	mov	r4, r1
 8083dfe:	b141      	cbz	r1, 8083e12 <_ZN6StringaSEPKc+0x1a>
 8083e00:	4608      	mov	r0, r1
 8083e02:	f003 f80f 	bl	8086e24 <strlen>
 8083e06:	4621      	mov	r1, r4
 8083e08:	4602      	mov	r2, r0
 8083e0a:	4628      	mov	r0, r5
 8083e0c:	f7ff ffc9 	bl	8083da2 <_ZN6String4copyEPKcj>
 8083e10:	e001      	b.n	8083e16 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8083e12:	f7ff ff9e 	bl	8083d52 <_ZN6String10invalidateEv>

	return *this;
}
 8083e16:	4628      	mov	r0, r5
 8083e18:	bd38      	pop	{r3, r4, r5, pc}

08083e1a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8083e1a:	b570      	push	{r4, r5, r6, lr}
 8083e1c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8083e1e:	460e      	mov	r6, r1
 8083e20:	b909      	cbnz	r1, 8083e26 <_ZN6String6concatEPKcj+0xc>
 8083e22:	2000      	movs	r0, #0
 8083e24:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8083e26:	b16a      	cbz	r2, 8083e44 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8083e28:	6883      	ldr	r3, [r0, #8]
 8083e2a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8083e2c:	4629      	mov	r1, r5
 8083e2e:	f7ff ffa7 	bl	8083d80 <_ZN6String7reserveEj>
 8083e32:	2800      	cmp	r0, #0
 8083e34:	d0f5      	beq.n	8083e22 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8083e36:	6820      	ldr	r0, [r4, #0]
 8083e38:	68a3      	ldr	r3, [r4, #8]
 8083e3a:	4631      	mov	r1, r6
 8083e3c:	4418      	add	r0, r3
 8083e3e:	f002 fab9 	bl	80863b4 <strcpy>
	len = newlen;
 8083e42:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8083e44:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8083e46:	bd70      	pop	{r4, r5, r6, pc}

08083e48 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 8083e48:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8083e4a:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 8083e4c:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 8083e50:	2201      	movs	r2, #1
 8083e52:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8083e54:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8083e58:	f7ff ffdf 	bl	8083e1a <_ZN6String6concatEPKcj>
}
 8083e5c:	b003      	add	sp, #12
 8083e5e:	f85d fb04 	ldr.w	pc, [sp], #4

08083e62 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8083e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083e64:	4606      	mov	r6, r0
 8083e66:	460d      	mov	r5, r1
 8083e68:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8083e6a:	2400      	movs	r4, #0
  while (size--) {
 8083e6c:	42bd      	cmp	r5, r7
 8083e6e:	d00c      	beq.n	8083e8a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8083e70:	6833      	ldr	r3, [r6, #0]
 8083e72:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083e76:	689b      	ldr	r3, [r3, #8]
 8083e78:	4630      	mov	r0, r6
 8083e7a:	4798      	blx	r3
     if (chunk>=0)
 8083e7c:	2800      	cmp	r0, #0
 8083e7e:	db01      	blt.n	8083e84 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8083e80:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8083e82:	e7f3      	b.n	8083e6c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8083e84:	2c00      	cmp	r4, #0
 8083e86:	bf08      	it	eq
 8083e88:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8083e8a:	4620      	mov	r0, r4
 8083e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083e8e <_ZN5Print5printEPKc>:
 8083e8e:	b508      	push	{r3, lr}
 8083e90:	f7fd ffdc 	bl	8081e4c <_ZN5Print5writeEPKc>
 8083e94:	bd08      	pop	{r3, pc}

08083e96 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8083e96:	6803      	ldr	r3, [r0, #0]
 8083e98:	689b      	ldr	r3, [r3, #8]
 8083e9a:	4718      	bx	r3

08083e9c <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 8083e9c:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8083e9e:	f7fd ffd5 	bl	8081e4c <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
 8083ea2:	bd08      	pop	{r3, pc}

08083ea4 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 8083ea4:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8083ea6:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8083ea8:	4605      	mov	r5, r0
  size_t n = print('\r');
 8083eaa:	f7ff fff4 	bl	8083e96 <_ZN5Print5printEc>
  n += print('\n');
 8083eae:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8083eb0:	4604      	mov	r4, r0
  n += print('\n');
 8083eb2:	4628      	mov	r0, r5
 8083eb4:	f7ff ffef 	bl	8083e96 <_ZN5Print5printEc>
  return n;
}
 8083eb8:	4420      	add	r0, r4
 8083eba:	bd38      	pop	{r3, r4, r5, pc}

08083ebc <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8083ebc:	b538      	push	{r3, r4, r5, lr}
 8083ebe:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8083ec0:	f7fd ffc4 	bl	8081e4c <_ZN5Print5writeEPKc>
 8083ec4:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8083ec6:	4628      	mov	r0, r5
 8083ec8:	f7ff ffec 	bl	8083ea4 <_ZN5Print7printlnEv>
  return n;
}
 8083ecc:	4420      	add	r0, r4
 8083ece:	bd38      	pop	{r3, r4, r5, pc}

08083ed0 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8083ed0:	2a01      	cmp	r2, #1
 8083ed2:	bf98      	it	ls
 8083ed4:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8083ed6:	b530      	push	{r4, r5, lr}
 8083ed8:	460b      	mov	r3, r1
 8083eda:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8083edc:	2100      	movs	r1, #0
 8083ede:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8083ee2:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 8083ee6:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 8083eea:	fb05 3312 	mls	r3, r5, r2, r3
 8083eee:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8083ef0:	2b09      	cmp	r3, #9
 8083ef2:	bf94      	ite	ls
 8083ef4:	3330      	addls	r3, #48	; 0x30
 8083ef6:	3337      	addhi	r3, #55	; 0x37
 8083ef8:	b2db      	uxtb	r3, r3
 8083efa:	4621      	mov	r1, r4
 8083efc:	f804 3901 	strb.w	r3, [r4], #-1
 8083f00:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8083f02:	2d00      	cmp	r5, #0
 8083f04:	d1ef      	bne.n	8083ee6 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8083f06:	f7fd ffa1 	bl	8081e4c <_ZN5Print5writeEPKc>
}
 8083f0a:	b00b      	add	sp, #44	; 0x2c
 8083f0c:	bd30      	pop	{r4, r5, pc}

08083f0e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8083f0e:	b40c      	push	{r2, r3}
 8083f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8083f14:	b087      	sub	sp, #28
 8083f16:	af00      	add	r7, sp, #0
 8083f18:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8083f1c:	f854 9b04 	ldr.w	r9, [r4], #4
 8083f20:	4605      	mov	r5, r0
 8083f22:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8083f24:	4623      	mov	r3, r4
 8083f26:	464a      	mov	r2, r9
 8083f28:	2114      	movs	r1, #20
 8083f2a:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8083f2c:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8083f2e:	f7ff fd6f 	bl	8083a10 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8083f32:	2813      	cmp	r0, #19
 8083f34:	d805      	bhi.n	8083f42 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8083f36:	1d39      	adds	r1, r7, #4
 8083f38:	4628      	mov	r0, r5
 8083f3a:	f7fd ff87 	bl	8081e4c <_ZN5Print5writeEPKc>
 8083f3e:	4604      	mov	r4, r0
 8083f40:	e013      	b.n	8083f6a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8083f42:	f100 0308 	add.w	r3, r0, #8
 8083f46:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8083f4a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8083f4c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8083f50:	1c41      	adds	r1, r0, #1
 8083f52:	4623      	mov	r3, r4
 8083f54:	464a      	mov	r2, r9
 8083f56:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8083f58:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8083f5a:	f7ff fd59 	bl	8083a10 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8083f5e:	4669      	mov	r1, sp
 8083f60:	4628      	mov	r0, r5
 8083f62:	f7fd ff73 	bl	8081e4c <_ZN5Print5writeEPKc>
 8083f66:	4604      	mov	r4, r0
 8083f68:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8083f6a:	b11e      	cbz	r6, 8083f74 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8083f6c:	4628      	mov	r0, r5
 8083f6e:	f7ff ff99 	bl	8083ea4 <_ZN5Print7printlnEv>
 8083f72:	4404      	add	r4, r0
    return n;
}
 8083f74:	4620      	mov	r0, r4
 8083f76:	371c      	adds	r7, #28
 8083f78:	46bd      	mov	sp, r7
 8083f7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8083f7e:	b002      	add	sp, #8
 8083f80:	4770      	bx	lr

08083f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083f82:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8083f84:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083f86:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8083f88:	b17c      	cbz	r4, 8083faa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8083f8a:	6863      	ldr	r3, [r4, #4]
 8083f8c:	3b01      	subs	r3, #1
 8083f8e:	6063      	str	r3, [r4, #4]
 8083f90:	b95b      	cbnz	r3, 8083faa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8083f92:	6823      	ldr	r3, [r4, #0]
 8083f94:	4620      	mov	r0, r4
 8083f96:	689b      	ldr	r3, [r3, #8]
 8083f98:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083f9a:	68a3      	ldr	r3, [r4, #8]
 8083f9c:	3b01      	subs	r3, #1
 8083f9e:	60a3      	str	r3, [r4, #8]
 8083fa0:	b91b      	cbnz	r3, 8083faa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8083fa2:	6823      	ldr	r3, [r4, #0]
 8083fa4:	4620      	mov	r0, r4
 8083fa6:	68db      	ldr	r3, [r3, #12]
 8083fa8:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8083faa:	4628      	mov	r0, r5
 8083fac:	bd38      	pop	{r3, r4, r5, pc}

08083fae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8083fae:	680b      	ldr	r3, [r1, #0]
 8083fb0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8083fb2:	b113      	cbz	r3, 8083fba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8083fb4:	685a      	ldr	r2, [r3, #4]
 8083fb6:	3201      	adds	r2, #1
 8083fb8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8083fba:	4770      	bx	lr

08083fbc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8083fbc:	4a01      	ldr	r2, [pc, #4]	; (8083fc4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8083fbe:	4b02      	ldr	r3, [pc, #8]	; (8083fc8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8083fc0:	601a      	str	r2, [r3, #0]
 8083fc2:	4770      	bx	lr
 8083fc4:	08087b7e 	.word	0x08087b7e
 8083fc8:	200004a4 	.word	0x200004a4

08083fcc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8083fcc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083fce:	2000      	movs	r0, #0
 8083fd0:	f7ff fcd6 	bl	8083980 <spark_sync_time_pending>
 8083fd4:	b128      	cbz	r0, 8083fe2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083fd6:	f7ff fcc3 	bl	8083960 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083fda:	f080 0001 	eor.w	r0, r0, #1
 8083fde:	b2c0      	uxtb	r0, r0
 8083fe0:	bd08      	pop	{r3, pc}
 8083fe2:	2001      	movs	r0, #1
    }
 8083fe4:	bd08      	pop	{r3, pc}
	...

08083fe8 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8083fea:	4b0e      	ldr	r3, [pc, #56]	; (8084024 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083fec:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8083fee:	681b      	ldr	r3, [r3, #0]
 8083ff0:	a802      	add	r0, sp, #8
 8083ff2:	4419      	add	r1, r3
 8083ff4:	4b0c      	ldr	r3, [pc, #48]	; (8084028 <_ZN9TimeClass7timeStrEl+0x40>)
 8083ff6:	681b      	ldr	r3, [r3, #0]
 8083ff8:	4419      	add	r1, r3
 8083ffa:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8083ffe:	f002 f88d 	bl	808611c <localtime>
        char* ascstr = asctime(calendar_time);
 8084002:	f002 f83d 	bl	8086080 <asctime>
 8084006:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8084008:	f002 ff0c 	bl	8086e24 <strlen>
        ascstr[len-1] = 0; // remove final newline
 808400c:	2300      	movs	r3, #0
 808400e:	4428      	add	r0, r5
 8084010:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8084014:	4629      	mov	r1, r5
 8084016:	4620      	mov	r0, r4
 8084018:	f7ff fedb 	bl	8083dd2 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808401c:	4620      	mov	r0, r4
 808401e:	b003      	add	sp, #12
 8084020:	bd30      	pop	{r4, r5, pc}
 8084022:	bf00      	nop
 8084024:	200004b0 	.word	0x200004b0
 8084028:	200004ac 	.word	0x200004ac

0808402c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084030:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8084032:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8084034:	4607      	mov	r7, r0
 8084036:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8084038:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808403a:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808403c:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808403e:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8084040:	f002 ff0d 	bl	8086e5e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8084044:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8084046:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8084048:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808404c:	f002 feea 	bl	8086e24 <strlen>
 8084050:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8084052:	b925      	cbnz	r5, 808405e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 8084054:	4924      	ldr	r1, [pc, #144]	; (80840e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 8084056:	a803      	add	r0, sp, #12
 8084058:	f002 f9ac 	bl	80863b4 <strcpy>
 808405c:	e013      	b.n	8084086 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808405e:	213c      	movs	r1, #60	; 0x3c
 8084060:	fb95 f2f1 	sdiv	r2, r5, r1
 8084064:	2a00      	cmp	r2, #0
 8084066:	bfb8      	it	lt
 8084068:	4252      	neglt	r2, r2
 808406a:	fb92 f3f1 	sdiv	r3, r2, r1
 808406e:	fb01 2213 	mls	r2, r1, r3, r2
 8084072:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8084076:	9200      	str	r2, [sp, #0]
 8084078:	fb95 f3f3 	sdiv	r3, r5, r3
 808407c:	4a1b      	ldr	r2, [pc, #108]	; (80840ec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 808407e:	2110      	movs	r1, #16
 8084080:	a803      	add	r0, sp, #12
 8084082:	f7ff fcb5 	bl	80839f0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8084086:	4625      	mov	r5, r4
 8084088:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808408a:	f108 3aff 	add.w	sl, r8, #4294967295
 808408e:	45b2      	cmp	sl, r6
 8084090:	d91b      	bls.n	80840ca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8084092:	782b      	ldrb	r3, [r5, #0]
 8084094:	2b25      	cmp	r3, #37	; 0x25
 8084096:	d116      	bne.n	80840c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 8084098:	786b      	ldrb	r3, [r5, #1]
 808409a:	2b7a      	cmp	r3, #122	; 0x7a
 808409c:	d113      	bne.n	80840c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 808409e:	a803      	add	r0, sp, #12
 80840a0:	f002 fec0 	bl	8086e24 <strlen>
 80840a4:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80840a6:	4430      	add	r0, r6
 80840a8:	ebc6 020a 	rsb	r2, r6, sl
 80840ac:	1ca9      	adds	r1, r5, #2
 80840ae:	4420      	add	r0, r4
 80840b0:	f002 f93b 	bl	808632a <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80840b4:	4642      	mov	r2, r8
 80840b6:	a903      	add	r1, sp, #12
 80840b8:	4628      	mov	r0, r5
 80840ba:	f002 f936 	bl	808632a <memcpy>
            len = strlen(format_str);
 80840be:	4620      	mov	r0, r4
 80840c0:	f002 feb0 	bl	8086e24 <strlen>
 80840c4:	4680      	mov	r8, r0
 80840c6:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80840c8:	e7de      	b.n	8084088 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80840ca:	464b      	mov	r3, r9
 80840cc:	4622      	mov	r2, r4
 80840ce:	2132      	movs	r1, #50	; 0x32
 80840d0:	a807      	add	r0, sp, #28
 80840d2:	f002 f9f3 	bl	80864bc <strftime>
    return String(buf);
 80840d6:	a907      	add	r1, sp, #28
 80840d8:	4638      	mov	r0, r7
 80840da:	f7ff fe7a 	bl	8083dd2 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80840de:	4638      	mov	r0, r7
 80840e0:	b024      	add	sp, #144	; 0x90
 80840e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80840e6:	bf00      	nop
 80840e8:	080881c9 	.word	0x080881c9
 80840ec:	08087be6 	.word	0x08087be6

080840f0 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80840f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80840f2:	4605      	mov	r5, r0
 80840f4:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80840f6:	461c      	mov	r4, r3
 80840f8:	b913      	cbnz	r3, 8084100 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80840fa:	4b12      	ldr	r3, [pc, #72]	; (8084144 <_ZN9TimeClass6formatElPKc+0x54>)
 80840fc:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80840fe:	b12c      	cbz	r4, 808410c <_ZN9TimeClass6formatElPKc+0x1c>
 8084100:	4b11      	ldr	r3, [pc, #68]	; (8084148 <_ZN9TimeClass6formatElPKc+0x58>)
 8084102:	4620      	mov	r0, r4
 8084104:	6819      	ldr	r1, [r3, #0]
 8084106:	f002 f94b 	bl	80863a0 <strcmp>
 808410a:	b920      	cbnz	r0, 8084116 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808410c:	9901      	ldr	r1, [sp, #4]
 808410e:	4628      	mov	r0, r5
 8084110:	f7ff ff6a 	bl	8083fe8 <_ZN9TimeClass7timeStrEl>
 8084114:	e013      	b.n	808413e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 8084116:	4f0d      	ldr	r7, [pc, #52]	; (808414c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8084118:	9a01      	ldr	r2, [sp, #4]
 808411a:	683b      	ldr	r3, [r7, #0]
 808411c:	4e0c      	ldr	r6, [pc, #48]	; (8084150 <_ZN9TimeClass6formatElPKc+0x60>)
 808411e:	441a      	add	r2, r3
 8084120:	6833      	ldr	r3, [r6, #0]
 8084122:	a802      	add	r0, sp, #8
 8084124:	4413      	add	r3, r2
 8084126:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808412a:	f001 fff7 	bl	808611c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808412e:	683a      	ldr	r2, [r7, #0]
 8084130:	6833      	ldr	r3, [r6, #0]
 8084132:	4601      	mov	r1, r0
 8084134:	4413      	add	r3, r2
 8084136:	4628      	mov	r0, r5
 8084138:	4622      	mov	r2, r4
 808413a:	f7ff ff77 	bl	808402c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808413e:	4628      	mov	r0, r5
 8084140:	b003      	add	sp, #12
 8084142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084144:	200004a8 	.word	0x200004a8
 8084148:	2000020c 	.word	0x2000020c
 808414c:	200004b0 	.word	0x200004b0
 8084150:	200004ac 	.word	0x200004ac

08084154 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8084154:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8084156:	2000      	movs	r0, #0
 8084158:	f7ff fa26 	bl	80835a8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808415c:	4604      	mov	r4, r0
 808415e:	b968      	cbnz	r0, 808417c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8084160:	f7ff fb4a 	bl	80837f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8084164:	2801      	cmp	r0, #1
 8084166:	d10b      	bne.n	8084180 <_ZN9TimeClass7isValidEv+0x2c>
 8084168:	4620      	mov	r0, r4
 808416a:	f7ff fb7d 	bl	8083868 <system_thread_get_state>
 808416e:	b938      	cbnz	r0, 8084180 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8084170:	f7ff ff2c 	bl	8083fcc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8084174:	b930      	cbnz	r0, 8084184 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8084176:	f7ff fbe3 	bl	8083940 <spark_process>
 808417a:	e7f9      	b.n	8084170 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808417c:	2001      	movs	r0, #1
 808417e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8084180:	2000      	movs	r0, #0
 8084182:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8084184:	f7ff ff22 	bl	8083fcc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8084188:	2000      	movs	r0, #0
 808418a:	f7ff fa0d 	bl	80835a8 <HAL_RTC_Time_Is_Valid>
 808418e:	3000      	adds	r0, #0
 8084190:	bf18      	it	ne
 8084192:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8084194:	bd10      	pop	{r4, pc}

08084196 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8084196:	b508      	push	{r3, lr}
    (void)isValid();
 8084198:	f7ff ffdc 	bl	8084154 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808419c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80841a0:	f7ff b9fa 	b.w	8083598 <HAL_RTC_Get_UnixTime>

080841a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80841a4:	4b02      	ldr	r3, [pc, #8]	; (80841b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80841a6:	681a      	ldr	r2, [r3, #0]
 80841a8:	4b02      	ldr	r3, [pc, #8]	; (80841b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80841aa:	601a      	str	r2, [r3, #0]
 80841ac:	4770      	bx	lr
 80841ae:	bf00      	nop
 80841b0:	2000020c 	.word	0x2000020c
 80841b4:	200004a8 	.word	0x200004a8

080841b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80841b8:	2100      	movs	r1, #0
 80841ba:	f7ff bb2d 	b.w	8083818 <system_delay_ms>

080841be <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80841be:	b510      	push	{r4, lr}
 80841c0:	4604      	mov	r4, r0
 80841c2:	f7fc f8ed 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
 80841c6:	4620      	mov	r0, r4
 80841c8:	bd10      	pop	{r4, pc}

080841ca <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80841ca:	b513      	push	{r0, r1, r4, lr}
 80841cc:	460b      	mov	r3, r1
 80841ce:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80841d0:	c803      	ldmia	r0, {r0, r1}
 80841d2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80841d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80841da:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80841de:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80841e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80841e6:	b002      	add	sp, #8
 80841e8:	bd10      	pop	{r4, pc}
	...

080841ec <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80841ec:	4803      	ldr	r0, [pc, #12]	; (80841fc <_GLOBAL__sub_I_RGB+0x10>)
 80841ee:	2300      	movs	r3, #0
 80841f0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80841f2:	4a03      	ldr	r2, [pc, #12]	; (8084200 <_GLOBAL__sub_I_RGB+0x14>)
 80841f4:	4903      	ldr	r1, [pc, #12]	; (8084204 <_GLOBAL__sub_I_RGB+0x18>)
 80841f6:	f001 b88d 	b.w	8085314 <__aeabi_atexit>
 80841fa:	bf00      	nop
 80841fc:	200004b8 	.word	0x200004b8
 8084200:	200002c8 	.word	0x200002c8
 8084204:	080841bf 	.word	0x080841bf

08084208 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8084208:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808420a:	4b18      	ldr	r3, [pc, #96]	; (808426c <serialEventRun+0x64>)
 808420c:	b133      	cbz	r3, 808421c <serialEventRun+0x14>
 808420e:	f000 fc27 	bl	8084a60 <_Z16_fetch_usbserialv>
 8084212:	6803      	ldr	r3, [r0, #0]
 8084214:	691b      	ldr	r3, [r3, #16]
 8084216:	4798      	blx	r3
 8084218:	2800      	cmp	r0, #0
 808421a:	dc1e      	bgt.n	808425a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808421c:	4b14      	ldr	r3, [pc, #80]	; (8084270 <serialEventRun+0x68>)
 808421e:	b133      	cbz	r3, 808422e <serialEventRun+0x26>
 8084220:	f000 fd88 	bl	8084d34 <_Z22__fetch_global_Serial1v>
 8084224:	6803      	ldr	r3, [r0, #0]
 8084226:	691b      	ldr	r3, [r3, #16]
 8084228:	4798      	blx	r3
 808422a:	2800      	cmp	r0, #0
 808422c:	dc18      	bgt.n	8084260 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808422e:	4b11      	ldr	r3, [pc, #68]	; (8084274 <serialEventRun+0x6c>)
 8084230:	b10b      	cbz	r3, 8084236 <serialEventRun+0x2e>
 8084232:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8084236:	4b10      	ldr	r3, [pc, #64]	; (8084278 <serialEventRun+0x70>)
 8084238:	b10b      	cbz	r3, 808423e <serialEventRun+0x36>
 808423a:	f7fc f99d 	bl	8080578 <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808423e:	4b0f      	ldr	r3, [pc, #60]	; (808427c <serialEventRun+0x74>)
 8084240:	b10b      	cbz	r3, 8084246 <serialEventRun+0x3e>
 8084242:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8084246:	4b0e      	ldr	r3, [pc, #56]	; (8084280 <serialEventRun+0x78>)
 8084248:	b17b      	cbz	r3, 808426a <serialEventRun+0x62>
 808424a:	f000 fc45 	bl	8084ad8 <_Z17_fetch_usbserial1v>
 808424e:	6803      	ldr	r3, [r0, #0]
 8084250:	691b      	ldr	r3, [r3, #16]
 8084252:	4798      	blx	r3
 8084254:	2800      	cmp	r0, #0
 8084256:	dc06      	bgt.n	8084266 <serialEventRun+0x5e>
 8084258:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808425a:	f3af 8000 	nop.w
 808425e:	e7dd      	b.n	808421c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8084260:	f3af 8000 	nop.w
 8084264:	e7e3      	b.n	808422e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8084266:	f3af 8000 	nop.w
 808426a:	bd08      	pop	{r3, pc}
	...
 8084278:	08080579 	.word	0x08080579
	...

08084284 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8084284:	b508      	push	{r3, lr}
	serialEventRun();
 8084286:	f7ff ffbf 	bl	8084208 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808428a:	f7ff f97d 	bl	8083588 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808428e:	4b01      	ldr	r3, [pc, #4]	; (8084294 <_post_loop+0x10>)
 8084290:	6018      	str	r0, [r3, #0]
 8084292:	bd08      	pop	{r3, pc}
 8084294:	20000978 	.word	0x20000978

08084298 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8084298:	4802      	ldr	r0, [pc, #8]	; (80842a4 <_Z33system_initialize_user_backup_ramv+0xc>)
 808429a:	4a03      	ldr	r2, [pc, #12]	; (80842a8 <_Z33system_initialize_user_backup_ramv+0x10>)
 808429c:	4903      	ldr	r1, [pc, #12]	; (80842ac <_Z33system_initialize_user_backup_ramv+0x14>)
 808429e:	1a12      	subs	r2, r2, r0
 80842a0:	f002 b843 	b.w	808632a <memcpy>
 80842a4:	40024000 	.word	0x40024000
 80842a8:	40024004 	.word	0x40024004
 80842ac:	080882a0 	.word	0x080882a0

080842b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80842b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80842b2:	2300      	movs	r3, #0
 80842b4:	9300      	str	r3, [sp, #0]
 80842b6:	461a      	mov	r2, r3
 80842b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80842bc:	f7ff fae6 	bl	808388c <system_ctrl_set_result>
}
 80842c0:	b003      	add	sp, #12
 80842c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080842c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80842c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80842ca:	8843      	ldrh	r3, [r0, #2]
 80842cc:	2b0a      	cmp	r3, #10
 80842ce:	d008      	beq.n	80842e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80842d0:	2b50      	cmp	r3, #80	; 0x50
 80842d2:	d109      	bne.n	80842e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80842d4:	4b09      	ldr	r3, [pc, #36]	; (80842fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80842d6:	681b      	ldr	r3, [r3, #0]
 80842d8:	b13b      	cbz	r3, 80842ea <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80842da:	b003      	add	sp, #12
 80842dc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80842e0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80842e2:	f7ff ffe5 	bl	80842b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80842e6:	e006      	b.n	80842f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80842e8:	2300      	movs	r3, #0
 80842ea:	9300      	str	r3, [sp, #0]
 80842ec:	461a      	mov	r2, r3
 80842ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80842f2:	f7ff facb 	bl	808388c <system_ctrl_set_result>
        break;
    }
}
 80842f6:	b003      	add	sp, #12
 80842f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80842fc:	200004c8 	.word	0x200004c8

08084300 <module_user_init_hook>:

void module_user_init_hook()
{
 8084300:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8084302:	4c10      	ldr	r4, [pc, #64]	; (8084344 <module_user_init_hook+0x44>)
 8084304:	4d10      	ldr	r5, [pc, #64]	; (8084348 <module_user_init_hook+0x48>)
 8084306:	6823      	ldr	r3, [r4, #0]
 8084308:	42ab      	cmp	r3, r5
 808430a:	4b10      	ldr	r3, [pc, #64]	; (808434c <module_user_init_hook+0x4c>)
 808430c:	bf0c      	ite	eq
 808430e:	2201      	moveq	r2, #1
 8084310:	2200      	movne	r2, #0
 8084312:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8084314:	d002      	beq.n	808431c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8084316:	f7ff ffbf 	bl	8084298 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808431a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808431c:	f7ff f91c 	bl	8083558 <HAL_RNG_GetRandomNumber>
 8084320:	4604      	mov	r4, r0
    srand(seed);
 8084322:	f002 f815 	bl	8086350 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8084326:	4b0a      	ldr	r3, [pc, #40]	; (8084350 <module_user_init_hook+0x50>)
 8084328:	b113      	cbz	r3, 8084330 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808432a:	4620      	mov	r0, r4
 808432c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8084330:	2100      	movs	r1, #0
 8084332:	4807      	ldr	r0, [pc, #28]	; (8084350 <module_user_init_hook+0x50>)
 8084334:	f7ff fb2c 	bl	8083990 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8084338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808433c:	2100      	movs	r1, #0
 808433e:	4805      	ldr	r0, [pc, #20]	; (8084354 <module_user_init_hook+0x54>)
 8084340:	f7ff ba9a 	b.w	8083878 <system_ctrl_set_app_request_handler>
 8084344:	40024000 	.word	0x40024000
 8084348:	9a271c1e 	.word	0x9a271c1e
 808434c:	200004cc 	.word	0x200004cc
 8084350:	00000000 	.word	0x00000000
 8084354:	080842c9 	.word	0x080842c9

08084358 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8084358:	4770      	bx	lr

0808435a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808435a:	2000      	movs	r0, #0
 808435c:	4770      	bx	lr

0808435e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808435e:	b510      	push	{r4, lr}
 8084360:	4604      	mov	r4, r0
 8084362:	2110      	movs	r1, #16
 8084364:	f000 ffe4 	bl	8085330 <_ZdlPvj>
 8084368:	4620      	mov	r0, r4
 808436a:	bd10      	pop	{r4, pc}

0808436c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808436c:	b508      	push	{r3, lr}
      { delete this; }
 808436e:	b108      	cbz	r0, 8084374 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8084370:	f7ff fff5 	bl	808435e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8084374:	bd08      	pop	{r3, pc}

08084376 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8084376:	2200      	movs	r2, #0
 8084378:	6002      	str	r2, [r0, #0]
 808437a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808437e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8084380:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8084382:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8084386:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8084388:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808438a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 808438c:	680c      	ldr	r4, [r1, #0]
 808438e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8084390:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8084392:	bd10      	pop	{r4, pc}

08084394 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8084394:	b510      	push	{r4, lr}
 8084396:	4604      	mov	r4, r0
    free((void*)msg_);
 8084398:	6800      	ldr	r0, [r0, #0]
 808439a:	f7ff fb09 	bl	80839b0 <free>
}
 808439e:	4620      	mov	r0, r4
 80843a0:	bd10      	pop	{r4, pc}

080843a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80843a2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80843a4:	68c4      	ldr	r4, [r0, #12]
 80843a6:	b1f4      	cbz	r4, 80843e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80843a8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80843aa:	2b02      	cmp	r3, #2
 80843ac:	d103      	bne.n	80843b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80843ae:	f104 000c 	add.w	r0, r4, #12
 80843b2:	f7ff ffef 	bl	8084394 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80843b6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80843b8:	b135      	cbz	r5, 80843c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80843ba:	4628      	mov	r0, r5
 80843bc:	f7fb fff0 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
 80843c0:	2110      	movs	r1, #16
 80843c2:	4628      	mov	r0, r5
 80843c4:	f000 ffb4 	bl	8085330 <_ZdlPvj>
 80843c8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80843ca:	b135      	cbz	r5, 80843da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80843cc:	4628      	mov	r0, r5
 80843ce:	f7fb ffe7 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
 80843d2:	2110      	movs	r1, #16
 80843d4:	4628      	mov	r0, r5
 80843d6:	f000 ffab 	bl	8085330 <_ZdlPvj>
 80843da:	4620      	mov	r0, r4
 80843dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80843e0:	2114      	movs	r1, #20
 80843e2:	f000 bfa5 	b.w	8085330 <_ZdlPvj>
 80843e6:	bd38      	pop	{r3, r4, r5, pc}

080843e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80843e8:	b513      	push	{r0, r1, r4, lr}
 80843ea:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80843ec:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80843f0:	2300      	movs	r3, #0
 80843f2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80843f4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80843f6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80843f8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80843fa:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80843fc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80843fe:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8084400:	f7ff fdbf 	bl	8083f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8084404:	4620      	mov	r0, r4
 8084406:	b002      	add	sp, #8
 8084408:	bd10      	pop	{r4, pc}

0808440a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808440a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808440c:	460c      	mov	r4, r1
 808440e:	4606      	mov	r6, r0
 8084410:	460f      	mov	r7, r1
 8084412:	f854 3b04 	ldr.w	r3, [r4], #4
 8084416:	ad02      	add	r5, sp, #8
 8084418:	f845 3d08 	str.w	r3, [r5, #-8]!
 808441c:	4621      	mov	r1, r4
 808441e:	a801      	add	r0, sp, #4
 8084420:	f7ff fdc5 	bl	8083fae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8084424:	4629      	mov	r1, r5
 8084426:	4630      	mov	r0, r6
 8084428:	f7ff ffde 	bl	80843e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808442c:	a801      	add	r0, sp, #4
 808442e:	f7ff fda8 	bl	8083f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8084432:	4620      	mov	r0, r4
 8084434:	f7ff fda5 	bl	8083f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8084438:	4638      	mov	r0, r7
 808443a:	2108      	movs	r1, #8
 808443c:	f000 ff78 	bl	8085330 <_ZdlPvj>
        return p;
    }
 8084440:	4630      	mov	r0, r6
 8084442:	b003      	add	sp, #12
 8084444:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08084448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8084448:	b538      	push	{r3, r4, r5, lr}
 808444a:	2300      	movs	r3, #0
 808444c:	4604      	mov	r4, r0
 808444e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8084450:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8084452:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8084454:	f7fb fe23 	bl	808009e <_Znwj>
 8084458:	b128      	cbz	r0, 8084466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808445a:	2301      	movs	r3, #1
 808445c:	6043      	str	r3, [r0, #4]
 808445e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8084460:	4b02      	ldr	r3, [pc, #8]	; (808446c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8084462:	60c5      	str	r5, [r0, #12]
 8084464:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8084466:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8084468:	4620      	mov	r0, r4
 808446a:	bd38      	pop	{r3, r4, r5, pc}
 808446c:	08087c18 	.word	0x08087c18

08084470 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8084470:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8084472:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8084474:	b90a      	cbnz	r2, 808447a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8084476:	f000 ff6e 	bl	8085356 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808447a:	68c3      	ldr	r3, [r0, #12]
    }
 808447c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8084480:	4718      	bx	r3

08084482 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8084482:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8084484:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8084486:	f100 0110 	add.w	r1, r0, #16
 808448a:	f7ff fff1 	bl	8084470 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808448e:	bd08      	pop	{r3, pc}

08084490 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8084490:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8084492:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8084494:	b90a      	cbnz	r2, 808449a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8084496:	f000 ff5e 	bl	8085356 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808449a:	68c3      	ldr	r3, [r0, #12]
    }
 808449c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80844a0:	4718      	bx	r3

080844a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80844a2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80844a4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80844a6:	f100 0110 	add.w	r1, r0, #16
 80844aa:	f7ff fff1 	bl	8084490 <_ZNKSt8functionIFvRKbEEclES1_>
 80844ae:	bd08      	pop	{r3, pc}

080844b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80844b0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80844b2:	2300      	movs	r3, #0
 80844b4:	6083      	str	r3, [r0, #8]
 80844b6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80844b8:	4604      	mov	r4, r0
 80844ba:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80844bc:	b12b      	cbz	r3, 80844ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80844be:	2202      	movs	r2, #2
 80844c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80844c2:	68eb      	ldr	r3, [r5, #12]
 80844c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80844c6:	68ab      	ldr	r3, [r5, #8]
 80844c8:	60a3      	str	r3, [r4, #8]
	}
    }
 80844ca:	4620      	mov	r0, r4
 80844cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080844d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80844d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80844d2:	b089      	sub	sp, #36	; 0x24
 80844d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80844d6:	4668      	mov	r0, sp
 80844d8:	f7ff ff4d 	bl	8084376 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80844dc:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80844e0:	2300      	movs	r3, #0
 80844e2:	f88d 3008 	strb.w	r3, [sp, #8]
 80844e6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80844ea:	2b00      	cmp	r3, #0
 80844ec:	d103      	bne.n	80844f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80844ee:	e8c4 2f41 	strexb	r1, r2, [r4]
 80844f2:	2900      	cmp	r1, #0
 80844f4:	d1f7      	bne.n	80844e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80844f6:	d002      	beq.n	80844fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80844f8:	f88d 3008 	strb.w	r3, [sp, #8]
 80844fc:	e063      	b.n	80845c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80844fe:	f114 050c 	adds.w	r5, r4, #12
 8084502:	d003      	beq.n	808450c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8084504:	4669      	mov	r1, sp
 8084506:	4628      	mov	r0, r5
 8084508:	f7ff ff35 	bl	8084376 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808450c:	f3bf 8f5f 	dmb	sy
 8084510:	2301      	movs	r3, #1
 8084512:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8084514:	f3bf 8f5f 	dmb	sy
 8084518:	f104 0308 	add.w	r3, r4, #8
 808451c:	2000      	movs	r0, #0
 808451e:	e853 6f00 	ldrex	r6, [r3]
 8084522:	e843 0200 	strex	r2, r0, [r3]
 8084526:	2a00      	cmp	r2, #0
 8084528:	d1f9      	bne.n	808451e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808452a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808452e:	2e00      	cmp	r6, #0
 8084530:	d049      	beq.n	80845c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8084532:	f7ff f989 	bl	8083848 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8084536:	b120      	cbz	r0, 8084542 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8084538:	4629      	mov	r1, r5
 808453a:	4630      	mov	r0, r6
 808453c:	f7ff ff98 	bl	8084470 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8084540:	e03a      	b.n	80845b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8084542:	4631      	mov	r1, r6
 8084544:	a802      	add	r0, sp, #8
 8084546:	f7ff ffb3 	bl	80844b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808454a:	68e0      	ldr	r0, [r4, #12]
 808454c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8084550:	b108      	cbz	r0, 8084556 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8084552:	f001 ff37 	bl	80863c4 <strdup>
 8084556:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8084558:	2010      	movs	r0, #16
 808455a:	f8ad 501c 	strh.w	r5, [sp, #28]
 808455e:	f7fb fd9e 	bl	808009e <_Znwj>
 8084562:	4605      	mov	r5, r0
 8084564:	b1e8      	cbz	r0, 80845a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084566:	2700      	movs	r7, #0
 8084568:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808456a:	2018      	movs	r0, #24
 808456c:	f7fb fd97 	bl	808009e <_Znwj>
 8084570:	4604      	mov	r4, r0
 8084572:	b188      	cbz	r0, 8084598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8084574:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084576:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8084578:	a802      	add	r0, sp, #8
 808457a:	f7ff fe26 	bl	80841ca <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808457e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8084580:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8084582:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084584:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8084586:	9204      	str	r2, [sp, #16]
 8084588:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808458a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808458c:	60e3      	str	r3, [r4, #12]
 808458e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8084592:	9205      	str	r2, [sp, #20]
 8084594:	f7ff feef 	bl	8084376 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084598:	4b0d      	ldr	r3, [pc, #52]	; (80845d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808459a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808459c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808459e:	4b0d      	ldr	r3, [pc, #52]	; (80845d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80845a0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80845a2:	a806      	add	r0, sp, #24
 80845a4:	f7ff fef6 	bl	8084394 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80845a8:	a802      	add	r0, sp, #8
 80845aa:	f7fb fef9 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80845ae:	2200      	movs	r2, #0
 80845b0:	4629      	mov	r1, r5
 80845b2:	4809      	ldr	r0, [pc, #36]	; (80845d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80845b4:	f7ff f950 	bl	8083858 <application_thread_invoke>
 80845b8:	4630      	mov	r0, r6
 80845ba:	f7fb fef1 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80845be:	2110      	movs	r1, #16
 80845c0:	4630      	mov	r0, r6
 80845c2:	f000 feb5 	bl	8085330 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80845c6:	4668      	mov	r0, sp
 80845c8:	f7ff fee4 	bl	8084394 <_ZN8particle5ErrorD1Ev>
    }
 80845cc:	b009      	add	sp, #36	; 0x24
 80845ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80845d0:	08084483 	.word	0x08084483
 80845d4:	080846f9 	.word	0x080846f9
 80845d8:	08084d81 	.word	0x08084d81

080845dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80845dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80845e0:	b08b      	sub	sp, #44	; 0x2c
 80845e2:	4606      	mov	r6, r0
 80845e4:	460f      	mov	r7, r1
 80845e6:	4690      	mov	r8, r2
 80845e8:	4699      	mov	r9, r3
 80845ea:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80845ee:	f7ff f9b7 	bl	8083960 <spark_cloud_flag_connected>
 80845f2:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80845f4:	4683      	mov	fp, r0
 80845f6:	bb30      	cbnz	r0, 8084646 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80845f8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80845fc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80845fe:	a905      	add	r1, sp, #20
 8084600:	4628      	mov	r0, r5
 8084602:	f8ad 3018 	strh.w	r3, [sp, #24]
 8084606:	f7ff feb6 	bl	8084376 <_ZN8particle5ErrorC1EOS0_>
 808460a:	2014      	movs	r0, #20
 808460c:	f7fb fd47 	bl	808009e <_Znwj>
 8084610:	4604      	mov	r4, r0
 8084612:	b158      	cbz	r0, 808462c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8084614:	2302      	movs	r3, #2
 8084616:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8084618:	2301      	movs	r3, #1
 808461a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808461c:	f8c0 b004 	str.w	fp, [r0, #4]
 8084620:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8084624:	4629      	mov	r1, r5
 8084626:	300c      	adds	r0, #12
 8084628:	f7ff fea5 	bl	8084376 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808462c:	4630      	mov	r0, r6
 808462e:	4621      	mov	r1, r4
 8084630:	f840 4b04 	str.w	r4, [r0], #4
 8084634:	f7ff ff08 	bl	8084448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8084638:	4628      	mov	r0, r5
 808463a:	f7ff feab 	bl	8084394 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808463e:	a805      	add	r0, sp, #20
 8084640:	f7ff fea8 	bl	8084394 <_ZN8particle5ErrorD1Ev>
 8084644:	e052      	b.n	80846ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8084646:	2400      	movs	r4, #0
 8084648:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808464a:	2014      	movs	r0, #20
 808464c:	606c      	str	r4, [r5, #4]
 808464e:	60ac      	str	r4, [r5, #8]
 8084650:	9307      	str	r3, [sp, #28]
 8084652:	f7fb fd24 	bl	808009e <_Znwj>
 8084656:	4601      	mov	r1, r0
 8084658:	b118      	cbz	r0, 8084662 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808465a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808465c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808465e:	6044      	str	r4, [r0, #4]
 8084660:	6084      	str	r4, [r0, #8]
 8084662:	a804      	add	r0, sp, #16
 8084664:	9103      	str	r1, [sp, #12]
 8084666:	f7ff feef 	bl	8084448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808466a:	4b22      	ldr	r3, [pc, #136]	; (80846f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808466c:	2008      	movs	r0, #8
 808466e:	9308      	str	r3, [sp, #32]
 8084670:	f7fb fd15 	bl	808009e <_Znwj>
 8084674:	4604      	mov	r4, r0
 8084676:	b128      	cbz	r0, 8084684 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8084678:	9b03      	ldr	r3, [sp, #12]
 808467a:	a904      	add	r1, sp, #16
 808467c:	f840 3b04 	str.w	r3, [r0], #4
 8084680:	f7ff fc95 	bl	8083fae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8084684:	9500      	str	r5, [sp, #0]
 8084686:	fa5f f38a 	uxtb.w	r3, sl
 808468a:	464a      	mov	r2, r9
 808468c:	4641      	mov	r1, r8
 808468e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8084690:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8084692:	f7ff f96d 	bl	8083970 <spark_send_event>
 8084696:	b920      	cbnz	r0, 80846a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8084698:	9b03      	ldr	r3, [sp, #12]
 808469a:	785b      	ldrb	r3, [r3, #1]
 808469c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80846a0:	b183      	cbz	r3, 80846c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80846a2:	9b03      	ldr	r3, [sp, #12]
 80846a4:	a904      	add	r1, sp, #16
 80846a6:	a806      	add	r0, sp, #24
 80846a8:	9305      	str	r3, [sp, #20]
 80846aa:	f7ff fc80 	bl	8083fae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80846ae:	a905      	add	r1, sp, #20
 80846b0:	4630      	mov	r0, r6
 80846b2:	f7ff fe99 	bl	80843e8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80846b6:	a806      	add	r0, sp, #24
 80846b8:	f7ff fc63 	bl	8083f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80846bc:	a804      	add	r0, sp, #16
 80846be:	f7ff fc60 	bl	8083f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80846c2:	e013      	b.n	80846ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80846c4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80846c8:	a905      	add	r1, sp, #20
 80846ca:	a803      	add	r0, sp, #12
 80846cc:	9205      	str	r2, [sp, #20]
 80846ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 80846d2:	f7ff fefd 	bl	80844d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80846d6:	a805      	add	r0, sp, #20
 80846d8:	f7ff fe5c 	bl	8084394 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80846dc:	a805      	add	r0, sp, #20
 80846de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80846e0:	f7ff fe93 	bl	808440a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80846e4:	a806      	add	r0, sp, #24
 80846e6:	f7ff fc4c 	bl	8083f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80846ea:	e7da      	b.n	80846a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80846ec:	4630      	mov	r0, r6
 80846ee:	b00b      	add	sp, #44	; 0x2c
 80846f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80846f4:	08084869 	.word	0x08084869

080846f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80846f8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80846fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80846fc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80846fe:	d006      	beq.n	808470e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8084700:	2a03      	cmp	r2, #3
 8084702:	d017      	beq.n	8084734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8084704:	2a01      	cmp	r2, #1
 8084706:	d122      	bne.n	808474e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8084708:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808470a:	6003      	str	r3, [r0, #0]
	      break;
 808470c:	e01f      	b.n	808474e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808470e:	2018      	movs	r0, #24
 8084710:	680e      	ldr	r6, [r1, #0]
 8084712:	f7fb fcc4 	bl	808009e <_Znwj>
 8084716:	4605      	mov	r5, r0
 8084718:	b150      	cbz	r0, 8084730 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808471a:	4631      	mov	r1, r6
 808471c:	f7ff fec8 	bl	80844b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8084720:	6930      	ldr	r0, [r6, #16]
 8084722:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8084726:	b108      	cbz	r0, 808472c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8084728:	f001 fe4c 	bl	80863c4 <strdup>
 808472c:	6128      	str	r0, [r5, #16]
 808472e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8084730:	6025      	str	r5, [r4, #0]
 8084732:	e00c      	b.n	808474e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8084734:	6804      	ldr	r4, [r0, #0]
 8084736:	b154      	cbz	r4, 808474e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8084738:	f104 0010 	add.w	r0, r4, #16
 808473c:	f7ff fe2a 	bl	8084394 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084740:	4620      	mov	r0, r4
 8084742:	f7fb fe2d 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8084746:	2118      	movs	r1, #24
 8084748:	4620      	mov	r0, r4
 808474a:	f000 fdf1 	bl	8085330 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808474e:	2000      	movs	r0, #0
 8084750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08084752 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8084752:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084754:	2300      	movs	r3, #0
 8084756:	6083      	str	r3, [r0, #8]
 8084758:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808475a:	4604      	mov	r4, r0
 808475c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808475e:	b12b      	cbz	r3, 808476c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8084760:	2202      	movs	r2, #2
 8084762:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8084764:	68eb      	ldr	r3, [r5, #12]
 8084766:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8084768:	68ab      	ldr	r3, [r5, #8]
 808476a:	60a3      	str	r3, [r4, #8]
	}
    }
 808476c:	4620      	mov	r0, r4
 808476e:	bd38      	pop	{r3, r4, r5, pc}

08084770 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8084770:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8084772:	b570      	push	{r4, r5, r6, lr}
 8084774:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8084776:	d006      	beq.n	8084786 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8084778:	2a03      	cmp	r2, #3
 808477a:	d011      	beq.n	80847a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808477c:	2a01      	cmp	r2, #1
 808477e:	d118      	bne.n	80847b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8084780:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8084782:	6003      	str	r3, [r0, #0]
	      break;
 8084784:	e015      	b.n	80847b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8084786:	2014      	movs	r0, #20
 8084788:	680e      	ldr	r6, [r1, #0]
 808478a:	f7fb fc88 	bl	808009e <_Znwj>
 808478e:	4605      	mov	r5, r0
 8084790:	b120      	cbz	r0, 808479c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8084792:	4631      	mov	r1, r6
 8084794:	f7ff ffdd 	bl	8084752 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8084798:	7c33      	ldrb	r3, [r6, #16]
 808479a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808479c:	6025      	str	r5, [r4, #0]
 808479e:	e008      	b.n	80847b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80847a0:	6804      	ldr	r4, [r0, #0]
 80847a2:	b134      	cbz	r4, 80847b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80847a4:	4620      	mov	r0, r4
 80847a6:	f7fb fdfb 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80847aa:	2114      	movs	r1, #20
 80847ac:	4620      	mov	r0, r4
 80847ae:	f000 fdbf 	bl	8085330 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80847b2:	2000      	movs	r0, #0
 80847b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080847b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80847b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80847ba:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80847bc:	f3bf 8f5f 	dmb	sy
 80847c0:	b087      	sub	sp, #28
 80847c2:	2300      	movs	r3, #0
 80847c4:	e850 6f00 	ldrex	r6, [r0]
 80847c8:	e840 3200 	strex	r2, r3, [r0]
 80847cc:	2a00      	cmp	r2, #0
 80847ce:	d1f9      	bne.n	80847c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80847d0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80847d4:	2e00      	cmp	r6, #0
 80847d6:	d03f      	beq.n	8084858 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80847d8:	4618      	mov	r0, r3
 80847da:	f7ff f835 	bl	8083848 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80847de:	4607      	mov	r7, r0
 80847e0:	b120      	cbz	r0, 80847ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80847e2:	4621      	mov	r1, r4
 80847e4:	4630      	mov	r0, r6
 80847e6:	f7ff fe53 	bl	8084490 <_ZNKSt8functionIFvRKbEEclES1_>
 80847ea:	e02e      	b.n	808484a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80847ec:	4631      	mov	r1, r6
 80847ee:	a801      	add	r0, sp, #4
 80847f0:	f7ff ffaf 	bl	8084752 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80847f4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80847f6:	2010      	movs	r0, #16
 80847f8:	f88d 3014 	strb.w	r3, [sp, #20]
 80847fc:	f7fb fc4f 	bl	808009e <_Znwj>
 8084800:	4605      	mov	r5, r0
 8084802:	b1d0      	cbz	r0, 808483a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084804:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8084806:	2014      	movs	r0, #20
 8084808:	f7fb fc49 	bl	808009e <_Znwj>
 808480c:	4604      	mov	r4, r0
 808480e:	b178      	cbz	r0, 8084830 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084810:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8084812:	4601      	mov	r1, r0
 8084814:	a801      	add	r0, sp, #4
 8084816:	f7ff fcd8 	bl	80841ca <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808481a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808481c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808481e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084820:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8084822:	9203      	str	r2, [sp, #12]
 8084824:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8084826:	60e3      	str	r3, [r4, #12]
 8084828:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808482c:	9204      	str	r2, [sp, #16]
 808482e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084830:	4b0a      	ldr	r3, [pc, #40]	; (808485c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8084832:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8084834:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8084836:	4b0a      	ldr	r3, [pc, #40]	; (8084860 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8084838:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808483a:	a801      	add	r0, sp, #4
 808483c:	f7fb fdb0 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8084840:	2200      	movs	r2, #0
 8084842:	4629      	mov	r1, r5
 8084844:	4807      	ldr	r0, [pc, #28]	; (8084864 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8084846:	f7ff f807 	bl	8083858 <application_thread_invoke>
 808484a:	4630      	mov	r0, r6
 808484c:	f7fb fda8 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8084850:	2110      	movs	r1, #16
 8084852:	4630      	mov	r0, r6
 8084854:	f000 fd6c 	bl	8085330 <_ZdlPvj>
        }
    }
 8084858:	b007      	add	sp, #28
 808485a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808485c:	080844a3 	.word	0x080844a3
 8084860:	08084771 	.word	0x08084771
 8084864:	08084d81 	.word	0x08084d81

08084868 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8084868:	b530      	push	{r4, r5, lr}
 808486a:	4604      	mov	r4, r0
 808486c:	b085      	sub	sp, #20
 808486e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8084870:	4668      	mov	r0, sp
 8084872:	4611      	mov	r1, r2
 8084874:	f7ff fdc9 	bl	808440a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8084878:	b17c      	cbz	r4, 808489a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808487a:	b224      	sxth	r4, r4
 808487c:	4628      	mov	r0, r5
 808487e:	b10d      	cbz	r5, 8084884 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8084880:	f001 fda0 	bl	80863c4 <strdup>
 8084884:	9002      	str	r0, [sp, #8]
 8084886:	a902      	add	r1, sp, #8
 8084888:	4668      	mov	r0, sp
 808488a:	f8ad 400c 	strh.w	r4, [sp, #12]
 808488e:	f7ff fe1f 	bl	80844d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8084892:	a802      	add	r0, sp, #8
 8084894:	f7ff fd7e 	bl	8084394 <_ZN8particle5ErrorD1Ev>
 8084898:	e01d      	b.n	80848d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808489a:	f04f 0201 	mov.w	r2, #1
 808489e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80848a0:	f88d 4008 	strb.w	r4, [sp, #8]
 80848a4:	e8d0 3f4f 	ldrexb	r3, [r0]
 80848a8:	42a3      	cmp	r3, r4
 80848aa:	d103      	bne.n	80848b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80848ac:	e8c0 2f41 	strexb	r1, r2, [r0]
 80848b0:	2900      	cmp	r1, #0
 80848b2:	d1f7      	bne.n	80848a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80848b4:	d002      	beq.n	80848bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80848b6:	f88d 3008 	strb.w	r3, [sp, #8]
 80848ba:	e00c      	b.n	80848d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80848bc:	f110 010c 	adds.w	r1, r0, #12
 80848c0:	f04f 0301 	mov.w	r3, #1
 80848c4:	bf18      	it	ne
 80848c6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80848c8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80848cc:	3004      	adds	r0, #4
 80848ce:	f800 3c03 	strb.w	r3, [r0, #-3]
 80848d2:	f7ff ff71 	bl	80847b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80848d6:	a801      	add	r0, sp, #4
 80848d8:	f7ff fb53 	bl	8083f82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80848dc:	b005      	add	sp, #20
 80848de:	bd30      	pop	{r4, r5, pc}

080848e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80848e0:	4770      	bx	lr

080848e2 <_ZN9IPAddressD0Ev>:
 80848e2:	b510      	push	{r4, lr}
 80848e4:	4604      	mov	r4, r0
 80848e6:	2108      	movs	r1, #8
 80848e8:	f000 fd22 	bl	8085330 <_ZdlPvj>
 80848ec:	4620      	mov	r0, r4
 80848ee:	bd10      	pop	{r4, pc}

080848f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80848f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80848f2:	460f      	mov	r7, r1
 80848f4:	f100 0608 	add.w	r6, r0, #8
 80848f8:	1d05      	adds	r5, r0, #4
 80848fa:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80848fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8084900:	220a      	movs	r2, #10
 8084902:	4638      	mov	r0, r7
 8084904:	f7ff fae4 	bl	8083ed0 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8084908:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808490a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808490c:	d007      	beq.n	808491e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808490e:	2c00      	cmp	r4, #0
 8084910:	d0f4      	beq.n	80848fc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8084912:	212e      	movs	r1, #46	; 0x2e
 8084914:	4638      	mov	r0, r7
 8084916:	f7ff fabe 	bl	8083e96 <_ZN5Print5printEc>
 808491a:	4404      	add	r4, r0
 808491c:	e7ee      	b.n	80848fc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808491e:	4620      	mov	r0, r4
 8084920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08084924 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8084924:	4a02      	ldr	r2, [pc, #8]	; (8084930 <_ZN9IPAddressC1Ev+0xc>)
 8084926:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8084928:	2200      	movs	r2, #0
 808492a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808492c:	4770      	bx	lr
 808492e:	bf00      	nop
 8084930:	08087c34 	.word	0x08087c34

08084934 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8084934:	4a02      	ldr	r2, [pc, #8]	; (8084940 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8084936:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8084938:	680a      	ldr	r2, [r1, #0]
 808493a:	6042      	str	r2, [r0, #4]
}
 808493c:	4770      	bx	lr
 808493e:	bf00      	nop
 8084940:	08087c34 	.word	0x08087c34

08084944 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8084944:	4a01      	ldr	r2, [pc, #4]	; (808494c <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8084946:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8084948:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808494a:	4770      	bx	lr
 808494c:	08087c34 	.word	0x08087c34

08084950 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8084950:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8084952:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8084956:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808495a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808495e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8084962:	6041      	str	r1, [r0, #4]
 8084964:	bd10      	pop	{r4, pc}
	...

08084968 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8084968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808496a:	4d04      	ldr	r5, [pc, #16]	; (808497c <_ZN9IPAddressC1Ehhhh+0x14>)
 808496c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808496e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8084972:	9500      	str	r5, [sp, #0]
 8084974:	f7ff ffec 	bl	8084950 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8084978:	b003      	add	sp, #12
 808497a:	bd30      	pop	{r4, r5, pc}
 808497c:	08087c34 	.word	0x08087c34

08084980 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8084980:	7441      	strb	r1, [r0, #17]
 8084982:	4770      	bx	lr

08084984 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8084984:	4770      	bx	lr

08084986 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8084986:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8084988:	2100      	movs	r1, #0
 808498a:	7c00      	ldrb	r0, [r0, #16]
 808498c:	f7fe ff1c 	bl	80837c8 <HAL_USB_USART_Receive_Data>
}
 8084990:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8084994:	bf28      	it	cs
 8084996:	f04f 30ff 	movcs.w	r0, #4294967295
 808499a:	bd08      	pop	{r3, pc}

0808499c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 808499c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808499e:	2101      	movs	r1, #1
 80849a0:	7c00      	ldrb	r0, [r0, #16]
 80849a2:	f7fe ff11 	bl	80837c8 <HAL_USB_USART_Receive_Data>
}
 80849a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80849aa:	bf28      	it	cs
 80849ac:	f04f 30ff 	movcs.w	r0, #4294967295
 80849b0:	bd08      	pop	{r3, pc}

080849b2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80849b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80849b4:	7c00      	ldrb	r0, [r0, #16]
 80849b6:	f7fe feff 	bl	80837b8 <HAL_USB_USART_Available_Data_For_Write>
}
 80849ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80849be:	bd08      	pop	{r3, pc}

080849c0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80849c0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80849c2:	7c00      	ldrb	r0, [r0, #16]
 80849c4:	f7fe fef0 	bl	80837a8 <HAL_USB_USART_Available_Data>
}
 80849c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80849cc:	bd08      	pop	{r3, pc}

080849ce <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80849ce:	7c00      	ldrb	r0, [r0, #16]
 80849d0:	f7fe bf0a 	b.w	80837e8 <HAL_USB_USART_Flush_Data>

080849d4 <_ZN9USBSerialD0Ev>:
 80849d4:	b510      	push	{r4, lr}
 80849d6:	4604      	mov	r4, r0
 80849d8:	2114      	movs	r1, #20
 80849da:	f000 fca9 	bl	8085330 <_ZdlPvj>
 80849de:	4620      	mov	r0, r4
 80849e0:	bd10      	pop	{r4, pc}

080849e2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80849e2:	b538      	push	{r3, r4, r5, lr}
 80849e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80849e6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80849e8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80849ea:	f7fe fee5 	bl	80837b8 <HAL_USB_USART_Available_Data_For_Write>
 80849ee:	2800      	cmp	r0, #0
 80849f0:	dc01      	bgt.n	80849f6 <_ZN9USBSerial5writeEh+0x14>
 80849f2:	7c60      	ldrb	r0, [r4, #17]
 80849f4:	b128      	cbz	r0, 8084a02 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80849f6:	4629      	mov	r1, r5
 80849f8:	7c20      	ldrb	r0, [r4, #16]
 80849fa:	f7fe feed 	bl	80837d8 <HAL_USB_USART_Send_Data>
 80849fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8084a02:	bd38      	pop	{r3, r4, r5, pc}

08084a04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8084a04:	b510      	push	{r4, lr}
 8084a06:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8084a08:	2300      	movs	r3, #0
 8084a0a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8084a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8084a10:	60a3      	str	r3, [r4, #8]
 8084a12:	4b05      	ldr	r3, [pc, #20]	; (8084a28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8084a14:	4608      	mov	r0, r1
 8084a16:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8084a18:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8084a1a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8084a1c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8084a1e:	4611      	mov	r1, r2
 8084a20:	f7fe feb2 	bl	8083788 <HAL_USB_USART_Init>
}
 8084a24:	4620      	mov	r0, r4
 8084a26:	bd10      	pop	{r4, pc}
 8084a28:	08087c48 	.word	0x08087c48

08084a2c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8084a2c:	2200      	movs	r2, #0
 8084a2e:	7c00      	ldrb	r0, [r0, #16]
 8084a30:	f7fe beb2 	b.w	8083798 <HAL_USB_USART_Begin>

08084a34 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8084a34:	b510      	push	{r4, lr}
 8084a36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084a38:	2214      	movs	r2, #20
 8084a3a:	2100      	movs	r1, #0
 8084a3c:	f001 fc80 	bl	8086340 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8084a40:	4b05      	ldr	r3, [pc, #20]	; (8084a58 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8084a42:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8084a44:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8084a46:	4b05      	ldr	r3, [pc, #20]	; (8084a5c <_Z19acquireSerialBufferv+0x28>)
 8084a48:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8084a4a:	f240 1301 	movw	r3, #257	; 0x101
 8084a4e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8084a50:	2381      	movs	r3, #129	; 0x81
 8084a52:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8084a54:	bd10      	pop	{r4, pc}
 8084a56:	bf00      	nop
 8084a58:	20000555 	.word	0x20000555
 8084a5c:	200004d4 	.word	0x200004d4

08084a60 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8084a60:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8084a62:	4d0e      	ldr	r5, [pc, #56]	; (8084a9c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8084a64:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8084a66:	a801      	add	r0, sp, #4
 8084a68:	f7ff ffe4 	bl	8084a34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8084a6c:	6829      	ldr	r1, [r5, #0]
 8084a6e:	f011 0401 	ands.w	r4, r1, #1
 8084a72:	d110      	bne.n	8084a96 <_Z16_fetch_usbserialv+0x36>
 8084a74:	4628      	mov	r0, r5
 8084a76:	f7fb fb16 	bl	80800a6 <__cxa_guard_acquire>
 8084a7a:	b160      	cbz	r0, 8084a96 <_Z16_fetch_usbserialv+0x36>
 8084a7c:	aa01      	add	r2, sp, #4
 8084a7e:	4621      	mov	r1, r4
 8084a80:	4807      	ldr	r0, [pc, #28]	; (8084aa0 <_Z16_fetch_usbserialv+0x40>)
 8084a82:	f7ff ffbf 	bl	8084a04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8084a86:	4628      	mov	r0, r5
 8084a88:	f7fb fb12 	bl	80800b0 <__cxa_guard_release>
 8084a8c:	4a05      	ldr	r2, [pc, #20]	; (8084aa4 <_Z16_fetch_usbserialv+0x44>)
 8084a8e:	4906      	ldr	r1, [pc, #24]	; (8084aa8 <_Z16_fetch_usbserialv+0x48>)
 8084a90:	4803      	ldr	r0, [pc, #12]	; (8084aa0 <_Z16_fetch_usbserialv+0x40>)
 8084a92:	f000 fc3f 	bl	8085314 <__aeabi_atexit>
	return _usbserial;
}
 8084a96:	4802      	ldr	r0, [pc, #8]	; (8084aa0 <_Z16_fetch_usbserialv+0x40>)
 8084a98:	b007      	add	sp, #28
 8084a9a:	bd30      	pop	{r4, r5, pc}
 8084a9c:	200004d0 	.word	0x200004d0
 8084aa0:	20000658 	.word	0x20000658
 8084aa4:	200002c8 	.word	0x200002c8
 8084aa8:	08084985 	.word	0x08084985

08084aac <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8084aac:	b510      	push	{r4, lr}
 8084aae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8084ab0:	2214      	movs	r2, #20
 8084ab2:	2100      	movs	r1, #0
 8084ab4:	f001 fc44 	bl	8086340 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8084ab8:	4b05      	ldr	r3, [pc, #20]	; (8084ad0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8084aba:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8084abc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8084abe:	4b05      	ldr	r3, [pc, #20]	; (8084ad4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8084ac0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8084ac2:	f240 1301 	movw	r3, #257	; 0x101
 8084ac6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8084ac8:	2381      	movs	r3, #129	; 0x81
 8084aca:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8084acc:	bd10      	pop	{r4, pc}
 8084ace:	bf00      	nop
 8084ad0:	20000708 	.word	0x20000708
 8084ad4:	20000670 	.word	0x20000670

08084ad8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8084ad8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8084ada:	4c0e      	ldr	r4, [pc, #56]	; (8084b14 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8084adc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8084ade:	a801      	add	r0, sp, #4
 8084ae0:	f7ff ffe4 	bl	8084aac <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8084ae4:	6823      	ldr	r3, [r4, #0]
 8084ae6:	07db      	lsls	r3, r3, #31
 8084ae8:	d410      	bmi.n	8084b0c <_Z17_fetch_usbserial1v+0x34>
 8084aea:	4620      	mov	r0, r4
 8084aec:	f7fb fadb 	bl	80800a6 <__cxa_guard_acquire>
 8084af0:	b160      	cbz	r0, 8084b0c <_Z17_fetch_usbserial1v+0x34>
 8084af2:	aa01      	add	r2, sp, #4
 8084af4:	2101      	movs	r1, #1
 8084af6:	4808      	ldr	r0, [pc, #32]	; (8084b18 <_Z17_fetch_usbserial1v+0x40>)
 8084af8:	f7ff ff84 	bl	8084a04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8084afc:	4620      	mov	r0, r4
 8084afe:	f7fb fad7 	bl	80800b0 <__cxa_guard_release>
 8084b02:	4a06      	ldr	r2, [pc, #24]	; (8084b1c <_Z17_fetch_usbserial1v+0x44>)
 8084b04:	4906      	ldr	r1, [pc, #24]	; (8084b20 <_Z17_fetch_usbserial1v+0x48>)
 8084b06:	4804      	ldr	r0, [pc, #16]	; (8084b18 <_Z17_fetch_usbserial1v+0x40>)
 8084b08:	f000 fc04 	bl	8085314 <__aeabi_atexit>
  return _usbserial1;
}
 8084b0c:	4802      	ldr	r0, [pc, #8]	; (8084b18 <_Z17_fetch_usbserial1v+0x40>)
 8084b0e:	b006      	add	sp, #24
 8084b10:	bd10      	pop	{r4, pc}
 8084b12:	bf00      	nop
 8084b14:	2000066c 	.word	0x2000066c
 8084b18:	200006f4 	.word	0x200006f4
 8084b1c:	200002c8 	.word	0x200002c8
 8084b20:	08084985 	.word	0x08084985

08084b24 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8084b24:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 8084b26:	b510      	push	{r4, lr}
 8084b28:	b90a      	cbnz	r2, 8084b2e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 8084b2a:	f000 fc14 	bl	8085356 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8084b2e:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 8084b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084b34:	4718      	bx	r3

08084b36 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8084b36:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084b38:	2300      	movs	r3, #0
 8084b3a:	6083      	str	r3, [r0, #8]
 8084b3c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8084b3e:	4604      	mov	r4, r0
 8084b40:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8084b42:	b12b      	cbz	r3, 8084b50 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8084b44:	2202      	movs	r2, #2
 8084b46:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8084b48:	68eb      	ldr	r3, [r5, #12]
 8084b4a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8084b4c:	68ab      	ldr	r3, [r5, #8]
 8084b4e:	60a3      	str	r3, [r4, #8]
	}
    }
 8084b50:	4620      	mov	r0, r4
 8084b52:	bd38      	pop	{r3, r4, r5, pc}

08084b54 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8084b54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 8084b56:	4b12      	ldr	r3, [pc, #72]	; (8084ba0 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8084b58:	4604      	mov	r4, r0
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8084b5a:	2010      	movs	r0, #16

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8084b5c:	460e      	mov	r6, r1
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 8084b5e:	9300      	str	r3, [sp, #0]
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8084b60:	f7fb fa9d 	bl	808009e <_Znwj>
 8084b64:	4605      	mov	r5, r0
 8084b66:	b110      	cbz	r0, 8084b6e <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 8084b68:	4631      	mov	r1, r6
 8084b6a:	f7ff ffe4 	bl	8084b36 <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 8084b6e:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8084b70:	4620      	mov	r0, r4
 8084b72:	aa02      	add	r2, sp, #8
 8084b74:	4669      	mov	r1, sp
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8084b76:	9501      	str	r5, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 8084b78:	9302      	str	r3, [sp, #8]
 8084b7a:	9303      	str	r3, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8084b7c:	f7fe fca4 	bl	80834c8 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 8084b80:	9c03      	ldr	r4, [sp, #12]
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
    HAL_InterruptCallback prev = { 0 };
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 8084b82:	1c05      	adds	r5, r0, #0
 8084b84:	bf18      	it	ne
 8084b86:	2501      	movne	r5, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 8084b88:	b134      	cbz	r4, 8084b98 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084b8a:	4620      	mov	r0, r4
 8084b8c:	f7fb fc08 	bl	80803a0 <_ZNSt14_Function_baseD1Ev>
 8084b90:	2110      	movs	r1, #16
 8084b92:	4620      	mov	r0, r4
 8084b94:	f000 fbcc 	bl	8085330 <_ZdlPvj>
    return ok;
}
 8084b98:	4628      	mov	r0, r5
 8084b9a:	b004      	add	sp, #16
 8084b9c:	bd70      	pop	{r4, r5, r6, pc}
 8084b9e:	bf00      	nop
 8084ba0:	08084b25 	.word	0x08084b25

08084ba4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8084ba4:	2200      	movs	r2, #0
 8084ba6:	4611      	mov	r1, r2
 8084ba8:	6840      	ldr	r0, [r0, #4]
 8084baa:	f7fe be91 	b.w	80838d0 <network_ready>

08084bae <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8084bae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8084bb2:	2600      	movs	r6, #0
 8084bb4:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8084bb6:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8084bb8:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8084bba:	4688      	mov	r8, r1
 8084bbc:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8084bbe:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8084bc2:	f002 f92f 	bl	8086e24 <strlen>
 8084bc6:	9600      	str	r6, [sp, #0]
 8084bc8:	b281      	uxth	r1, r0
 8084bca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8084bce:	4622      	mov	r2, r4
 8084bd0:	4638      	mov	r0, r7
 8084bd2:	f7fe fdd1 	bl	8083778 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8084bd6:	b120      	cbz	r0, 8084be2 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8084bd8:	4631      	mov	r1, r6
 8084bda:	4628      	mov	r0, r5
 8084bdc:	f7ff feb2 	bl	8084944 <_ZN9IPAddressC1Em>
 8084be0:	e003      	b.n	8084bea <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8084be2:	4621      	mov	r1, r4
 8084be4:	4628      	mov	r0, r5
 8084be6:	f7ff fea5 	bl	8084934 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8084bea:	4628      	mov	r0, r5
 8084bec:	b004      	add	sp, #16
 8084bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08084bf2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8084bf2:	2200      	movs	r2, #0
 8084bf4:	4611      	mov	r1, r2
 8084bf6:	6840      	ldr	r0, [r0, #4]
 8084bf8:	f7fe be8a 	b.w	8083910 <network_listening>

08084bfc <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8084bfc:	2200      	movs	r2, #0
 8084bfe:	4611      	mov	r1, r2
 8084c00:	6840      	ldr	r0, [r0, #4]
 8084c02:	f7fe be95 	b.w	8083930 <network_get_listen_timeout>

08084c06 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8084c06:	2200      	movs	r2, #0
 8084c08:	6840      	ldr	r0, [r0, #4]
 8084c0a:	f7fe be89 	b.w	8083920 <network_set_listen_timeout>

08084c0e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8084c0e:	2200      	movs	r2, #0
 8084c10:	f081 0101 	eor.w	r1, r1, #1
 8084c14:	6840      	ldr	r0, [r0, #4]
 8084c16:	f7fe be73 	b.w	8083900 <network_listen>

08084c1a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8084c1a:	2300      	movs	r3, #0
 8084c1c:	461a      	mov	r2, r3
 8084c1e:	4619      	mov	r1, r3
 8084c20:	6840      	ldr	r0, [r0, #4]
 8084c22:	f7fe be65 	b.w	80838f0 <network_off>

08084c26 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8084c26:	2300      	movs	r3, #0
 8084c28:	461a      	mov	r2, r3
 8084c2a:	4619      	mov	r1, r3
 8084c2c:	6840      	ldr	r0, [r0, #4]
 8084c2e:	f7fe be57 	b.w	80838e0 <network_on>

08084c32 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8084c32:	2200      	movs	r2, #0
 8084c34:	4611      	mov	r1, r2
 8084c36:	6840      	ldr	r0, [r0, #4]
 8084c38:	f7fe be3a 	b.w	80838b0 <network_connecting>

08084c3c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8084c3c:	2200      	movs	r2, #0
 8084c3e:	2102      	movs	r1, #2
 8084c40:	6840      	ldr	r0, [r0, #4]
 8084c42:	f7fe be3d 	b.w	80838c0 <network_disconnect>

08084c46 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8084c46:	2300      	movs	r3, #0
 8084c48:	461a      	mov	r2, r3
 8084c4a:	6840      	ldr	r0, [r0, #4]
 8084c4c:	f7fe be28 	b.w	80838a0 <network_connect>

08084c50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8084c50:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8084c52:	4c08      	ldr	r4, [pc, #32]	; (8084c74 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8084c54:	2528      	movs	r5, #40	; 0x28
 8084c56:	462a      	mov	r2, r5
 8084c58:	2100      	movs	r1, #0
 8084c5a:	4620      	mov	r0, r4
 8084c5c:	f001 fb70 	bl	8086340 <memset>
        cid = -1;
 8084c60:	f04f 33ff 	mov.w	r3, #4294967295
 8084c64:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8084c66:	4b04      	ldr	r3, [pc, #16]	; (8084c78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8084c68:	2204      	movs	r2, #4
 8084c6a:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8084c6c:	4a03      	ldr	r2, [pc, #12]	; (8084c7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8084c6e:	8025      	strh	r5, [r4, #0]
 8084c70:	601a      	str	r2, [r3, #0]
 8084c72:	bd38      	pop	{r3, r4, r5, pc}
 8084c74:	20000814 	.word	0x20000814
 8084c78:	2000080c 	.word	0x2000080c
 8084c7c:	08087c78 	.word	0x08087c78

08084c80 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8084c80:	7441      	strb	r1, [r0, #17]
 8084c82:	4770      	bx	lr

08084c84 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8084c84:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8084c86:	7c00      	ldrb	r0, [r0, #16]
 8084c88:	f7fe fd16 	bl	80836b8 <HAL_USART_Available_Data_For_Write>
}
 8084c8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8084c90:	bd08      	pop	{r3, pc}

08084c92 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8084c92:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8084c94:	7c00      	ldrb	r0, [r0, #16]
 8084c96:	f7fe fce7 	bl	8083668 <HAL_USART_Available_Data>
}
 8084c9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8084c9e:	bd08      	pop	{r3, pc}

08084ca0 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8084ca0:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8084ca2:	7c00      	ldrb	r0, [r0, #16]
 8084ca4:	f7fe fcf0 	bl	8083688 <HAL_USART_Peek_Data>
}
 8084ca8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8084cac:	bf28      	it	cs
 8084cae:	f04f 30ff 	movcs.w	r0, #4294967295
 8084cb2:	bd08      	pop	{r3, pc}

08084cb4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8084cb4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8084cb6:	7c00      	ldrb	r0, [r0, #16]
 8084cb8:	f7fe fcde 	bl	8083678 <HAL_USART_Read_Data>
}
 8084cbc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8084cc0:	bf28      	it	cs
 8084cc2:	f04f 30ff 	movcs.w	r0, #4294967295
 8084cc6:	bd08      	pop	{r3, pc}

08084cc8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8084cc8:	7c00      	ldrb	r0, [r0, #16]
 8084cca:	f7fe bce5 	b.w	8083698 <HAL_USART_Flush_Data>

08084cce <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8084cce:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8084cd0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8084cd2:	4604      	mov	r4, r0
 8084cd4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8084cd6:	b925      	cbnz	r5, 8084ce2 <_ZN11USARTSerial5writeEh+0x14>
 8084cd8:	7c00      	ldrb	r0, [r0, #16]
 8084cda:	f7fe fced 	bl	80836b8 <HAL_USART_Available_Data_For_Write>
 8084cde:	2800      	cmp	r0, #0
 8084ce0:	dd05      	ble.n	8084cee <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8084ce2:	4631      	mov	r1, r6
 8084ce4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8084ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8084cea:	f7fe bcb5 	b.w	8083658 <HAL_USART_Write_Data>
  }
  return 0;
}
 8084cee:	4628      	mov	r0, r5
 8084cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08084cf4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8084cf4:	b510      	push	{r4, lr}
 8084cf6:	4604      	mov	r4, r0
 8084cf8:	4608      	mov	r0, r1
 8084cfa:	4611      	mov	r1, r2
 8084cfc:	2200      	movs	r2, #0
 8084cfe:	6062      	str	r2, [r4, #4]
 8084d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8084d04:	60a2      	str	r2, [r4, #8]
 8084d06:	4a05      	ldr	r2, [pc, #20]	; (8084d1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8084d08:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8084d0a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8084d0c:	2201      	movs	r2, #1
 8084d0e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8084d10:	461a      	mov	r2, r3
 8084d12:	f7fe fc99 	bl	8083648 <HAL_USART_Init>
}
 8084d16:	4620      	mov	r0, r4
 8084d18:	bd10      	pop	{r4, pc}
 8084d1a:	bf00      	nop
 8084d1c:	08087cac 	.word	0x08087cac

08084d20 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8084d20:	2300      	movs	r3, #0
 8084d22:	7c00      	ldrb	r0, [r0, #16]
 8084d24:	f7fe bcd0 	b.w	80836c8 <HAL_USART_BeginConfig>

08084d28 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8084d28:	2200      	movs	r2, #0
 8084d2a:	f7ff bff9 	b.w	8084d20 <_ZN11USARTSerial5beginEmm>

08084d2e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8084d2e:	7c00      	ldrb	r0, [r0, #16]
 8084d30:	f7fe bcba 	b.w	80836a8 <HAL_USART_Is_Enabled>

08084d34 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8084d34:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8084d36:	4d0c      	ldr	r5, [pc, #48]	; (8084d68 <_Z22__fetch_global_Serial1v+0x34>)
 8084d38:	6829      	ldr	r1, [r5, #0]
 8084d3a:	f011 0401 	ands.w	r4, r1, #1
 8084d3e:	d111      	bne.n	8084d64 <_Z22__fetch_global_Serial1v+0x30>
 8084d40:	4628      	mov	r0, r5
 8084d42:	f7fb f9b0 	bl	80800a6 <__cxa_guard_acquire>
 8084d46:	b168      	cbz	r0, 8084d64 <_Z22__fetch_global_Serial1v+0x30>
 8084d48:	4a08      	ldr	r2, [pc, #32]	; (8084d6c <_Z22__fetch_global_Serial1v+0x38>)
 8084d4a:	4621      	mov	r1, r4
 8084d4c:	4b08      	ldr	r3, [pc, #32]	; (8084d70 <_Z22__fetch_global_Serial1v+0x3c>)
 8084d4e:	4809      	ldr	r0, [pc, #36]	; (8084d74 <_Z22__fetch_global_Serial1v+0x40>)
 8084d50:	f7ff ffd0 	bl	8084cf4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8084d54:	4628      	mov	r0, r5
 8084d56:	f7fb f9ab 	bl	80800b0 <__cxa_guard_release>
 8084d5a:	4a07      	ldr	r2, [pc, #28]	; (8084d78 <_Z22__fetch_global_Serial1v+0x44>)
 8084d5c:	4907      	ldr	r1, [pc, #28]	; (8084d7c <_Z22__fetch_global_Serial1v+0x48>)
 8084d5e:	4805      	ldr	r0, [pc, #20]	; (8084d74 <_Z22__fetch_global_Serial1v+0x40>)
 8084d60:	f000 fad8 	bl	8085314 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8084d64:	4803      	ldr	r0, [pc, #12]	; (8084d74 <_Z22__fetch_global_Serial1v+0x40>)
 8084d66:	bd38      	pop	{r3, r4, r5, pc}
 8084d68:	200008d4 	.word	0x200008d4
 8084d6c:	200008d8 	.word	0x200008d8
 8084d70:	20000850 	.word	0x20000850
 8084d74:	2000083c 	.word	0x2000083c
 8084d78:	200002c8 	.word	0x200002c8
 8084d7c:	08080231 	.word	0x08080231

08084d80 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8084d80:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8084d82:	6883      	ldr	r3, [r0, #8]
 8084d84:	4604      	mov	r4, r0
 8084d86:	b90b      	cbnz	r3, 8084d8c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8084d88:	f000 fae5 	bl	8085356 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8084d8c:	68c3      	ldr	r3, [r0, #12]
 8084d8e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8084d90:	68a3      	ldr	r3, [r4, #8]
 8084d92:	b11b      	cbz	r3, 8084d9c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8084d94:	2203      	movs	r2, #3
 8084d96:	4621      	mov	r1, r4
 8084d98:	4620      	mov	r0, r4
 8084d9a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8084d9c:	4620      	mov	r0, r4
}
 8084d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8084da2:	2110      	movs	r1, #16
 8084da4:	f000 bac4 	b.w	8085330 <_ZdlPvj>

08084da8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 8084da8:	4770      	bx	lr

08084daa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8084daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084dac:	4606      	mov	r6, r0
 8084dae:	4615      	mov	r5, r2
 8084db0:	460c      	mov	r4, r1
 8084db2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8084db4:	42bc      	cmp	r4, r7
 8084db6:	d006      	beq.n	8084dc6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8084db8:	6833      	ldr	r3, [r6, #0]
 8084dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8084dbe:	689b      	ldr	r3, [r3, #8]
 8084dc0:	4630      	mov	r0, r6
 8084dc2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8084dc4:	e7f6      	b.n	8084db4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8084dc6:	4628      	mov	r0, r5
 8084dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08084dca <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8084dca:	2200      	movs	r2, #0
 8084dcc:	7c00      	ldrb	r0, [r0, #16]
 8084dce:	f7fe bc9b 	b.w	8083708 <HAL_I2C_Write_Data>

08084dd2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8084dd2:	2100      	movs	r1, #0
 8084dd4:	7c00      	ldrb	r0, [r0, #16]
 8084dd6:	f7fe bc9f 	b.w	8083718 <HAL_I2C_Available_Data>

08084dda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8084dda:	2100      	movs	r1, #0
 8084ddc:	7c00      	ldrb	r0, [r0, #16]
 8084dde:	f7fe bca3 	b.w	8083728 <HAL_I2C_Read_Data>

08084de2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8084de2:	2100      	movs	r1, #0
 8084de4:	7c00      	ldrb	r0, [r0, #16]
 8084de6:	f7fe bca7 	b.w	8083738 <HAL_I2C_Peek_Data>

08084dea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8084dea:	2100      	movs	r1, #0
 8084dec:	7c00      	ldrb	r0, [r0, #16]
 8084dee:	f7fe bcab 	b.w	8083748 <HAL_I2C_Flush_Data>

08084df2 <_ZN7TwoWireD0Ev>:
 8084df2:	b510      	push	{r4, lr}
 8084df4:	4604      	mov	r4, r0
 8084df6:	2114      	movs	r1, #20
 8084df8:	f000 fa9a 	bl	8085330 <_ZdlPvj>
 8084dfc:	4620      	mov	r0, r4
 8084dfe:	bd10      	pop	{r4, pc}

08084e00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8084e00:	b510      	push	{r4, lr}
 8084e02:	4604      	mov	r4, r0
 8084e04:	2300      	movs	r3, #0
 8084e06:	6063      	str	r3, [r4, #4]
 8084e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8084e0c:	60a3      	str	r3, [r4, #8]
 8084e0e:	4b04      	ldr	r3, [pc, #16]	; (8084e20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8084e10:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8084e12:	4608      	mov	r0, r1
 8084e14:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 8084e16:	4611      	mov	r1, r2
 8084e18:	f7fe fca6 	bl	8083768 <HAL_I2C_Init>
}
 8084e1c:	4620      	mov	r0, r4
 8084e1e:	bd10      	pop	{r4, pc}
 8084e20:	08087cdc 	.word	0x08087cdc

08084e24 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8084e24:	2300      	movs	r3, #0
 8084e26:	461a      	mov	r2, r3
 8084e28:	4619      	mov	r1, r3
 8084e2a:	7c00      	ldrb	r0, [r0, #16]
 8084e2c:	f7fe bc54 	b.w	80836d8 <HAL_I2C_Begin>

08084e30 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8084e30:	2200      	movs	r2, #0
 8084e32:	7c00      	ldrb	r0, [r0, #16]
 8084e34:	f7fe bc58 	b.w	80836e8 <HAL_I2C_Begin_Transmission>

08084e38 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8084e38:	2200      	movs	r2, #0
 8084e3a:	7c00      	ldrb	r0, [r0, #16]
 8084e3c:	f7fe bc5c 	b.w	80836f8 <HAL_I2C_End_Transmission>

08084e40 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8084e40:	2101      	movs	r1, #1
 8084e42:	f7ff bff9 	b.w	8084e38 <_ZN7TwoWire15endTransmissionEh>

08084e46 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8084e46:	2100      	movs	r1, #0
 8084e48:	7c00      	ldrb	r0, [r0, #16]
 8084e4a:	f7fe bc85 	b.w	8083758 <HAL_I2C_Is_Enabled>

08084e4e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8084e4e:	2300      	movs	r3, #0
 8084e50:	461a      	mov	r2, r3
 8084e52:	6840      	ldr	r0, [r0, #4]
 8084e54:	f7fe bd24 	b.w	80838a0 <network_connect>

08084e58 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8084e58:	2200      	movs	r2, #0
 8084e5a:	2102      	movs	r1, #2
 8084e5c:	6840      	ldr	r0, [r0, #4]
 8084e5e:	f7fe bd2f 	b.w	80838c0 <network_disconnect>

08084e62 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8084e62:	2200      	movs	r2, #0
 8084e64:	4611      	mov	r1, r2
 8084e66:	6840      	ldr	r0, [r0, #4]
 8084e68:	f7fe bd22 	b.w	80838b0 <network_connecting>

08084e6c <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8084e6c:	2200      	movs	r2, #0
 8084e6e:	4611      	mov	r1, r2
 8084e70:	6840      	ldr	r0, [r0, #4]
 8084e72:	f7fe bd2d 	b.w	80838d0 <network_ready>

08084e76 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8084e76:	2300      	movs	r3, #0
 8084e78:	461a      	mov	r2, r3
 8084e7a:	4619      	mov	r1, r3
 8084e7c:	6840      	ldr	r0, [r0, #4]
 8084e7e:	f7fe bd2f 	b.w	80838e0 <network_on>

08084e82 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8084e82:	2300      	movs	r3, #0
 8084e84:	461a      	mov	r2, r3
 8084e86:	4619      	mov	r1, r3
 8084e88:	6840      	ldr	r0, [r0, #4]
 8084e8a:	f7fe bd31 	b.w	80838f0 <network_off>

08084e8e <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8084e8e:	2200      	movs	r2, #0
 8084e90:	f081 0101 	eor.w	r1, r1, #1
 8084e94:	6840      	ldr	r0, [r0, #4]
 8084e96:	f7fe bd33 	b.w	8083900 <network_listen>

08084e9a <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8084e9a:	2200      	movs	r2, #0
 8084e9c:	6840      	ldr	r0, [r0, #4]
 8084e9e:	f7fe bd3f 	b.w	8083920 <network_set_listen_timeout>

08084ea2 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8084ea2:	2200      	movs	r2, #0
 8084ea4:	4611      	mov	r1, r2
 8084ea6:	6840      	ldr	r0, [r0, #4]
 8084ea8:	f7fe bd42 	b.w	8083930 <network_get_listen_timeout>

08084eac <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8084eac:	2200      	movs	r2, #0
 8084eae:	4611      	mov	r1, r2
 8084eb0:	6840      	ldr	r0, [r0, #4]
 8084eb2:	f7fe bd2d 	b.w	8083910 <network_listening>
	...

08084eb8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8084eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084eba:	4617      	mov	r7, r2
 8084ebc:	b087      	sub	sp, #28
 8084ebe:	4605      	mov	r5, r0
    IPAddress addr;
 8084ec0:	a804      	add	r0, sp, #16
 8084ec2:	f7ff fd2f 	bl	8084924 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8084ec6:	2600      	movs	r6, #0
 8084ec8:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8084eca:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8084ecc:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8084ed0:	f001 ffa8 	bl	8086e24 <strlen>
 8084ed4:	4b0a      	ldr	r3, [pc, #40]	; (8084f00 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8084ed6:	9600      	str	r6, [sp, #0]
 8084ed8:	b281      	uxth	r1, r0
 8084eda:	685b      	ldr	r3, [r3, #4]
 8084edc:	4622      	mov	r2, r4
 8084ede:	4638      	mov	r0, r7
 8084ee0:	f7fe fc4a 	bl	8083778 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8084ee4:	b120      	cbz	r0, 8084ef0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8084ee6:	4631      	mov	r1, r6
 8084ee8:	4628      	mov	r0, r5
 8084eea:	f7ff fd2b 	bl	8084944 <_ZN9IPAddressC1Em>
 8084eee:	e003      	b.n	8084ef8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8084ef0:	4621      	mov	r1, r4
 8084ef2:	4628      	mov	r0, r5
 8084ef4:	f7ff fd1e 	bl	8084934 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8084ef8:	4628      	mov	r0, r5
 8084efa:	b007      	add	sp, #28
 8084efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084efe:	bf00      	nop
 8084f00:	2000080c 	.word	0x2000080c

08084f04 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8084f04:	4b02      	ldr	r3, [pc, #8]	; (8084f10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8084f06:	4a03      	ldr	r2, [pc, #12]	; (8084f14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8084f08:	601a      	str	r2, [r3, #0]
 8084f0a:	2200      	movs	r2, #0
 8084f0c:	605a      	str	r2, [r3, #4]
 8084f0e:	4770      	bx	lr
 8084f10:	2000095c 	.word	0x2000095c
 8084f14:	08087d04 	.word	0x08087d04

08084f18 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8084f18:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8084f1a:	b530      	push	{r4, r5, lr}
 8084f1c:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8084f1e:	b31a      	cbz	r2, 8084f68 <NVIC_Init+0x50>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8084f20:	4a17      	ldr	r2, [pc, #92]	; (8084f80 <NVIC_Init+0x68>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8084f22:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8084f24:	68d1      	ldr	r1, [r2, #12]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8084f26:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8084f2a:	43c9      	mvns	r1, r1
 8084f2c:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8084f30:	f1c1 0204 	rsb	r2, r1, #4
 8084f34:	b2d2      	uxtb	r2, r2
 8084f36:	fa05 f202 	lsl.w	r2, r5, r2
 8084f3a:	b2d4      	uxtb	r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8084f3c:	220f      	movs	r2, #15
 8084f3e:	410a      	asrs	r2, r1
 8084f40:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8084f42:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8084f46:	400a      	ands	r2, r1
 8084f48:	4322      	orrs	r2, r4

    tmppriority = tmppriority << 0x04;
 8084f4a:	0112      	lsls	r2, r2, #4
 8084f4c:	b2d2      	uxtb	r2, r2

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8084f4e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8084f52:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8084f54:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8084f56:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8084f58:	f003 031f 	and.w	r3, r3, #31
 8084f5c:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8084f60:	4a08      	ldr	r2, [pc, #32]	; (8084f84 <NVIC_Init+0x6c>)
 8084f62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8084f66:	bd30      	pop	{r4, r5, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8084f68:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8084f6a:	2101      	movs	r1, #1
 8084f6c:	f003 031f 	and.w	r3, r3, #31
 8084f70:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8084f74:	4903      	ldr	r1, [pc, #12]	; (8084f84 <NVIC_Init+0x6c>)
 8084f76:	3220      	adds	r2, #32
 8084f78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8084f7c:	bd30      	pop	{r4, r5, pc}
 8084f7e:	bf00      	nop
 8084f80:	e000ed00 	.word	0xe000ed00
 8084f84:	e000e100 	.word	0xe000e100

08084f88 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8084f88:	4b04      	ldr	r3, [pc, #16]	; (8084f9c <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8084f8a:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8084f8c:	b109      	cbz	r1, 8084f92 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8084f8e:	4310      	orrs	r0, r2
 8084f90:	e001      	b.n	8084f96 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8084f92:	ea22 0000 	bic.w	r0, r2, r0
 8084f96:	6218      	str	r0, [r3, #32]
 8084f98:	4770      	bx	lr
 8084f9a:	bf00      	nop
 8084f9c:	40023800 	.word	0x40023800

08084fa0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8084fa0:	4b04      	ldr	r3, [pc, #16]	; (8084fb4 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8084fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8084fa4:	b109      	cbz	r1, 8084faa <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8084fa6:	4310      	orrs	r0, r2
 8084fa8:	e001      	b.n	8084fae <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8084faa:	ea22 0000 	bic.w	r0, r2, r0
 8084fae:	6258      	str	r0, [r3, #36]	; 0x24
 8084fb0:	4770      	bx	lr
 8084fb2:	bf00      	nop
 8084fb4:	40023800 	.word	0x40023800

08084fb8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8084fb8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  if (TIMx == TIM1)
 8084fba:	4b4d      	ldr	r3, [pc, #308]	; (80850f0 <TIM_DeInit+0x138>)
 8084fbc:	4298      	cmp	r0, r3
 8084fbe:	d106      	bne.n	8084fce <TIM_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8084fc0:	2101      	movs	r1, #1
 8084fc2:	4608      	mov	r0, r1
 8084fc4:	f7ff ffec 	bl	8084fa0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);
 8084fc8:	2100      	movs	r1, #0
 8084fca:	2001      	movs	r0, #1
 8084fcc:	e044      	b.n	8085058 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM2)
 8084fce:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8084fd2:	d106      	bne.n	8084fe2 <TIM_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8084fd4:	2101      	movs	r1, #1
 8084fd6:	4608      	mov	r0, r1
 8084fd8:	f7ff ffd6 	bl	8084f88 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8084fdc:	2100      	movs	r1, #0
 8084fde:	2001      	movs	r0, #1
 8084fe0:	e081      	b.n	80850e6 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM3)
 8084fe2:	4b44      	ldr	r3, [pc, #272]	; (80850f4 <TIM_DeInit+0x13c>)
 8084fe4:	4298      	cmp	r0, r3
 8084fe6:	d106      	bne.n	8084ff6 <TIM_DeInit+0x3e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8084fe8:	2101      	movs	r1, #1
 8084fea:	2002      	movs	r0, #2
 8084fec:	f7ff ffcc 	bl	8084f88 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8084ff0:	2100      	movs	r1, #0
 8084ff2:	2002      	movs	r0, #2
 8084ff4:	e077      	b.n	80850e6 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM4)
 8084ff6:	4b40      	ldr	r3, [pc, #256]	; (80850f8 <TIM_DeInit+0x140>)
 8084ff8:	4298      	cmp	r0, r3
 8084ffa:	d106      	bne.n	808500a <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8084ffc:	2101      	movs	r1, #1
 8084ffe:	2004      	movs	r0, #4
 8085000:	f7ff ffc2 	bl	8084f88 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8085004:	2100      	movs	r1, #0
 8085006:	2004      	movs	r0, #4
 8085008:	e06d      	b.n	80850e6 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM5)
 808500a:	4b3c      	ldr	r3, [pc, #240]	; (80850fc <TIM_DeInit+0x144>)
 808500c:	4298      	cmp	r0, r3
 808500e:	d106      	bne.n	808501e <TIM_DeInit+0x66>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8085010:	2101      	movs	r1, #1
 8085012:	2008      	movs	r0, #8
 8085014:	f7ff ffb8 	bl	8084f88 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8085018:	2100      	movs	r1, #0
 808501a:	2008      	movs	r0, #8
 808501c:	e063      	b.n	80850e6 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM6)
 808501e:	4b38      	ldr	r3, [pc, #224]	; (8085100 <TIM_DeInit+0x148>)
 8085020:	4298      	cmp	r0, r3
 8085022:	d106      	bne.n	8085032 <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8085024:	2101      	movs	r1, #1
 8085026:	2010      	movs	r0, #16
 8085028:	f7ff ffae 	bl	8084f88 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 808502c:	2100      	movs	r1, #0
 808502e:	2010      	movs	r0, #16
 8085030:	e059      	b.n	80850e6 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM7)
 8085032:	4b34      	ldr	r3, [pc, #208]	; (8085104 <TIM_DeInit+0x14c>)
 8085034:	4298      	cmp	r0, r3
 8085036:	d106      	bne.n	8085046 <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8085038:	2101      	movs	r1, #1
 808503a:	2020      	movs	r0, #32
 808503c:	f7ff ffa4 	bl	8084f88 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8085040:	2100      	movs	r1, #0
 8085042:	2020      	movs	r0, #32
 8085044:	e04f      	b.n	80850e6 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM8)
 8085046:	4b30      	ldr	r3, [pc, #192]	; (8085108 <TIM_DeInit+0x150>)
 8085048:	4298      	cmp	r0, r3
 808504a:	d109      	bne.n	8085060 <TIM_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 808504c:	2101      	movs	r1, #1
 808504e:	2002      	movs	r0, #2
 8085050:	f7ff ffa6 	bl	8084fa0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8085054:	2100      	movs	r1, #0
 8085056:	2002      	movs	r0, #2
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
    }
  }
}
 8085058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }
  else if (TIMx == TIM8)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 808505c:	f7ff bfa0 	b.w	8084fa0 <RCC_APB2PeriphResetCmd>
  }
  else if (TIMx == TIM9)
 8085060:	4b2a      	ldr	r3, [pc, #168]	; (808510c <TIM_DeInit+0x154>)
 8085062:	4298      	cmp	r0, r3
 8085064:	d108      	bne.n	8085078 <TIM_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8085066:	2101      	movs	r1, #1
 8085068:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 808506c:	f7ff ff98 	bl	8084fa0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);
 8085070:	2100      	movs	r1, #0
 8085072:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8085076:	e7ef      	b.n	8085058 <TIM_DeInit+0xa0>
   }
  else if (TIMx == TIM10)
 8085078:	4b25      	ldr	r3, [pc, #148]	; (8085110 <TIM_DeInit+0x158>)
 808507a:	4298      	cmp	r0, r3
 808507c:	d108      	bne.n	8085090 <TIM_DeInit+0xd8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 808507e:	2101      	movs	r1, #1
 8085080:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8085084:	f7ff ff8c 	bl	8084fa0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);
 8085088:	2100      	movs	r1, #0
 808508a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 808508e:	e7e3      	b.n	8085058 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM11)
 8085090:	4b20      	ldr	r3, [pc, #128]	; (8085114 <TIM_DeInit+0x15c>)
 8085092:	4298      	cmp	r0, r3
 8085094:	d108      	bne.n	80850a8 <TIM_DeInit+0xf0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8085096:	2101      	movs	r1, #1
 8085098:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 808509c:	f7ff ff80 	bl	8084fa0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);
 80850a0:	2100      	movs	r1, #0
 80850a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80850a6:	e7d7      	b.n	8085058 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM12)
 80850a8:	4b1b      	ldr	r3, [pc, #108]	; (8085118 <TIM_DeInit+0x160>)
 80850aa:	4298      	cmp	r0, r3
 80850ac:	d106      	bne.n	80850bc <TIM_DeInit+0x104>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80850ae:	2101      	movs	r1, #1
 80850b0:	2040      	movs	r0, #64	; 0x40
 80850b2:	f7ff ff69 	bl	8084f88 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);
 80850b6:	2100      	movs	r1, #0
 80850b8:	2040      	movs	r0, #64	; 0x40
 80850ba:	e014      	b.n	80850e6 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM13)
 80850bc:	4b17      	ldr	r3, [pc, #92]	; (808511c <TIM_DeInit+0x164>)
 80850be:	4298      	cmp	r0, r3
 80850c0:	d106      	bne.n	80850d0 <TIM_DeInit+0x118>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80850c2:	2101      	movs	r1, #1
 80850c4:	2080      	movs	r0, #128	; 0x80
 80850c6:	f7ff ff5f 	bl	8084f88 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);
 80850ca:	2100      	movs	r1, #0
 80850cc:	2080      	movs	r0, #128	; 0x80
 80850ce:	e00a      	b.n	80850e6 <TIM_DeInit+0x12e>
  }
  else
  {
    if (TIMx == TIM14)
 80850d0:	4b13      	ldr	r3, [pc, #76]	; (8085120 <TIM_DeInit+0x168>)
 80850d2:	4298      	cmp	r0, r3
 80850d4:	d10b      	bne.n	80850ee <TIM_DeInit+0x136>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80850d6:	2101      	movs	r1, #1
 80850d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80850dc:	f7ff ff54 	bl	8084f88 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 80850e0:	2100      	movs	r1, #0
 80850e2:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 80850e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM14)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 80850ea:	f7ff bf4d 	b.w	8084f88 <RCC_APB1PeriphResetCmd>
 80850ee:	bd08      	pop	{r3, pc}
 80850f0:	40010000 	.word	0x40010000
 80850f4:	40000400 	.word	0x40000400
 80850f8:	40000800 	.word	0x40000800
 80850fc:	40000c00 	.word	0x40000c00
 8085100:	40001000 	.word	0x40001000
 8085104:	40001400 	.word	0x40001400
 8085108:	40010400 	.word	0x40010400
 808510c:	40014000 	.word	0x40014000
 8085110:	40014400 	.word	0x40014400
 8085114:	40014800 	.word	0x40014800
 8085118:	40001800 	.word	0x40001800
 808511c:	40001c00 	.word	0x40001c00
 8085120:	40002000 	.word	0x40002000

08085124 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8085124:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8085126:	b119      	cbz	r1, 8085130 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8085128:	b29b      	uxth	r3, r3
 808512a:	f043 0301 	orr.w	r3, r3, #1
 808512e:	e003      	b.n	8085138 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8085130:	f023 0301 	bic.w	r3, r3, #1
 8085134:	041b      	lsls	r3, r3, #16
 8085136:	0c1b      	lsrs	r3, r3, #16
 8085138:	8003      	strh	r3, [r0, #0]
 808513a:	4770      	bx	lr

0808513c <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 808513c:	8a03      	ldrh	r3, [r0, #16]

  itenable = TIMx->DIER & TIM_IT;
 808513e:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8085140:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;

  itenable = TIMx->DIER & TIM_IT;
 8085144:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8085146:	d003      	beq.n	8085150 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8085148:	4211      	tst	r1, r2
 808514a:	bf14      	ite	ne
 808514c:	2001      	movne	r0, #1
 808514e:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8085150:	4770      	bx	lr

08085152 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8085152:	43c9      	mvns	r1, r1
 8085154:	b289      	uxth	r1, r1
 8085156:	8201      	strh	r1, [r0, #16]
 8085158:	4770      	bx	lr

0808515a <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808515a:	b510      	push	{r4, lr}
 808515c:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808515e:	f000 f85b 	bl	8085218 <_ZN8particle7globals11instanceSpiEv>
 8085162:	f7fe fd6d 	bl	8083c40 <_ZN8SPIClass9isEnabledEv>
 8085166:	b128      	cbz	r0, 8085174 <pinAvailable+0x1a>
 8085168:	f1a4 030d 	sub.w	r3, r4, #13
 808516c:	2b02      	cmp	r3, #2
 808516e:	d801      	bhi.n	8085174 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 8085170:	2000      	movs	r0, #0
 8085172:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8085174:	f000 f8a8 	bl	80852c8 <_Z19__fetch_global_Wirev>
 8085178:	f7ff fe65 	bl	8084e46 <_ZN7TwoWire9isEnabledEv>
 808517c:	b108      	cbz	r0, 8085182 <pinAvailable+0x28>
 808517e:	2c01      	cmp	r4, #1
 8085180:	d9f6      	bls.n	8085170 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8085182:	f7ff fdd7 	bl	8084d34 <_Z22__fetch_global_Serial1v>
 8085186:	f7ff fdd2 	bl	8084d2e <_ZN11USARTSerial9isEnabledEv>
 808518a:	b118      	cbz	r0, 8085194 <pinAvailable+0x3a>
 808518c:	f1a4 0312 	sub.w	r3, r4, #18
 8085190:	2b01      	cmp	r3, #1
 8085192:	d9ed      	bls.n	8085170 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8085194:	2c2e      	cmp	r4, #46	; 0x2e
 8085196:	bf8c      	ite	hi
 8085198:	2000      	movhi	r0, #0
 808519a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808519c:	bd10      	pop	{r4, pc}

0808519e <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808519e:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80851a0:	b538      	push	{r3, r4, r5, lr}
 80851a2:	4604      	mov	r4, r0
 80851a4:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80851a6:	d80a      	bhi.n	80851be <pinMode+0x20>
 80851a8:	29ff      	cmp	r1, #255	; 0xff
 80851aa:	d008      	beq.n	80851be <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80851ac:	f7ff ffd5 	bl	808515a <pinAvailable>
 80851b0:	b128      	cbz	r0, 80851be <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80851b2:	4629      	mov	r1, r5
 80851b4:	4620      	mov	r0, r4
}
 80851b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80851ba:	f7fe b965 	b.w	8083488 <HAL_Pin_Mode>
 80851be:	bd38      	pop	{r3, r4, r5, pc}

080851c0 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80851c0:	b538      	push	{r3, r4, r5, lr}
 80851c2:	4604      	mov	r4, r0
 80851c4:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80851c6:	f7fe f967 	bl	8083498 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80851ca:	28ff      	cmp	r0, #255	; 0xff
 80851cc:	d010      	beq.n	80851f0 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80851ce:	2806      	cmp	r0, #6
 80851d0:	d804      	bhi.n	80851dc <digitalWrite+0x1c>
 80851d2:	234d      	movs	r3, #77	; 0x4d
 80851d4:	fa23 f000 	lsr.w	r0, r3, r0
 80851d8:	07c3      	lsls	r3, r0, #31
 80851da:	d409      	bmi.n	80851f0 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80851dc:	4620      	mov	r0, r4
 80851de:	f7ff ffbc 	bl	808515a <pinAvailable>
 80851e2:	b128      	cbz	r0, 80851f0 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80851e4:	4629      	mov	r1, r5
 80851e6:	4620      	mov	r0, r4
}
 80851e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80851ec:	f7fe b95c 	b.w	80834a8 <HAL_GPIO_Write>
 80851f0:	bd38      	pop	{r3, r4, r5, pc}

080851f2 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80851f2:	b510      	push	{r4, lr}
 80851f4:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80851f6:	f7fe f94f 	bl	8083498 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80851fa:	3804      	subs	r0, #4
 80851fc:	b2c0      	uxtb	r0, r0
 80851fe:	2801      	cmp	r0, #1
 8085200:	d908      	bls.n	8085214 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8085202:	4620      	mov	r0, r4
 8085204:	f7ff ffa9 	bl	808515a <pinAvailable>
 8085208:	b120      	cbz	r0, 8085214 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808520a:	4620      	mov	r0, r4
}
 808520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8085210:	f7fe b952 	b.w	80834b8 <HAL_GPIO_Read>
}
 8085214:	2000      	movs	r0, #0
 8085216:	bd10      	pop	{r4, pc}

08085218 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 8085218:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 808521a:	4d0b      	ldr	r5, [pc, #44]	; (8085248 <_ZN8particle7globals11instanceSpiEv+0x30>)
 808521c:	6829      	ldr	r1, [r5, #0]
 808521e:	f011 0401 	ands.w	r4, r1, #1
 8085222:	d10f      	bne.n	8085244 <_ZN8particle7globals11instanceSpiEv+0x2c>
 8085224:	4628      	mov	r0, r5
 8085226:	f7fa ff3e 	bl	80800a6 <__cxa_guard_acquire>
 808522a:	b158      	cbz	r0, 8085244 <_ZN8particle7globals11instanceSpiEv+0x2c>
 808522c:	4621      	mov	r1, r4
 808522e:	4807      	ldr	r0, [pc, #28]	; (808524c <_ZN8particle7globals11instanceSpiEv+0x34>)
 8085230:	f7fe fc22 	bl	8083a78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8085234:	4628      	mov	r0, r5
 8085236:	f7fa ff3b 	bl	80800b0 <__cxa_guard_release>
 808523a:	4a05      	ldr	r2, [pc, #20]	; (8085250 <_ZN8particle7globals11instanceSpiEv+0x38>)
 808523c:	4905      	ldr	r1, [pc, #20]	; (8085254 <_ZN8particle7globals11instanceSpiEv+0x3c>)
 808523e:	4803      	ldr	r0, [pc, #12]	; (808524c <_ZN8particle7globals11instanceSpiEv+0x34>)
 8085240:	f000 f868 	bl	8085314 <__aeabi_atexit>
    return instance;
}
 8085244:	4801      	ldr	r0, [pc, #4]	; (808524c <_ZN8particle7globals11instanceSpiEv+0x34>)
 8085246:	bd38      	pop	{r3, r4, r5, pc}
 8085248:	20000974 	.word	0x20000974
 808524c:	20000964 	.word	0x20000964
 8085250:	200002c8 	.word	0x200002c8
 8085254:	08083a41 	.word	0x08083a41

08085258 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8085258:	b513      	push	{r0, r1, r4, lr}
 808525a:	4c08      	ldr	r4, [pc, #32]	; (808527c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808525c:	2300      	movs	r3, #0
 808525e:	461a      	mov	r2, r3
 8085260:	4619      	mov	r1, r3
 8085262:	9300      	str	r3, [sp, #0]
 8085264:	4620      	mov	r0, r4
 8085266:	f7ff fb7f 	bl	8084968 <_ZN9IPAddressC1Ehhhh>
 808526a:	4620      	mov	r0, r4
 808526c:	4a04      	ldr	r2, [pc, #16]	; (8085280 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808526e:	4905      	ldr	r1, [pc, #20]	; (8085284 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8085270:	b002      	add	sp, #8
 8085272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085276:	f000 b84d 	b.w	8085314 <__aeabi_atexit>
 808527a:	bf00      	nop
 808527c:	2000097c 	.word	0x2000097c
 8085280:	200002c8 	.word	0x200002c8
 8085284:	080848e1 	.word	0x080848e1

08085288 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 8085288:	b570      	push	{r4, r5, r6, lr}
 808528a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808528c:	2514      	movs	r5, #20
 808528e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085290:	4e09      	ldr	r6, [pc, #36]	; (80852b8 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8085292:	2100      	movs	r1, #0
 8085294:	f001 f854 	bl	8086340 <memset>
 8085298:	8025      	strh	r5, [r4, #0]
 808529a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808529c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808529e:	60a5      	str	r5, [r4, #8]
 80852a0:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80852a2:	4628      	mov	r0, r5
 80852a4:	f000 f846 	bl	8085334 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80852a8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80852aa:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80852ac:	4628      	mov	r0, r5
 80852ae:	f000 f841 	bl	8085334 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80852b2:	60e0      	str	r0, [r4, #12]

	return config;
}
 80852b4:	4620      	mov	r0, r4
 80852b6:	bd70      	pop	{r4, r5, r6, pc}
 80852b8:	08087d30 	.word	0x08087d30

080852bc <_Z17acquireWireBufferv>:
 80852bc:	b510      	push	{r4, lr}
 80852be:	4604      	mov	r4, r0
 80852c0:	f7ff ffe2 	bl	8085288 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 80852c4:	4620      	mov	r0, r4
 80852c6:	bd10      	pop	{r4, pc}

080852c8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80852c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80852ca:	4d0e      	ldr	r5, [pc, #56]	; (8085304 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80852cc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80852ce:	6829      	ldr	r1, [r5, #0]
 80852d0:	f011 0401 	ands.w	r4, r1, #1
 80852d4:	d113      	bne.n	80852fe <_Z19__fetch_global_Wirev+0x36>
 80852d6:	4628      	mov	r0, r5
 80852d8:	f7fa fee5 	bl	80800a6 <__cxa_guard_acquire>
 80852dc:	b178      	cbz	r0, 80852fe <_Z19__fetch_global_Wirev+0x36>
 80852de:	a801      	add	r0, sp, #4
 80852e0:	f7ff ffec 	bl	80852bc <_Z17acquireWireBufferv>
 80852e4:	aa01      	add	r2, sp, #4
 80852e6:	4621      	mov	r1, r4
 80852e8:	4807      	ldr	r0, [pc, #28]	; (8085308 <_Z19__fetch_global_Wirev+0x40>)
 80852ea:	f7ff fd89 	bl	8084e00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80852ee:	4628      	mov	r0, r5
 80852f0:	f7fa fede 	bl	80800b0 <__cxa_guard_release>
 80852f4:	4a05      	ldr	r2, [pc, #20]	; (808530c <_Z19__fetch_global_Wirev+0x44>)
 80852f6:	4906      	ldr	r1, [pc, #24]	; (8085310 <_Z19__fetch_global_Wirev+0x48>)
 80852f8:	4803      	ldr	r0, [pc, #12]	; (8085308 <_Z19__fetch_global_Wirev+0x40>)
 80852fa:	f000 f80b 	bl	8085314 <__aeabi_atexit>
	return wire;
}
 80852fe:	4802      	ldr	r0, [pc, #8]	; (8085308 <_Z19__fetch_global_Wirev+0x40>)
 8085300:	b007      	add	sp, #28
 8085302:	bd30      	pop	{r4, r5, pc}
 8085304:	20000984 	.word	0x20000984
 8085308:	20000988 	.word	0x20000988
 808530c:	200002c8 	.word	0x200002c8
 8085310:	08084da9 	.word	0x08084da9

08085314 <__aeabi_atexit>:
 8085314:	460b      	mov	r3, r1
 8085316:	4601      	mov	r1, r0
 8085318:	4618      	mov	r0, r3
 808531a:	f000 bef1 	b.w	8086100 <__cxa_atexit>
	...

08085320 <_ZSt15get_new_handlerv>:
 8085320:	4b02      	ldr	r3, [pc, #8]	; (808532c <_ZSt15get_new_handlerv+0xc>)
 8085322:	6818      	ldr	r0, [r3, #0]
 8085324:	f3bf 8f5f 	dmb	sy
 8085328:	4770      	bx	lr
 808532a:	bf00      	nop
 808532c:	2000099c 	.word	0x2000099c

08085330 <_ZdlPvj>:
 8085330:	f7fa beb7 	b.w	80800a2 <_ZdlPv>

08085334 <_ZnajRKSt9nothrow_t>:
 8085334:	f000 b800 	b.w	8085338 <_ZnwjRKSt9nothrow_t>

08085338 <_ZnwjRKSt9nothrow_t>:
 8085338:	b510      	push	{r4, lr}
 808533a:	2800      	cmp	r0, #0
 808533c:	bf14      	ite	ne
 808533e:	4604      	movne	r4, r0
 8085340:	2401      	moveq	r4, #1
 8085342:	4620      	mov	r0, r4
 8085344:	f7fe fb2c 	bl	80839a0 <malloc>
 8085348:	b920      	cbnz	r0, 8085354 <_ZnwjRKSt9nothrow_t+0x1c>
 808534a:	f7ff ffe9 	bl	8085320 <_ZSt15get_new_handlerv>
 808534e:	b108      	cbz	r0, 8085354 <_ZnwjRKSt9nothrow_t+0x1c>
 8085350:	4780      	blx	r0
 8085352:	e7f6      	b.n	8085342 <_ZnwjRKSt9nothrow_t+0xa>
 8085354:	bd10      	pop	{r4, pc}

08085356 <_ZSt25__throw_bad_function_callv>:
 8085356:	b508      	push	{r3, lr}
 8085358:	f7fe fb62 	bl	8083a20 <abort>

0808535c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808535c:	4b18      	ldr	r3, [pc, #96]	; (80853c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808535e:	681a      	ldr	r2, [r3, #0]
 8085360:	07d1      	lsls	r1, r2, #31
 8085362:	bf5c      	itt	pl
 8085364:	2201      	movpl	r2, #1
 8085366:	601a      	strpl	r2, [r3, #0]
 8085368:	4b16      	ldr	r3, [pc, #88]	; (80853c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808536a:	681a      	ldr	r2, [r3, #0]
 808536c:	07d2      	lsls	r2, r2, #31
 808536e:	bf5c      	itt	pl
 8085370:	2201      	movpl	r2, #1
 8085372:	601a      	strpl	r2, [r3, #0]
 8085374:	4b14      	ldr	r3, [pc, #80]	; (80853c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8085376:	681a      	ldr	r2, [r3, #0]
 8085378:	07d0      	lsls	r0, r2, #31
 808537a:	bf5c      	itt	pl
 808537c:	2201      	movpl	r2, #1
 808537e:	601a      	strpl	r2, [r3, #0]
 8085380:	4b12      	ldr	r3, [pc, #72]	; (80853cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8085382:	681a      	ldr	r2, [r3, #0]
 8085384:	07d1      	lsls	r1, r2, #31
 8085386:	bf5c      	itt	pl
 8085388:	2201      	movpl	r2, #1
 808538a:	601a      	strpl	r2, [r3, #0]
 808538c:	4b10      	ldr	r3, [pc, #64]	; (80853d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808538e:	681a      	ldr	r2, [r3, #0]
 8085390:	07d2      	lsls	r2, r2, #31
 8085392:	bf5c      	itt	pl
 8085394:	2201      	movpl	r2, #1
 8085396:	601a      	strpl	r2, [r3, #0]
 8085398:	4b0e      	ldr	r3, [pc, #56]	; (80853d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808539a:	681a      	ldr	r2, [r3, #0]
 808539c:	07d0      	lsls	r0, r2, #31
 808539e:	bf5c      	itt	pl
 80853a0:	2201      	movpl	r2, #1
 80853a2:	601a      	strpl	r2, [r3, #0]
 80853a4:	4b0c      	ldr	r3, [pc, #48]	; (80853d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80853a6:	681a      	ldr	r2, [r3, #0]
 80853a8:	07d1      	lsls	r1, r2, #31
 80853aa:	bf5c      	itt	pl
 80853ac:	2201      	movpl	r2, #1
 80853ae:	601a      	strpl	r2, [r3, #0]
 80853b0:	4b0a      	ldr	r3, [pc, #40]	; (80853dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80853b2:	681a      	ldr	r2, [r3, #0]
 80853b4:	07d2      	lsls	r2, r2, #31
 80853b6:	bf5c      	itt	pl
 80853b8:	2201      	movpl	r2, #1
 80853ba:	601a      	strpl	r2, [r3, #0]
 80853bc:	4770      	bx	lr
 80853be:	bf00      	nop
 80853c0:	200009bc 	.word	0x200009bc
 80853c4:	200009b8 	.word	0x200009b8
 80853c8:	200009b4 	.word	0x200009b4
 80853cc:	200009b0 	.word	0x200009b0
 80853d0:	200009ac 	.word	0x200009ac
 80853d4:	200009a8 	.word	0x200009a8
 80853d8:	200009a4 	.word	0x200009a4
 80853dc:	200009a0 	.word	0x200009a0

080853e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80853e0:	4b24      	ldr	r3, [pc, #144]	; (8085474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80853e2:	681a      	ldr	r2, [r3, #0]
 80853e4:	07d0      	lsls	r0, r2, #31
 80853e6:	bf5c      	itt	pl
 80853e8:	2201      	movpl	r2, #1
 80853ea:	601a      	strpl	r2, [r3, #0]
 80853ec:	4b22      	ldr	r3, [pc, #136]	; (8085478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80853ee:	681a      	ldr	r2, [r3, #0]
 80853f0:	07d1      	lsls	r1, r2, #31
 80853f2:	bf5c      	itt	pl
 80853f4:	2201      	movpl	r2, #1
 80853f6:	601a      	strpl	r2, [r3, #0]
 80853f8:	4b20      	ldr	r3, [pc, #128]	; (808547c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80853fa:	681a      	ldr	r2, [r3, #0]
 80853fc:	07d2      	lsls	r2, r2, #31
 80853fe:	bf5c      	itt	pl
 8085400:	2201      	movpl	r2, #1
 8085402:	601a      	strpl	r2, [r3, #0]
 8085404:	4b1e      	ldr	r3, [pc, #120]	; (8085480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8085406:	681a      	ldr	r2, [r3, #0]
 8085408:	07d0      	lsls	r0, r2, #31
 808540a:	bf5c      	itt	pl
 808540c:	2201      	movpl	r2, #1
 808540e:	601a      	strpl	r2, [r3, #0]
 8085410:	4b1c      	ldr	r3, [pc, #112]	; (8085484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8085412:	681a      	ldr	r2, [r3, #0]
 8085414:	07d1      	lsls	r1, r2, #31
 8085416:	bf5c      	itt	pl
 8085418:	2201      	movpl	r2, #1
 808541a:	601a      	strpl	r2, [r3, #0]
 808541c:	4b1a      	ldr	r3, [pc, #104]	; (8085488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808541e:	681a      	ldr	r2, [r3, #0]
 8085420:	07d2      	lsls	r2, r2, #31
 8085422:	bf5c      	itt	pl
 8085424:	2201      	movpl	r2, #1
 8085426:	601a      	strpl	r2, [r3, #0]
 8085428:	4b18      	ldr	r3, [pc, #96]	; (808548c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808542a:	681a      	ldr	r2, [r3, #0]
 808542c:	07d0      	lsls	r0, r2, #31
 808542e:	bf5c      	itt	pl
 8085430:	2201      	movpl	r2, #1
 8085432:	601a      	strpl	r2, [r3, #0]
 8085434:	4b16      	ldr	r3, [pc, #88]	; (8085490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8085436:	681a      	ldr	r2, [r3, #0]
 8085438:	07d1      	lsls	r1, r2, #31
 808543a:	bf5c      	itt	pl
 808543c:	2201      	movpl	r2, #1
 808543e:	601a      	strpl	r2, [r3, #0]
 8085440:	4b14      	ldr	r3, [pc, #80]	; (8085494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8085442:	681a      	ldr	r2, [r3, #0]
 8085444:	07d2      	lsls	r2, r2, #31
 8085446:	bf5c      	itt	pl
 8085448:	2201      	movpl	r2, #1
 808544a:	601a      	strpl	r2, [r3, #0]
 808544c:	4b12      	ldr	r3, [pc, #72]	; (8085498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808544e:	681a      	ldr	r2, [r3, #0]
 8085450:	07d0      	lsls	r0, r2, #31
 8085452:	bf5c      	itt	pl
 8085454:	2201      	movpl	r2, #1
 8085456:	601a      	strpl	r2, [r3, #0]
 8085458:	4b10      	ldr	r3, [pc, #64]	; (808549c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808545a:	681a      	ldr	r2, [r3, #0]
 808545c:	07d1      	lsls	r1, r2, #31
 808545e:	bf5c      	itt	pl
 8085460:	2201      	movpl	r2, #1
 8085462:	601a      	strpl	r2, [r3, #0]
 8085464:	4b0e      	ldr	r3, [pc, #56]	; (80854a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8085466:	681a      	ldr	r2, [r3, #0]
 8085468:	07d2      	lsls	r2, r2, #31
 808546a:	bf5c      	itt	pl
 808546c:	2201      	movpl	r2, #1
 808546e:	601a      	strpl	r2, [r3, #0]
 8085470:	4770      	bx	lr
 8085472:	bf00      	nop
 8085474:	200009ec 	.word	0x200009ec
 8085478:	200009e8 	.word	0x200009e8
 808547c:	200009e4 	.word	0x200009e4
 8085480:	200009e0 	.word	0x200009e0
 8085484:	200009dc 	.word	0x200009dc
 8085488:	200009d8 	.word	0x200009d8
 808548c:	200009d4 	.word	0x200009d4
 8085490:	200009d0 	.word	0x200009d0
 8085494:	200009cc 	.word	0x200009cc
 8085498:	200009c8 	.word	0x200009c8
 808549c:	200009c4 	.word	0x200009c4
 80854a0:	200009c0 	.word	0x200009c0

080854a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80854a4:	4b24      	ldr	r3, [pc, #144]	; (8085538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80854a6:	681a      	ldr	r2, [r3, #0]
 80854a8:	07d0      	lsls	r0, r2, #31
 80854aa:	bf5c      	itt	pl
 80854ac:	2201      	movpl	r2, #1
 80854ae:	601a      	strpl	r2, [r3, #0]
 80854b0:	4b22      	ldr	r3, [pc, #136]	; (808553c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80854b2:	681a      	ldr	r2, [r3, #0]
 80854b4:	07d1      	lsls	r1, r2, #31
 80854b6:	bf5c      	itt	pl
 80854b8:	2201      	movpl	r2, #1
 80854ba:	601a      	strpl	r2, [r3, #0]
 80854bc:	4b20      	ldr	r3, [pc, #128]	; (8085540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80854be:	681a      	ldr	r2, [r3, #0]
 80854c0:	07d2      	lsls	r2, r2, #31
 80854c2:	bf5c      	itt	pl
 80854c4:	2201      	movpl	r2, #1
 80854c6:	601a      	strpl	r2, [r3, #0]
 80854c8:	4b1e      	ldr	r3, [pc, #120]	; (8085544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80854ca:	681a      	ldr	r2, [r3, #0]
 80854cc:	07d0      	lsls	r0, r2, #31
 80854ce:	bf5c      	itt	pl
 80854d0:	2201      	movpl	r2, #1
 80854d2:	601a      	strpl	r2, [r3, #0]
 80854d4:	4b1c      	ldr	r3, [pc, #112]	; (8085548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80854d6:	681a      	ldr	r2, [r3, #0]
 80854d8:	07d1      	lsls	r1, r2, #31
 80854da:	bf5c      	itt	pl
 80854dc:	2201      	movpl	r2, #1
 80854de:	601a      	strpl	r2, [r3, #0]
 80854e0:	4b1a      	ldr	r3, [pc, #104]	; (808554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80854e2:	681a      	ldr	r2, [r3, #0]
 80854e4:	07d2      	lsls	r2, r2, #31
 80854e6:	bf5c      	itt	pl
 80854e8:	2201      	movpl	r2, #1
 80854ea:	601a      	strpl	r2, [r3, #0]
 80854ec:	4b18      	ldr	r3, [pc, #96]	; (8085550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80854ee:	681a      	ldr	r2, [r3, #0]
 80854f0:	07d0      	lsls	r0, r2, #31
 80854f2:	bf5c      	itt	pl
 80854f4:	2201      	movpl	r2, #1
 80854f6:	601a      	strpl	r2, [r3, #0]
 80854f8:	4b16      	ldr	r3, [pc, #88]	; (8085554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80854fa:	681a      	ldr	r2, [r3, #0]
 80854fc:	07d1      	lsls	r1, r2, #31
 80854fe:	bf5c      	itt	pl
 8085500:	2201      	movpl	r2, #1
 8085502:	601a      	strpl	r2, [r3, #0]
 8085504:	4b14      	ldr	r3, [pc, #80]	; (8085558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8085506:	681a      	ldr	r2, [r3, #0]
 8085508:	07d2      	lsls	r2, r2, #31
 808550a:	bf5c      	itt	pl
 808550c:	2201      	movpl	r2, #1
 808550e:	601a      	strpl	r2, [r3, #0]
 8085510:	4b12      	ldr	r3, [pc, #72]	; (808555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8085512:	681a      	ldr	r2, [r3, #0]
 8085514:	07d0      	lsls	r0, r2, #31
 8085516:	bf5c      	itt	pl
 8085518:	2201      	movpl	r2, #1
 808551a:	601a      	strpl	r2, [r3, #0]
 808551c:	4b10      	ldr	r3, [pc, #64]	; (8085560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808551e:	681a      	ldr	r2, [r3, #0]
 8085520:	07d1      	lsls	r1, r2, #31
 8085522:	bf5c      	itt	pl
 8085524:	2201      	movpl	r2, #1
 8085526:	601a      	strpl	r2, [r3, #0]
 8085528:	4b0e      	ldr	r3, [pc, #56]	; (8085564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808552a:	681a      	ldr	r2, [r3, #0]
 808552c:	07d2      	lsls	r2, r2, #31
 808552e:	bf5c      	itt	pl
 8085530:	2201      	movpl	r2, #1
 8085532:	601a      	strpl	r2, [r3, #0]
 8085534:	4770      	bx	lr
 8085536:	bf00      	nop
 8085538:	20000a1c 	.word	0x20000a1c
 808553c:	20000a18 	.word	0x20000a18
 8085540:	20000a14 	.word	0x20000a14
 8085544:	20000a10 	.word	0x20000a10
 8085548:	20000a0c 	.word	0x20000a0c
 808554c:	20000a08 	.word	0x20000a08
 8085550:	20000a04 	.word	0x20000a04
 8085554:	20000a00 	.word	0x20000a00
 8085558:	200009fc 	.word	0x200009fc
 808555c:	200009f8 	.word	0x200009f8
 8085560:	200009f4 	.word	0x200009f4
 8085564:	200009f0 	.word	0x200009f0

08085568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8085568:	4b18      	ldr	r3, [pc, #96]	; (80855cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808556a:	681a      	ldr	r2, [r3, #0]
 808556c:	07d1      	lsls	r1, r2, #31
 808556e:	bf5c      	itt	pl
 8085570:	2201      	movpl	r2, #1
 8085572:	601a      	strpl	r2, [r3, #0]
 8085574:	4b16      	ldr	r3, [pc, #88]	; (80855d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8085576:	681a      	ldr	r2, [r3, #0]
 8085578:	07d2      	lsls	r2, r2, #31
 808557a:	bf5c      	itt	pl
 808557c:	2201      	movpl	r2, #1
 808557e:	601a      	strpl	r2, [r3, #0]
 8085580:	4b14      	ldr	r3, [pc, #80]	; (80855d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8085582:	681a      	ldr	r2, [r3, #0]
 8085584:	07d0      	lsls	r0, r2, #31
 8085586:	bf5c      	itt	pl
 8085588:	2201      	movpl	r2, #1
 808558a:	601a      	strpl	r2, [r3, #0]
 808558c:	4b12      	ldr	r3, [pc, #72]	; (80855d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808558e:	681a      	ldr	r2, [r3, #0]
 8085590:	07d1      	lsls	r1, r2, #31
 8085592:	bf5c      	itt	pl
 8085594:	2201      	movpl	r2, #1
 8085596:	601a      	strpl	r2, [r3, #0]
 8085598:	4b10      	ldr	r3, [pc, #64]	; (80855dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808559a:	681a      	ldr	r2, [r3, #0]
 808559c:	07d2      	lsls	r2, r2, #31
 808559e:	bf5c      	itt	pl
 80855a0:	2201      	movpl	r2, #1
 80855a2:	601a      	strpl	r2, [r3, #0]
 80855a4:	4b0e      	ldr	r3, [pc, #56]	; (80855e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80855a6:	681a      	ldr	r2, [r3, #0]
 80855a8:	07d0      	lsls	r0, r2, #31
 80855aa:	bf5c      	itt	pl
 80855ac:	2201      	movpl	r2, #1
 80855ae:	601a      	strpl	r2, [r3, #0]
 80855b0:	4b0c      	ldr	r3, [pc, #48]	; (80855e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80855b2:	681a      	ldr	r2, [r3, #0]
 80855b4:	07d1      	lsls	r1, r2, #31
 80855b6:	bf5c      	itt	pl
 80855b8:	2201      	movpl	r2, #1
 80855ba:	601a      	strpl	r2, [r3, #0]
 80855bc:	4b0a      	ldr	r3, [pc, #40]	; (80855e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80855be:	681a      	ldr	r2, [r3, #0]
 80855c0:	07d2      	lsls	r2, r2, #31
 80855c2:	bf5c      	itt	pl
 80855c4:	2201      	movpl	r2, #1
 80855c6:	601a      	strpl	r2, [r3, #0]
 80855c8:	4770      	bx	lr
 80855ca:	bf00      	nop
 80855cc:	20000a3c 	.word	0x20000a3c
 80855d0:	20000a38 	.word	0x20000a38
 80855d4:	20000a34 	.word	0x20000a34
 80855d8:	20000a30 	.word	0x20000a30
 80855dc:	20000a2c 	.word	0x20000a2c
 80855e0:	20000a28 	.word	0x20000a28
 80855e4:	20000a24 	.word	0x20000a24
 80855e8:	20000a20 	.word	0x20000a20

080855ec <__aeabi_drsub>:
 80855ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80855f0:	e002      	b.n	80855f8 <__adddf3>
 80855f2:	bf00      	nop

080855f4 <__aeabi_dsub>:
 80855f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080855f8 <__adddf3>:
 80855f8:	b530      	push	{r4, r5, lr}
 80855fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80855fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8085602:	ea94 0f05 	teq	r4, r5
 8085606:	bf08      	it	eq
 8085608:	ea90 0f02 	teqeq	r0, r2
 808560c:	bf1f      	itttt	ne
 808560e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8085612:	ea55 0c02 	orrsne.w	ip, r5, r2
 8085616:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808561a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808561e:	f000 80e2 	beq.w	80857e6 <__adddf3+0x1ee>
 8085622:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8085626:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808562a:	bfb8      	it	lt
 808562c:	426d      	neglt	r5, r5
 808562e:	dd0c      	ble.n	808564a <__adddf3+0x52>
 8085630:	442c      	add	r4, r5
 8085632:	ea80 0202 	eor.w	r2, r0, r2
 8085636:	ea81 0303 	eor.w	r3, r1, r3
 808563a:	ea82 0000 	eor.w	r0, r2, r0
 808563e:	ea83 0101 	eor.w	r1, r3, r1
 8085642:	ea80 0202 	eor.w	r2, r0, r2
 8085646:	ea81 0303 	eor.w	r3, r1, r3
 808564a:	2d36      	cmp	r5, #54	; 0x36
 808564c:	bf88      	it	hi
 808564e:	bd30      	pophi	{r4, r5, pc}
 8085650:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8085654:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8085658:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808565c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8085660:	d002      	beq.n	8085668 <__adddf3+0x70>
 8085662:	4240      	negs	r0, r0
 8085664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085668:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808566c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8085670:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8085674:	d002      	beq.n	808567c <__adddf3+0x84>
 8085676:	4252      	negs	r2, r2
 8085678:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808567c:	ea94 0f05 	teq	r4, r5
 8085680:	f000 80a7 	beq.w	80857d2 <__adddf3+0x1da>
 8085684:	f1a4 0401 	sub.w	r4, r4, #1
 8085688:	f1d5 0e20 	rsbs	lr, r5, #32
 808568c:	db0d      	blt.n	80856aa <__adddf3+0xb2>
 808568e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8085692:	fa22 f205 	lsr.w	r2, r2, r5
 8085696:	1880      	adds	r0, r0, r2
 8085698:	f141 0100 	adc.w	r1, r1, #0
 808569c:	fa03 f20e 	lsl.w	r2, r3, lr
 80856a0:	1880      	adds	r0, r0, r2
 80856a2:	fa43 f305 	asr.w	r3, r3, r5
 80856a6:	4159      	adcs	r1, r3
 80856a8:	e00e      	b.n	80856c8 <__adddf3+0xd0>
 80856aa:	f1a5 0520 	sub.w	r5, r5, #32
 80856ae:	f10e 0e20 	add.w	lr, lr, #32
 80856b2:	2a01      	cmp	r2, #1
 80856b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80856b8:	bf28      	it	cs
 80856ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80856be:	fa43 f305 	asr.w	r3, r3, r5
 80856c2:	18c0      	adds	r0, r0, r3
 80856c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80856c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80856cc:	d507      	bpl.n	80856de <__adddf3+0xe6>
 80856ce:	f04f 0e00 	mov.w	lr, #0
 80856d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80856d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80856da:	eb6e 0101 	sbc.w	r1, lr, r1
 80856de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80856e2:	d31b      	bcc.n	808571c <__adddf3+0x124>
 80856e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80856e8:	d30c      	bcc.n	8085704 <__adddf3+0x10c>
 80856ea:	0849      	lsrs	r1, r1, #1
 80856ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80856f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80856f4:	f104 0401 	add.w	r4, r4, #1
 80856f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80856fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8085700:	f080 809a 	bcs.w	8085838 <__adddf3+0x240>
 8085704:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8085708:	bf08      	it	eq
 808570a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808570e:	f150 0000 	adcs.w	r0, r0, #0
 8085712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8085716:	ea41 0105 	orr.w	r1, r1, r5
 808571a:	bd30      	pop	{r4, r5, pc}
 808571c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8085720:	4140      	adcs	r0, r0
 8085722:	eb41 0101 	adc.w	r1, r1, r1
 8085726:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808572a:	f1a4 0401 	sub.w	r4, r4, #1
 808572e:	d1e9      	bne.n	8085704 <__adddf3+0x10c>
 8085730:	f091 0f00 	teq	r1, #0
 8085734:	bf04      	itt	eq
 8085736:	4601      	moveq	r1, r0
 8085738:	2000      	moveq	r0, #0
 808573a:	fab1 f381 	clz	r3, r1
 808573e:	bf08      	it	eq
 8085740:	3320      	addeq	r3, #32
 8085742:	f1a3 030b 	sub.w	r3, r3, #11
 8085746:	f1b3 0220 	subs.w	r2, r3, #32
 808574a:	da0c      	bge.n	8085766 <__adddf3+0x16e>
 808574c:	320c      	adds	r2, #12
 808574e:	dd08      	ble.n	8085762 <__adddf3+0x16a>
 8085750:	f102 0c14 	add.w	ip, r2, #20
 8085754:	f1c2 020c 	rsb	r2, r2, #12
 8085758:	fa01 f00c 	lsl.w	r0, r1, ip
 808575c:	fa21 f102 	lsr.w	r1, r1, r2
 8085760:	e00c      	b.n	808577c <__adddf3+0x184>
 8085762:	f102 0214 	add.w	r2, r2, #20
 8085766:	bfd8      	it	le
 8085768:	f1c2 0c20 	rsble	ip, r2, #32
 808576c:	fa01 f102 	lsl.w	r1, r1, r2
 8085770:	fa20 fc0c 	lsr.w	ip, r0, ip
 8085774:	bfdc      	itt	le
 8085776:	ea41 010c 	orrle.w	r1, r1, ip
 808577a:	4090      	lslle	r0, r2
 808577c:	1ae4      	subs	r4, r4, r3
 808577e:	bfa2      	ittt	ge
 8085780:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8085784:	4329      	orrge	r1, r5
 8085786:	bd30      	popge	{r4, r5, pc}
 8085788:	ea6f 0404 	mvn.w	r4, r4
 808578c:	3c1f      	subs	r4, #31
 808578e:	da1c      	bge.n	80857ca <__adddf3+0x1d2>
 8085790:	340c      	adds	r4, #12
 8085792:	dc0e      	bgt.n	80857b2 <__adddf3+0x1ba>
 8085794:	f104 0414 	add.w	r4, r4, #20
 8085798:	f1c4 0220 	rsb	r2, r4, #32
 808579c:	fa20 f004 	lsr.w	r0, r0, r4
 80857a0:	fa01 f302 	lsl.w	r3, r1, r2
 80857a4:	ea40 0003 	orr.w	r0, r0, r3
 80857a8:	fa21 f304 	lsr.w	r3, r1, r4
 80857ac:	ea45 0103 	orr.w	r1, r5, r3
 80857b0:	bd30      	pop	{r4, r5, pc}
 80857b2:	f1c4 040c 	rsb	r4, r4, #12
 80857b6:	f1c4 0220 	rsb	r2, r4, #32
 80857ba:	fa20 f002 	lsr.w	r0, r0, r2
 80857be:	fa01 f304 	lsl.w	r3, r1, r4
 80857c2:	ea40 0003 	orr.w	r0, r0, r3
 80857c6:	4629      	mov	r1, r5
 80857c8:	bd30      	pop	{r4, r5, pc}
 80857ca:	fa21 f004 	lsr.w	r0, r1, r4
 80857ce:	4629      	mov	r1, r5
 80857d0:	bd30      	pop	{r4, r5, pc}
 80857d2:	f094 0f00 	teq	r4, #0
 80857d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80857da:	bf06      	itte	eq
 80857dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80857e0:	3401      	addeq	r4, #1
 80857e2:	3d01      	subne	r5, #1
 80857e4:	e74e      	b.n	8085684 <__adddf3+0x8c>
 80857e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80857ea:	bf18      	it	ne
 80857ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80857f0:	d029      	beq.n	8085846 <__adddf3+0x24e>
 80857f2:	ea94 0f05 	teq	r4, r5
 80857f6:	bf08      	it	eq
 80857f8:	ea90 0f02 	teqeq	r0, r2
 80857fc:	d005      	beq.n	808580a <__adddf3+0x212>
 80857fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8085802:	bf04      	itt	eq
 8085804:	4619      	moveq	r1, r3
 8085806:	4610      	moveq	r0, r2
 8085808:	bd30      	pop	{r4, r5, pc}
 808580a:	ea91 0f03 	teq	r1, r3
 808580e:	bf1e      	ittt	ne
 8085810:	2100      	movne	r1, #0
 8085812:	2000      	movne	r0, #0
 8085814:	bd30      	popne	{r4, r5, pc}
 8085816:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808581a:	d105      	bne.n	8085828 <__adddf3+0x230>
 808581c:	0040      	lsls	r0, r0, #1
 808581e:	4149      	adcs	r1, r1
 8085820:	bf28      	it	cs
 8085822:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8085826:	bd30      	pop	{r4, r5, pc}
 8085828:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808582c:	bf3c      	itt	cc
 808582e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8085832:	bd30      	popcc	{r4, r5, pc}
 8085834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8085838:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808583c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8085840:	f04f 0000 	mov.w	r0, #0
 8085844:	bd30      	pop	{r4, r5, pc}
 8085846:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808584a:	bf1a      	itte	ne
 808584c:	4619      	movne	r1, r3
 808584e:	4610      	movne	r0, r2
 8085850:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8085854:	bf1c      	itt	ne
 8085856:	460b      	movne	r3, r1
 8085858:	4602      	movne	r2, r0
 808585a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808585e:	bf06      	itte	eq
 8085860:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8085864:	ea91 0f03 	teqeq	r1, r3
 8085868:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808586c:	bd30      	pop	{r4, r5, pc}
 808586e:	bf00      	nop

08085870 <__aeabi_ui2d>:
 8085870:	f090 0f00 	teq	r0, #0
 8085874:	bf04      	itt	eq
 8085876:	2100      	moveq	r1, #0
 8085878:	4770      	bxeq	lr
 808587a:	b530      	push	{r4, r5, lr}
 808587c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8085880:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8085884:	f04f 0500 	mov.w	r5, #0
 8085888:	f04f 0100 	mov.w	r1, #0
 808588c:	e750      	b.n	8085730 <__adddf3+0x138>
 808588e:	bf00      	nop

08085890 <__aeabi_i2d>:
 8085890:	f090 0f00 	teq	r0, #0
 8085894:	bf04      	itt	eq
 8085896:	2100      	moveq	r1, #0
 8085898:	4770      	bxeq	lr
 808589a:	b530      	push	{r4, r5, lr}
 808589c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80858a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80858a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80858a8:	bf48      	it	mi
 80858aa:	4240      	negmi	r0, r0
 80858ac:	f04f 0100 	mov.w	r1, #0
 80858b0:	e73e      	b.n	8085730 <__adddf3+0x138>
 80858b2:	bf00      	nop

080858b4 <__aeabi_f2d>:
 80858b4:	0042      	lsls	r2, r0, #1
 80858b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80858ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80858be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80858c2:	bf1f      	itttt	ne
 80858c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80858c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80858cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80858d0:	4770      	bxne	lr
 80858d2:	f092 0f00 	teq	r2, #0
 80858d6:	bf14      	ite	ne
 80858d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80858dc:	4770      	bxeq	lr
 80858de:	b530      	push	{r4, r5, lr}
 80858e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80858e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80858e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80858ec:	e720      	b.n	8085730 <__adddf3+0x138>
 80858ee:	bf00      	nop

080858f0 <__aeabi_ul2d>:
 80858f0:	ea50 0201 	orrs.w	r2, r0, r1
 80858f4:	bf08      	it	eq
 80858f6:	4770      	bxeq	lr
 80858f8:	b530      	push	{r4, r5, lr}
 80858fa:	f04f 0500 	mov.w	r5, #0
 80858fe:	e00a      	b.n	8085916 <__aeabi_l2d+0x16>

08085900 <__aeabi_l2d>:
 8085900:	ea50 0201 	orrs.w	r2, r0, r1
 8085904:	bf08      	it	eq
 8085906:	4770      	bxeq	lr
 8085908:	b530      	push	{r4, r5, lr}
 808590a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808590e:	d502      	bpl.n	8085916 <__aeabi_l2d+0x16>
 8085910:	4240      	negs	r0, r0
 8085912:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085916:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808591a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808591e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8085922:	f43f aedc 	beq.w	80856de <__adddf3+0xe6>
 8085926:	f04f 0203 	mov.w	r2, #3
 808592a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808592e:	bf18      	it	ne
 8085930:	3203      	addne	r2, #3
 8085932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8085936:	bf18      	it	ne
 8085938:	3203      	addne	r2, #3
 808593a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808593e:	f1c2 0320 	rsb	r3, r2, #32
 8085942:	fa00 fc03 	lsl.w	ip, r0, r3
 8085946:	fa20 f002 	lsr.w	r0, r0, r2
 808594a:	fa01 fe03 	lsl.w	lr, r1, r3
 808594e:	ea40 000e 	orr.w	r0, r0, lr
 8085952:	fa21 f102 	lsr.w	r1, r1, r2
 8085956:	4414      	add	r4, r2
 8085958:	e6c1      	b.n	80856de <__adddf3+0xe6>
 808595a:	bf00      	nop

0808595c <__gedf2>:
 808595c:	f04f 3cff 	mov.w	ip, #4294967295
 8085960:	e006      	b.n	8085970 <__cmpdf2+0x4>
 8085962:	bf00      	nop

08085964 <__ledf2>:
 8085964:	f04f 0c01 	mov.w	ip, #1
 8085968:	e002      	b.n	8085970 <__cmpdf2+0x4>
 808596a:	bf00      	nop

0808596c <__cmpdf2>:
 808596c:	f04f 0c01 	mov.w	ip, #1
 8085970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8085974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8085978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808597c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8085980:	bf18      	it	ne
 8085982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8085986:	d01b      	beq.n	80859c0 <__cmpdf2+0x54>
 8085988:	b001      	add	sp, #4
 808598a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808598e:	bf0c      	ite	eq
 8085990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8085994:	ea91 0f03 	teqne	r1, r3
 8085998:	bf02      	ittt	eq
 808599a:	ea90 0f02 	teqeq	r0, r2
 808599e:	2000      	moveq	r0, #0
 80859a0:	4770      	bxeq	lr
 80859a2:	f110 0f00 	cmn.w	r0, #0
 80859a6:	ea91 0f03 	teq	r1, r3
 80859aa:	bf58      	it	pl
 80859ac:	4299      	cmppl	r1, r3
 80859ae:	bf08      	it	eq
 80859b0:	4290      	cmpeq	r0, r2
 80859b2:	bf2c      	ite	cs
 80859b4:	17d8      	asrcs	r0, r3, #31
 80859b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80859ba:	f040 0001 	orr.w	r0, r0, #1
 80859be:	4770      	bx	lr
 80859c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80859c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80859c8:	d102      	bne.n	80859d0 <__cmpdf2+0x64>
 80859ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80859ce:	d107      	bne.n	80859e0 <__cmpdf2+0x74>
 80859d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80859d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80859d8:	d1d6      	bne.n	8085988 <__cmpdf2+0x1c>
 80859da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80859de:	d0d3      	beq.n	8085988 <__cmpdf2+0x1c>
 80859e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80859e4:	4770      	bx	lr
 80859e6:	bf00      	nop

080859e8 <__aeabi_cdrcmple>:
 80859e8:	4684      	mov	ip, r0
 80859ea:	4610      	mov	r0, r2
 80859ec:	4662      	mov	r2, ip
 80859ee:	468c      	mov	ip, r1
 80859f0:	4619      	mov	r1, r3
 80859f2:	4663      	mov	r3, ip
 80859f4:	e000      	b.n	80859f8 <__aeabi_cdcmpeq>
 80859f6:	bf00      	nop

080859f8 <__aeabi_cdcmpeq>:
 80859f8:	b501      	push	{r0, lr}
 80859fa:	f7ff ffb7 	bl	808596c <__cmpdf2>
 80859fe:	2800      	cmp	r0, #0
 8085a00:	bf48      	it	mi
 8085a02:	f110 0f00 	cmnmi.w	r0, #0
 8085a06:	bd01      	pop	{r0, pc}

08085a08 <__aeabi_dcmpeq>:
 8085a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a0c:	f7ff fff4 	bl	80859f8 <__aeabi_cdcmpeq>
 8085a10:	bf0c      	ite	eq
 8085a12:	2001      	moveq	r0, #1
 8085a14:	2000      	movne	r0, #0
 8085a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a1a:	bf00      	nop

08085a1c <__aeabi_dcmplt>:
 8085a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a20:	f7ff ffea 	bl	80859f8 <__aeabi_cdcmpeq>
 8085a24:	bf34      	ite	cc
 8085a26:	2001      	movcc	r0, #1
 8085a28:	2000      	movcs	r0, #0
 8085a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a2e:	bf00      	nop

08085a30 <__aeabi_dcmple>:
 8085a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a34:	f7ff ffe0 	bl	80859f8 <__aeabi_cdcmpeq>
 8085a38:	bf94      	ite	ls
 8085a3a:	2001      	movls	r0, #1
 8085a3c:	2000      	movhi	r0, #0
 8085a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a42:	bf00      	nop

08085a44 <__aeabi_dcmpge>:
 8085a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a48:	f7ff ffce 	bl	80859e8 <__aeabi_cdrcmple>
 8085a4c:	bf94      	ite	ls
 8085a4e:	2001      	movls	r0, #1
 8085a50:	2000      	movhi	r0, #0
 8085a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a56:	bf00      	nop

08085a58 <__aeabi_dcmpgt>:
 8085a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085a5c:	f7ff ffc4 	bl	80859e8 <__aeabi_cdrcmple>
 8085a60:	bf34      	ite	cc
 8085a62:	2001      	movcc	r0, #1
 8085a64:	2000      	movcs	r0, #0
 8085a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8085a6a:	bf00      	nop

08085a6c <__aeabi_frsub>:
 8085a6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8085a70:	e002      	b.n	8085a78 <__addsf3>
 8085a72:	bf00      	nop

08085a74 <__aeabi_fsub>:
 8085a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08085a78 <__addsf3>:
 8085a78:	0042      	lsls	r2, r0, #1
 8085a7a:	bf1f      	itttt	ne
 8085a7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8085a80:	ea92 0f03 	teqne	r2, r3
 8085a84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8085a88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8085a8c:	d06a      	beq.n	8085b64 <__addsf3+0xec>
 8085a8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8085a92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8085a96:	bfc1      	itttt	gt
 8085a98:	18d2      	addgt	r2, r2, r3
 8085a9a:	4041      	eorgt	r1, r0
 8085a9c:	4048      	eorgt	r0, r1
 8085a9e:	4041      	eorgt	r1, r0
 8085aa0:	bfb8      	it	lt
 8085aa2:	425b      	neglt	r3, r3
 8085aa4:	2b19      	cmp	r3, #25
 8085aa6:	bf88      	it	hi
 8085aa8:	4770      	bxhi	lr
 8085aaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8085aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085ab2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8085ab6:	bf18      	it	ne
 8085ab8:	4240      	negne	r0, r0
 8085aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8085abe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8085ac2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8085ac6:	bf18      	it	ne
 8085ac8:	4249      	negne	r1, r1
 8085aca:	ea92 0f03 	teq	r2, r3
 8085ace:	d03f      	beq.n	8085b50 <__addsf3+0xd8>
 8085ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8085ad4:	fa41 fc03 	asr.w	ip, r1, r3
 8085ad8:	eb10 000c 	adds.w	r0, r0, ip
 8085adc:	f1c3 0320 	rsb	r3, r3, #32
 8085ae0:	fa01 f103 	lsl.w	r1, r1, r3
 8085ae4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8085ae8:	d502      	bpl.n	8085af0 <__addsf3+0x78>
 8085aea:	4249      	negs	r1, r1
 8085aec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8085af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8085af4:	d313      	bcc.n	8085b1e <__addsf3+0xa6>
 8085af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8085afa:	d306      	bcc.n	8085b0a <__addsf3+0x92>
 8085afc:	0840      	lsrs	r0, r0, #1
 8085afe:	ea4f 0131 	mov.w	r1, r1, rrx
 8085b02:	f102 0201 	add.w	r2, r2, #1
 8085b06:	2afe      	cmp	r2, #254	; 0xfe
 8085b08:	d251      	bcs.n	8085bae <__addsf3+0x136>
 8085b0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8085b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8085b12:	bf08      	it	eq
 8085b14:	f020 0001 	biceq.w	r0, r0, #1
 8085b18:	ea40 0003 	orr.w	r0, r0, r3
 8085b1c:	4770      	bx	lr
 8085b1e:	0049      	lsls	r1, r1, #1
 8085b20:	eb40 0000 	adc.w	r0, r0, r0
 8085b24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8085b28:	f1a2 0201 	sub.w	r2, r2, #1
 8085b2c:	d1ed      	bne.n	8085b0a <__addsf3+0x92>
 8085b2e:	fab0 fc80 	clz	ip, r0
 8085b32:	f1ac 0c08 	sub.w	ip, ip, #8
 8085b36:	ebb2 020c 	subs.w	r2, r2, ip
 8085b3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8085b3e:	bfaa      	itet	ge
 8085b40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8085b44:	4252      	neglt	r2, r2
 8085b46:	4318      	orrge	r0, r3
 8085b48:	bfbc      	itt	lt
 8085b4a:	40d0      	lsrlt	r0, r2
 8085b4c:	4318      	orrlt	r0, r3
 8085b4e:	4770      	bx	lr
 8085b50:	f092 0f00 	teq	r2, #0
 8085b54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8085b58:	bf06      	itte	eq
 8085b5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8085b5e:	3201      	addeq	r2, #1
 8085b60:	3b01      	subne	r3, #1
 8085b62:	e7b5      	b.n	8085ad0 <__addsf3+0x58>
 8085b64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8085b68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8085b6c:	bf18      	it	ne
 8085b6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8085b72:	d021      	beq.n	8085bb8 <__addsf3+0x140>
 8085b74:	ea92 0f03 	teq	r2, r3
 8085b78:	d004      	beq.n	8085b84 <__addsf3+0x10c>
 8085b7a:	f092 0f00 	teq	r2, #0
 8085b7e:	bf08      	it	eq
 8085b80:	4608      	moveq	r0, r1
 8085b82:	4770      	bx	lr
 8085b84:	ea90 0f01 	teq	r0, r1
 8085b88:	bf1c      	itt	ne
 8085b8a:	2000      	movne	r0, #0
 8085b8c:	4770      	bxne	lr
 8085b8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8085b92:	d104      	bne.n	8085b9e <__addsf3+0x126>
 8085b94:	0040      	lsls	r0, r0, #1
 8085b96:	bf28      	it	cs
 8085b98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8085b9c:	4770      	bx	lr
 8085b9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8085ba2:	bf3c      	itt	cc
 8085ba4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8085ba8:	4770      	bxcc	lr
 8085baa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8085bae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8085bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085bb6:	4770      	bx	lr
 8085bb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8085bbc:	bf16      	itet	ne
 8085bbe:	4608      	movne	r0, r1
 8085bc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8085bc4:	4601      	movne	r1, r0
 8085bc6:	0242      	lsls	r2, r0, #9
 8085bc8:	bf06      	itte	eq
 8085bca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8085bce:	ea90 0f01 	teqeq	r0, r1
 8085bd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8085bd6:	4770      	bx	lr

08085bd8 <__aeabi_ui2f>:
 8085bd8:	f04f 0300 	mov.w	r3, #0
 8085bdc:	e004      	b.n	8085be8 <__aeabi_i2f+0x8>
 8085bde:	bf00      	nop

08085be0 <__aeabi_i2f>:
 8085be0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8085be4:	bf48      	it	mi
 8085be6:	4240      	negmi	r0, r0
 8085be8:	ea5f 0c00 	movs.w	ip, r0
 8085bec:	bf08      	it	eq
 8085bee:	4770      	bxeq	lr
 8085bf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8085bf4:	4601      	mov	r1, r0
 8085bf6:	f04f 0000 	mov.w	r0, #0
 8085bfa:	e01c      	b.n	8085c36 <__aeabi_l2f+0x2a>

08085bfc <__aeabi_ul2f>:
 8085bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8085c00:	bf08      	it	eq
 8085c02:	4770      	bxeq	lr
 8085c04:	f04f 0300 	mov.w	r3, #0
 8085c08:	e00a      	b.n	8085c20 <__aeabi_l2f+0x14>
 8085c0a:	bf00      	nop

08085c0c <__aeabi_l2f>:
 8085c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8085c10:	bf08      	it	eq
 8085c12:	4770      	bxeq	lr
 8085c14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8085c18:	d502      	bpl.n	8085c20 <__aeabi_l2f+0x14>
 8085c1a:	4240      	negs	r0, r0
 8085c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8085c20:	ea5f 0c01 	movs.w	ip, r1
 8085c24:	bf02      	ittt	eq
 8085c26:	4684      	moveq	ip, r0
 8085c28:	4601      	moveq	r1, r0
 8085c2a:	2000      	moveq	r0, #0
 8085c2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8085c30:	bf08      	it	eq
 8085c32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8085c36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8085c3a:	fabc f28c 	clz	r2, ip
 8085c3e:	3a08      	subs	r2, #8
 8085c40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8085c44:	db10      	blt.n	8085c68 <__aeabi_l2f+0x5c>
 8085c46:	fa01 fc02 	lsl.w	ip, r1, r2
 8085c4a:	4463      	add	r3, ip
 8085c4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8085c50:	f1c2 0220 	rsb	r2, r2, #32
 8085c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8085c58:	fa20 f202 	lsr.w	r2, r0, r2
 8085c5c:	eb43 0002 	adc.w	r0, r3, r2
 8085c60:	bf08      	it	eq
 8085c62:	f020 0001 	biceq.w	r0, r0, #1
 8085c66:	4770      	bx	lr
 8085c68:	f102 0220 	add.w	r2, r2, #32
 8085c6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8085c70:	f1c2 0220 	rsb	r2, r2, #32
 8085c74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8085c78:	fa21 f202 	lsr.w	r2, r1, r2
 8085c7c:	eb43 0002 	adc.w	r0, r3, r2
 8085c80:	bf08      	it	eq
 8085c82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8085c86:	4770      	bx	lr

08085c88 <__aeabi_fmul>:
 8085c88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085c8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8085c90:	bf1e      	ittt	ne
 8085c92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8085c96:	ea92 0f0c 	teqne	r2, ip
 8085c9a:	ea93 0f0c 	teqne	r3, ip
 8085c9e:	d06f      	beq.n	8085d80 <__aeabi_fmul+0xf8>
 8085ca0:	441a      	add	r2, r3
 8085ca2:	ea80 0c01 	eor.w	ip, r0, r1
 8085ca6:	0240      	lsls	r0, r0, #9
 8085ca8:	bf18      	it	ne
 8085caa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8085cae:	d01e      	beq.n	8085cee <__aeabi_fmul+0x66>
 8085cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8085cb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8085cb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8085cbc:	fba0 3101 	umull	r3, r1, r0, r1
 8085cc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8085cc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8085cc8:	bf3e      	ittt	cc
 8085cca:	0049      	lslcc	r1, r1, #1
 8085ccc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8085cd0:	005b      	lslcc	r3, r3, #1
 8085cd2:	ea40 0001 	orr.w	r0, r0, r1
 8085cd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8085cda:	2afd      	cmp	r2, #253	; 0xfd
 8085cdc:	d81d      	bhi.n	8085d1a <__aeabi_fmul+0x92>
 8085cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8085ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8085ce6:	bf08      	it	eq
 8085ce8:	f020 0001 	biceq.w	r0, r0, #1
 8085cec:	4770      	bx	lr
 8085cee:	f090 0f00 	teq	r0, #0
 8085cf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8085cf6:	bf08      	it	eq
 8085cf8:	0249      	lsleq	r1, r1, #9
 8085cfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8085cfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8085d02:	3a7f      	subs	r2, #127	; 0x7f
 8085d04:	bfc2      	ittt	gt
 8085d06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8085d0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8085d0e:	4770      	bxgt	lr
 8085d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085d14:	f04f 0300 	mov.w	r3, #0
 8085d18:	3a01      	subs	r2, #1
 8085d1a:	dc5d      	bgt.n	8085dd8 <__aeabi_fmul+0x150>
 8085d1c:	f112 0f19 	cmn.w	r2, #25
 8085d20:	bfdc      	itt	le
 8085d22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8085d26:	4770      	bxle	lr
 8085d28:	f1c2 0200 	rsb	r2, r2, #0
 8085d2c:	0041      	lsls	r1, r0, #1
 8085d2e:	fa21 f102 	lsr.w	r1, r1, r2
 8085d32:	f1c2 0220 	rsb	r2, r2, #32
 8085d36:	fa00 fc02 	lsl.w	ip, r0, r2
 8085d3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8085d3e:	f140 0000 	adc.w	r0, r0, #0
 8085d42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8085d46:	bf08      	it	eq
 8085d48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8085d4c:	4770      	bx	lr
 8085d4e:	f092 0f00 	teq	r2, #0
 8085d52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8085d56:	bf02      	ittt	eq
 8085d58:	0040      	lsleq	r0, r0, #1
 8085d5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8085d5e:	3a01      	subeq	r2, #1
 8085d60:	d0f9      	beq.n	8085d56 <__aeabi_fmul+0xce>
 8085d62:	ea40 000c 	orr.w	r0, r0, ip
 8085d66:	f093 0f00 	teq	r3, #0
 8085d6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8085d6e:	bf02      	ittt	eq
 8085d70:	0049      	lsleq	r1, r1, #1
 8085d72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8085d76:	3b01      	subeq	r3, #1
 8085d78:	d0f9      	beq.n	8085d6e <__aeabi_fmul+0xe6>
 8085d7a:	ea41 010c 	orr.w	r1, r1, ip
 8085d7e:	e78f      	b.n	8085ca0 <__aeabi_fmul+0x18>
 8085d80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8085d84:	ea92 0f0c 	teq	r2, ip
 8085d88:	bf18      	it	ne
 8085d8a:	ea93 0f0c 	teqne	r3, ip
 8085d8e:	d00a      	beq.n	8085da6 <__aeabi_fmul+0x11e>
 8085d90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8085d94:	bf18      	it	ne
 8085d96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8085d9a:	d1d8      	bne.n	8085d4e <__aeabi_fmul+0xc6>
 8085d9c:	ea80 0001 	eor.w	r0, r0, r1
 8085da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8085da4:	4770      	bx	lr
 8085da6:	f090 0f00 	teq	r0, #0
 8085daa:	bf17      	itett	ne
 8085dac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8085db0:	4608      	moveq	r0, r1
 8085db2:	f091 0f00 	teqne	r1, #0
 8085db6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8085dba:	d014      	beq.n	8085de6 <__aeabi_fmul+0x15e>
 8085dbc:	ea92 0f0c 	teq	r2, ip
 8085dc0:	d101      	bne.n	8085dc6 <__aeabi_fmul+0x13e>
 8085dc2:	0242      	lsls	r2, r0, #9
 8085dc4:	d10f      	bne.n	8085de6 <__aeabi_fmul+0x15e>
 8085dc6:	ea93 0f0c 	teq	r3, ip
 8085dca:	d103      	bne.n	8085dd4 <__aeabi_fmul+0x14c>
 8085dcc:	024b      	lsls	r3, r1, #9
 8085dce:	bf18      	it	ne
 8085dd0:	4608      	movne	r0, r1
 8085dd2:	d108      	bne.n	8085de6 <__aeabi_fmul+0x15e>
 8085dd4:	ea80 0001 	eor.w	r0, r0, r1
 8085dd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8085ddc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8085de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085de4:	4770      	bx	lr
 8085de6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8085dea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8085dee:	4770      	bx	lr

08085df0 <__aeabi_fdiv>:
 8085df0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8085df4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8085df8:	bf1e      	ittt	ne
 8085dfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8085dfe:	ea92 0f0c 	teqne	r2, ip
 8085e02:	ea93 0f0c 	teqne	r3, ip
 8085e06:	d069      	beq.n	8085edc <__aeabi_fdiv+0xec>
 8085e08:	eba2 0203 	sub.w	r2, r2, r3
 8085e0c:	ea80 0c01 	eor.w	ip, r0, r1
 8085e10:	0249      	lsls	r1, r1, #9
 8085e12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8085e16:	d037      	beq.n	8085e88 <__aeabi_fdiv+0x98>
 8085e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8085e1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8085e20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8085e24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8085e28:	428b      	cmp	r3, r1
 8085e2a:	bf38      	it	cc
 8085e2c:	005b      	lslcc	r3, r3, #1
 8085e2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8085e32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8085e36:	428b      	cmp	r3, r1
 8085e38:	bf24      	itt	cs
 8085e3a:	1a5b      	subcs	r3, r3, r1
 8085e3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8085e40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8085e44:	bf24      	itt	cs
 8085e46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8085e4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8085e4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8085e52:	bf24      	itt	cs
 8085e54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8085e58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8085e5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8085e60:	bf24      	itt	cs
 8085e62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8085e66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8085e6a:	011b      	lsls	r3, r3, #4
 8085e6c:	bf18      	it	ne
 8085e6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8085e72:	d1e0      	bne.n	8085e36 <__aeabi_fdiv+0x46>
 8085e74:	2afd      	cmp	r2, #253	; 0xfd
 8085e76:	f63f af50 	bhi.w	8085d1a <__aeabi_fmul+0x92>
 8085e7a:	428b      	cmp	r3, r1
 8085e7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8085e80:	bf08      	it	eq
 8085e82:	f020 0001 	biceq.w	r0, r0, #1
 8085e86:	4770      	bx	lr
 8085e88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8085e8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8085e90:	327f      	adds	r2, #127	; 0x7f
 8085e92:	bfc2      	ittt	gt
 8085e94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8085e98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8085e9c:	4770      	bxgt	lr
 8085e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8085ea2:	f04f 0300 	mov.w	r3, #0
 8085ea6:	3a01      	subs	r2, #1
 8085ea8:	e737      	b.n	8085d1a <__aeabi_fmul+0x92>
 8085eaa:	f092 0f00 	teq	r2, #0
 8085eae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8085eb2:	bf02      	ittt	eq
 8085eb4:	0040      	lsleq	r0, r0, #1
 8085eb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8085eba:	3a01      	subeq	r2, #1
 8085ebc:	d0f9      	beq.n	8085eb2 <__aeabi_fdiv+0xc2>
 8085ebe:	ea40 000c 	orr.w	r0, r0, ip
 8085ec2:	f093 0f00 	teq	r3, #0
 8085ec6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8085eca:	bf02      	ittt	eq
 8085ecc:	0049      	lsleq	r1, r1, #1
 8085ece:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8085ed2:	3b01      	subeq	r3, #1
 8085ed4:	d0f9      	beq.n	8085eca <__aeabi_fdiv+0xda>
 8085ed6:	ea41 010c 	orr.w	r1, r1, ip
 8085eda:	e795      	b.n	8085e08 <__aeabi_fdiv+0x18>
 8085edc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8085ee0:	ea92 0f0c 	teq	r2, ip
 8085ee4:	d108      	bne.n	8085ef8 <__aeabi_fdiv+0x108>
 8085ee6:	0242      	lsls	r2, r0, #9
 8085ee8:	f47f af7d 	bne.w	8085de6 <__aeabi_fmul+0x15e>
 8085eec:	ea93 0f0c 	teq	r3, ip
 8085ef0:	f47f af70 	bne.w	8085dd4 <__aeabi_fmul+0x14c>
 8085ef4:	4608      	mov	r0, r1
 8085ef6:	e776      	b.n	8085de6 <__aeabi_fmul+0x15e>
 8085ef8:	ea93 0f0c 	teq	r3, ip
 8085efc:	d104      	bne.n	8085f08 <__aeabi_fdiv+0x118>
 8085efe:	024b      	lsls	r3, r1, #9
 8085f00:	f43f af4c 	beq.w	8085d9c <__aeabi_fmul+0x114>
 8085f04:	4608      	mov	r0, r1
 8085f06:	e76e      	b.n	8085de6 <__aeabi_fmul+0x15e>
 8085f08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8085f0c:	bf18      	it	ne
 8085f0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8085f12:	d1ca      	bne.n	8085eaa <__aeabi_fdiv+0xba>
 8085f14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8085f18:	f47f af5c 	bne.w	8085dd4 <__aeabi_fmul+0x14c>
 8085f1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8085f20:	f47f af3c 	bne.w	8085d9c <__aeabi_fmul+0x114>
 8085f24:	e75f      	b.n	8085de6 <__aeabi_fmul+0x15e>
 8085f26:	bf00      	nop

08085f28 <__gesf2>:
 8085f28:	f04f 3cff 	mov.w	ip, #4294967295
 8085f2c:	e006      	b.n	8085f3c <__cmpsf2+0x4>
 8085f2e:	bf00      	nop

08085f30 <__lesf2>:
 8085f30:	f04f 0c01 	mov.w	ip, #1
 8085f34:	e002      	b.n	8085f3c <__cmpsf2+0x4>
 8085f36:	bf00      	nop

08085f38 <__cmpsf2>:
 8085f38:	f04f 0c01 	mov.w	ip, #1
 8085f3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8085f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8085f44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8085f48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8085f4c:	bf18      	it	ne
 8085f4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8085f52:	d011      	beq.n	8085f78 <__cmpsf2+0x40>
 8085f54:	b001      	add	sp, #4
 8085f56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8085f5a:	bf18      	it	ne
 8085f5c:	ea90 0f01 	teqne	r0, r1
 8085f60:	bf58      	it	pl
 8085f62:	ebb2 0003 	subspl.w	r0, r2, r3
 8085f66:	bf88      	it	hi
 8085f68:	17c8      	asrhi	r0, r1, #31
 8085f6a:	bf38      	it	cc
 8085f6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8085f70:	bf18      	it	ne
 8085f72:	f040 0001 	orrne.w	r0, r0, #1
 8085f76:	4770      	bx	lr
 8085f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8085f7c:	d102      	bne.n	8085f84 <__cmpsf2+0x4c>
 8085f7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8085f82:	d105      	bne.n	8085f90 <__cmpsf2+0x58>
 8085f84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8085f88:	d1e4      	bne.n	8085f54 <__cmpsf2+0x1c>
 8085f8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8085f8e:	d0e1      	beq.n	8085f54 <__cmpsf2+0x1c>
 8085f90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8085f94:	4770      	bx	lr
 8085f96:	bf00      	nop

08085f98 <__aeabi_cfrcmple>:
 8085f98:	4684      	mov	ip, r0
 8085f9a:	4608      	mov	r0, r1
 8085f9c:	4661      	mov	r1, ip
 8085f9e:	e7ff      	b.n	8085fa0 <__aeabi_cfcmpeq>

08085fa0 <__aeabi_cfcmpeq>:
 8085fa0:	b50f      	push	{r0, r1, r2, r3, lr}
 8085fa2:	f7ff ffc9 	bl	8085f38 <__cmpsf2>
 8085fa6:	2800      	cmp	r0, #0
 8085fa8:	bf48      	it	mi
 8085faa:	f110 0f00 	cmnmi.w	r0, #0
 8085fae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08085fb0 <__aeabi_fcmpeq>:
 8085fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085fb4:	f7ff fff4 	bl	8085fa0 <__aeabi_cfcmpeq>
 8085fb8:	bf0c      	ite	eq
 8085fba:	2001      	moveq	r0, #1
 8085fbc:	2000      	movne	r0, #0
 8085fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8085fc2:	bf00      	nop

08085fc4 <__aeabi_fcmplt>:
 8085fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085fc8:	f7ff ffea 	bl	8085fa0 <__aeabi_cfcmpeq>
 8085fcc:	bf34      	ite	cc
 8085fce:	2001      	movcc	r0, #1
 8085fd0:	2000      	movcs	r0, #0
 8085fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8085fd6:	bf00      	nop

08085fd8 <__aeabi_fcmple>:
 8085fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085fdc:	f7ff ffe0 	bl	8085fa0 <__aeabi_cfcmpeq>
 8085fe0:	bf94      	ite	ls
 8085fe2:	2001      	movls	r0, #1
 8085fe4:	2000      	movhi	r0, #0
 8085fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8085fea:	bf00      	nop

08085fec <__aeabi_fcmpge>:
 8085fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085ff0:	f7ff ffd2 	bl	8085f98 <__aeabi_cfrcmple>
 8085ff4:	bf94      	ite	ls
 8085ff6:	2001      	movls	r0, #1
 8085ff8:	2000      	movhi	r0, #0
 8085ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8085ffe:	bf00      	nop

08086000 <__aeabi_fcmpgt>:
 8086000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086004:	f7ff ffc8 	bl	8085f98 <__aeabi_cfrcmple>
 8086008:	bf34      	ite	cc
 808600a:	2001      	movcc	r0, #1
 808600c:	2000      	movcs	r0, #0
 808600e:	f85d fb08 	ldr.w	pc, [sp], #8
 8086012:	bf00      	nop

08086014 <__aeabi_fcmpun>:
 8086014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8086018:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808601c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8086020:	d102      	bne.n	8086028 <__aeabi_fcmpun+0x14>
 8086022:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8086026:	d108      	bne.n	808603a <__aeabi_fcmpun+0x26>
 8086028:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808602c:	d102      	bne.n	8086034 <__aeabi_fcmpun+0x20>
 808602e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8086032:	d102      	bne.n	808603a <__aeabi_fcmpun+0x26>
 8086034:	f04f 0000 	mov.w	r0, #0
 8086038:	4770      	bx	lr
 808603a:	f04f 0001 	mov.w	r0, #1
 808603e:	4770      	bx	lr

08086040 <__aeabi_f2uiz>:
 8086040:	0042      	lsls	r2, r0, #1
 8086042:	d20e      	bcs.n	8086062 <__aeabi_f2uiz+0x22>
 8086044:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8086048:	d30b      	bcc.n	8086062 <__aeabi_f2uiz+0x22>
 808604a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808604e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8086052:	d409      	bmi.n	8086068 <__aeabi_f2uiz+0x28>
 8086054:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8086058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808605c:	fa23 f002 	lsr.w	r0, r3, r2
 8086060:	4770      	bx	lr
 8086062:	f04f 0000 	mov.w	r0, #0
 8086066:	4770      	bx	lr
 8086068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808606c:	d101      	bne.n	8086072 <__aeabi_f2uiz+0x32>
 808606e:	0242      	lsls	r2, r0, #9
 8086070:	d102      	bne.n	8086078 <__aeabi_f2uiz+0x38>
 8086072:	f04f 30ff 	mov.w	r0, #4294967295
 8086076:	4770      	bx	lr
 8086078:	f04f 0000 	mov.w	r0, #0
 808607c:	4770      	bx	lr
 808607e:	bf00      	nop

08086080 <asctime>:
 8086080:	4b09      	ldr	r3, [pc, #36]	; (80860a8 <asctime+0x28>)
 8086082:	b570      	push	{r4, r5, r6, lr}
 8086084:	681c      	ldr	r4, [r3, #0]
 8086086:	4606      	mov	r6, r0
 8086088:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808608a:	b93d      	cbnz	r5, 808609c <asctime+0x1c>
 808608c:	201a      	movs	r0, #26
 808608e:	f7fd fc87 	bl	80839a0 <malloc>
 8086092:	221a      	movs	r2, #26
 8086094:	6420      	str	r0, [r4, #64]	; 0x40
 8086096:	4629      	mov	r1, r5
 8086098:	f000 f952 	bl	8086340 <memset>
 808609c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808609e:	4630      	mov	r0, r6
 80860a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80860a4:	f000 b802 	b.w	80860ac <asctime_r>
 80860a8:	20000274 	.word	0x20000274

080860ac <asctime_r>:
 80860ac:	b510      	push	{r4, lr}
 80860ae:	460c      	mov	r4, r1
 80860b0:	6941      	ldr	r1, [r0, #20]
 80860b2:	b086      	sub	sp, #24
 80860b4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80860b8:	6903      	ldr	r3, [r0, #16]
 80860ba:	6982      	ldr	r2, [r0, #24]
 80860bc:	9104      	str	r1, [sp, #16]
 80860be:	6801      	ldr	r1, [r0, #0]
 80860c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80860c4:	9103      	str	r1, [sp, #12]
 80860c6:	6841      	ldr	r1, [r0, #4]
 80860c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80860cc:	9102      	str	r1, [sp, #8]
 80860ce:	6881      	ldr	r1, [r0, #8]
 80860d0:	9101      	str	r1, [sp, #4]
 80860d2:	68c1      	ldr	r1, [r0, #12]
 80860d4:	4620      	mov	r0, r4
 80860d6:	9100      	str	r1, [sp, #0]
 80860d8:	4904      	ldr	r1, [pc, #16]	; (80860ec <asctime_r+0x40>)
 80860da:	440b      	add	r3, r1
 80860dc:	4904      	ldr	r1, [pc, #16]	; (80860f0 <asctime_r+0x44>)
 80860de:	440a      	add	r2, r1
 80860e0:	4904      	ldr	r1, [pc, #16]	; (80860f4 <asctime_r+0x48>)
 80860e2:	f7fd fc75 	bl	80839d0 <siprintf>
 80860e6:	4620      	mov	r0, r4
 80860e8:	b006      	add	sp, #24
 80860ea:	bd10      	pop	{r4, pc}
 80860ec:	08087d46 	.word	0x08087d46
 80860f0:	08087d31 	.word	0x08087d31
 80860f4:	08087d6a 	.word	0x08087d6a

080860f8 <atoi>:
 80860f8:	220a      	movs	r2, #10
 80860fa:	2100      	movs	r1, #0
 80860fc:	f000 bf48 	b.w	8086f90 <strtol>

08086100 <__cxa_atexit>:
 8086100:	b510      	push	{r4, lr}
 8086102:	4c05      	ldr	r4, [pc, #20]	; (8086118 <__cxa_atexit+0x18>)
 8086104:	4613      	mov	r3, r2
 8086106:	b12c      	cbz	r4, 8086114 <__cxa_atexit+0x14>
 8086108:	460a      	mov	r2, r1
 808610a:	4601      	mov	r1, r0
 808610c:	2002      	movs	r0, #2
 808610e:	f3af 8000 	nop.w
 8086112:	bd10      	pop	{r4, pc}
 8086114:	4620      	mov	r0, r4
 8086116:	bd10      	pop	{r4, pc}
 8086118:	00000000 	.word	0x00000000

0808611c <localtime>:
 808611c:	b538      	push	{r3, r4, r5, lr}
 808611e:	4b07      	ldr	r3, [pc, #28]	; (808613c <localtime+0x20>)
 8086120:	4605      	mov	r5, r0
 8086122:	681c      	ldr	r4, [r3, #0]
 8086124:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8086126:	b91b      	cbnz	r3, 8086130 <localtime+0x14>
 8086128:	2024      	movs	r0, #36	; 0x24
 808612a:	f7fd fc39 	bl	80839a0 <malloc>
 808612e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8086130:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8086132:	4628      	mov	r0, r5
 8086134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8086138:	f000 b802 	b.w	8086140 <localtime_r>
 808613c:	20000274 	.word	0x20000274

08086140 <localtime_r>:
 8086140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086144:	460c      	mov	r4, r1
 8086146:	4680      	mov	r8, r0
 8086148:	f001 fa3c 	bl	80875c4 <__gettzinfo>
 808614c:	4621      	mov	r1, r4
 808614e:	4607      	mov	r7, r0
 8086150:	4640      	mov	r0, r8
 8086152:	f001 fa3b 	bl	80875cc <gmtime_r>
 8086156:	6946      	ldr	r6, [r0, #20]
 8086158:	4604      	mov	r4, r0
 808615a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808615e:	07b3      	lsls	r3, r6, #30
 8086160:	d105      	bne.n	808616e <localtime_r+0x2e>
 8086162:	2264      	movs	r2, #100	; 0x64
 8086164:	fb96 f3f2 	sdiv	r3, r6, r2
 8086168:	fb02 6313 	mls	r3, r2, r3, r6
 808616c:	b94b      	cbnz	r3, 8086182 <localtime_r+0x42>
 808616e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8086172:	fb96 f3f5 	sdiv	r3, r6, r5
 8086176:	fb05 6513 	mls	r5, r5, r3, r6
 808617a:	fab5 f385 	clz	r3, r5
 808617e:	095b      	lsrs	r3, r3, #5
 8086180:	e000      	b.n	8086184 <localtime_r+0x44>
 8086182:	2301      	movs	r3, #1
 8086184:	4a5f      	ldr	r2, [pc, #380]	; (8086304 <localtime_r+0x1c4>)
 8086186:	2530      	movs	r5, #48	; 0x30
 8086188:	fb05 2503 	mla	r5, r5, r3, r2
 808618c:	f001 f84a 	bl	8087224 <__tz_lock>
 8086190:	f001 f84a 	bl	8087228 <_tzset_unlocked>
 8086194:	4b5c      	ldr	r3, [pc, #368]	; (8086308 <localtime_r+0x1c8>)
 8086196:	681b      	ldr	r3, [r3, #0]
 8086198:	b1f3      	cbz	r3, 80861d8 <localtime_r+0x98>
 808619a:	687b      	ldr	r3, [r7, #4]
 808619c:	429e      	cmp	r6, r3
 808619e:	d105      	bne.n	80861ac <localtime_r+0x6c>
 80861a0:	6839      	ldr	r1, [r7, #0]
 80861a2:	f8d8 3000 	ldr.w	r3, [r8]
 80861a6:	69fa      	ldr	r2, [r7, #28]
 80861a8:	b941      	cbnz	r1, 80861bc <localtime_r+0x7c>
 80861aa:	e00a      	b.n	80861c2 <localtime_r+0x82>
 80861ac:	4630      	mov	r0, r6
 80861ae:	f000 ff91 	bl	80870d4 <__tzcalc_limits>
 80861b2:	2800      	cmp	r0, #0
 80861b4:	d1f4      	bne.n	80861a0 <localtime_r+0x60>
 80861b6:	f04f 33ff 	mov.w	r3, #4294967295
 80861ba:	e00d      	b.n	80861d8 <localtime_r+0x98>
 80861bc:	4293      	cmp	r3, r2
 80861be:	db08      	blt.n	80861d2 <localtime_r+0x92>
 80861c0:	e001      	b.n	80861c6 <localtime_r+0x86>
 80861c2:	4293      	cmp	r3, r2
 80861c4:	da07      	bge.n	80861d6 <localtime_r+0x96>
 80861c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80861c8:	4293      	cmp	r3, r2
 80861ca:	bfac      	ite	ge
 80861cc:	2300      	movge	r3, #0
 80861ce:	2301      	movlt	r3, #1
 80861d0:	e002      	b.n	80861d8 <localtime_r+0x98>
 80861d2:	2300      	movs	r3, #0
 80861d4:	e000      	b.n	80861d8 <localtime_r+0x98>
 80861d6:	2301      	movs	r3, #1
 80861d8:	6223      	str	r3, [r4, #32]
 80861da:	6a23      	ldr	r3, [r4, #32]
 80861dc:	203c      	movs	r0, #60	; 0x3c
 80861de:	2b01      	cmp	r3, #1
 80861e0:	bf0c      	ite	eq
 80861e2:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80861e4:	6a39      	ldrne	r1, [r7, #32]
 80861e6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80861ea:	fb91 f6f3 	sdiv	r6, r1, r3
 80861ee:	fb03 1316 	mls	r3, r3, r6, r1
 80861f2:	fb93 f2f0 	sdiv	r2, r3, r0
 80861f6:	fb00 3012 	mls	r0, r0, r2, r3
 80861fa:	6861      	ldr	r1, [r4, #4]
 80861fc:	6823      	ldr	r3, [r4, #0]
 80861fe:	1a89      	subs	r1, r1, r2
 8086200:	68a2      	ldr	r2, [r4, #8]
 8086202:	1a1b      	subs	r3, r3, r0
 8086204:	1b92      	subs	r2, r2, r6
 8086206:	2b3b      	cmp	r3, #59	; 0x3b
 8086208:	6023      	str	r3, [r4, #0]
 808620a:	6061      	str	r1, [r4, #4]
 808620c:	60a2      	str	r2, [r4, #8]
 808620e:	dd03      	ble.n	8086218 <localtime_r+0xd8>
 8086210:	3101      	adds	r1, #1
 8086212:	6061      	str	r1, [r4, #4]
 8086214:	3b3c      	subs	r3, #60	; 0x3c
 8086216:	e004      	b.n	8086222 <localtime_r+0xe2>
 8086218:	2b00      	cmp	r3, #0
 808621a:	da03      	bge.n	8086224 <localtime_r+0xe4>
 808621c:	3901      	subs	r1, #1
 808621e:	6061      	str	r1, [r4, #4]
 8086220:	333c      	adds	r3, #60	; 0x3c
 8086222:	6023      	str	r3, [r4, #0]
 8086224:	6863      	ldr	r3, [r4, #4]
 8086226:	2b3b      	cmp	r3, #59	; 0x3b
 8086228:	dd03      	ble.n	8086232 <localtime_r+0xf2>
 808622a:	3201      	adds	r2, #1
 808622c:	60a2      	str	r2, [r4, #8]
 808622e:	3b3c      	subs	r3, #60	; 0x3c
 8086230:	e004      	b.n	808623c <localtime_r+0xfc>
 8086232:	2b00      	cmp	r3, #0
 8086234:	da03      	bge.n	808623e <localtime_r+0xfe>
 8086236:	3a01      	subs	r2, #1
 8086238:	60a2      	str	r2, [r4, #8]
 808623a:	333c      	adds	r3, #60	; 0x3c
 808623c:	6063      	str	r3, [r4, #4]
 808623e:	68a3      	ldr	r3, [r4, #8]
 8086240:	2b17      	cmp	r3, #23
 8086242:	dd22      	ble.n	808628a <localtime_r+0x14a>
 8086244:	69e2      	ldr	r2, [r4, #28]
 8086246:	3b18      	subs	r3, #24
 8086248:	3201      	adds	r2, #1
 808624a:	61e2      	str	r2, [r4, #28]
 808624c:	69a2      	ldr	r2, [r4, #24]
 808624e:	60a3      	str	r3, [r4, #8]
 8086250:	3201      	adds	r2, #1
 8086252:	2a06      	cmp	r2, #6
 8086254:	bfc8      	it	gt
 8086256:	2200      	movgt	r2, #0
 8086258:	61a2      	str	r2, [r4, #24]
 808625a:	68e2      	ldr	r2, [r4, #12]
 808625c:	6923      	ldr	r3, [r4, #16]
 808625e:	3201      	adds	r2, #1
 8086260:	60e2      	str	r2, [r4, #12]
 8086262:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8086266:	428a      	cmp	r2, r1
 8086268:	dd46      	ble.n	80862f8 <localtime_r+0x1b8>
 808626a:	3301      	adds	r3, #1
 808626c:	2b0c      	cmp	r3, #12
 808626e:	bf08      	it	eq
 8086270:	6963      	ldreq	r3, [r4, #20]
 8086272:	eba2 0201 	sub.w	r2, r2, r1
 8086276:	60e2      	str	r2, [r4, #12]
 8086278:	bf05      	ittet	eq
 808627a:	3301      	addeq	r3, #1
 808627c:	2200      	moveq	r2, #0
 808627e:	6123      	strne	r3, [r4, #16]
 8086280:	6122      	streq	r2, [r4, #16]
 8086282:	bf04      	itt	eq
 8086284:	6163      	streq	r3, [r4, #20]
 8086286:	61e2      	streq	r2, [r4, #28]
 8086288:	e036      	b.n	80862f8 <localtime_r+0x1b8>
 808628a:	2b00      	cmp	r3, #0
 808628c:	da34      	bge.n	80862f8 <localtime_r+0x1b8>
 808628e:	69e2      	ldr	r2, [r4, #28]
 8086290:	3318      	adds	r3, #24
 8086292:	3a01      	subs	r2, #1
 8086294:	61e2      	str	r2, [r4, #28]
 8086296:	69a2      	ldr	r2, [r4, #24]
 8086298:	60a3      	str	r3, [r4, #8]
 808629a:	3a01      	subs	r2, #1
 808629c:	bf48      	it	mi
 808629e:	2206      	movmi	r2, #6
 80862a0:	61a2      	str	r2, [r4, #24]
 80862a2:	68e2      	ldr	r2, [r4, #12]
 80862a4:	3a01      	subs	r2, #1
 80862a6:	60e2      	str	r2, [r4, #12]
 80862a8:	bb32      	cbnz	r2, 80862f8 <localtime_r+0x1b8>
 80862aa:	6923      	ldr	r3, [r4, #16]
 80862ac:	3b01      	subs	r3, #1
 80862ae:	d401      	bmi.n	80862b4 <localtime_r+0x174>
 80862b0:	6123      	str	r3, [r4, #16]
 80862b2:	e01d      	b.n	80862f0 <localtime_r+0x1b0>
 80862b4:	230b      	movs	r3, #11
 80862b6:	6123      	str	r3, [r4, #16]
 80862b8:	6963      	ldr	r3, [r4, #20]
 80862ba:	1e5a      	subs	r2, r3, #1
 80862bc:	f012 0f03 	tst.w	r2, #3
 80862c0:	6162      	str	r2, [r4, #20]
 80862c2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80862c6:	d105      	bne.n	80862d4 <localtime_r+0x194>
 80862c8:	2164      	movs	r1, #100	; 0x64
 80862ca:	fb93 f2f1 	sdiv	r2, r3, r1
 80862ce:	fb01 3212 	mls	r2, r1, r2, r3
 80862d2:	b94a      	cbnz	r2, 80862e8 <localtime_r+0x1a8>
 80862d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80862d8:	fb93 f2f1 	sdiv	r2, r3, r1
 80862dc:	fb01 3312 	mls	r3, r1, r2, r3
 80862e0:	fab3 f383 	clz	r3, r3
 80862e4:	095b      	lsrs	r3, r3, #5
 80862e6:	e000      	b.n	80862ea <localtime_r+0x1aa>
 80862e8:	2301      	movs	r3, #1
 80862ea:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80862ee:	61e3      	str	r3, [r4, #28]
 80862f0:	6923      	ldr	r3, [r4, #16]
 80862f2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80862f6:	60e3      	str	r3, [r4, #12]
 80862f8:	f000 ff95 	bl	8087226 <__tz_unlock>
 80862fc:	4620      	mov	r0, r4
 80862fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086302:	bf00      	nop
 8086304:	08087eec 	.word	0x08087eec
 8086308:	20000b5c 	.word	0x20000b5c

0808630c <memcmp>:
 808630c:	b510      	push	{r4, lr}
 808630e:	3901      	subs	r1, #1
 8086310:	4402      	add	r2, r0
 8086312:	4290      	cmp	r0, r2
 8086314:	d007      	beq.n	8086326 <memcmp+0x1a>
 8086316:	f810 3b01 	ldrb.w	r3, [r0], #1
 808631a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808631e:	42a3      	cmp	r3, r4
 8086320:	d0f7      	beq.n	8086312 <memcmp+0x6>
 8086322:	1b18      	subs	r0, r3, r4
 8086324:	bd10      	pop	{r4, pc}
 8086326:	2000      	movs	r0, #0
 8086328:	bd10      	pop	{r4, pc}

0808632a <memcpy>:
 808632a:	b510      	push	{r4, lr}
 808632c:	1e43      	subs	r3, r0, #1
 808632e:	440a      	add	r2, r1
 8086330:	4291      	cmp	r1, r2
 8086332:	d004      	beq.n	808633e <memcpy+0x14>
 8086334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8086338:	f803 4f01 	strb.w	r4, [r3, #1]!
 808633c:	e7f8      	b.n	8086330 <memcpy+0x6>
 808633e:	bd10      	pop	{r4, pc}

08086340 <memset>:
 8086340:	4603      	mov	r3, r0
 8086342:	4402      	add	r2, r0
 8086344:	4293      	cmp	r3, r2
 8086346:	d002      	beq.n	808634e <memset+0xe>
 8086348:	f803 1b01 	strb.w	r1, [r3], #1
 808634c:	e7fa      	b.n	8086344 <memset+0x4>
 808634e:	4770      	bx	lr

08086350 <srand>:
 8086350:	b538      	push	{r3, r4, r5, lr}
 8086352:	4b12      	ldr	r3, [pc, #72]	; (808639c <srand+0x4c>)
 8086354:	4605      	mov	r5, r0
 8086356:	681c      	ldr	r4, [r3, #0]
 8086358:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808635a:	b9d3      	cbnz	r3, 8086392 <srand+0x42>
 808635c:	2018      	movs	r0, #24
 808635e:	f7fd fb1f 	bl	80839a0 <malloc>
 8086362:	f243 330e 	movw	r3, #13070	; 0x330e
 8086366:	63a0      	str	r0, [r4, #56]	; 0x38
 8086368:	8003      	strh	r3, [r0, #0]
 808636a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808636e:	8043      	strh	r3, [r0, #2]
 8086370:	f241 2334 	movw	r3, #4660	; 0x1234
 8086374:	8083      	strh	r3, [r0, #4]
 8086376:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808637a:	80c3      	strh	r3, [r0, #6]
 808637c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8086380:	8103      	strh	r3, [r0, #8]
 8086382:	2305      	movs	r3, #5
 8086384:	8143      	strh	r3, [r0, #10]
 8086386:	230b      	movs	r3, #11
 8086388:	8183      	strh	r3, [r0, #12]
 808638a:	2201      	movs	r2, #1
 808638c:	2300      	movs	r3, #0
 808638e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8086392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8086394:	2200      	movs	r2, #0
 8086396:	611d      	str	r5, [r3, #16]
 8086398:	615a      	str	r2, [r3, #20]
 808639a:	bd38      	pop	{r3, r4, r5, pc}
 808639c:	20000274 	.word	0x20000274

080863a0 <strcmp>:
 80863a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80863a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80863a8:	2a01      	cmp	r2, #1
 80863aa:	bf28      	it	cs
 80863ac:	429a      	cmpcs	r2, r3
 80863ae:	d0f7      	beq.n	80863a0 <strcmp>
 80863b0:	1ad0      	subs	r0, r2, r3
 80863b2:	4770      	bx	lr

080863b4 <strcpy>:
 80863b4:	4603      	mov	r3, r0
 80863b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80863ba:	f803 2b01 	strb.w	r2, [r3], #1
 80863be:	2a00      	cmp	r2, #0
 80863c0:	d1f9      	bne.n	80863b6 <strcpy+0x2>
 80863c2:	4770      	bx	lr

080863c4 <strdup>:
 80863c4:	4b02      	ldr	r3, [pc, #8]	; (80863d0 <strdup+0xc>)
 80863c6:	4601      	mov	r1, r0
 80863c8:	6818      	ldr	r0, [r3, #0]
 80863ca:	f000 b803 	b.w	80863d4 <_strdup_r>
 80863ce:	bf00      	nop
 80863d0:	20000274 	.word	0x20000274

080863d4 <_strdup_r>:
 80863d4:	b570      	push	{r4, r5, r6, lr}
 80863d6:	4606      	mov	r6, r0
 80863d8:	4608      	mov	r0, r1
 80863da:	460c      	mov	r4, r1
 80863dc:	f000 fd22 	bl	8086e24 <strlen>
 80863e0:	1c45      	adds	r5, r0, #1
 80863e2:	4629      	mov	r1, r5
 80863e4:	4630      	mov	r0, r6
 80863e6:	f7fd fb23 	bl	8083a30 <_malloc_r>
 80863ea:	4606      	mov	r6, r0
 80863ec:	b118      	cbz	r0, 80863f6 <_strdup_r+0x22>
 80863ee:	462a      	mov	r2, r5
 80863f0:	4621      	mov	r1, r4
 80863f2:	f7ff ff9a 	bl	808632a <memcpy>
 80863f6:	4630      	mov	r0, r6
 80863f8:	bd70      	pop	{r4, r5, r6, pc}

080863fa <iso_year_adjust>:
 80863fa:	6941      	ldr	r1, [r0, #20]
 80863fc:	b510      	push	{r4, lr}
 80863fe:	078b      	lsls	r3, r1, #30
 8086400:	d10c      	bne.n	808641c <iso_year_adjust+0x22>
 8086402:	f240 736c 	movw	r3, #1900	; 0x76c
 8086406:	2900      	cmp	r1, #0
 8086408:	bfa8      	it	ge
 808640a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808640e:	440b      	add	r3, r1
 8086410:	2464      	movs	r4, #100	; 0x64
 8086412:	fb93 f2f4 	sdiv	r2, r3, r4
 8086416:	fb04 3312 	mls	r3, r4, r2, r3
 808641a:	b983      	cbnz	r3, 808643e <iso_year_adjust+0x44>
 808641c:	f240 736c 	movw	r3, #1900	; 0x76c
 8086420:	2900      	cmp	r1, #0
 8086422:	bfa8      	it	ge
 8086424:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8086428:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808642c:	440b      	add	r3, r1
 808642e:	fb93 f1f2 	sdiv	r1, r3, r2
 8086432:	fb02 3311 	mls	r3, r2, r1, r3
 8086436:	fab3 f283 	clz	r2, r3
 808643a:	0952      	lsrs	r2, r2, #5
 808643c:	e000      	b.n	8086440 <iso_year_adjust+0x46>
 808643e:	2201      	movs	r2, #1
 8086440:	6983      	ldr	r3, [r0, #24]
 8086442:	69c1      	ldr	r1, [r0, #28]
 8086444:	005b      	lsls	r3, r3, #1
 8086446:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808644a:	4413      	add	r3, r2
 808644c:	2b21      	cmp	r3, #33	; 0x21
 808644e:	dc0e      	bgt.n	808646e <iso_year_adjust+0x74>
 8086450:	2b20      	cmp	r3, #32
 8086452:	da2f      	bge.n	80864b4 <iso_year_adjust+0xba>
 8086454:	2b0d      	cmp	r3, #13
 8086456:	dc02      	bgt.n	808645e <iso_year_adjust+0x64>
 8086458:	2b0a      	cmp	r3, #10
 808645a:	db05      	blt.n	8086468 <iso_year_adjust+0x6e>
 808645c:	e02a      	b.n	80864b4 <iso_year_adjust+0xba>
 808645e:	2b10      	cmp	r3, #16
 8086460:	db26      	blt.n	80864b0 <iso_year_adjust+0xb6>
 8086462:	2b11      	cmp	r3, #17
 8086464:	dd26      	ble.n	80864b4 <iso_year_adjust+0xba>
 8086466:	3b1c      	subs	r3, #28
 8086468:	2b01      	cmp	r3, #1
 808646a:	d923      	bls.n	80864b4 <iso_year_adjust+0xba>
 808646c:	e020      	b.n	80864b0 <iso_year_adjust+0xb6>
 808646e:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8086472:	4293      	cmp	r3, r2
 8086474:	dc0e      	bgt.n	8086494 <iso_year_adjust+0x9a>
 8086476:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808647a:	4293      	cmp	r3, r2
 808647c:	da16      	bge.n	80864ac <iso_year_adjust+0xb2>
 808647e:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8086482:	4293      	cmp	r3, r2
 8086484:	d012      	beq.n	80864ac <iso_year_adjust+0xb2>
 8086486:	db13      	blt.n	80864b0 <iso_year_adjust+0xb6>
 8086488:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808648c:	3b12      	subs	r3, #18
 808648e:	2b02      	cmp	r3, #2
 8086490:	d90c      	bls.n	80864ac <iso_year_adjust+0xb2>
 8086492:	e00d      	b.n	80864b0 <iso_year_adjust+0xb6>
 8086494:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8086498:	4293      	cmp	r3, r2
 808649a:	d007      	beq.n	80864ac <iso_year_adjust+0xb2>
 808649c:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80864a0:	4293      	cmp	r3, r2
 80864a2:	d003      	beq.n	80864ac <iso_year_adjust+0xb2>
 80864a4:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80864a8:	4293      	cmp	r3, r2
 80864aa:	d101      	bne.n	80864b0 <iso_year_adjust+0xb6>
 80864ac:	2001      	movs	r0, #1
 80864ae:	bd10      	pop	{r4, pc}
 80864b0:	2000      	movs	r0, #0
 80864b2:	bd10      	pop	{r4, pc}
 80864b4:	f04f 30ff 	mov.w	r0, #4294967295
 80864b8:	bd10      	pop	{r4, pc}
	...

080864bc <strftime>:
 80864bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80864c0:	460e      	mov	r6, r1
 80864c2:	b093      	sub	sp, #76	; 0x4c
 80864c4:	461d      	mov	r5, r3
 80864c6:	4607      	mov	r7, r0
 80864c8:	4691      	mov	r9, r2
 80864ca:	f000 fdf3 	bl	80870b4 <__get_current_time_locale>
 80864ce:	2300      	movs	r3, #0
 80864d0:	9306      	str	r3, [sp, #24]
 80864d2:	461c      	mov	r4, r3
 80864d4:	1e73      	subs	r3, r6, #1
 80864d6:	9003      	str	r0, [sp, #12]
 80864d8:	9302      	str	r3, [sp, #8]
 80864da:	f899 3000 	ldrb.w	r3, [r9]
 80864de:	2b00      	cmp	r3, #0
 80864e0:	f000 8492 	beq.w	8086e08 <strftime+0x94c>
 80864e4:	2b25      	cmp	r3, #37	; 0x25
 80864e6:	d008      	beq.n	80864fa <strftime+0x3e>
 80864e8:	9a02      	ldr	r2, [sp, #8]
 80864ea:	4294      	cmp	r4, r2
 80864ec:	f080 8490 	bcs.w	8086e10 <strftime+0x954>
 80864f0:	553b      	strb	r3, [r7, r4]
 80864f2:	f109 0901 	add.w	r9, r9, #1
 80864f6:	3401      	adds	r4, #1
 80864f8:	e7ef      	b.n	80864da <strftime+0x1e>
 80864fa:	f899 a001 	ldrb.w	sl, [r9, #1]
 80864fe:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8086502:	d007      	beq.n	8086514 <strftime+0x58>
 8086504:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8086508:	d004      	beq.n	8086514 <strftime+0x58>
 808650a:	f109 0901 	add.w	r9, r9, #1
 808650e:	f04f 0a00 	mov.w	sl, #0
 8086512:	e001      	b.n	8086518 <strftime+0x5c>
 8086514:	f109 0902 	add.w	r9, r9, #2
 8086518:	f899 3000 	ldrb.w	r3, [r9]
 808651c:	3b31      	subs	r3, #49	; 0x31
 808651e:	2b08      	cmp	r3, #8
 8086520:	d808      	bhi.n	8086534 <strftime+0x78>
 8086522:	4648      	mov	r0, r9
 8086524:	220a      	movs	r2, #10
 8086526:	a90a      	add	r1, sp, #40	; 0x28
 8086528:	f000 fdba 	bl	80870a0 <strtoul>
 808652c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8086530:	4680      	mov	r8, r0
 8086532:	e001      	b.n	8086538 <strftime+0x7c>
 8086534:	f04f 0800 	mov.w	r8, #0
 8086538:	f899 3000 	ldrb.w	r3, [r9]
 808653c:	2b45      	cmp	r3, #69	; 0x45
 808653e:	d001      	beq.n	8086544 <strftime+0x88>
 8086540:	2b4f      	cmp	r3, #79	; 0x4f
 8086542:	d101      	bne.n	8086548 <strftime+0x8c>
 8086544:	f109 0901 	add.w	r9, r9, #1
 8086548:	f899 0000 	ldrb.w	r0, [r9]
 808654c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8086550:	2b55      	cmp	r3, #85	; 0x55
 8086552:	f200 845d 	bhi.w	8086e10 <strftime+0x954>
 8086556:	e8df f013 	tbh	[pc, r3, lsl #1]
 808655a:	044a      	.short	0x044a
 808655c:	045b045b 	.word	0x045b045b
 8086560:	045b045b 	.word	0x045b045b
 8086564:	045b045b 	.word	0x045b045b
 8086568:	045b045b 	.word	0x045b045b
 808656c:	045b045b 	.word	0x045b045b
 8086570:	045b045b 	.word	0x045b045b
 8086574:	045b045b 	.word	0x045b045b
 8086578:	045b045b 	.word	0x045b045b
 808657c:	045b045b 	.word	0x045b045b
 8086580:	045b045b 	.word	0x045b045b
 8086584:	045b045b 	.word	0x045b045b
 8086588:	045b045b 	.word	0x045b045b
 808658c:	045b045b 	.word	0x045b045b
 8086590:	006f045b 	.word	0x006f045b
 8086594:	00d400a1 	.word	0x00d400a1
 8086598:	045b011a 	.word	0x045b011a
 808659c:	01a0013f 	.word	0x01a0013f
 80865a0:	022d0226 	.word	0x022d0226
 80865a4:	045b045b 	.word	0x045b045b
 80865a8:	0260045b 	.word	0x0260045b
 80865ac:	045b045b 	.word	0x045b045b
 80865b0:	045b0268 	.word	0x045b0268
 80865b4:	031c0296 	.word	0x031c0296
 80865b8:	033a0324 	.word	0x033a0324
 80865bc:	03850342 	.word	0x03850342
 80865c0:	039f00c6 	.word	0x039f00c6
 80865c4:	045b041f 	.word	0x045b041f
 80865c8:	045b045b 	.word	0x045b045b
 80865cc:	045b045b 	.word	0x045b045b
 80865d0:	0056045b 	.word	0x0056045b
 80865d4:	00ba0089 	.word	0x00ba0089
 80865d8:	010c010c 	.word	0x010c010c
 80865dc:	0171045b 	.word	0x0171045b
 80865e0:	045b0089 	.word	0x045b0089
 80865e4:	0226023d 	.word	0x0226023d
 80865e8:	025d022d 	.word	0x025d022d
 80865ec:	045b0262 	.word	0x045b0262
 80865f0:	045b0268 	.word	0x045b0268
 80865f4:	029b00be 	.word	0x029b00be
 80865f8:	032d031e 	.word	0x032d031e
 80865fc:	037e045b 	.word	0x037e045b
 8086600:	039100c2 	.word	0x039100c2
 8086604:	03e7      	.short	0x03e7
 8086606:	69ab      	ldr	r3, [r5, #24]
 8086608:	9a03      	ldr	r2, [sp, #12]
 808660a:	3318      	adds	r3, #24
 808660c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8086610:	4640      	mov	r0, r8
 8086612:	f000 fc07 	bl	8086e24 <strlen>
 8086616:	f108 38ff 	add.w	r8, r8, #4294967295
 808661a:	193b      	adds	r3, r7, r4
 808661c:	4420      	add	r0, r4
 808661e:	4284      	cmp	r4, r0
 8086620:	f000 83eb 	beq.w	8086dfa <strftime+0x93e>
 8086624:	9a02      	ldr	r2, [sp, #8]
 8086626:	4294      	cmp	r4, r2
 8086628:	f080 83f2 	bcs.w	8086e10 <strftime+0x954>
 808662c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8086630:	3401      	adds	r4, #1
 8086632:	f803 2b01 	strb.w	r2, [r3], #1
 8086636:	e7f2      	b.n	808661e <strftime+0x162>
 8086638:	69ab      	ldr	r3, [r5, #24]
 808663a:	9a03      	ldr	r2, [sp, #12]
 808663c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8086640:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 8086644:	4640      	mov	r0, r8
 8086646:	f000 fbed 	bl	8086e24 <strlen>
 808664a:	f108 38ff 	add.w	r8, r8, #4294967295
 808664e:	193b      	adds	r3, r7, r4
 8086650:	4420      	add	r0, r4
 8086652:	4284      	cmp	r4, r0
 8086654:	f000 83d1 	beq.w	8086dfa <strftime+0x93e>
 8086658:	9a02      	ldr	r2, [sp, #8]
 808665a:	4294      	cmp	r4, r2
 808665c:	f080 83d8 	bcs.w	8086e10 <strftime+0x954>
 8086660:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8086664:	3401      	adds	r4, #1
 8086666:	f803 2b01 	strb.w	r2, [r3], #1
 808666a:	e7f2      	b.n	8086652 <strftime+0x196>
 808666c:	692b      	ldr	r3, [r5, #16]
 808666e:	9a03      	ldr	r2, [sp, #12]
 8086670:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8086674:	4640      	mov	r0, r8
 8086676:	f000 fbd5 	bl	8086e24 <strlen>
 808667a:	f108 38ff 	add.w	r8, r8, #4294967295
 808667e:	193b      	adds	r3, r7, r4
 8086680:	4420      	add	r0, r4
 8086682:	4284      	cmp	r4, r0
 8086684:	f000 83b9 	beq.w	8086dfa <strftime+0x93e>
 8086688:	9a02      	ldr	r2, [sp, #8]
 808668a:	4294      	cmp	r4, r2
 808668c:	f080 83c0 	bcs.w	8086e10 <strftime+0x954>
 8086690:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8086694:	3401      	adds	r4, #1
 8086696:	f803 2b01 	strb.w	r2, [r3], #1
 808669a:	e7f2      	b.n	8086682 <strftime+0x1c6>
 808669c:	692b      	ldr	r3, [r5, #16]
 808669e:	9a03      	ldr	r2, [sp, #12]
 80866a0:	330c      	adds	r3, #12
 80866a2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80866a6:	4640      	mov	r0, r8
 80866a8:	f000 fbbc 	bl	8086e24 <strlen>
 80866ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80866b0:	193b      	adds	r3, r7, r4
 80866b2:	4420      	add	r0, r4
 80866b4:	4284      	cmp	r4, r0
 80866b6:	f000 83a0 	beq.w	8086dfa <strftime+0x93e>
 80866ba:	9a02      	ldr	r2, [sp, #8]
 80866bc:	4294      	cmp	r4, r2
 80866be:	f080 83a7 	bcs.w	8086e10 <strftime+0x954>
 80866c2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80866c6:	3401      	adds	r4, #1
 80866c8:	f803 2b01 	strb.w	r2, [r3], #1
 80866cc:	e7f2      	b.n	80866b4 <strftime+0x1f8>
 80866ce:	9b03      	ldr	r3, [sp, #12]
 80866d0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80866d4:	e00a      	b.n	80866ec <strftime+0x230>
 80866d6:	9b03      	ldr	r3, [sp, #12]
 80866d8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80866dc:	e006      	b.n	80866ec <strftime+0x230>
 80866de:	9b03      	ldr	r3, [sp, #12]
 80866e0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80866e4:	e002      	b.n	80866ec <strftime+0x230>
 80866e6:	9b03      	ldr	r3, [sp, #12]
 80866e8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80866ec:	4640      	mov	r0, r8
 80866ee:	f000 fb99 	bl	8086e24 <strlen>
 80866f2:	f898 3000 	ldrb.w	r3, [r8]
 80866f6:	2b00      	cmp	r3, #0
 80866f8:	f000 837f 	beq.w	8086dfa <strftime+0x93e>
 80866fc:	462b      	mov	r3, r5
 80866fe:	4642      	mov	r2, r8
 8086700:	e093      	b.n	808682a <strftime+0x36e>
 8086702:	49b6      	ldr	r1, [pc, #728]	; (80869dc <strftime+0x520>)
 8086704:	f8d5 b014 	ldr.w	fp, [r5, #20]
 8086708:	458b      	cmp	fp, r1
 808670a:	bfac      	ite	ge
 808670c:	2100      	movge	r1, #0
 808670e:	2101      	movlt	r1, #1
 8086710:	f1bb 0f00 	cmp.w	fp, #0
 8086714:	db04      	blt.n	8086720 <strftime+0x264>
 8086716:	2064      	movs	r0, #100	; 0x64
 8086718:	fb9b f0f0 	sdiv	r0, fp, r0
 808671c:	3013      	adds	r0, #19
 808671e:	e008      	b.n	8086732 <strftime+0x276>
 8086720:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 8086724:	9107      	str	r1, [sp, #28]
 8086726:	f000 ff05 	bl	8087534 <abs>
 808672a:	2364      	movs	r3, #100	; 0x64
 808672c:	fb90 f0f3 	sdiv	r0, r0, r3
 8086730:	9907      	ldr	r1, [sp, #28]
 8086732:	f1ba 0f00 	cmp.w	sl, #0
 8086736:	d008      	beq.n	808674a <strftime+0x28e>
 8086738:	2863      	cmp	r0, #99	; 0x63
 808673a:	dd09      	ble.n	8086750 <strftime+0x294>
 808673c:	4ba8      	ldr	r3, [pc, #672]	; (80869e0 <strftime+0x524>)
 808673e:	4aa9      	ldr	r2, [pc, #676]	; (80869e4 <strftime+0x528>)
 8086740:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8086744:	bf18      	it	ne
 8086746:	4613      	movne	r3, r2
 8086748:	e003      	b.n	8086752 <strftime+0x296>
 808674a:	4ba6      	ldr	r3, [pc, #664]	; (80869e4 <strftime+0x528>)
 808674c:	4aa6      	ldr	r2, [pc, #664]	; (80869e8 <strftime+0x52c>)
 808674e:	e001      	b.n	8086754 <strftime+0x298>
 8086750:	4ba4      	ldr	r3, [pc, #656]	; (80869e4 <strftime+0x528>)
 8086752:	4aa6      	ldr	r2, [pc, #664]	; (80869ec <strftime+0x530>)
 8086754:	f1b8 0f01 	cmp.w	r8, #1
 8086758:	bf98      	it	ls
 808675a:	f04f 0802 	movls.w	r8, #2
 808675e:	ebc1 0108 	rsb	r1, r1, r8
 8086762:	9001      	str	r0, [sp, #4]
 8086764:	9100      	str	r1, [sp, #0]
 8086766:	489d      	ldr	r0, [pc, #628]	; (80869dc <strftime+0x520>)
 8086768:	49a1      	ldr	r1, [pc, #644]	; (80869f0 <strftime+0x534>)
 808676a:	4583      	cmp	fp, r0
 808676c:	bfb8      	it	lt
 808676e:	460b      	movlt	r3, r1
 8086770:	e21d      	b.n	8086bae <strftime+0x6f2>
 8086772:	4aa0      	ldr	r2, [pc, #640]	; (80869f4 <strftime+0x538>)
 8086774:	49a0      	ldr	r1, [pc, #640]	; (80869f8 <strftime+0x53c>)
 8086776:	68eb      	ldr	r3, [r5, #12]
 8086778:	2864      	cmp	r0, #100	; 0x64
 808677a:	bf08      	it	eq
 808677c:	460a      	moveq	r2, r1
 808677e:	1b31      	subs	r1, r6, r4
 8086780:	1938      	adds	r0, r7, r4
 8086782:	f7fd f93d 	bl	8083a00 <sniprintf>
 8086786:	2800      	cmp	r0, #0
 8086788:	f280 8302 	bge.w	8086d90 <strftime+0x8d4>
 808678c:	e340      	b.n	8086e10 <strftime+0x954>
 808678e:	6968      	ldr	r0, [r5, #20]
 8086790:	692b      	ldr	r3, [r5, #16]
 8086792:	2800      	cmp	r0, #0
 8086794:	f103 0b01 	add.w	fp, r3, #1
 8086798:	eb07 0804 	add.w	r8, r7, r4
 808679c:	ebc4 0a06 	rsb	sl, r4, r6
 80867a0:	68eb      	ldr	r3, [r5, #12]
 80867a2:	db05      	blt.n	80867b0 <strftime+0x2f4>
 80867a4:	2264      	movs	r2, #100	; 0x64
 80867a6:	fb90 f1f2 	sdiv	r1, r0, r2
 80867aa:	fb02 0011 	mls	r0, r2, r1, r0
 80867ae:	e00a      	b.n	80867c6 <strftime+0x30a>
 80867b0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80867b4:	9307      	str	r3, [sp, #28]
 80867b6:	f000 febd 	bl	8087534 <abs>
 80867ba:	2264      	movs	r2, #100	; 0x64
 80867bc:	fb90 f1f2 	sdiv	r1, r0, r2
 80867c0:	fb01 0012 	mls	r0, r1, r2, r0
 80867c4:	9b07      	ldr	r3, [sp, #28]
 80867c6:	9001      	str	r0, [sp, #4]
 80867c8:	9300      	str	r3, [sp, #0]
 80867ca:	4651      	mov	r1, sl
 80867cc:	465b      	mov	r3, fp
 80867ce:	4640      	mov	r0, r8
 80867d0:	4a8a      	ldr	r2, [pc, #552]	; (80869fc <strftime+0x540>)
 80867d2:	f7fd f915 	bl	8083a00 <sniprintf>
 80867d6:	e7d6      	b.n	8086786 <strftime+0x2ca>
 80867d8:	2325      	movs	r3, #37	; 0x25
 80867da:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80867de:	f1ba 0f00 	cmp.w	sl, #0
 80867e2:	d007      	beq.n	80867f4 <strftime+0x338>
 80867e4:	f1b8 0f05 	cmp.w	r8, #5
 80867e8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80867ec:	bf98      	it	ls
 80867ee:	f04f 0806 	movls.w	r8, #6
 80867f2:	e004      	b.n	80867fe <strftime+0x342>
 80867f4:	232b      	movs	r3, #43	; 0x2b
 80867f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80867fa:	f04f 080a 	mov.w	r8, #10
 80867fe:	f1b8 0306 	subs.w	r3, r8, #6
 8086802:	d102      	bne.n	808680a <strftime+0x34e>
 8086804:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8086808:	e00a      	b.n	8086820 <strftime+0x364>
 808680a:	4a7d      	ldr	r2, [pc, #500]	; (8086a00 <strftime+0x544>)
 808680c:	211e      	movs	r1, #30
 808680e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8086812:	f7fd f8f5 	bl	8083a00 <sniprintf>
 8086816:	2800      	cmp	r0, #0
 8086818:	ddf4      	ble.n	8086804 <strftime+0x348>
 808681a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808681e:	4418      	add	r0, r3
 8086820:	4978      	ldr	r1, [pc, #480]	; (8086a04 <strftime+0x548>)
 8086822:	f7ff fdc7 	bl	80863b4 <strcpy>
 8086826:	462b      	mov	r3, r5
 8086828:	aa0a      	add	r2, sp, #40	; 0x28
 808682a:	1b31      	subs	r1, r6, r4
 808682c:	1938      	adds	r0, r7, r4
 808682e:	f7ff fe45 	bl	80864bc <strftime>
 8086832:	2800      	cmp	r0, #0
 8086834:	f340 82ec 	ble.w	8086e10 <strftime+0x954>
 8086838:	4404      	add	r4, r0
 808683a:	e2de      	b.n	8086dfa <strftime+0x93e>
 808683c:	4628      	mov	r0, r5
 808683e:	f7ff fddc 	bl	80863fa <iso_year_adjust>
 8086842:	4680      	mov	r8, r0
 8086844:	6968      	ldr	r0, [r5, #20]
 8086846:	2800      	cmp	r0, #0
 8086848:	db05      	blt.n	8086856 <strftime+0x39a>
 808684a:	2264      	movs	r2, #100	; 0x64
 808684c:	fb90 f1f2 	sdiv	r1, r0, r2
 8086850:	fb02 0011 	mls	r0, r2, r1, r0
 8086854:	e008      	b.n	8086868 <strftime+0x3ac>
 8086856:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808685a:	f000 fe6b 	bl	8087534 <abs>
 808685e:	2264      	movs	r2, #100	; 0x64
 8086860:	fb90 f3f2 	sdiv	r3, r0, r2
 8086864:	fb03 0012 	mls	r0, r3, r2, r0
 8086868:	f1b8 0f00 	cmp.w	r8, #0
 808686c:	da06      	bge.n	808687c <strftime+0x3c0>
 808686e:	696a      	ldr	r2, [r5, #20]
 8086870:	4b65      	ldr	r3, [pc, #404]	; (8086a08 <strftime+0x54c>)
 8086872:	429a      	cmp	r2, r3
 8086874:	bfb8      	it	lt
 8086876:	f04f 0801 	movlt.w	r8, #1
 808687a:	e006      	b.n	808688a <strftime+0x3ce>
 808687c:	d005      	beq.n	808688a <strftime+0x3ce>
 808687e:	696a      	ldr	r2, [r5, #20]
 8086880:	4b56      	ldr	r3, [pc, #344]	; (80869dc <strftime+0x520>)
 8086882:	429a      	cmp	r2, r3
 8086884:	bfb8      	it	lt
 8086886:	f04f 38ff 	movlt.w	r8, #4294967295
 808688a:	2364      	movs	r3, #100	; 0x64
 808688c:	4440      	add	r0, r8
 808688e:	fb90 f2f3 	sdiv	r2, r0, r3
 8086892:	fb03 0012 	mls	r0, r3, r2, r0
 8086896:	4418      	add	r0, r3
 8086898:	e1f8      	b.n	8086c8c <strftime+0x7d0>
 808689a:	4b50      	ldr	r3, [pc, #320]	; (80869dc <strftime+0x520>)
 808689c:	6969      	ldr	r1, [r5, #20]
 808689e:	4628      	mov	r0, r5
 80868a0:	4299      	cmp	r1, r3
 80868a2:	bfac      	ite	ge
 80868a4:	2300      	movge	r3, #0
 80868a6:	2301      	movlt	r3, #1
 80868a8:	9108      	str	r1, [sp, #32]
 80868aa:	9307      	str	r3, [sp, #28]
 80868ac:	f7ff fda5 	bl	80863fa <iso_year_adjust>
 80868b0:	9908      	ldr	r1, [sp, #32]
 80868b2:	4683      	mov	fp, r0
 80868b4:	2900      	cmp	r1, #0
 80868b6:	db04      	blt.n	80868c2 <strftime+0x406>
 80868b8:	2364      	movs	r3, #100	; 0x64
 80868ba:	fb91 f3f3 	sdiv	r3, r1, r3
 80868be:	3313      	adds	r3, #19
 80868c0:	e008      	b.n	80868d4 <strftime+0x418>
 80868c2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80868c6:	9108      	str	r1, [sp, #32]
 80868c8:	f000 fe34 	bl	8087534 <abs>
 80868cc:	2364      	movs	r3, #100	; 0x64
 80868ce:	fb90 f3f3 	sdiv	r3, r0, r3
 80868d2:	9908      	ldr	r1, [sp, #32]
 80868d4:	6968      	ldr	r0, [r5, #20]
 80868d6:	2800      	cmp	r0, #0
 80868d8:	db06      	blt.n	80868e8 <strftime+0x42c>
 80868da:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80868de:	fb90 fcfe 	sdiv	ip, r0, lr
 80868e2:	fb0e 001c 	mls	r0, lr, ip, r0
 80868e6:	e00d      	b.n	8086904 <strftime+0x448>
 80868e8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80868ec:	9109      	str	r1, [sp, #36]	; 0x24
 80868ee:	9308      	str	r3, [sp, #32]
 80868f0:	f000 fe20 	bl	8087534 <abs>
 80868f4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80868f8:	fb90 fcfe 	sdiv	ip, r0, lr
 80868fc:	fb0c 001e 	mls	r0, ip, lr, r0
 8086900:	9909      	ldr	r1, [sp, #36]	; 0x24
 8086902:	9b08      	ldr	r3, [sp, #32]
 8086904:	f1bb 0f00 	cmp.w	fp, #0
 8086908:	da08      	bge.n	808691c <strftime+0x460>
 808690a:	6969      	ldr	r1, [r5, #20]
 808690c:	4a3e      	ldr	r2, [pc, #248]	; (8086a08 <strftime+0x54c>)
 808690e:	4291      	cmp	r1, r2
 8086910:	da0a      	bge.n	8086928 <strftime+0x46c>
 8086912:	f04f 0b01 	mov.w	fp, #1
 8086916:	f8cd b01c 	str.w	fp, [sp, #28]
 808691a:	e005      	b.n	8086928 <strftime+0x46c>
 808691c:	d004      	beq.n	8086928 <strftime+0x46c>
 808691e:	4a2f      	ldr	r2, [pc, #188]	; (80869dc <strftime+0x520>)
 8086920:	4291      	cmp	r1, r2
 8086922:	bfb8      	it	lt
 8086924:	f04f 3bff 	movlt.w	fp, #4294967295
 8086928:	eb0b 0200 	add.w	r2, fp, r0
 808692c:	1c50      	adds	r0, r2, #1
 808692e:	d102      	bne.n	8086936 <strftime+0x47a>
 8086930:	3b01      	subs	r3, #1
 8086932:	2263      	movs	r2, #99	; 0x63
 8086934:	e003      	b.n	808693e <strftime+0x482>
 8086936:	2a64      	cmp	r2, #100	; 0x64
 8086938:	bf04      	itt	eq
 808693a:	3301      	addeq	r3, #1
 808693c:	2200      	moveq	r2, #0
 808693e:	2064      	movs	r0, #100	; 0x64
 8086940:	fb00 2303 	mla	r3, r0, r3, r2
 8086944:	9a07      	ldr	r2, [sp, #28]
 8086946:	b142      	cbz	r2, 808695a <strftime+0x49e>
 8086948:	222d      	movs	r2, #45	; 0x2d
 808694a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808694e:	f1b8 0f00 	cmp.w	r8, #0
 8086952:	d013      	beq.n	808697c <strftime+0x4c0>
 8086954:	f108 38ff 	add.w	r8, r8, #4294967295
 8086958:	e010      	b.n	808697c <strftime+0x4c0>
 808695a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808695e:	d110      	bne.n	8086982 <strftime+0x4c6>
 8086960:	f242 720f 	movw	r2, #9999	; 0x270f
 8086964:	4293      	cmp	r3, r2
 8086966:	d90c      	bls.n	8086982 <strftime+0x4c6>
 8086968:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808696c:	f1b8 0f00 	cmp.w	r8, #0
 8086970:	d1f0      	bne.n	8086954 <strftime+0x498>
 8086972:	aa12      	add	r2, sp, #72	; 0x48
 8086974:	2125      	movs	r1, #37	; 0x25
 8086976:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808697a:	e00a      	b.n	8086992 <strftime+0x4d6>
 808697c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8086980:	e000      	b.n	8086984 <strftime+0x4c8>
 8086982:	aa0a      	add	r2, sp, #40	; 0x28
 8086984:	2125      	movs	r1, #37	; 0x25
 8086986:	7011      	strb	r1, [r2, #0]
 8086988:	f1ba 0f00 	cmp.w	sl, #0
 808698c:	d101      	bne.n	8086992 <strftime+0x4d6>
 808698e:	1c50      	adds	r0, r2, #1
 8086990:	e002      	b.n	8086998 <strftime+0x4dc>
 8086992:	2130      	movs	r1, #48	; 0x30
 8086994:	1c90      	adds	r0, r2, #2
 8086996:	7051      	strb	r1, [r2, #1]
 8086998:	491c      	ldr	r1, [pc, #112]	; (8086a0c <strftime+0x550>)
 808699a:	9307      	str	r3, [sp, #28]
 808699c:	f7ff fd0a 	bl	80863b4 <strcpy>
 80869a0:	9b07      	ldr	r3, [sp, #28]
 80869a2:	9300      	str	r3, [sp, #0]
 80869a4:	e1ac      	b.n	8086d00 <strftime+0x844>
 80869a6:	4a14      	ldr	r2, [pc, #80]	; (80869f8 <strftime+0x53c>)
 80869a8:	4912      	ldr	r1, [pc, #72]	; (80869f4 <strftime+0x538>)
 80869aa:	68ab      	ldr	r3, [r5, #8]
 80869ac:	286b      	cmp	r0, #107	; 0x6b
 80869ae:	bf08      	it	eq
 80869b0:	460a      	moveq	r2, r1
 80869b2:	e6e4      	b.n	808677e <strftime+0x2c2>
 80869b4:	68a9      	ldr	r1, [r5, #8]
 80869b6:	230c      	movs	r3, #12
 80869b8:	b131      	cbz	r1, 80869c8 <strftime+0x50c>
 80869ba:	4299      	cmp	r1, r3
 80869bc:	bf16      	itet	ne
 80869be:	fb91 f2f3 	sdivne	r2, r1, r3
 80869c2:	460b      	moveq	r3, r1
 80869c4:	fb03 1312 	mlsne	r3, r3, r2, r1
 80869c8:	4a0a      	ldr	r2, [pc, #40]	; (80869f4 <strftime+0x538>)
 80869ca:	490b      	ldr	r1, [pc, #44]	; (80869f8 <strftime+0x53c>)
 80869cc:	2849      	cmp	r0, #73	; 0x49
 80869ce:	bf08      	it	eq
 80869d0:	460a      	moveq	r2, r1
 80869d2:	e6d4      	b.n	808677e <strftime+0x2c2>
 80869d4:	69eb      	ldr	r3, [r5, #28]
 80869d6:	4a0e      	ldr	r2, [pc, #56]	; (8086a10 <strftime+0x554>)
 80869d8:	3301      	adds	r3, #1
 80869da:	e6d0      	b.n	808677e <strftime+0x2c2>
 80869dc:	fffff894 	.word	0xfffff894
 80869e0:	08087f5b 	.word	0x08087f5b
 80869e4:	080878c6 	.word	0x080878c6
 80869e8:	08087f4c 	.word	0x08087f4c
 80869ec:	08087f53 	.word	0x08087f53
 80869f0:	080878cd 	.word	0x080878cd
 80869f4:	08087f5d 	.word	0x08087f5d
 80869f8:	08087f6b 	.word	0x08087f6b
 80869fc:	08087f61 	.word	0x08087f61
 8086a00:	08087f70 	.word	0x08087f70
 8086a04:	08087f74 	.word	0x08087f74
 8086a08:	fffff895 	.word	0xfffff895
 8086a0c:	08087f7c 	.word	0x08087f7c
 8086a10:	08087f80 	.word	0x08087f80
 8086a14:	692b      	ldr	r3, [r5, #16]
 8086a16:	3301      	adds	r3, #1
 8086a18:	e13c      	b.n	8086c94 <strftime+0x7d8>
 8086a1a:	686b      	ldr	r3, [r5, #4]
 8086a1c:	e13a      	b.n	8086c94 <strftime+0x7d8>
 8086a1e:	9b02      	ldr	r3, [sp, #8]
 8086a20:	429c      	cmp	r4, r3
 8086a22:	f080 81f5 	bcs.w	8086e10 <strftime+0x954>
 8086a26:	230a      	movs	r3, #10
 8086a28:	e1e5      	b.n	8086df6 <strftime+0x93a>
 8086a2a:	68ab      	ldr	r3, [r5, #8]
 8086a2c:	9a03      	ldr	r2, [sp, #12]
 8086a2e:	2b0b      	cmp	r3, #11
 8086a30:	bfcc      	ite	gt
 8086a32:	23a4      	movgt	r3, #164	; 0xa4
 8086a34:	23a0      	movle	r3, #160	; 0xa0
 8086a36:	4413      	add	r3, r2
 8086a38:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8086a3c:	4640      	mov	r0, r8
 8086a3e:	f000 f9f1 	bl	8086e24 <strlen>
 8086a42:	4642      	mov	r2, r8
 8086a44:	4bb1      	ldr	r3, [pc, #708]	; (8086d0c <strftime+0x850>)
 8086a46:	1939      	adds	r1, r7, r4
 8086a48:	f8d3 e000 	ldr.w	lr, [r3]
 8086a4c:	4420      	add	r0, r4
 8086a4e:	4284      	cmp	r4, r0
 8086a50:	f000 81d3 	beq.w	8086dfa <strftime+0x93e>
 8086a54:	9b02      	ldr	r3, [sp, #8]
 8086a56:	429c      	cmp	r4, r3
 8086a58:	f080 81da 	bcs.w	8086e10 <strftime+0x954>
 8086a5c:	f899 3000 	ldrb.w	r3, [r9]
 8086a60:	3401      	adds	r4, #1
 8086a62:	2b50      	cmp	r3, #80	; 0x50
 8086a64:	7813      	ldrb	r3, [r2, #0]
 8086a66:	d10a      	bne.n	8086a7e <strftime+0x5c2>
 8086a68:	eb0e 0c03 	add.w	ip, lr, r3
 8086a6c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8086a70:	f00c 0c03 	and.w	ip, ip, #3
 8086a74:	f1bc 0f01 	cmp.w	ip, #1
 8086a78:	bf08      	it	eq
 8086a7a:	3320      	addeq	r3, #32
 8086a7c:	b2db      	uxtb	r3, r3
 8086a7e:	f801 3b01 	strb.w	r3, [r1], #1
 8086a82:	3201      	adds	r2, #1
 8086a84:	e7e3      	b.n	8086a4e <strftime+0x592>
 8086a86:	686b      	ldr	r3, [r5, #4]
 8086a88:	4aa1      	ldr	r2, [pc, #644]	; (8086d10 <strftime+0x854>)
 8086a8a:	9300      	str	r3, [sp, #0]
 8086a8c:	68ab      	ldr	r3, [r5, #8]
 8086a8e:	e139      	b.n	8086d04 <strftime+0x848>
 8086a90:	6a2b      	ldr	r3, [r5, #32]
 8086a92:	2b00      	cmp	r3, #0
 8086a94:	db17      	blt.n	8086ac6 <strftime+0x60a>
 8086a96:	f000 fbc5 	bl	8087224 <__tz_lock>
 8086a9a:	9b06      	ldr	r3, [sp, #24]
 8086a9c:	b91b      	cbnz	r3, 8086aa6 <strftime+0x5ea>
 8086a9e:	f000 fbc3 	bl	8087228 <_tzset_unlocked>
 8086aa2:	2301      	movs	r3, #1
 8086aa4:	9306      	str	r3, [sp, #24]
 8086aa6:	f000 fd8d 	bl	80875c4 <__gettzinfo>
 8086aaa:	6a2b      	ldr	r3, [r5, #32]
 8086aac:	221c      	movs	r2, #28
 8086aae:	2b00      	cmp	r3, #0
 8086ab0:	bfd4      	ite	le
 8086ab2:	2300      	movle	r3, #0
 8086ab4:	2301      	movgt	r3, #1
 8086ab6:	fb02 0003 	mla	r0, r2, r3, r0
 8086aba:	6a03      	ldr	r3, [r0, #32]
 8086abc:	f1c3 0800 	rsb	r8, r3, #0
 8086ac0:	f000 fbb1 	bl	8087226 <__tz_unlock>
 8086ac4:	e001      	b.n	8086aca <strftime+0x60e>
 8086ac6:	f04f 0800 	mov.w	r8, #0
 8086aca:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8086ace:	ebc4 0c06 	rsb	ip, r4, r6
 8086ad2:	4670      	mov	r0, lr
 8086ad4:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 8086ad8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8086adc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8086ae0:	2a00      	cmp	r2, #0
 8086ae2:	f173 0b00 	sbcs.w	fp, r3, #0
 8086ae6:	eb07 0a04 	add.w	sl, r7, r4
 8086aea:	da03      	bge.n	8086af4 <strftime+0x638>
 8086aec:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 8086af0:	f141 33ff 	adc.w	r3, r1, #4294967295
 8086af4:	0891      	lsrs	r1, r2, #2
 8086af6:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 8086afa:	109b      	asrs	r3, r3, #2
 8086afc:	9104      	str	r1, [sp, #16]
 8086afe:	9305      	str	r3, [sp, #20]
 8086b00:	f10e 31ff 	add.w	r1, lr, #4294967295
 8086b04:	2364      	movs	r3, #100	; 0x64
 8086b06:	fb91 f1f3 	sdiv	r1, r1, r3
 8086b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8086b0e:	1a52      	subs	r2, r2, r1
 8086b10:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8086b14:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 8086b18:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8086b1c:	fb90 f1f1 	sdiv	r1, r0, r1
 8086b20:	1852      	adds	r2, r2, r1
 8086b22:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8086b26:	f240 116d 	movw	r1, #365	; 0x16d
 8086b2a:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 8086b2e:	fb01 fe0e 	mul.w	lr, r1, lr
 8086b32:	69e9      	ldr	r1, [r5, #28]
 8086b34:	eb12 020e 	adds.w	r2, r2, lr
 8086b38:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 8086b3c:	1852      	adds	r2, r2, r1
 8086b3e:	f04f 0e18 	mov.w	lr, #24
 8086b42:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8086b46:	fba2 010e 	umull	r0, r1, r2, lr
 8086b4a:	fb0e 1103 	mla	r1, lr, r3, r1
 8086b4e:	68ab      	ldr	r3, [r5, #8]
 8086b50:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 8086b54:	18c0      	adds	r0, r0, r3
 8086b56:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8086b5a:	fba0 230e 	umull	r2, r3, r0, lr
 8086b5e:	fb0e 3301 	mla	r3, lr, r1, r3
 8086b62:	6869      	ldr	r1, [r5, #4]
 8086b64:	1852      	adds	r2, r2, r1
 8086b66:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8086b6a:	fba2 010e 	umull	r0, r1, r2, lr
 8086b6e:	fb0e 1103 	mla	r1, lr, r3, r1
 8086b72:	682b      	ldr	r3, [r5, #0]
 8086b74:	4a67      	ldr	r2, [pc, #412]	; (8086d14 <strftime+0x858>)
 8086b76:	18c0      	adds	r0, r0, r3
 8086b78:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8086b7c:	ebb0 0008 	subs.w	r0, r0, r8
 8086b80:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 8086b84:	e9cd 0100 	strd	r0, r1, [sp]
 8086b88:	4661      	mov	r1, ip
 8086b8a:	4650      	mov	r0, sl
 8086b8c:	f7fc ff38 	bl	8083a00 <sniprintf>
 8086b90:	e5f9      	b.n	8086786 <strftime+0x2ca>
 8086b92:	682b      	ldr	r3, [r5, #0]
 8086b94:	e07e      	b.n	8086c94 <strftime+0x7d8>
 8086b96:	9b02      	ldr	r3, [sp, #8]
 8086b98:	429c      	cmp	r4, r3
 8086b9a:	f080 8139 	bcs.w	8086e10 <strftime+0x954>
 8086b9e:	2309      	movs	r3, #9
 8086ba0:	e129      	b.n	8086df6 <strftime+0x93a>
 8086ba2:	682b      	ldr	r3, [r5, #0]
 8086ba4:	4a5c      	ldr	r2, [pc, #368]	; (8086d18 <strftime+0x85c>)
 8086ba6:	9301      	str	r3, [sp, #4]
 8086ba8:	686b      	ldr	r3, [r5, #4]
 8086baa:	9300      	str	r3, [sp, #0]
 8086bac:	68ab      	ldr	r3, [r5, #8]
 8086bae:	1b31      	subs	r1, r6, r4
 8086bb0:	1938      	adds	r0, r7, r4
 8086bb2:	e60e      	b.n	80867d2 <strftime+0x316>
 8086bb4:	9b02      	ldr	r3, [sp, #8]
 8086bb6:	429c      	cmp	r4, r3
 8086bb8:	f080 812a 	bcs.w	8086e10 <strftime+0x954>
 8086bbc:	69ab      	ldr	r3, [r5, #24]
 8086bbe:	1c62      	adds	r2, r4, #1
 8086bc0:	b90b      	cbnz	r3, 8086bc6 <strftime+0x70a>
 8086bc2:	2337      	movs	r3, #55	; 0x37
 8086bc4:	e000      	b.n	8086bc8 <strftime+0x70c>
 8086bc6:	3330      	adds	r3, #48	; 0x30
 8086bc8:	553b      	strb	r3, [r7, r4]
 8086bca:	4614      	mov	r4, r2
 8086bcc:	e115      	b.n	8086dfa <strftime+0x93e>
 8086bce:	69eb      	ldr	r3, [r5, #28]
 8086bd0:	69aa      	ldr	r2, [r5, #24]
 8086bd2:	3307      	adds	r3, #7
 8086bd4:	1a9b      	subs	r3, r3, r2
 8086bd6:	2207      	movs	r2, #7
 8086bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8086bdc:	e05a      	b.n	8086c94 <strftime+0x7d8>
 8086bde:	4628      	mov	r0, r5
 8086be0:	f7ff fc0b 	bl	80863fa <iso_year_adjust>
 8086be4:	69aa      	ldr	r2, [r5, #24]
 8086be6:	b10a      	cbz	r2, 8086bec <strftime+0x730>
 8086be8:	1e53      	subs	r3, r2, #1
 8086bea:	e000      	b.n	8086bee <strftime+0x732>
 8086bec:	2306      	movs	r3, #6
 8086bee:	2800      	cmp	r0, #0
 8086bf0:	dc2f      	bgt.n	8086c52 <strftime+0x796>
 8086bf2:	69ea      	ldr	r2, [r5, #28]
 8086bf4:	d101      	bne.n	8086bfa <strftime+0x73e>
 8086bf6:	320a      	adds	r2, #10
 8086bf8:	e03b      	b.n	8086c72 <strftime+0x7b6>
 8086bfa:	f240 716b 	movw	r1, #1899	; 0x76b
 8086bfe:	1a9a      	subs	r2, r3, r2
 8086c00:	696b      	ldr	r3, [r5, #20]
 8086c02:	2b00      	cmp	r3, #0
 8086c04:	bfb4      	ite	lt
 8086c06:	4608      	movlt	r0, r1
 8086c08:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 8086c0c:	4418      	add	r0, r3
 8086c0e:	0781      	lsls	r1, r0, #30
 8086c10:	d107      	bne.n	8086c22 <strftime+0x766>
 8086c12:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8086c16:	4601      	mov	r1, r0
 8086c18:	fb90 f0fe 	sdiv	r0, r0, lr
 8086c1c:	fb0e 1110 	mls	r1, lr, r0, r1
 8086c20:	b981      	cbnz	r1, 8086c44 <strftime+0x788>
 8086c22:	f240 716b 	movw	r1, #1899	; 0x76b
 8086c26:	2b00      	cmp	r3, #0
 8086c28:	bfa8      	it	ge
 8086c2a:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 8086c2e:	4419      	add	r1, r3
 8086c30:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8086c34:	fb91 f0f3 	sdiv	r0, r1, r3
 8086c38:	fb03 1110 	mls	r1, r3, r0, r1
 8086c3c:	fab1 f181 	clz	r1, r1
 8086c40:	0949      	lsrs	r1, r1, #5
 8086c42:	e000      	b.n	8086c46 <strftime+0x78a>
 8086c44:	2101      	movs	r1, #1
 8086c46:	1a52      	subs	r2, r2, r1
 8086c48:	2a05      	cmp	r2, #5
 8086c4a:	bfb4      	ite	lt
 8086c4c:	2335      	movlt	r3, #53	; 0x35
 8086c4e:	2334      	movge	r3, #52	; 0x34
 8086c50:	e020      	b.n	8086c94 <strftime+0x7d8>
 8086c52:	2301      	movs	r3, #1
 8086c54:	e01e      	b.n	8086c94 <strftime+0x7d8>
 8086c56:	9b02      	ldr	r3, [sp, #8]
 8086c58:	429c      	cmp	r4, r3
 8086c5a:	f080 80d9 	bcs.w	8086e10 <strftime+0x954>
 8086c5e:	69ab      	ldr	r3, [r5, #24]
 8086c60:	3330      	adds	r3, #48	; 0x30
 8086c62:	e0c8      	b.n	8086df6 <strftime+0x93a>
 8086c64:	69aa      	ldr	r2, [r5, #24]
 8086c66:	b10a      	cbz	r2, 8086c6c <strftime+0x7b0>
 8086c68:	1e53      	subs	r3, r2, #1
 8086c6a:	e000      	b.n	8086c6e <strftime+0x7b2>
 8086c6c:	2306      	movs	r3, #6
 8086c6e:	69ea      	ldr	r2, [r5, #28]
 8086c70:	3207      	adds	r2, #7
 8086c72:	1ad2      	subs	r2, r2, r3
 8086c74:	2307      	movs	r3, #7
 8086c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8086c7a:	e00b      	b.n	8086c94 <strftime+0x7d8>
 8086c7c:	6968      	ldr	r0, [r5, #20]
 8086c7e:	2800      	cmp	r0, #0
 8086c80:	da03      	bge.n	8086c8a <strftime+0x7ce>
 8086c82:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8086c86:	f000 fc55 	bl	8087534 <abs>
 8086c8a:	2364      	movs	r3, #100	; 0x64
 8086c8c:	fb90 f2f3 	sdiv	r2, r0, r3
 8086c90:	fb02 0313 	mls	r3, r2, r3, r0
 8086c94:	4a21      	ldr	r2, [pc, #132]	; (8086d1c <strftime+0x860>)
 8086c96:	e572      	b.n	808677e <strftime+0x2c2>
 8086c98:	696b      	ldr	r3, [r5, #20]
 8086c9a:	4a21      	ldr	r2, [pc, #132]	; (8086d20 <strftime+0x864>)
 8086c9c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 8086ca0:	4293      	cmp	r3, r2
 8086ca2:	da05      	bge.n	8086cb0 <strftime+0x7f4>
 8086ca4:	232d      	movs	r3, #45	; 0x2d
 8086ca6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8086caa:	f1cb 0b00 	rsb	fp, fp, #0
 8086cae:	e008      	b.n	8086cc2 <strftime+0x806>
 8086cb0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8086cb4:	d10d      	bne.n	8086cd2 <strftime+0x816>
 8086cb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8086cba:	459b      	cmp	fp, r3
 8086cbc:	d911      	bls.n	8086ce2 <strftime+0x826>
 8086cbe:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8086cc2:	f1b8 0f00 	cmp.w	r8, #0
 8086cc6:	d001      	beq.n	8086ccc <strftime+0x810>
 8086cc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8086ccc:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8086cd0:	e000      	b.n	8086cd4 <strftime+0x818>
 8086cd2:	ab0a      	add	r3, sp, #40	; 0x28
 8086cd4:	2225      	movs	r2, #37	; 0x25
 8086cd6:	701a      	strb	r2, [r3, #0]
 8086cd8:	f1ba 0f00 	cmp.w	sl, #0
 8086cdc:	d108      	bne.n	8086cf0 <strftime+0x834>
 8086cde:	1c58      	adds	r0, r3, #1
 8086ce0:	e009      	b.n	8086cf6 <strftime+0x83a>
 8086ce2:	f1b8 0f00 	cmp.w	r8, #0
 8086ce6:	d1f4      	bne.n	8086cd2 <strftime+0x816>
 8086ce8:	2325      	movs	r3, #37	; 0x25
 8086cea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8086cee:	ab0a      	add	r3, sp, #40	; 0x28
 8086cf0:	2230      	movs	r2, #48	; 0x30
 8086cf2:	1c98      	adds	r0, r3, #2
 8086cf4:	705a      	strb	r2, [r3, #1]
 8086cf6:	490b      	ldr	r1, [pc, #44]	; (8086d24 <strftime+0x868>)
 8086cf8:	f7ff fb5c 	bl	80863b4 <strcpy>
 8086cfc:	f8cd b000 	str.w	fp, [sp]
 8086d00:	4643      	mov	r3, r8
 8086d02:	aa0a      	add	r2, sp, #40	; 0x28
 8086d04:	1b31      	subs	r1, r6, r4
 8086d06:	1938      	adds	r0, r7, r4
 8086d08:	e03f      	b.n	8086d8a <strftime+0x8ce>
 8086d0a:	bf00      	nop
 8086d0c:	20000210 	.word	0x20000210
 8086d10:	08087f8f 	.word	0x08087f8f
 8086d14:	08087f85 	.word	0x08087f85
 8086d18:	08087f8a 	.word	0x08087f8a
 8086d1c:	08087f6b 	.word	0x08087f6b
 8086d20:	fffff894 	.word	0xfffff894
 8086d24:	08087f7c 	.word	0x08087f7c
 8086d28:	6a2b      	ldr	r3, [r5, #32]
 8086d2a:	2b00      	cmp	r3, #0
 8086d2c:	db65      	blt.n	8086dfa <strftime+0x93e>
 8086d2e:	f000 fa79 	bl	8087224 <__tz_lock>
 8086d32:	9b06      	ldr	r3, [sp, #24]
 8086d34:	b91b      	cbnz	r3, 8086d3e <strftime+0x882>
 8086d36:	f000 fa77 	bl	8087228 <_tzset_unlocked>
 8086d3a:	2301      	movs	r3, #1
 8086d3c:	9306      	str	r3, [sp, #24]
 8086d3e:	f000 fc41 	bl	80875c4 <__gettzinfo>
 8086d42:	6a2b      	ldr	r3, [r5, #32]
 8086d44:	221c      	movs	r2, #28
 8086d46:	2b00      	cmp	r3, #0
 8086d48:	bfd4      	ite	le
 8086d4a:	2300      	movle	r3, #0
 8086d4c:	2301      	movgt	r3, #1
 8086d4e:	fb02 0003 	mla	r0, r2, r3, r0
 8086d52:	6a03      	ldr	r3, [r0, #32]
 8086d54:	eb07 0a04 	add.w	sl, r7, r4
 8086d58:	f1c3 0800 	rsb	r8, r3, #0
 8086d5c:	f000 fa63 	bl	8087226 <__tz_unlock>
 8086d60:	233c      	movs	r3, #60	; 0x3c
 8086d62:	fb98 f0f3 	sdiv	r0, r8, r3
 8086d66:	9307      	str	r3, [sp, #28]
 8086d68:	f000 fcc6 	bl	80876f8 <labs>
 8086d6c:	9b07      	ldr	r3, [sp, #28]
 8086d6e:	ebc4 0b06 	rsb	fp, r4, r6
 8086d72:	fb90 f2f3 	sdiv	r2, r0, r3
 8086d76:	fb02 0013 	mls	r0, r2, r3, r0
 8086d7a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8086d7e:	9000      	str	r0, [sp, #0]
 8086d80:	fb98 f3f3 	sdiv	r3, r8, r3
 8086d84:	4659      	mov	r1, fp
 8086d86:	4650      	mov	r0, sl
 8086d88:	4a24      	ldr	r2, [pc, #144]	; (8086e1c <strftime+0x960>)
 8086d8a:	f7fc fe39 	bl	8083a00 <sniprintf>
 8086d8e:	e4fa      	b.n	8086786 <strftime+0x2ca>
 8086d90:	4404      	add	r4, r0
 8086d92:	42a6      	cmp	r6, r4
 8086d94:	d831      	bhi.n	8086dfa <strftime+0x93e>
 8086d96:	e03b      	b.n	8086e10 <strftime+0x954>
 8086d98:	6a2b      	ldr	r3, [r5, #32]
 8086d9a:	2b00      	cmp	r3, #0
 8086d9c:	db2d      	blt.n	8086dfa <strftime+0x93e>
 8086d9e:	f000 fa41 	bl	8087224 <__tz_lock>
 8086da2:	9b06      	ldr	r3, [sp, #24]
 8086da4:	b91b      	cbnz	r3, 8086dae <strftime+0x8f2>
 8086da6:	f000 fa3f 	bl	8087228 <_tzset_unlocked>
 8086daa:	2301      	movs	r3, #1
 8086dac:	9306      	str	r3, [sp, #24]
 8086dae:	6a2b      	ldr	r3, [r5, #32]
 8086db0:	4a1b      	ldr	r2, [pc, #108]	; (8086e20 <strftime+0x964>)
 8086db2:	2b00      	cmp	r3, #0
 8086db4:	bfd4      	ite	le
 8086db6:	2300      	movle	r3, #0
 8086db8:	2301      	movgt	r3, #1
 8086dba:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8086dbe:	4640      	mov	r0, r8
 8086dc0:	f000 f830 	bl	8086e24 <strlen>
 8086dc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8086dc8:	193b      	adds	r3, r7, r4
 8086dca:	4420      	add	r0, r4
 8086dcc:	4284      	cmp	r4, r0
 8086dce:	d00b      	beq.n	8086de8 <strftime+0x92c>
 8086dd0:	9a02      	ldr	r2, [sp, #8]
 8086dd2:	4294      	cmp	r4, r2
 8086dd4:	d205      	bcs.n	8086de2 <strftime+0x926>
 8086dd6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8086dda:	3401      	adds	r4, #1
 8086ddc:	f803 2b01 	strb.w	r2, [r3], #1
 8086de0:	e7f4      	b.n	8086dcc <strftime+0x910>
 8086de2:	f000 fa20 	bl	8087226 <__tz_unlock>
 8086de6:	e013      	b.n	8086e10 <strftime+0x954>
 8086de8:	f000 fa1d 	bl	8087226 <__tz_unlock>
 8086dec:	e005      	b.n	8086dfa <strftime+0x93e>
 8086dee:	9b02      	ldr	r3, [sp, #8]
 8086df0:	429c      	cmp	r4, r3
 8086df2:	d20d      	bcs.n	8086e10 <strftime+0x954>
 8086df4:	2325      	movs	r3, #37	; 0x25
 8086df6:	553b      	strb	r3, [r7, r4]
 8086df8:	3401      	adds	r4, #1
 8086dfa:	f899 3000 	ldrb.w	r3, [r9]
 8086dfe:	b11b      	cbz	r3, 8086e08 <strftime+0x94c>
 8086e00:	f109 0901 	add.w	r9, r9, #1
 8086e04:	f7ff bb69 	b.w	80864da <strftime+0x1e>
 8086e08:	b126      	cbz	r6, 8086e14 <strftime+0x958>
 8086e0a:	2300      	movs	r3, #0
 8086e0c:	553b      	strb	r3, [r7, r4]
 8086e0e:	e001      	b.n	8086e14 <strftime+0x958>
 8086e10:	2000      	movs	r0, #0
 8086e12:	e000      	b.n	8086e16 <strftime+0x95a>
 8086e14:	4620      	mov	r0, r4
 8086e16:	b013      	add	sp, #76	; 0x4c
 8086e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086e1c:	08087f99 	.word	0x08087f99
 8086e20:	20000278 	.word	0x20000278

08086e24 <strlen>:
 8086e24:	4603      	mov	r3, r0
 8086e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8086e2a:	2a00      	cmp	r2, #0
 8086e2c:	d1fb      	bne.n	8086e26 <strlen+0x2>
 8086e2e:	1a18      	subs	r0, r3, r0
 8086e30:	3801      	subs	r0, #1
 8086e32:	4770      	bx	lr

08086e34 <strncmp>:
 8086e34:	b530      	push	{r4, r5, lr}
 8086e36:	b182      	cbz	r2, 8086e5a <strncmp+0x26>
 8086e38:	1e45      	subs	r5, r0, #1
 8086e3a:	3901      	subs	r1, #1
 8086e3c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8086e40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8086e44:	42a3      	cmp	r3, r4
 8086e46:	d106      	bne.n	8086e56 <strncmp+0x22>
 8086e48:	43ec      	mvns	r4, r5
 8086e4a:	4414      	add	r4, r2
 8086e4c:	42e0      	cmn	r0, r4
 8086e4e:	d001      	beq.n	8086e54 <strncmp+0x20>
 8086e50:	2b00      	cmp	r3, #0
 8086e52:	d1f3      	bne.n	8086e3c <strncmp+0x8>
 8086e54:	461c      	mov	r4, r3
 8086e56:	1b18      	subs	r0, r3, r4
 8086e58:	bd30      	pop	{r4, r5, pc}
 8086e5a:	4610      	mov	r0, r2
 8086e5c:	bd30      	pop	{r4, r5, pc}

08086e5e <strncpy>:
 8086e5e:	4603      	mov	r3, r0
 8086e60:	b510      	push	{r4, lr}
 8086e62:	b142      	cbz	r2, 8086e76 <strncpy+0x18>
 8086e64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8086e68:	3a01      	subs	r2, #1
 8086e6a:	f803 4b01 	strb.w	r4, [r3], #1
 8086e6e:	2c00      	cmp	r4, #0
 8086e70:	d1f7      	bne.n	8086e62 <strncpy+0x4>
 8086e72:	441a      	add	r2, r3
 8086e74:	e000      	b.n	8086e78 <strncpy+0x1a>
 8086e76:	bd10      	pop	{r4, pc}
 8086e78:	4293      	cmp	r3, r2
 8086e7a:	d002      	beq.n	8086e82 <strncpy+0x24>
 8086e7c:	f803 4b01 	strb.w	r4, [r3], #1
 8086e80:	e7fa      	b.n	8086e78 <strncpy+0x1a>
 8086e82:	bd10      	pop	{r4, pc}

08086e84 <_strtol_r>:
 8086e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086e88:	460f      	mov	r7, r1
 8086e8a:	4680      	mov	r8, r0
 8086e8c:	483f      	ldr	r0, [pc, #252]	; (8086f8c <_strtol_r+0x108>)
 8086e8e:	f8d0 9000 	ldr.w	r9, [r0]
 8086e92:	463d      	mov	r5, r7
 8086e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8086e98:	eb09 0004 	add.w	r0, r9, r4
 8086e9c:	7840      	ldrb	r0, [r0, #1]
 8086e9e:	f000 0008 	and.w	r0, r0, #8
 8086ea2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8086ea6:	b108      	cbz	r0, 8086eac <_strtol_r+0x28>
 8086ea8:	462f      	mov	r7, r5
 8086eaa:	e7f2      	b.n	8086e92 <_strtol_r+0xe>
 8086eac:	2c2d      	cmp	r4, #45	; 0x2d
 8086eae:	d103      	bne.n	8086eb8 <_strtol_r+0x34>
 8086eb0:	1cbd      	adds	r5, r7, #2
 8086eb2:	787c      	ldrb	r4, [r7, #1]
 8086eb4:	2601      	movs	r6, #1
 8086eb6:	e003      	b.n	8086ec0 <_strtol_r+0x3c>
 8086eb8:	2c2b      	cmp	r4, #43	; 0x2b
 8086eba:	bf04      	itt	eq
 8086ebc:	787c      	ldrbeq	r4, [r7, #1]
 8086ebe:	1cbd      	addeq	r5, r7, #2
 8086ec0:	b113      	cbz	r3, 8086ec8 <_strtol_r+0x44>
 8086ec2:	2b10      	cmp	r3, #16
 8086ec4:	d10a      	bne.n	8086edc <_strtol_r+0x58>
 8086ec6:	e05b      	b.n	8086f80 <_strtol_r+0xfc>
 8086ec8:	2c30      	cmp	r4, #48	; 0x30
 8086eca:	d157      	bne.n	8086f7c <_strtol_r+0xf8>
 8086ecc:	7828      	ldrb	r0, [r5, #0]
 8086ece:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8086ed2:	2858      	cmp	r0, #88	; 0x58
 8086ed4:	d14d      	bne.n	8086f72 <_strtol_r+0xee>
 8086ed6:	786c      	ldrb	r4, [r5, #1]
 8086ed8:	2310      	movs	r3, #16
 8086eda:	3502      	adds	r5, #2
 8086edc:	2e00      	cmp	r6, #0
 8086ede:	bf14      	ite	ne
 8086ee0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8086ee4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8086ee8:	fbbc faf3 	udiv	sl, ip, r3
 8086eec:	2700      	movs	r7, #0
 8086eee:	4638      	mov	r0, r7
 8086ef0:	fb03 cc1a 	mls	ip, r3, sl, ip
 8086ef4:	eb09 0e04 	add.w	lr, r9, r4
 8086ef8:	f89e e001 	ldrb.w	lr, [lr, #1]
 8086efc:	f01e 0f04 	tst.w	lr, #4
 8086f00:	d001      	beq.n	8086f06 <_strtol_r+0x82>
 8086f02:	3c30      	subs	r4, #48	; 0x30
 8086f04:	e00b      	b.n	8086f1e <_strtol_r+0x9a>
 8086f06:	f01e 0e03 	ands.w	lr, lr, #3
 8086f0a:	d01b      	beq.n	8086f44 <_strtol_r+0xc0>
 8086f0c:	f1be 0f01 	cmp.w	lr, #1
 8086f10:	bf0c      	ite	eq
 8086f12:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8086f16:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8086f1a:	ebce 0404 	rsb	r4, lr, r4
 8086f1e:	42a3      	cmp	r3, r4
 8086f20:	dd10      	ble.n	8086f44 <_strtol_r+0xc0>
 8086f22:	f1b7 3fff 	cmp.w	r7, #4294967295
 8086f26:	d00a      	beq.n	8086f3e <_strtol_r+0xba>
 8086f28:	4550      	cmp	r0, sl
 8086f2a:	d806      	bhi.n	8086f3a <_strtol_r+0xb6>
 8086f2c:	d101      	bne.n	8086f32 <_strtol_r+0xae>
 8086f2e:	4564      	cmp	r4, ip
 8086f30:	dc03      	bgt.n	8086f3a <_strtol_r+0xb6>
 8086f32:	fb03 4000 	mla	r0, r3, r0, r4
 8086f36:	2701      	movs	r7, #1
 8086f38:	e001      	b.n	8086f3e <_strtol_r+0xba>
 8086f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8086f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8086f42:	e7d7      	b.n	8086ef4 <_strtol_r+0x70>
 8086f44:	1c7b      	adds	r3, r7, #1
 8086f46:	d10c      	bne.n	8086f62 <_strtol_r+0xde>
 8086f48:	2e00      	cmp	r6, #0
 8086f4a:	f04f 0322 	mov.w	r3, #34	; 0x22
 8086f4e:	bf14      	ite	ne
 8086f50:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8086f54:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8086f58:	f8c8 3000 	str.w	r3, [r8]
 8086f5c:	b92a      	cbnz	r2, 8086f6a <_strtol_r+0xe6>
 8086f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086f62:	b106      	cbz	r6, 8086f66 <_strtol_r+0xe2>
 8086f64:	4240      	negs	r0, r0
 8086f66:	b172      	cbz	r2, 8086f86 <_strtol_r+0x102>
 8086f68:	b107      	cbz	r7, 8086f6c <_strtol_r+0xe8>
 8086f6a:	1e69      	subs	r1, r5, #1
 8086f6c:	6011      	str	r1, [r2, #0]
 8086f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086f72:	2430      	movs	r4, #48	; 0x30
 8086f74:	2b00      	cmp	r3, #0
 8086f76:	d1b1      	bne.n	8086edc <_strtol_r+0x58>
 8086f78:	2308      	movs	r3, #8
 8086f7a:	e7af      	b.n	8086edc <_strtol_r+0x58>
 8086f7c:	230a      	movs	r3, #10
 8086f7e:	e7ad      	b.n	8086edc <_strtol_r+0x58>
 8086f80:	2c30      	cmp	r4, #48	; 0x30
 8086f82:	d0a3      	beq.n	8086ecc <_strtol_r+0x48>
 8086f84:	e7aa      	b.n	8086edc <_strtol_r+0x58>
 8086f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086f8a:	bf00      	nop
 8086f8c:	20000210 	.word	0x20000210

08086f90 <strtol>:
 8086f90:	4613      	mov	r3, r2
 8086f92:	460a      	mov	r2, r1
 8086f94:	4601      	mov	r1, r0
 8086f96:	4802      	ldr	r0, [pc, #8]	; (8086fa0 <strtol+0x10>)
 8086f98:	6800      	ldr	r0, [r0, #0]
 8086f9a:	f7ff bf73 	b.w	8086e84 <_strtol_r>
 8086f9e:	bf00      	nop
 8086fa0:	20000274 	.word	0x20000274

08086fa4 <_strtoul_r>:
 8086fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086fa8:	460e      	mov	r6, r1
 8086faa:	4680      	mov	r8, r0
 8086fac:	483b      	ldr	r0, [pc, #236]	; (808709c <_strtoul_r+0xf8>)
 8086fae:	f8d0 9000 	ldr.w	r9, [r0]
 8086fb2:	4635      	mov	r5, r6
 8086fb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8086fb8:	eb09 0004 	add.w	r0, r9, r4
 8086fbc:	7840      	ldrb	r0, [r0, #1]
 8086fbe:	f000 0008 	and.w	r0, r0, #8
 8086fc2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8086fc6:	b108      	cbz	r0, 8086fcc <_strtoul_r+0x28>
 8086fc8:	462e      	mov	r6, r5
 8086fca:	e7f2      	b.n	8086fb2 <_strtoul_r+0xe>
 8086fcc:	2c2d      	cmp	r4, #45	; 0x2d
 8086fce:	d103      	bne.n	8086fd8 <_strtoul_r+0x34>
 8086fd0:	1cb5      	adds	r5, r6, #2
 8086fd2:	7874      	ldrb	r4, [r6, #1]
 8086fd4:	2701      	movs	r7, #1
 8086fd6:	e003      	b.n	8086fe0 <_strtoul_r+0x3c>
 8086fd8:	2c2b      	cmp	r4, #43	; 0x2b
 8086fda:	bf04      	itt	eq
 8086fdc:	7874      	ldrbeq	r4, [r6, #1]
 8086fde:	1cb5      	addeq	r5, r6, #2
 8086fe0:	b113      	cbz	r3, 8086fe8 <_strtoul_r+0x44>
 8086fe2:	2b10      	cmp	r3, #16
 8086fe4:	d10a      	bne.n	8086ffc <_strtoul_r+0x58>
 8086fe6:	e053      	b.n	8087090 <_strtoul_r+0xec>
 8086fe8:	2c30      	cmp	r4, #48	; 0x30
 8086fea:	d14f      	bne.n	808708c <_strtoul_r+0xe8>
 8086fec:	7828      	ldrb	r0, [r5, #0]
 8086fee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8086ff2:	2858      	cmp	r0, #88	; 0x58
 8086ff4:	d145      	bne.n	8087082 <_strtoul_r+0xde>
 8086ff6:	786c      	ldrb	r4, [r5, #1]
 8086ff8:	2310      	movs	r3, #16
 8086ffa:	3502      	adds	r5, #2
 8086ffc:	f04f 3cff 	mov.w	ip, #4294967295
 8087000:	fbbc fcf3 	udiv	ip, ip, r3
 8087004:	fb03 fa0c 	mul.w	sl, r3, ip
 8087008:	2600      	movs	r6, #0
 808700a:	ea6f 0a0a 	mvn.w	sl, sl
 808700e:	4630      	mov	r0, r6
 8087010:	eb09 0e04 	add.w	lr, r9, r4
 8087014:	f89e e001 	ldrb.w	lr, [lr, #1]
 8087018:	f01e 0f04 	tst.w	lr, #4
 808701c:	d001      	beq.n	8087022 <_strtoul_r+0x7e>
 808701e:	3c30      	subs	r4, #48	; 0x30
 8087020:	e00b      	b.n	808703a <_strtoul_r+0x96>
 8087022:	f01e 0e03 	ands.w	lr, lr, #3
 8087026:	d01a      	beq.n	808705e <_strtoul_r+0xba>
 8087028:	f1be 0f01 	cmp.w	lr, #1
 808702c:	bf0c      	ite	eq
 808702e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8087032:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8087036:	ebce 0404 	rsb	r4, lr, r4
 808703a:	42a3      	cmp	r3, r4
 808703c:	dd0f      	ble.n	808705e <_strtoul_r+0xba>
 808703e:	2e00      	cmp	r6, #0
 8087040:	db08      	blt.n	8087054 <_strtoul_r+0xb0>
 8087042:	4560      	cmp	r0, ip
 8087044:	d806      	bhi.n	8087054 <_strtoul_r+0xb0>
 8087046:	d101      	bne.n	808704c <_strtoul_r+0xa8>
 8087048:	4554      	cmp	r4, sl
 808704a:	dc03      	bgt.n	8087054 <_strtoul_r+0xb0>
 808704c:	fb03 4000 	mla	r0, r3, r0, r4
 8087050:	2601      	movs	r6, #1
 8087052:	e001      	b.n	8087058 <_strtoul_r+0xb4>
 8087054:	f04f 36ff 	mov.w	r6, #4294967295
 8087058:	f815 4b01 	ldrb.w	r4, [r5], #1
 808705c:	e7d8      	b.n	8087010 <_strtoul_r+0x6c>
 808705e:	2e00      	cmp	r6, #0
 8087060:	da07      	bge.n	8087072 <_strtoul_r+0xce>
 8087062:	2322      	movs	r3, #34	; 0x22
 8087064:	f8c8 3000 	str.w	r3, [r8]
 8087068:	f04f 30ff 	mov.w	r0, #4294967295
 808706c:	b92a      	cbnz	r2, 808707a <_strtoul_r+0xd6>
 808706e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8087072:	b107      	cbz	r7, 8087076 <_strtoul_r+0xd2>
 8087074:	4240      	negs	r0, r0
 8087076:	b172      	cbz	r2, 8087096 <_strtoul_r+0xf2>
 8087078:	b106      	cbz	r6, 808707c <_strtoul_r+0xd8>
 808707a:	1e69      	subs	r1, r5, #1
 808707c:	6011      	str	r1, [r2, #0]
 808707e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8087082:	2430      	movs	r4, #48	; 0x30
 8087084:	2b00      	cmp	r3, #0
 8087086:	d1b9      	bne.n	8086ffc <_strtoul_r+0x58>
 8087088:	2308      	movs	r3, #8
 808708a:	e7b7      	b.n	8086ffc <_strtoul_r+0x58>
 808708c:	230a      	movs	r3, #10
 808708e:	e7b5      	b.n	8086ffc <_strtoul_r+0x58>
 8087090:	2c30      	cmp	r4, #48	; 0x30
 8087092:	d0ab      	beq.n	8086fec <_strtoul_r+0x48>
 8087094:	e7b2      	b.n	8086ffc <_strtoul_r+0x58>
 8087096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808709a:	bf00      	nop
 808709c:	20000210 	.word	0x20000210

080870a0 <strtoul>:
 80870a0:	4613      	mov	r3, r2
 80870a2:	460a      	mov	r2, r1
 80870a4:	4601      	mov	r1, r0
 80870a6:	4802      	ldr	r0, [pc, #8]	; (80870b0 <strtoul+0x10>)
 80870a8:	6800      	ldr	r0, [r0, #0]
 80870aa:	f7ff bf7b 	b.w	8086fa4 <_strtoul_r>
 80870ae:	bf00      	nop
 80870b0:	20000274 	.word	0x20000274

080870b4 <__get_current_time_locale>:
 80870b4:	4b04      	ldr	r3, [pc, #16]	; (80870c8 <__get_current_time_locale+0x14>)
 80870b6:	4a05      	ldr	r2, [pc, #20]	; (80870cc <__get_current_time_locale+0x18>)
 80870b8:	6818      	ldr	r0, [r3, #0]
 80870ba:	4b05      	ldr	r3, [pc, #20]	; (80870d0 <__get_current_time_locale+0x1c>)
 80870bc:	2800      	cmp	r0, #0
 80870be:	bf14      	ite	ne
 80870c0:	4610      	movne	r0, r2
 80870c2:	4618      	moveq	r0, r3
 80870c4:	4770      	bx	lr
 80870c6:	bf00      	nop
 80870c8:	20000a40 	.word	0x20000a40
 80870cc:	20000a44 	.word	0x20000a44
 80870d0:	080880cc 	.word	0x080880cc

080870d4 <__tzcalc_limits>:
 80870d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80870d8:	4604      	mov	r4, r0
 80870da:	f000 fa73 	bl	80875c4 <__gettzinfo>
 80870de:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80870e2:	429c      	cmp	r4, r3
 80870e4:	f340 8096 	ble.w	8087214 <__tzcalc_limits+0x140>
 80870e8:	f240 156d 	movw	r5, #365	; 0x16d
 80870ec:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80870f0:	18e3      	adds	r3, r4, r3
 80870f2:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80870f6:	109b      	asrs	r3, r3, #2
 80870f8:	fb05 3502 	mla	r5, r5, r2, r3
 80870fc:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8087100:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8087104:	fb92 f3f3 	sdiv	r3, r2, r3
 8087108:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808710c:	442b      	add	r3, r5
 808710e:	18a5      	adds	r5, r4, r2
 8087110:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8087114:	fb94 f7f2 	sdiv	r7, r4, r2
 8087118:	fb95 f5f2 	sdiv	r5, r5, r2
 808711c:	fb02 4717 	mls	r7, r2, r7, r4
 8087120:	441d      	add	r5, r3
 8087122:	2364      	movs	r3, #100	; 0x64
 8087124:	fb94 f6f3 	sdiv	r6, r4, r3
 8087128:	fab7 fe87 	clz	lr, r7
 808712c:	4601      	mov	r1, r0
 808712e:	fb03 4616 	mls	r6, r3, r6, r4
 8087132:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8087136:	9301      	str	r3, [sp, #4]
 8087138:	f004 0303 	and.w	r3, r4, #3
 808713c:	6044      	str	r4, [r0, #4]
 808713e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8087142:	9300      	str	r3, [sp, #0]
 8087144:	f04f 0c07 	mov.w	ip, #7
 8087148:	7a0b      	ldrb	r3, [r1, #8]
 808714a:	2b4a      	cmp	r3, #74	; 0x4a
 808714c:	d10e      	bne.n	808716c <__tzcalc_limits+0x98>
 808714e:	694b      	ldr	r3, [r1, #20]
 8087150:	9a00      	ldr	r2, [sp, #0]
 8087152:	18ec      	adds	r4, r5, r3
 8087154:	b902      	cbnz	r2, 8087158 <__tzcalc_limits+0x84>
 8087156:	b906      	cbnz	r6, 808715a <__tzcalc_limits+0x86>
 8087158:	b927      	cbnz	r7, 8087164 <__tzcalc_limits+0x90>
 808715a:	2b3b      	cmp	r3, #59	; 0x3b
 808715c:	bfd4      	ite	le
 808715e:	2300      	movle	r3, #0
 8087160:	2301      	movgt	r3, #1
 8087162:	e000      	b.n	8087166 <__tzcalc_limits+0x92>
 8087164:	2300      	movs	r3, #0
 8087166:	4423      	add	r3, r4
 8087168:	3b01      	subs	r3, #1
 808716a:	e03f      	b.n	80871ec <__tzcalc_limits+0x118>
 808716c:	2b44      	cmp	r3, #68	; 0x44
 808716e:	d102      	bne.n	8087176 <__tzcalc_limits+0xa2>
 8087170:	694b      	ldr	r3, [r1, #20]
 8087172:	442b      	add	r3, r5
 8087174:	e03a      	b.n	80871ec <__tzcalc_limits+0x118>
 8087176:	9b00      	ldr	r3, [sp, #0]
 8087178:	b92b      	cbnz	r3, 8087186 <__tzcalc_limits+0xb2>
 808717a:	2e00      	cmp	r6, #0
 808717c:	bf0c      	ite	eq
 808717e:	46f0      	moveq	r8, lr
 8087180:	f04f 0801 	movne.w	r8, #1
 8087184:	e000      	b.n	8087188 <__tzcalc_limits+0xb4>
 8087186:	46f0      	mov	r8, lr
 8087188:	46a9      	mov	r9, r5
 808718a:	4b24      	ldr	r3, [pc, #144]	; (808721c <__tzcalc_limits+0x148>)
 808718c:	2230      	movs	r2, #48	; 0x30
 808718e:	fb02 3808 	mla	r8, r2, r8, r3
 8087192:	68cc      	ldr	r4, [r1, #12]
 8087194:	f1a8 0a04 	sub.w	sl, r8, #4
 8087198:	2301      	movs	r3, #1
 808719a:	42a3      	cmp	r3, r4
 808719c:	da04      	bge.n	80871a8 <__tzcalc_limits+0xd4>
 808719e:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80871a2:	3301      	adds	r3, #1
 80871a4:	44d9      	add	r9, fp
 80871a6:	e7f8      	b.n	808719a <__tzcalc_limits+0xc6>
 80871a8:	f109 0304 	add.w	r3, r9, #4
 80871ac:	fb93 fbfc 	sdiv	fp, r3, ip
 80871b0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80871b4:	ebca 0a03 	rsb	sl, sl, r3
 80871b8:	694b      	ldr	r3, [r1, #20]
 80871ba:	2c01      	cmp	r4, #1
 80871bc:	bfb8      	it	lt
 80871be:	2401      	movlt	r4, #1
 80871c0:	ebb3 0a0a 	subs.w	sl, r3, sl
 80871c4:	690b      	ldr	r3, [r1, #16]
 80871c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80871ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80871ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80871d2:	bf48      	it	mi
 80871d4:	f10a 0a07 	addmi.w	sl, sl, #7
 80871d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80871dc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80871e0:	4453      	add	r3, sl
 80871e2:	42a3      	cmp	r3, r4
 80871e4:	db01      	blt.n	80871ea <__tzcalc_limits+0x116>
 80871e6:	3b07      	subs	r3, #7
 80871e8:	e7fb      	b.n	80871e2 <__tzcalc_limits+0x10e>
 80871ea:	444b      	add	r3, r9
 80871ec:	698c      	ldr	r4, [r1, #24]
 80871ee:	4a0c      	ldr	r2, [pc, #48]	; (8087220 <__tzcalc_limits+0x14c>)
 80871f0:	fb02 4303 	mla	r3, r2, r3, r4
 80871f4:	6a0c      	ldr	r4, [r1, #32]
 80871f6:	4423      	add	r3, r4
 80871f8:	f841 3f1c 	str.w	r3, [r1, #28]!
 80871fc:	9b01      	ldr	r3, [sp, #4]
 80871fe:	4299      	cmp	r1, r3
 8087200:	d1a2      	bne.n	8087148 <__tzcalc_limits+0x74>
 8087202:	69c3      	ldr	r3, [r0, #28]
 8087204:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8087206:	4293      	cmp	r3, r2
 8087208:	bfac      	ite	ge
 808720a:	2300      	movge	r3, #0
 808720c:	2301      	movlt	r3, #1
 808720e:	6003      	str	r3, [r0, #0]
 8087210:	2001      	movs	r0, #1
 8087212:	e000      	b.n	8087216 <__tzcalc_limits+0x142>
 8087214:	2000      	movs	r0, #0
 8087216:	b003      	add	sp, #12
 8087218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808721c:	08087eec 	.word	0x08087eec
 8087220:	00015180 	.word	0x00015180

08087224 <__tz_lock>:
 8087224:	4770      	bx	lr

08087226 <__tz_unlock>:
 8087226:	4770      	bx	lr

08087228 <_tzset_unlocked>:
 8087228:	4b01      	ldr	r3, [pc, #4]	; (8087230 <_tzset_unlocked+0x8>)
 808722a:	6818      	ldr	r0, [r3, #0]
 808722c:	f000 b802 	b.w	8087234 <_tzset_unlocked_r>
 8087230:	20000274 	.word	0x20000274

08087234 <_tzset_unlocked_r>:
 8087234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087238:	b08d      	sub	sp, #52	; 0x34
 808723a:	4607      	mov	r7, r0
 808723c:	f000 f9c2 	bl	80875c4 <__gettzinfo>
 8087240:	49b0      	ldr	r1, [pc, #704]	; (8087504 <_tzset_unlocked_r+0x2d0>)
 8087242:	4604      	mov	r4, r0
 8087244:	4638      	mov	r0, r7
 8087246:	f000 f9b5 	bl	80875b4 <_getenv_r>
 808724a:	4eaf      	ldr	r6, [pc, #700]	; (8087508 <_tzset_unlocked_r+0x2d4>)
 808724c:	4605      	mov	r5, r0
 808724e:	b960      	cbnz	r0, 808726a <_tzset_unlocked_r+0x36>
 8087250:	4bae      	ldr	r3, [pc, #696]	; (808750c <_tzset_unlocked_r+0x2d8>)
 8087252:	4aaf      	ldr	r2, [pc, #700]	; (8087510 <_tzset_unlocked_r+0x2dc>)
 8087254:	6018      	str	r0, [r3, #0]
 8087256:	4baf      	ldr	r3, [pc, #700]	; (8087514 <_tzset_unlocked_r+0x2e0>)
 8087258:	6018      	str	r0, [r3, #0]
 808725a:	4baf      	ldr	r3, [pc, #700]	; (8087518 <_tzset_unlocked_r+0x2e4>)
 808725c:	6830      	ldr	r0, [r6, #0]
 808725e:	601a      	str	r2, [r3, #0]
 8087260:	605a      	str	r2, [r3, #4]
 8087262:	f7fc fba5 	bl	80839b0 <free>
 8087266:	6035      	str	r5, [r6, #0]
 8087268:	e148      	b.n	80874fc <_tzset_unlocked_r+0x2c8>
 808726a:	6831      	ldr	r1, [r6, #0]
 808726c:	b979      	cbnz	r1, 808728e <_tzset_unlocked_r+0x5a>
 808726e:	6830      	ldr	r0, [r6, #0]
 8087270:	f7fc fb9e 	bl	80839b0 <free>
 8087274:	4628      	mov	r0, r5
 8087276:	f7ff fdd5 	bl	8086e24 <strlen>
 808727a:	1c41      	adds	r1, r0, #1
 808727c:	4638      	mov	r0, r7
 808727e:	f7fc fbd7 	bl	8083a30 <_malloc_r>
 8087282:	6030      	str	r0, [r6, #0]
 8087284:	b148      	cbz	r0, 808729a <_tzset_unlocked_r+0x66>
 8087286:	4629      	mov	r1, r5
 8087288:	f7ff f894 	bl	80863b4 <strcpy>
 808728c:	e005      	b.n	808729a <_tzset_unlocked_r+0x66>
 808728e:	f7ff f887 	bl	80863a0 <strcmp>
 8087292:	2800      	cmp	r0, #0
 8087294:	f000 8132 	beq.w	80874fc <_tzset_unlocked_r+0x2c8>
 8087298:	e7e9      	b.n	808726e <_tzset_unlocked_r+0x3a>
 808729a:	782b      	ldrb	r3, [r5, #0]
 808729c:	ae0a      	add	r6, sp, #40	; 0x28
 808729e:	2b3a      	cmp	r3, #58	; 0x3a
 80872a0:	bf08      	it	eq
 80872a2:	3501      	addeq	r5, #1
 80872a4:	4633      	mov	r3, r6
 80872a6:	4a9d      	ldr	r2, [pc, #628]	; (808751c <_tzset_unlocked_r+0x2e8>)
 80872a8:	499d      	ldr	r1, [pc, #628]	; (8087520 <_tzset_unlocked_r+0x2ec>)
 80872aa:	4628      	mov	r0, r5
 80872ac:	f7fc fb98 	bl	80839e0 <siscanf>
 80872b0:	2800      	cmp	r0, #0
 80872b2:	f340 8123 	ble.w	80874fc <_tzset_unlocked_r+0x2c8>
 80872b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80872b8:	18ef      	adds	r7, r5, r3
 80872ba:	5ceb      	ldrb	r3, [r5, r3]
 80872bc:	2b2d      	cmp	r3, #45	; 0x2d
 80872be:	d103      	bne.n	80872c8 <_tzset_unlocked_r+0x94>
 80872c0:	3701      	adds	r7, #1
 80872c2:	f04f 35ff 	mov.w	r5, #4294967295
 80872c6:	e003      	b.n	80872d0 <_tzset_unlocked_r+0x9c>
 80872c8:	2b2b      	cmp	r3, #43	; 0x2b
 80872ca:	bf08      	it	eq
 80872cc:	3701      	addeq	r7, #1
 80872ce:	2501      	movs	r5, #1
 80872d0:	f10d 0a20 	add.w	sl, sp, #32
 80872d4:	f10d 0b1e 	add.w	fp, sp, #30
 80872d8:	f04f 0800 	mov.w	r8, #0
 80872dc:	9603      	str	r6, [sp, #12]
 80872de:	f8cd a008 	str.w	sl, [sp, #8]
 80872e2:	9601      	str	r6, [sp, #4]
 80872e4:	f8cd b000 	str.w	fp, [sp]
 80872e8:	4633      	mov	r3, r6
 80872ea:	aa07      	add	r2, sp, #28
 80872ec:	498d      	ldr	r1, [pc, #564]	; (8087524 <_tzset_unlocked_r+0x2f0>)
 80872ee:	4638      	mov	r0, r7
 80872f0:	f8ad 801e 	strh.w	r8, [sp, #30]
 80872f4:	f8ad 8020 	strh.w	r8, [sp, #32]
 80872f8:	f7fc fb72 	bl	80839e0 <siscanf>
 80872fc:	4540      	cmp	r0, r8
 80872fe:	f340 80fd 	ble.w	80874fc <_tzset_unlocked_r+0x2c8>
 8087302:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8087306:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808730a:	213c      	movs	r1, #60	; 0x3c
 808730c:	fb01 3302 	mla	r3, r1, r2, r3
 8087310:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8087314:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8087318:	fb01 3302 	mla	r3, r1, r2, r3
 808731c:	435d      	muls	r5, r3
 808731e:	4b7f      	ldr	r3, [pc, #508]	; (808751c <_tzset_unlocked_r+0x2e8>)
 8087320:	6225      	str	r5, [r4, #32]
 8087322:	4d7d      	ldr	r5, [pc, #500]	; (8087518 <_tzset_unlocked_r+0x2e4>)
 8087324:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8087530 <_tzset_unlocked_r+0x2fc>
 8087328:	602b      	str	r3, [r5, #0]
 808732a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808732c:	464a      	mov	r2, r9
 808732e:	441f      	add	r7, r3
 8087330:	497b      	ldr	r1, [pc, #492]	; (8087520 <_tzset_unlocked_r+0x2ec>)
 8087332:	4633      	mov	r3, r6
 8087334:	4638      	mov	r0, r7
 8087336:	f7fc fb53 	bl	80839e0 <siscanf>
 808733a:	4540      	cmp	r0, r8
 808733c:	dc08      	bgt.n	8087350 <_tzset_unlocked_r+0x11c>
 808733e:	682b      	ldr	r3, [r5, #0]
 8087340:	6a22      	ldr	r2, [r4, #32]
 8087342:	606b      	str	r3, [r5, #4]
 8087344:	4b71      	ldr	r3, [pc, #452]	; (808750c <_tzset_unlocked_r+0x2d8>)
 8087346:	601a      	str	r2, [r3, #0]
 8087348:	4b72      	ldr	r3, [pc, #456]	; (8087514 <_tzset_unlocked_r+0x2e0>)
 808734a:	f8c3 8000 	str.w	r8, [r3]
 808734e:	e0d5      	b.n	80874fc <_tzset_unlocked_r+0x2c8>
 8087350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087352:	f8c5 9004 	str.w	r9, [r5, #4]
 8087356:	18fd      	adds	r5, r7, r3
 8087358:	5cfb      	ldrb	r3, [r7, r3]
 808735a:	2b2d      	cmp	r3, #45	; 0x2d
 808735c:	d103      	bne.n	8087366 <_tzset_unlocked_r+0x132>
 808735e:	3501      	adds	r5, #1
 8087360:	f04f 37ff 	mov.w	r7, #4294967295
 8087364:	e003      	b.n	808736e <_tzset_unlocked_r+0x13a>
 8087366:	2b2b      	cmp	r3, #43	; 0x2b
 8087368:	bf08      	it	eq
 808736a:	3501      	addeq	r5, #1
 808736c:	2701      	movs	r7, #1
 808736e:	2300      	movs	r3, #0
 8087370:	f8ad 301c 	strh.w	r3, [sp, #28]
 8087374:	f8ad 301e 	strh.w	r3, [sp, #30]
 8087378:	f8ad 3020 	strh.w	r3, [sp, #32]
 808737c:	930a      	str	r3, [sp, #40]	; 0x28
 808737e:	9603      	str	r6, [sp, #12]
 8087380:	f8cd a008 	str.w	sl, [sp, #8]
 8087384:	9601      	str	r6, [sp, #4]
 8087386:	f8cd b000 	str.w	fp, [sp]
 808738a:	4633      	mov	r3, r6
 808738c:	aa07      	add	r2, sp, #28
 808738e:	4965      	ldr	r1, [pc, #404]	; (8087524 <_tzset_unlocked_r+0x2f0>)
 8087390:	4628      	mov	r0, r5
 8087392:	f7fc fb25 	bl	80839e0 <siscanf>
 8087396:	2800      	cmp	r0, #0
 8087398:	dc04      	bgt.n	80873a4 <_tzset_unlocked_r+0x170>
 808739a:	6a23      	ldr	r3, [r4, #32]
 808739c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80873a0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80873a2:	e00e      	b.n	80873c2 <_tzset_unlocked_r+0x18e>
 80873a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80873a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80873ac:	213c      	movs	r1, #60	; 0x3c
 80873ae:	fb01 3302 	mla	r3, r1, r2, r3
 80873b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80873b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80873ba:	fb01 3302 	mla	r3, r1, r2, r3
 80873be:	435f      	muls	r7, r3
 80873c0:	63e7      	str	r7, [r4, #60]	; 0x3c
 80873c2:	4627      	mov	r7, r4
 80873c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80873c6:	f04f 0900 	mov.w	r9, #0
 80873ca:	441d      	add	r5, r3
 80873cc:	782b      	ldrb	r3, [r5, #0]
 80873ce:	2b2c      	cmp	r3, #44	; 0x2c
 80873d0:	bf08      	it	eq
 80873d2:	3501      	addeq	r5, #1
 80873d4:	f895 8000 	ldrb.w	r8, [r5]
 80873d8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80873dc:	d126      	bne.n	808742c <_tzset_unlocked_r+0x1f8>
 80873de:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80873e2:	9302      	str	r3, [sp, #8]
 80873e4:	ab09      	add	r3, sp, #36	; 0x24
 80873e6:	9300      	str	r3, [sp, #0]
 80873e8:	9603      	str	r6, [sp, #12]
 80873ea:	9601      	str	r6, [sp, #4]
 80873ec:	4633      	mov	r3, r6
 80873ee:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80873f2:	494d      	ldr	r1, [pc, #308]	; (8087528 <_tzset_unlocked_r+0x2f4>)
 80873f4:	4628      	mov	r0, r5
 80873f6:	f7fc faf3 	bl	80839e0 <siscanf>
 80873fa:	2803      	cmp	r0, #3
 80873fc:	d17e      	bne.n	80874fc <_tzset_unlocked_r+0x2c8>
 80873fe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8087402:	1e4b      	subs	r3, r1, #1
 8087404:	2b0b      	cmp	r3, #11
 8087406:	d879      	bhi.n	80874fc <_tzset_unlocked_r+0x2c8>
 8087408:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808740c:	1e53      	subs	r3, r2, #1
 808740e:	2b04      	cmp	r3, #4
 8087410:	d874      	bhi.n	80874fc <_tzset_unlocked_r+0x2c8>
 8087412:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8087416:	2b06      	cmp	r3, #6
 8087418:	d870      	bhi.n	80874fc <_tzset_unlocked_r+0x2c8>
 808741a:	f887 8008 	strb.w	r8, [r7, #8]
 808741e:	60f9      	str	r1, [r7, #12]
 8087420:	613a      	str	r2, [r7, #16]
 8087422:	617b      	str	r3, [r7, #20]
 8087424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087426:	eb05 0803 	add.w	r8, r5, r3
 808742a:	e02a      	b.n	8087482 <_tzset_unlocked_r+0x24e>
 808742c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8087430:	bf06      	itte	eq
 8087432:	4643      	moveq	r3, r8
 8087434:	3501      	addeq	r5, #1
 8087436:	2344      	movne	r3, #68	; 0x44
 8087438:	220a      	movs	r2, #10
 808743a:	a90b      	add	r1, sp, #44	; 0x2c
 808743c:	4628      	mov	r0, r5
 808743e:	9305      	str	r3, [sp, #20]
 8087440:	f7ff fe2e 	bl	80870a0 <strtoul>
 8087444:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8087448:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808744c:	4545      	cmp	r5, r8
 808744e:	9b05      	ldr	r3, [sp, #20]
 8087450:	d114      	bne.n	808747c <_tzset_unlocked_r+0x248>
 8087452:	234d      	movs	r3, #77	; 0x4d
 8087454:	f1b9 0f00 	cmp.w	r9, #0
 8087458:	d107      	bne.n	808746a <_tzset_unlocked_r+0x236>
 808745a:	7223      	strb	r3, [r4, #8]
 808745c:	2303      	movs	r3, #3
 808745e:	60e3      	str	r3, [r4, #12]
 8087460:	2302      	movs	r3, #2
 8087462:	6123      	str	r3, [r4, #16]
 8087464:	f8c4 9014 	str.w	r9, [r4, #20]
 8087468:	e00b      	b.n	8087482 <_tzset_unlocked_r+0x24e>
 808746a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808746e:	230b      	movs	r3, #11
 8087470:	62a3      	str	r3, [r4, #40]	; 0x28
 8087472:	2301      	movs	r3, #1
 8087474:	62e3      	str	r3, [r4, #44]	; 0x2c
 8087476:	2300      	movs	r3, #0
 8087478:	6323      	str	r3, [r4, #48]	; 0x30
 808747a:	e002      	b.n	8087482 <_tzset_unlocked_r+0x24e>
 808747c:	b280      	uxth	r0, r0
 808747e:	723b      	strb	r3, [r7, #8]
 8087480:	6178      	str	r0, [r7, #20]
 8087482:	2302      	movs	r3, #2
 8087484:	f8ad 301c 	strh.w	r3, [sp, #28]
 8087488:	2300      	movs	r3, #0
 808748a:	f8ad 301e 	strh.w	r3, [sp, #30]
 808748e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8087492:	930a      	str	r3, [sp, #40]	; 0x28
 8087494:	f898 3000 	ldrb.w	r3, [r8]
 8087498:	2b2f      	cmp	r3, #47	; 0x2f
 808749a:	d10b      	bne.n	80874b4 <_tzset_unlocked_r+0x280>
 808749c:	9603      	str	r6, [sp, #12]
 808749e:	f8cd a008 	str.w	sl, [sp, #8]
 80874a2:	9601      	str	r6, [sp, #4]
 80874a4:	f8cd b000 	str.w	fp, [sp]
 80874a8:	4633      	mov	r3, r6
 80874aa:	aa07      	add	r2, sp, #28
 80874ac:	491f      	ldr	r1, [pc, #124]	; (808752c <_tzset_unlocked_r+0x2f8>)
 80874ae:	4640      	mov	r0, r8
 80874b0:	f7fc fa96 	bl	80839e0 <siscanf>
 80874b4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80874b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80874bc:	213c      	movs	r1, #60	; 0x3c
 80874be:	fb01 3302 	mla	r3, r1, r2, r3
 80874c2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80874c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80874ca:	fb01 3302 	mla	r3, r1, r2, r3
 80874ce:	61bb      	str	r3, [r7, #24]
 80874d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80874d2:	f109 0901 	add.w	r9, r9, #1
 80874d6:	f1b9 0f02 	cmp.w	r9, #2
 80874da:	4445      	add	r5, r8
 80874dc:	f107 071c 	add.w	r7, r7, #28
 80874e0:	f47f af74 	bne.w	80873cc <_tzset_unlocked_r+0x198>
 80874e4:	6860      	ldr	r0, [r4, #4]
 80874e6:	f7ff fdf5 	bl	80870d4 <__tzcalc_limits>
 80874ea:	6a22      	ldr	r2, [r4, #32]
 80874ec:	4b07      	ldr	r3, [pc, #28]	; (808750c <_tzset_unlocked_r+0x2d8>)
 80874ee:	601a      	str	r2, [r3, #0]
 80874f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80874f2:	1a9b      	subs	r3, r3, r2
 80874f4:	4a07      	ldr	r2, [pc, #28]	; (8087514 <_tzset_unlocked_r+0x2e0>)
 80874f6:	bf18      	it	ne
 80874f8:	2301      	movne	r3, #1
 80874fa:	6013      	str	r3, [r2, #0]
 80874fc:	b00d      	add	sp, #52	; 0x34
 80874fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087502:	bf00      	nop
 8087504:	080881c8 	.word	0x080881c8
 8087508:	20000b58 	.word	0x20000b58
 808750c:	20000b60 	.word	0x20000b60
 8087510:	080881cb 	.word	0x080881cb
 8087514:	20000b5c 	.word	0x20000b5c
 8087518:	20000278 	.word	0x20000278
 808751c:	20000b4b 	.word	0x20000b4b
 8087520:	080881cf 	.word	0x080881cf
 8087524:	080881f2 	.word	0x080881f2
 8087528:	080881de 	.word	0x080881de
 808752c:	080881f1 	.word	0x080881f1
 8087530:	20000b40 	.word	0x20000b40

08087534 <abs>:
 8087534:	2800      	cmp	r0, #0
 8087536:	bfb8      	it	lt
 8087538:	4240      	neglt	r0, r0
 808753a:	4770      	bx	lr

0808753c <_findenv_r>:
 808753c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087540:	4607      	mov	r7, r0
 8087542:	468b      	mov	fp, r1
 8087544:	4690      	mov	r8, r2
 8087546:	f000 f8db 	bl	8087700 <__env_lock>
 808754a:	4b19      	ldr	r3, [pc, #100]	; (80875b0 <_findenv_r+0x74>)
 808754c:	681d      	ldr	r5, [r3, #0]
 808754e:	469a      	mov	sl, r3
 8087550:	b13d      	cbz	r5, 8087562 <_findenv_r+0x26>
 8087552:	465c      	mov	r4, fp
 8087554:	4623      	mov	r3, r4
 8087556:	f813 2b01 	ldrb.w	r2, [r3], #1
 808755a:	b142      	cbz	r2, 808756e <_findenv_r+0x32>
 808755c:	2a3d      	cmp	r2, #61	; 0x3d
 808755e:	461c      	mov	r4, r3
 8087560:	d1f8      	bne.n	8087554 <_findenv_r+0x18>
 8087562:	4638      	mov	r0, r7
 8087564:	f000 f8cd 	bl	8087702 <__env_unlock>
 8087568:	2000      	movs	r0, #0
 808756a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808756e:	ebcb 0404 	rsb	r4, fp, r4
 8087572:	46a9      	mov	r9, r5
 8087574:	f859 0b04 	ldr.w	r0, [r9], #4
 8087578:	2800      	cmp	r0, #0
 808757a:	d0f2      	beq.n	8087562 <_findenv_r+0x26>
 808757c:	4622      	mov	r2, r4
 808757e:	4659      	mov	r1, fp
 8087580:	f7ff fc58 	bl	8086e34 <strncmp>
 8087584:	b988      	cbnz	r0, 80875aa <_findenv_r+0x6e>
 8087586:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808758a:	191e      	adds	r6, r3, r4
 808758c:	5d1b      	ldrb	r3, [r3, r4]
 808758e:	2b3d      	cmp	r3, #61	; 0x3d
 8087590:	d10b      	bne.n	80875aa <_findenv_r+0x6e>
 8087592:	f8da 3000 	ldr.w	r3, [sl]
 8087596:	4638      	mov	r0, r7
 8087598:	1aed      	subs	r5, r5, r3
 808759a:	10ad      	asrs	r5, r5, #2
 808759c:	f8c8 5000 	str.w	r5, [r8]
 80875a0:	f000 f8af 	bl	8087702 <__env_unlock>
 80875a4:	1c70      	adds	r0, r6, #1
 80875a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80875aa:	464d      	mov	r5, r9
 80875ac:	e7e1      	b.n	8087572 <_findenv_r+0x36>
 80875ae:	bf00      	nop
 80875b0:	200002c0 	.word	0x200002c0

080875b4 <_getenv_r>:
 80875b4:	b507      	push	{r0, r1, r2, lr}
 80875b6:	aa01      	add	r2, sp, #4
 80875b8:	f7ff ffc0 	bl	808753c <_findenv_r>
 80875bc:	b003      	add	sp, #12
 80875be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080875c4 <__gettzinfo>:
 80875c4:	4800      	ldr	r0, [pc, #0]	; (80875c8 <__gettzinfo+0x4>)
 80875c6:	4770      	bx	lr
 80875c8:	20000280 	.word	0x20000280

080875cc <gmtime_r>:
 80875cc:	6802      	ldr	r2, [r0, #0]
 80875ce:	4b46      	ldr	r3, [pc, #280]	; (80876e8 <gmtime_r+0x11c>)
 80875d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80875d2:	fb92 f4f3 	sdiv	r4, r2, r3
 80875d6:	fb03 2214 	mls	r2, r3, r4, r2
 80875da:	2a00      	cmp	r2, #0
 80875dc:	bfbc      	itt	lt
 80875de:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80875e2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80875e6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80875ea:	fb92 f3f0 	sdiv	r3, r2, r0
 80875ee:	fb00 2213 	mls	r2, r0, r3, r2
 80875f2:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80875f6:	608b      	str	r3, [r1, #8]
 80875f8:	fb92 f3f0 	sdiv	r3, r2, r0
 80875fc:	fb00 2213 	mls	r2, r0, r3, r2
 8087600:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8087604:	bfac      	ite	ge
 8087606:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808760a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808760e:	604b      	str	r3, [r1, #4]
 8087610:	600a      	str	r2, [r1, #0]
 8087612:	2307      	movs	r3, #7
 8087614:	1ce2      	adds	r2, r4, #3
 8087616:	fb92 f3f3 	sdiv	r3, r2, r3
 808761a:	4d34      	ldr	r5, [pc, #208]	; (80876ec <gmtime_r+0x120>)
 808761c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8087620:	fb94 f5f5 	sdiv	r5, r4, r5
 8087624:	1ad3      	subs	r3, r2, r3
 8087626:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808762a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808762e:	618b      	str	r3, [r1, #24]
 8087630:	4b2f      	ldr	r3, [pc, #188]	; (80876f0 <gmtime_r+0x124>)
 8087632:	4830      	ldr	r0, [pc, #192]	; (80876f4 <gmtime_r+0x128>)
 8087634:	fb03 4405 	mla	r4, r3, r5, r4
 8087638:	fbb4 f2f2 	udiv	r2, r4, r2
 808763c:	fbb4 f3f7 	udiv	r3, r4, r7
 8087640:	fbb4 f0f0 	udiv	r0, r4, r0
 8087644:	4422      	add	r2, r4
 8087646:	1ad2      	subs	r2, r2, r3
 8087648:	f648 6694 	movw	r6, #36500	; 0x8e94
 808764c:	1a13      	subs	r3, r2, r0
 808764e:	f240 126d 	movw	r2, #365	; 0x16d
 8087652:	fbb3 f6f6 	udiv	r6, r3, r6
 8087656:	fbb3 f0f2 	udiv	r0, r3, r2
 808765a:	fbb3 f3f7 	udiv	r3, r3, r7
 808765e:	4434      	add	r4, r6
 8087660:	1ae3      	subs	r3, r4, r3
 8087662:	fb02 3310 	mls	r3, r2, r0, r3
 8087666:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808766a:	2499      	movs	r4, #153	; 0x99
 808766c:	3202      	adds	r2, #2
 808766e:	fbb2 f2f4 	udiv	r2, r2, r4
 8087672:	4354      	muls	r4, r2
 8087674:	1ca6      	adds	r6, r4, #2
 8087676:	2405      	movs	r4, #5
 8087678:	fbb6 f4f4 	udiv	r4, r6, r4
 808767c:	2a0a      	cmp	r2, #10
 808767e:	bf34      	ite	cc
 8087680:	2602      	movcc	r6, #2
 8087682:	f06f 0609 	mvncs.w	r6, #9
 8087686:	4416      	add	r6, r2
 8087688:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808768c:	fb02 0505 	mla	r5, r2, r5, r0
 8087690:	1c5f      	adds	r7, r3, #1
 8087692:	2e01      	cmp	r6, #1
 8087694:	bf98      	it	ls
 8087696:	3501      	addls	r5, #1
 8087698:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808769c:	eba7 0704 	sub.w	r7, r7, r4
 80876a0:	d302      	bcc.n	80876a8 <gmtime_r+0xdc>
 80876a2:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80876a6:	e014      	b.n	80876d2 <gmtime_r+0x106>
 80876a8:	0782      	lsls	r2, r0, #30
 80876aa:	d105      	bne.n	80876b8 <gmtime_r+0xec>
 80876ac:	2464      	movs	r4, #100	; 0x64
 80876ae:	fbb0 f2f4 	udiv	r2, r0, r4
 80876b2:	fb04 0212 	mls	r2, r4, r2, r0
 80876b6:	b94a      	cbnz	r2, 80876cc <gmtime_r+0x100>
 80876b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80876bc:	fbb0 f4f2 	udiv	r4, r0, r2
 80876c0:	fb02 0014 	mls	r0, r2, r4, r0
 80876c4:	fab0 f280 	clz	r2, r0
 80876c8:	0952      	lsrs	r2, r2, #5
 80876ca:	e000      	b.n	80876ce <gmtime_r+0x102>
 80876cc:	2201      	movs	r2, #1
 80876ce:	333b      	adds	r3, #59	; 0x3b
 80876d0:	441a      	add	r2, r3
 80876d2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80876d6:	2300      	movs	r3, #0
 80876d8:	61ca      	str	r2, [r1, #28]
 80876da:	614d      	str	r5, [r1, #20]
 80876dc:	610e      	str	r6, [r1, #16]
 80876de:	60cf      	str	r7, [r1, #12]
 80876e0:	620b      	str	r3, [r1, #32]
 80876e2:	4608      	mov	r0, r1
 80876e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80876e6:	bf00      	nop
 80876e8:	00015180 	.word	0x00015180
 80876ec:	00023ab1 	.word	0x00023ab1
 80876f0:	fffdc54f 	.word	0xfffdc54f
 80876f4:	00023ab0 	.word	0x00023ab0

080876f8 <labs>:
 80876f8:	2800      	cmp	r0, #0
 80876fa:	bfb8      	it	lt
 80876fc:	4240      	neglt	r0, r0
 80876fe:	4770      	bx	lr

08087700 <__env_lock>:
 8087700:	4770      	bx	lr

08087702 <__env_unlock>:
 8087702:	4770      	bx	lr

08087704 <dynalib_user>:
 8087704:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8087714:	0000 0000 6143 206e 6f6e 2074 7550 6c62     ....Can not Publ
 8087724:	7369 0a68 4300 6e61 6e20 746f 5320 656c     ish..Can not Sle
 8087734:	7065 000a 6143 206e 6f6e 2074 6552 6461     ep..Can not Read
 8087744:	5320 6e65 6f73 7372 000a 6143 206e 6f6e      Sensors..Can no
 8087754:	2074 6f6c 0a67 4300 6e61 6e20 746f 7720     t log..Can not w
 8087764:	6b61 7565 0a70 5700 6b6f 2065 7075 0a21     akeup..Woke up!.
 8087774:	0000 0000                                   ....

08087778 <_ZTV10SleepState>:
	...
 8087780:	0205 0808 0219 0808 0195 0808 0181 0808     ................
 8087790:	01d5 0808 016d 0808 01a9 0808               ....m.......

0808779c <_ZTVN8particle13__SPISettingsE>:
	...
 80877a4:	027d 0808                                   }...

080877a8 <_ZTV4File>:
	...
 80877b0:	026b 0808 026d 0808 0335 0808 032f 0808     k...m...5.../...
 80877c0:	0233 0808 030f 0808 0309 0808 0303 0808     3...............
 80877d0:	0000 6564 6166 6c75 2074 4d00 4253 4c00     ..default .MSB.L
 80877e0:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
 80877f0:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
 8087800:	6974 676e 2073 7325 6c25 2075 7325 4d20     tings %s%lu %s M
 8087810:	444f 2545 3e64 2400 4d50 4b54 3133 2c34     ODE%d>.$PMTK314,
 8087820:	2c30 2c31 2c30 2c31 2c30 2c30 2c30 2c30     0,1,0,1,0,0,0,0,
 8087830:	2c30 2c30 2c30 2c30 2c30 2c30 2c30 2c30     0,0,0,0,0,0,0,0,
 8087840:	2c30 2c30 2a30 3832 2400 4d50 4b54 3232     0,0,0*28.$PMTK22
 8087850:	2c30 3031 3030 312a 0046 5024 4347 444d     0,1000*1F.$PGCMD
 8087860:	332c 2c33 2a31 4336 4300 6d6f 616d 646e     ,33,1*6C.Command
 8087870:	7542 6666 7265 4e00 206f 6163 6472 6420     Buffer.No card d
 8087880:	7465 6365 6574 2e64 5720 6961 6974 676e     etected. Waiting
 8087890:	6620 726f 6320 7261 2e64 5300 2044 6e49      for card..SD In
 80878a0:	7469 6169 696c 617a 6974 6e6f 6620 6961     itialization fai
 80878b0:	656c 2164 000a 2f2f 2222 5c5c 0862 0c66     led!..//""\\b.f.
 80878c0:	0a6e 0d72 0974 6e00 6c75 006c 2d65 7400     n.r.t..null.e-.t
 80878d0:	7572 0065 6166 736c 0065 6573 736e 726f     rue.false.sensor
 80878e0:	2500 2d59 6d25 252d 2064 4825 253a 3a4d     .%Y-%m-%d %H:%M:
 80878f0:	5325 6700 696f 676e 7420 206f 6c73 6565     %S.going to slee
 8087900:	0a70 6c00 676f 6967 676e 6420 6e6f 2165     p..logging done!
 8087910:	000a 6f4c 2e67 7874 0074 7570 6c62 7369     ..Log.txt.publis
 8087920:	6968 676e 6420 7461 0061 6564 746c 5061     hing data.deltaP
 8087930:	6f43 0032 616d 2078 6974 656d 6620 726f     Co2.max time for
 8087940:	7020 6c75 7369 6968 676e 7220 6165 6863      pulishing reach
 8087950:	4e00 746f 6d20 7861 7420 6d69 2c65 7420     .Not max time, t
 8087960:	7972 6120 6167 6e69 7420 206f 7570 6c62     ry again to publ
 8087970:	7369 0068 3e2d 4320 324f 3a20 0020 0000     ish.-> CO2 : ...

08087980 <_ZTV12PublishState>:
	...
 8087988:	0f31 0808 0f45 0808 1025 0808 0e9d 0808     1...E...%.......
 8087998:	01bd 0808 0f59 0808 0ef1 0808 0a0d 4b00     ....Y..........K
 80879a8:	2520 0075 2041 7525 4d00 2520 0075 0051      %u.A %u.M %u.Q.
 80879b8:	2050 7525 2520 0075 002a 0048 2046 7525     P %u %u.*.H.F %u
 80879c8:	2520 0075 0055 2058 7525 7000 2520 0075      %u.U.X %u.p %u.
 80879d8:	7ae1 0808 7ae4 0808 7ae7 0808 7aea 0808     .z...z...z...z..
 80879e8:	7ae8 0808 7a50 0808                         .z..Pz..

080879f0 <_ZTV12Adafruit_GPS>:
	...
 80879f8:	2cc1 0808 2ce1 0808 2cf7 0808 3e63 0808     .,...,...,..c>..
 8087a08:	4747 0041 4c47 004c 5347 0041 4d52 0043     GGA.GLL.GSA.RMC.
 8087a18:	4244 0054 4448 004d 4448 0054 444d 0041     DBT.HDM.HDT.MDA.
 8087a28:	544d 0057 574d 0056 4d52 0042 5854 0054     MTW.MWV.RMB.TXT.
 8087a38:	4856 0057 4c56 0057 5056 0057 5756 0052     VHW.VLW.VPW.VWR.
 8087a48:	4357 0056 5458 0045 5a5a 005a 5041 0042     WCV.XTE.ZZZ.APB.
 8087a58:	5044 0054 5347 0056 4448 0047 574d 0044     DPT.GSV.HDG.MWD.
 8087a68:	4f52 0054 5052 004d 5352 0041 4456 0052     ROT.RPM.RSA.VDR.
 8087a78:	5456 0047 445a 0041 5024 544d 314b 3538     VTG.ZDA.$PMTK185
 8087a88:	302c 322a 0032 5024 544d 304b 3130 312c     ,0*22.$PMTK001,1
 8087a98:	3538 332c 332a 0043 5024 544d 314b 3538     85,3*3C.$PMTK185
 8087aa8:	312c 322a 0033 5024 544d 314b 3338 332a     ,1*23.$PMTK183*3
 8087ab8:	0038 5024 544d 4c4b 474f 2400 4d50 4b54     8.$PMTKLOG.$PMTK
 8087ac8:	3631 2c31 2a30 3832 2400 4d50 4b54 3130     161,0*28.$PMTK01
 8087ad8:	2c30 3030 2a32 4432 4900 0049 4957 4700     0,002*2D.II.WI.G
 8087ae8:	0050 4e47 0000 0000                         P.GN....

08087af0 <_ZTV8SPIClass>:
	...
 8087af8:	3a41 0808 3a59 0808                         A:..Y:..

08087b00 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8087b00:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
 8087b10:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 8087b20:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 8087b30:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 8087b40:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 8087b50:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 8087b60:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 8087b70:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 8087b80:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
 8087b90:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 8087ba0:	0069 6564 6174 6c69 2073 203d 6600 6c00     i.details = .f.l
 8087bb0:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
 8087bc0:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
 8087bd0:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
 8087be0:	0063 6c61 006c 2b25 3330 3a64 3025 7532     c.all.%+03d:%02u
 8087bf0:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
 8087c00:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

08087c10 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8087c18:	4359 0808 435f 0808 43a3 0808 436d 0808     YC.._C...C..mC..
 8087c28:	435b 0808                                   [C..

08087c2c <_ZTV9IPAddress>:
	...
 8087c34:	48f1 0808 48e1 0808 48e3 0808               .H...H...H..

08087c40 <_ZTV9USBSerial>:
	...
 8087c48:	4985 0808 49d5 0808 49e3 0808 3e63 0808     .I...I...I..c>..
 8087c58:	49c1 0808 4987 0808 499d 0808 49cf 0808     .I...I...I...I..
 8087c68:	49b3 0808 4981 0808                         .I...I..

08087c70 <_ZTVN5spark13CellularClassE>:
	...
 8087c78:	4c47 0808 4c3d 0808 4c33 0808 4ba5 0808     GL..=L..3L...K..
 8087c88:	4c27 0808 4c1b 0808 4c0f 0808 4c07 0808     'L...L...L...L..
 8087c98:	4bfd 0808 4bf3 0808 4baf 0808               .K...K...K..

08087ca4 <_ZTV11USARTSerial>:
	...
 8087cac:	0231 0808 04d1 0808 4ccf 0808 3e63 0808     1........L..c>..
 8087cbc:	4c93 0808 4cb5 0808 4ca1 0808 4cc9 0808     .L...L...L...L..
 8087ccc:	4c81 0808 4c85 0808                         .L...L..

08087cd4 <_ZTV7TwoWire>:
	...
 8087cdc:	4da9 0808 4df3 0808 4dcb 0808 4dab 0808     .M...M...M...M..
 8087cec:	4dd3 0808 4ddb 0808 4de3 0808 4deb 0808     .M...M...M...M..

08087cfc <_ZTVN5spark12NetworkClassE>:
	...
 8087d04:	4e4f 0808 4e59 0808 4e63 0808 4e6d 0808     ON..YN..cN..mN..
 8087d14:	4e77 0808 4e83 0808 4e8f 0808 4e9b 0808     wN...N...N...N..
 8087d24:	4ea3 0808 4ead 0808 4eb9 0808               .N...N...N..

08087d30 <_ZSt7nothrow>:
	...

08087d31 <day_name.4723>:
 8087d31:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8087d41:	6972 6153 4a74                                   riSat

08087d46 <mon_name.4724>:
 8087d46:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8087d56:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8087d66:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8087d76:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8087d86:	6425 000a                                   %d..

08087d8a <_ctype_>:
 8087d8a:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8087d9a:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8087daa:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8087dba:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8087dca:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8087dda:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8087dea:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8087dfa:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8087e0a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08087e8c <__sf_fake_stdin>:
	...

08087eac <__sf_fake_stdout>:
	...

08087ecc <__sf_fake_stderr>:
	...

08087eec <__month_lengths>:
 8087eec:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8087efc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8087f0c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8087f1c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8087f2c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8087f3c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8087f4c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 8087f5c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 8087f6c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 8087f7c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 8087f8c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 8087f9c:	6c33 2564 322e 646c 4c00 5f43 4954 454d     3ld%.2ld.LC_TIME
 8087fac:	4a00 6e61 4600 6265 4d00 7261 4100 7270     .Jan.Feb.Mar.Apr
 8087fbc:	4d00 7961 4a00 6e75 4a00 6c75 4100 6775     .May.Jun.Jul.Aug
 8087fcc:	5300 7065 4f00 7463 4e00 766f 4400 6365     .Sep.Oct.Nov.Dec
 8087fdc:	4a00 6e61 6175 7972 4600 6265 7572 7261     .January.Februar
 8087fec:	0079 614d 6372 0068 7041 6972 006c 754a     y.March.April.Ju
 8087ffc:	656e 4a00 6c75 0079 7541 7567 7473 5300     ne.July.August.S
 808800c:	7065 6574 626d 7265 4f00 7463 626f 7265     eptember.October
 808801c:	4e00 766f 6d65 6562 0072 6544 6563 626d     .November.Decemb
 808802c:	7265 5300 6e75 4d00 6e6f 5400 6575 5700     er.Sun.Mon.Tue.W
 808803c:	6465 5400 7568 4600 6972 5300 7461 5300     ed.Thu.Fri.Sat.S
 808804c:	6e75 6164 0079 6f4d 646e 7961 5400 6575     unday.Monday.Tue
 808805c:	6473 7961 5700 6465 656e 6473 7961 5400     sday.Wednesday.T
 808806c:	7568 7372 6164 0079 7246 6469 7961 5300     hursday.Friday.S
 808807c:	7461 7275 6164 0079 6d25 252f 2f64 7925     aturday.%m/%d/%y
 808808c:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
 808809c:	5325 2520 0059 4d41 2500 2061 6225 2520     %S %Y.AM.%a %b %
 80880ac:	2065 4825 253a 3a4d 5325 2520 205a 5925     e %H:%M:%S %Z %Y
 80880bc:	2500 3a49 4d25 253a 2053 7025 0000 0000     .%I:%M:%S %p....

080880cc <_C_time_locale>:
 80880cc:	7fad 0808 7fb1 0808 7fb5 0808 7fb9 0808     ................
 80880dc:	7fbd 0808 7fc1 0808 7fc5 0808 7fc9 0808     ................
 80880ec:	7fcd 0808 7fd1 0808 7fd5 0808 7fd9 0808     ................
 80880fc:	7fdd 0808 7fe5 0808 7fee 0808 7ff4 0808     ................
 808810c:	7fbd 0808 7ffa 0808 7fff 0808 8004 0808     ................
 808811c:	800b 0808 8015 0808 801d 0808 8026 0808     ............&...
 808812c:	802f 0808 8033 0808 8037 0808 803b 0808     /...3...7...;...
 808813c:	803f 0808 8043 0808 8047 0808 804b 0808     ?...C...G...K...
 808814c:	8052 0808 8059 0808 8061 0808 806b 0808     R...Y...a...k...
 808815c:	8074 0808 807b 0808 78ea 0808 8084 0808     t...{....x......
 808816c:	808d 0808 80a2 0808 7a6d 0808 80a5 0808     ........mz......
 808817c:	7fdd 0808 7fe5 0808 7fee 0808 7ff4 0808     ................
 808818c:	7fbd 0808 7ffa 0808 7fff 0808 8004 0808     ................
 808819c:	800b 0808 8015 0808 801d 0808 8026 0808     ............&...
 80881ac:	7b2b 0808 80bd 0808 78c6 0808 78c6 0808     +{.......x...x..
 80881bc:	78c6 0808 78c6 0808 78c6 0808 5a54 4700     .x...x...x..TZ.G
 80881cc:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80881dc:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80881ec:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80881fc:	3a6e 6825 2575 006e                         n:%hu%n.

08088204 <link_const_variable_data_end>:
 8088204:	08080109 	.word	0x08080109
 8088208:	080801d1 	.word	0x080801d1
 808820c:	0808022d 	.word	0x0808022d
 8088210:	08080e99 	.word	0x08080e99
 8088214:	08081099 	.word	0x08081099
 8088218:	08081145 	.word	0x08081145
 808821c:	08081149 	.word	0x08081149
 8088220:	0808114d 	.word	0x0808114d
 8088224:	08081775 	.word	0x08081775
 8088228:	08081779 	.word	0x08081779
 808822c:	0808177d 	.word	0x0808177d
 8088230:	08081781 	.word	0x08081781
 8088234:	08081e49 	.word	0x08081e49
 8088238:	08081e6d 	.word	0x08081e6d
 808823c:	08081e71 	.word	0x08081e71
 8088240:	0808219d 	.word	0x0808219d
 8088244:	080821a1 	.word	0x080821a1
 8088248:	080821a5 	.word	0x080821a5
 808824c:	080826df 	.word	0x080826df
 8088250:	080826e3 	.word	0x080826e3
 8088254:	080826e7 	.word	0x080826e7
 8088258:	0808278d 	.word	0x0808278d
 808825c:	08082cb3 	.word	0x08082cb3
 8088260:	08082cb7 	.word	0x08082cb7
 8088264:	08082cbb 	.word	0x08082cbb
 8088268:	080831f5 	.word	0x080831f5
 808826c:	080832cd 	.word	0x080832cd
 8088270:	08083473 	.word	0x08083473
 8088274:	08083d11 	.word	0x08083d11
 8088278:	08083fbd 	.word	0x08083fbd
 808827c:	080841a5 	.word	0x080841a5
 8088280:	080841ed 	.word	0x080841ed
 8088284:	08084c51 	.word	0x08084c51
 8088288:	08084f05 	.word	0x08084f05
 808828c:	08085259 	.word	0x08085259
 8088290:	0808535d 	.word	0x0808535d
 8088294:	080853e1 	.word	0x080853e1
 8088298:	080854a5 	.word	0x080854a5
 808829c:	08085569 	.word	0x08085569
