
c:/Users/Omid/Desktop/CozirProject/CozirApp/CO2ExchangeSystem/target/1.5.0/electron/CO2ExchangeSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b110  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  0808b130  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000013c  20000000  0808b134  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008d0  20000140  20000140  00040140  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0808b270  0808b270  0003b270  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808b298  0808b298  0003b298  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002160c4  00000000  00000000  0003b29c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002a1c6  00000000  00000000  00251360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002ed00  00000000  00000000  0027b526  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003888  00000000  00000000  002aa226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005f80  00000000  00000000  002adaae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004dee7  00000000  00000000  002b3a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000734e5  00000000  00000000  00301915  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000c71a9  00000000  00000000  00374dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000109b8  00000000  00000000  0043bfa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f007 fa72 	bl	808751a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f007 fa77 	bl	8087530 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0808b134 	.word	0x0808b134
 8080050:	2000013c 	.word	0x2000013c
 8080054:	20000140 	.word	0x20000140
 8080058:	20000a10 	.word	0x20000a10
 808005c:	20000a10 	.word	0x20000a10

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f004 ff65 	bl	8084f30 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808b07c 	.word	0x0808b07c
 8080088:	0808b128 	.word	0x0808b128

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 bcea 	b.w	8080a64 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 fced 	bl	8080a70 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f004 bf0b 	b.w	8084eb4 <_post_loop>

0808009e <_Znwj>:
 808009e:	f004 b985 	b.w	80843ac <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f004 b98b 	b.w	80843bc <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <cmd_error_create>:
#include <string.h> // strlen, strcpy

// ===== CMD Parse Error ===== //

// Constructors
cmd_error* cmd_error_create(int mode, cmd* command, arg* argument, word_node* data) {
 80800b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80800ba:	4680      	mov	r8, r0
    cmd_error* e = (cmd_error*)malloc(sizeof(cmd_error));
 80800bc:	2014      	movs	r0, #20
#include <string.h> // strlen, strcpy

// ===== CMD Parse Error ===== //

// Constructors
cmd_error* cmd_error_create(int mode, cmd* command, arg* argument, word_node* data) {
 80800be:	4616      	mov	r6, r2
 80800c0:	460f      	mov	r7, r1
 80800c2:	461d      	mov	r5, r3
    cmd_error* e = (cmd_error*)malloc(sizeof(cmd_error));
 80800c4:	f004 f972 	bl	80843ac <malloc>

    e->mode     = mode;
    e->command  = command;
    e->argument = argument;
 80800c8:	6086      	str	r6, [r0, #8]
    e->data     = NULL;
 80800ca:	2600      	movs	r6, #0

// ===== CMD Parse Error ===== //

// Constructors
cmd_error* cmd_error_create(int mode, cmd* command, arg* argument, word_node* data) {
    cmd_error* e = (cmd_error*)malloc(sizeof(cmd_error));
 80800cc:	4604      	mov	r4, r0

    e->mode     = mode;
 80800ce:	f8c0 8000 	str.w	r8, [r0]
    e->command  = command;
 80800d2:	6047      	str	r7, [r0, #4]
    e->argument = argument;
    e->data     = NULL;
 80800d4:	60c6      	str	r6, [r0, #12]
    e->next     = NULL;
 80800d6:	6106      	str	r6, [r0, #16]

    if (data && (data->len > 0)) {
 80800d8:	b165      	cbz	r5, 80800f4 <cmd_error_create+0x3e>
 80800da:	6868      	ldr	r0, [r5, #4]
 80800dc:	b150      	cbz	r0, 80800f4 <cmd_error_create+0x3e>
        e->data = (char*)malloc(data->len + 1);
 80800de:	3001      	adds	r0, #1
 80800e0:	f004 f964 	bl	80843ac <malloc>
 80800e4:	60e0      	str	r0, [r4, #12]
        memcpy(e->data, data->str, data->len);
 80800e6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80800ea:	f007 fa16 	bl	808751a <memcpy>
        e->data[data->len] = '\0';
 80800ee:	68e2      	ldr	r2, [r4, #12]
 80800f0:	686b      	ldr	r3, [r5, #4]
 80800f2:	54d6      	strb	r6, [r2, r3]
    }

    return e;
}
 80800f4:	4620      	mov	r0, r4
 80800f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080800fa <cmd_error_create_null_ptr>:

cmd_error* cmd_error_create_null_ptr(cmd* c) {
    return cmd_error_create(CMD_NULL_PTR, c, NULL, NULL);
 80800fa:	2300      	movs	r3, #0
 80800fc:	4601      	mov	r1, r0
 80800fe:	461a      	mov	r2, r3
 8080100:	f06f 0001 	mvn.w	r0, #1
 8080104:	f7ff bfd7 	b.w	80800b6 <cmd_error_create>

08080108 <cmd_error_create_empty_line>:
};

cmd_error* cmd_error_create_empty_line(cmd* c) {
    return cmd_error_create(CMD_EMPTY_LINE, c, NULL, NULL);
 8080108:	2300      	movs	r3, #0
 808010a:	4601      	mov	r1, r0
 808010c:	461a      	mov	r2, r3
 808010e:	f04f 30ff 	mov.w	r0, #4294967295
 8080112:	f7ff bfd0 	b.w	80800b6 <cmd_error_create>

08080116 <cmd_error_create_parse_success>:
}

cmd_error* cmd_error_create_parse_success(cmd* c) {
    return cmd_error_create(CMD_PARSE_SUCCESS, c, NULL, NULL);
 8080116:	2300      	movs	r3, #0
 8080118:	4601      	mov	r1, r0
 808011a:	461a      	mov	r2, r3
 808011c:	4618      	mov	r0, r3
 808011e:	f7ff bfca 	b.w	80800b6 <cmd_error_create>

08080122 <cmd_error_create_not_found>:
}

cmd_error* cmd_error_create_not_found(cmd* c, word_node* cmd_name) {
    return cmd_error_create(CMD_NOT_FOUND, c, NULL, cmd_name);
 8080122:	460b      	mov	r3, r1
 8080124:	2200      	movs	r2, #0
 8080126:	4601      	mov	r1, r0
 8080128:	2001      	movs	r0, #1
 808012a:	f7ff bfc4 	b.w	80800b6 <cmd_error_create>

0808012e <cmd_error_create_unknown_arg>:
}

cmd_error* cmd_error_create_unknown_arg(cmd* c, word_node* arg_name) {
    return cmd_error_create(CMD_UNKOWN_ARG, c, NULL, arg_name);
 808012e:	460b      	mov	r3, r1
 8080130:	2200      	movs	r2, #0
 8080132:	4601      	mov	r1, r0
 8080134:	2002      	movs	r0, #2
 8080136:	f7ff bfbe 	b.w	80800b6 <cmd_error_create>

0808013a <cmd_error_create_missing_arg>:
}

cmd_error* cmd_error_create_missing_arg(cmd* c, arg* a) {
    return cmd_error_create(CMD_MISSING_ARG, c, a, NULL);
 808013a:	460a      	mov	r2, r1
 808013c:	2300      	movs	r3, #0
 808013e:	4601      	mov	r1, r0
 8080140:	2003      	movs	r0, #3
 8080142:	f7ff bfb8 	b.w	80800b6 <cmd_error_create>

08080146 <cmd_error_create_unclosed_quote>:
}

cmd_error* cmd_error_create_unclosed_quote(cmd* c, arg* a, word_node* arg_value) {
    return cmd_error_create(CMD_UNCLOSED_QUOTE, c, a, arg_value);
 8080146:	4613      	mov	r3, r2
 8080148:	460a      	mov	r2, r1
 808014a:	4601      	mov	r1, r0
 808014c:	2005      	movs	r0, #5
 808014e:	f7ff bfb2 	b.w	80800b6 <cmd_error_create>

08080152 <cmd_error_copy>:
}

// Copy Constructors
cmd_error* cmd_error_copy(cmd_error* e) {
 8080152:	b538      	push	{r3, r4, r5, lr}
    if (!e) return NULL;
 8080154:	4605      	mov	r5, r0
 8080156:	b1c8      	cbz	r0, 808018c <cmd_error_copy+0x3a>

    cmd_error* ne = (cmd_error*)malloc(sizeof(cmd_error));
 8080158:	2014      	movs	r0, #20
 808015a:	f004 f927 	bl	80843ac <malloc>

    ne->mode     = e->mode;
 808015e:	682b      	ldr	r3, [r5, #0]

// Copy Constructors
cmd_error* cmd_error_copy(cmd_error* e) {
    if (!e) return NULL;

    cmd_error* ne = (cmd_error*)malloc(sizeof(cmd_error));
 8080160:	4604      	mov	r4, r0

    ne->mode     = e->mode;
 8080162:	6003      	str	r3, [r0, #0]
    ne->command  = e->command;
 8080164:	686b      	ldr	r3, [r5, #4]
 8080166:	6043      	str	r3, [r0, #4]
    ne->argument = e->argument;
 8080168:	68ab      	ldr	r3, [r5, #8]
 808016a:	6083      	str	r3, [r0, #8]
    ne->data     = e->data;
 808016c:	68eb      	ldr	r3, [r5, #12]
 808016e:	60c3      	str	r3, [r0, #12]
    ne->next     = e->next;
 8080170:	692a      	ldr	r2, [r5, #16]
 8080172:	6102      	str	r2, [r0, #16]

    if (ne->data) {
 8080174:	b15b      	cbz	r3, 808018e <cmd_error_copy+0x3c>
        ne->data = (char*)malloc(strlen(e->data) + 1);
 8080176:	68e8      	ldr	r0, [r5, #12]
 8080178:	f007 ff4c 	bl	8088014 <strlen>
 808017c:	3001      	adds	r0, #1
 808017e:	f004 f915 	bl	80843ac <malloc>
 8080182:	60e0      	str	r0, [r4, #12]
        strcpy(ne->data, e->data);
 8080184:	68e9      	ldr	r1, [r5, #12]
 8080186:	f007 fa0d 	bl	80875a4 <strcpy>
 808018a:	e000      	b.n	808018e <cmd_error_copy+0x3c>
 808018c:	bd38      	pop	{r3, r4, r5, pc}
 808018e:	4620      	mov	r0, r4
    }

    return ne;
}
 8080190:	bd38      	pop	{r3, r4, r5, pc}

08080192 <cmd_error_destroy>:

    return ne;
}

// Destructors
cmd_error* cmd_error_destroy(cmd_error* e) {
 8080192:	b510      	push	{r4, lr}
    if (e) {
 8080194:	4604      	mov	r4, r0
 8080196:	b130      	cbz	r0, 80801a6 <cmd_error_destroy+0x14>
        if (e->data) free(e->data);
 8080198:	68c0      	ldr	r0, [r0, #12]
 808019a:	b108      	cbz	r0, 80801a0 <cmd_error_destroy+0xe>
 808019c:	f004 f90e 	bl	80843bc <free>
        free(e);
 80801a0:	4620      	mov	r0, r4
 80801a2:	f004 f90b 	bl	80843bc <free>
    }
    return NULL;
}
 80801a6:	2000      	movs	r0, #0
 80801a8:	bd10      	pop	{r4, pc}

080801aa <cmd_error_destroy_rec>:

cmd_error* cmd_error_destroy_rec(cmd_error* e) {
 80801aa:	b510      	push	{r4, lr}
    if (e) {
 80801ac:	4604      	mov	r4, r0
 80801ae:	b128      	cbz	r0, 80801bc <cmd_error_destroy_rec+0x12>
        cmd_error_destroy_rec(e->next);
 80801b0:	6900      	ldr	r0, [r0, #16]
 80801b2:	f7ff fffa 	bl	80801aa <cmd_error_destroy_rec>
        cmd_error_destroy(e);
 80801b6:	4620      	mov	r0, r4
 80801b8:	f7ff ffeb 	bl	8080192 <cmd_error_destroy>
    }
    return NULL;
}
 80801bc:	2000      	movs	r0, #0
 80801be:	bd10      	pop	{r4, pc}

080801c0 <cmd_error_push>:

// Push
cmd_error* cmd_error_push(cmd_error* l, cmd_error* e, int max_size) {
    if (max_size < 1) {
 80801c0:	2a00      	cmp	r2, #0
    }
    return NULL;
}

// Push
cmd_error* cmd_error_push(cmd_error* l, cmd_error* e, int max_size) {
 80801c2:	b538      	push	{r3, r4, r5, lr}
 80801c4:	4603      	mov	r3, r0
 80801c6:	460c      	mov	r4, r1
    if (max_size < 1) {
 80801c8:	dc06      	bgt.n	80801d8 <cmd_error_push+0x18>
        cmd_error_destroy_rec(l);
 80801ca:	f7ff ffee 	bl	80801aa <cmd_error_destroy_rec>
        cmd_error_destroy(e);
 80801ce:	4620      	mov	r0, r4
 80801d0:	f7ff ffdf 	bl	8080192 <cmd_error_destroy>
        return NULL;
 80801d4:	2000      	movs	r0, #0
 80801d6:	bd38      	pop	{r3, r4, r5, pc}
    }

    if (!l) return e;
 80801d8:	b160      	cbz	r0, 80801f4 <cmd_error_push+0x34>
 80801da:	2101      	movs	r1, #1

    cmd_error* h = l;
    int i        = 1;

    while (h->next) {
 80801dc:	6905      	ldr	r5, [r0, #16]
 80801de:	b115      	cbz	r5, 80801e6 <cmd_error_push+0x26>
        h = h->next;
        ++i;
 80801e0:	3101      	adds	r1, #1
 80801e2:	4628      	mov	r0, r5
 80801e4:	e7fa      	b.n	80801dc <cmd_error_push+0x1c>
    }

    h->next = e;

    // Remove first element if list is too big
    if (i > max_size) {
 80801e6:	4291      	cmp	r1, r2
    while (h->next) {
        h = h->next;
        ++i;
    }

    h->next = e;
 80801e8:	6104      	str	r4, [r0, #16]

    // Remove first element if list is too big
    if (i > max_size) {
 80801ea:	dd05      	ble.n	80801f8 <cmd_error_push+0x38>
        cmd_error* ptr = l;
        l = l->next;
        cmd_error_destroy(ptr);
 80801ec:	4618      	mov	r0, r3
    h->next = e;

    // Remove first element if list is too big
    if (i > max_size) {
        cmd_error* ptr = l;
        l = l->next;
 80801ee:	691c      	ldr	r4, [r3, #16]
        cmd_error_destroy(ptr);
 80801f0:	f7ff ffcf 	bl	8080192 <cmd_error_destroy>
        cmd_error_destroy_rec(l);
        cmd_error_destroy(e);
        return NULL;
    }

    if (!l) return e;
 80801f4:	4620      	mov	r0, r4
 80801f6:	bd38      	pop	{r3, r4, r5, pc}
 80801f8:	4618      	mov	r0, r3
        l = l->next;
        cmd_error_destroy(ptr);
    }

    return l;
 80801fa:	bd38      	pop	{r3, r4, r5, pc}

080801fc <cmd_create>:
#include "c/arg.h"

// ===== CMD ===== //

// CMD Constructors
cmd* cmd_create(const char* name, unsigned int mode) {
 80801fc:	b538      	push	{r3, r4, r5, lr}
 80801fe:	460d      	mov	r5, r1
    if (!name) return NULL;
 8080200:	4604      	mov	r4, r0
 8080202:	b1b8      	cbz	r0, 8080234 <cmd_create+0x38>

    cmd* c = (cmd*)malloc(sizeof(cmd));
 8080204:	201c      	movs	r0, #28
 8080206:	f004 f8d1 	bl	80843ac <malloc>

    c->name           = name;
    c->mode           = mode % 3;
 808020a:	2303      	movs	r3, #3
 808020c:	fbb5 f3f3 	udiv	r3, r5, r3
 8080210:	7902      	ldrb	r2, [r0, #4]
 8080212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8080216:	1aeb      	subs	r3, r5, r3
 8080218:	f363 0201 	bfi	r2, r3, #0, #2
 808021c:	7102      	strb	r2, [r0, #4]
    c->arg_list       = NULL;
    c->case_sensetive = COMPARE_CASE_INSENSETIVE;
 808021e:	7b02      	ldrb	r2, [r0, #12]

    cmd* c = (cmd*)malloc(sizeof(cmd));

    c->name           = name;
    c->mode           = mode % 3;
    c->arg_list       = NULL;
 8080220:	2300      	movs	r3, #0
    c->case_sensetive = COMPARE_CASE_INSENSETIVE;
 8080222:	f363 0200 	bfi	r2, r3, #0, #1
cmd* cmd_create(const char* name, unsigned int mode) {
    if (!name) return NULL;

    cmd* c = (cmd*)malloc(sizeof(cmd));

    c->name           = name;
 8080226:	6004      	str	r4, [r0, #0]
    c->mode           = mode % 3;
    c->arg_list       = NULL;
 8080228:	6083      	str	r3, [r0, #8]
    c->case_sensetive = COMPARE_CASE_INSENSETIVE;
 808022a:	7302      	strb	r2, [r0, #12]
    c->callback       = NULL;
 808022c:	6103      	str	r3, [r0, #16]
    c->description    = NULL;
 808022e:	6143      	str	r3, [r0, #20]
    c->next           = NULL;
 8080230:	6183      	str	r3, [r0, #24]

    return c;
 8080232:	bd38      	pop	{r3, r4, r5, pc}
}
 8080234:	bd38      	pop	{r3, r4, r5, pc}

08080236 <cmd_create_default>:

cmd* cmd_create_default(const char* name) {
    return cmd_create(name, CMD_DEFAULT);
 8080236:	2100      	movs	r1, #0
 8080238:	f7ff bfe0 	b.w	80801fc <cmd_create>

0808023c <cmd_copy>:
    c->arg_list = arg_create_opt_positional(NULL, NULL);
    return c;
}

// Copy & Move Constructors
cmd* cmd_copy(cmd* c) {
 808023c:	b538      	push	{r3, r4, r5, lr}
    if (!c) return NULL;
 808023e:	4604      	mov	r4, r0
 8080240:	b1d8      	cbz	r0, 808027a <cmd_copy+0x3e>

    cmd* nc = (cmd*)malloc(sizeof(cmd));
 8080242:	201c      	movs	r0, #28
 8080244:	f004 f8b2 	bl	80843ac <malloc>

    nc->name           = c->name;
 8080248:	6823      	ldr	r3, [r4, #0]

// Copy & Move Constructors
cmd* cmd_copy(cmd* c) {
    if (!c) return NULL;

    cmd* nc = (cmd*)malloc(sizeof(cmd));
 808024a:	4605      	mov	r5, r0

    nc->name           = c->name;
 808024c:	6003      	str	r3, [r0, #0]
    nc->mode           = c->mode;
 808024e:	7922      	ldrb	r2, [r4, #4]
 8080250:	7903      	ldrb	r3, [r0, #4]
 8080252:	f362 0301 	bfi	r3, r2, #0, #2
 8080256:	7103      	strb	r3, [r0, #4]
    nc->arg_list       = arg_copy_rec(c->arg_list);
 8080258:	68a0      	ldr	r0, [r4, #8]
 808025a:	f000 fb27 	bl	80808ac <arg_copy_rec>
 808025e:	60a8      	str	r0, [r5, #8]
    nc->case_sensetive = c->case_sensetive;
 8080260:	7b22      	ldrb	r2, [r4, #12]
 8080262:	7b2b      	ldrb	r3, [r5, #12]
    nc->callback       = c->callback;
    nc->description    = c->description;
    nc->next           = NULL;

    return nc;
 8080264:	4628      	mov	r0, r5
    cmd* nc = (cmd*)malloc(sizeof(cmd));

    nc->name           = c->name;
    nc->mode           = c->mode;
    nc->arg_list       = arg_copy_rec(c->arg_list);
    nc->case_sensetive = c->case_sensetive;
 8080266:	f362 0300 	bfi	r3, r2, #0, #1
 808026a:	732b      	strb	r3, [r5, #12]
    nc->callback       = c->callback;
 808026c:	6923      	ldr	r3, [r4, #16]
 808026e:	612b      	str	r3, [r5, #16]
    nc->description    = c->description;
 8080270:	6963      	ldr	r3, [r4, #20]
 8080272:	616b      	str	r3, [r5, #20]
    nc->next           = NULL;
 8080274:	2300      	movs	r3, #0
 8080276:	61ab      	str	r3, [r5, #24]

    return nc;
 8080278:	bd38      	pop	{r3, r4, r5, pc}
}
 808027a:	bd38      	pop	{r3, r4, r5, pc}

0808027c <cmd_move>:
    nc->next = cmd_copy_rec(c->next);

    return nc;
}

cmd* cmd_move(cmd* c) {
 808027c:	b538      	push	{r3, r4, r5, lr}
    if (!c) return NULL;
 808027e:	4604      	mov	r4, r0
 8080280:	b1d8      	cbz	r0, 80802ba <cmd_move+0x3e>

    cmd* nc = (cmd*)malloc(sizeof(cmd));
 8080282:	201c      	movs	r0, #28
 8080284:	f004 f892 	bl	80843ac <malloc>

    nc->name           = c->name;
 8080288:	6823      	ldr	r3, [r4, #0]
}

cmd* cmd_move(cmd* c) {
    if (!c) return NULL;

    cmd* nc = (cmd*)malloc(sizeof(cmd));
 808028a:	4605      	mov	r5, r0

    nc->name           = c->name;
 808028c:	6003      	str	r3, [r0, #0]
    nc->mode           = c->mode;
 808028e:	7922      	ldrb	r2, [r4, #4]
 8080290:	7903      	ldrb	r3, [r0, #4]
 8080292:	f362 0301 	bfi	r3, r2, #0, #2
 8080296:	7103      	strb	r3, [r0, #4]
    nc->arg_list       = arg_move_rec(c->arg_list);
 8080298:	68a0      	ldr	r0, [r4, #8]
 808029a:	f000 fb3c 	bl	8080916 <arg_move_rec>
 808029e:	60a8      	str	r0, [r5, #8]
    nc->case_sensetive = c->case_sensetive;
 80802a0:	7b22      	ldrb	r2, [r4, #12]
 80802a2:	7b2b      	ldrb	r3, [r5, #12]
    nc->callback       = c->callback;
    nc->description    = c->description;
    nc->next           = NULL;

    return nc;
 80802a4:	4628      	mov	r0, r5
    cmd* nc = (cmd*)malloc(sizeof(cmd));

    nc->name           = c->name;
    nc->mode           = c->mode;
    nc->arg_list       = arg_move_rec(c->arg_list);
    nc->case_sensetive = c->case_sensetive;
 80802a6:	f362 0300 	bfi	r3, r2, #0, #1
 80802aa:	732b      	strb	r3, [r5, #12]
    nc->callback       = c->callback;
 80802ac:	6923      	ldr	r3, [r4, #16]
 80802ae:	612b      	str	r3, [r5, #16]
    nc->description    = c->description;
 80802b0:	6963      	ldr	r3, [r4, #20]
 80802b2:	616b      	str	r3, [r5, #20]
    nc->next           = NULL;
 80802b4:	2300      	movs	r3, #0
 80802b6:	61ab      	str	r3, [r5, #24]

    return nc;
 80802b8:	bd38      	pop	{r3, r4, r5, pc}
}
 80802ba:	bd38      	pop	{r3, r4, r5, pc}

080802bc <cmd_destroy>:

    return nc;
}

// Destructors
cmd* cmd_destroy(cmd* c) {
 80802bc:	b510      	push	{r4, lr}
    if (c) {
 80802be:	4604      	mov	r4, r0
 80802c0:	b128      	cbz	r0, 80802ce <cmd_destroy+0x12>
        arg_destroy_rec(c->arg_list);
 80802c2:	6880      	ldr	r0, [r0, #8]
 80802c4:	f000 fb4c 	bl	8080960 <arg_destroy_rec>
        free(c);
 80802c8:	4620      	mov	r0, r4
 80802ca:	f004 f877 	bl	80843bc <free>
    }
    return NULL;
}
 80802ce:	2000      	movs	r0, #0
 80802d0:	bd10      	pop	{r4, pc}

080802d2 <cmd_destroy_rec>:

cmd* cmd_destroy_rec(cmd* c) {
 80802d2:	b510      	push	{r4, lr}
    if (c) {
 80802d4:	4604      	mov	r4, r0
 80802d6:	b128      	cbz	r0, 80802e4 <cmd_destroy_rec+0x12>
        cmd_destroy_rec(c->next);
 80802d8:	6980      	ldr	r0, [r0, #24]
 80802da:	f7ff fffa 	bl	80802d2 <cmd_destroy_rec>
        cmd_destroy(c);
 80802de:	4620      	mov	r0, r4
 80802e0:	f7ff ffec 	bl	80802bc <cmd_destroy>
    }
    return NULL;
}
 80802e4:	2000      	movs	r0, #0
 80802e6:	bd10      	pop	{r4, pc}

080802e8 <cmd_push>:

// Push CMD and Push Arg
cmd* cmd_push(cmd* l, cmd* c, int max_size) {
    if (max_size < 1) {
 80802e8:	2a00      	cmp	r2, #0
    }
    return NULL;
}

// Push CMD and Push Arg
cmd* cmd_push(cmd* l, cmd* c, int max_size) {
 80802ea:	b538      	push	{r3, r4, r5, lr}
 80802ec:	4603      	mov	r3, r0
 80802ee:	460c      	mov	r4, r1
    if (max_size < 1) {
 80802f0:	dc06      	bgt.n	8080300 <cmd_push+0x18>
        cmd_destroy_rec(l);
 80802f2:	f7ff ffee 	bl	80802d2 <cmd_destroy_rec>
        cmd_destroy(c);
 80802f6:	4620      	mov	r0, r4
 80802f8:	f7ff ffe0 	bl	80802bc <cmd_destroy>
        return NULL;
 80802fc:	2000      	movs	r0, #0
 80802fe:	bd38      	pop	{r3, r4, r5, pc}
    }

    if (!l) return c;
 8080300:	b160      	cbz	r0, 808031c <cmd_push+0x34>
 8080302:	2101      	movs	r1, #1

    cmd* h = l;
    int  i = 1;

    while (h->next) {
 8080304:	6985      	ldr	r5, [r0, #24]
 8080306:	b115      	cbz	r5, 808030e <cmd_push+0x26>
        h = h->next;
        ++i;
 8080308:	3101      	adds	r1, #1
 808030a:	4628      	mov	r0, r5
 808030c:	e7fa      	b.n	8080304 <cmd_push+0x1c>
    }

    h->next = c;

    // Remove first element if list is too big
    if (i > max_size) {
 808030e:	4291      	cmp	r1, r2
    while (h->next) {
        h = h->next;
        ++i;
    }

    h->next = c;
 8080310:	6184      	str	r4, [r0, #24]

    // Remove first element if list is too big
    if (i > max_size) {
 8080312:	dd05      	ble.n	8080320 <cmd_push+0x38>
        cmd* ptr = l;
        l = l->next;
        cmd_destroy(ptr);
 8080314:	4618      	mov	r0, r3
    h->next = c;

    // Remove first element if list is too big
    if (i > max_size) {
        cmd* ptr = l;
        l = l->next;
 8080316:	699c      	ldr	r4, [r3, #24]
        cmd_destroy(ptr);
 8080318:	f7ff ffd0 	bl	80802bc <cmd_destroy>
        cmd_destroy_rec(l);
        cmd_destroy(c);
        return NULL;
    }

    if (!l) return c;
 808031c:	4620      	mov	r0, r4
 808031e:	bd38      	pop	{r3, r4, r5, pc}
 8080320:	4618      	mov	r0, r3
        l = l->next;
        cmd_destroy(ptr);
    }

    return l;
}
 8080322:	bd38      	pop	{r3, r4, r5, pc}

08080324 <cmd_add_arg>:

cmd* cmd_add_arg(cmd* c, arg* a) {
    if (c && a) {
 8080324:	b158      	cbz	r0, 808033e <cmd_add_arg+0x1a>
 8080326:	b151      	cbz	r1, 808033e <cmd_add_arg+0x1a>
        arg* h = c->arg_list;
 8080328:	6883      	ldr	r3, [r0, #8]

        if (!h) {
 808032a:	b90b      	cbnz	r3, 8080330 <cmd_add_arg+0xc>
            c->arg_list = a;
 808032c:	6081      	str	r1, [r0, #8]
 808032e:	e004      	b.n	808033a <cmd_add_arg+0x16>
        } else {
            while (h->next) h = h->next;
 8080330:	691a      	ldr	r2, [r3, #16]
 8080332:	b10a      	cbz	r2, 8080338 <cmd_add_arg+0x14>
 8080334:	4613      	mov	r3, r2
 8080336:	e7fb      	b.n	8080330 <cmd_add_arg+0xc>
            h->next = a;
 8080338:	6119      	str	r1, [r3, #16]
        }

        a->next = NULL;
 808033a:	2300      	movs	r3, #0
 808033c:	610b      	str	r3, [r1, #16]
    }
    return c;
}
 808033e:	4770      	bx	lr

08080340 <cmd_reset>:

// Reset CMD
void cmd_reset(cmd* c) {
 8080340:	b510      	push	{r4, lr}
    if (c) {
 8080342:	4604      	mov	r4, r0
 8080344:	b170      	cbz	r0, 8080364 <cmd_reset+0x24>
        if (c->mode == CMD_BOUNDLESS) {
 8080346:	7903      	ldrb	r3, [r0, #4]
            arg_destroy_rec(c->arg_list);
 8080348:	6880      	ldr	r0, [r0, #8]
}

// Reset CMD
void cmd_reset(cmd* c) {
    if (c) {
        if (c->mode == CMD_BOUNDLESS) {
 808034a:	f003 0303 	and.w	r3, r3, #3
 808034e:	2b01      	cmp	r3, #1
 8080350:	d104      	bne.n	808035c <cmd_reset+0x1c>
            arg_destroy_rec(c->arg_list);
 8080352:	f000 fb05 	bl	8080960 <arg_destroy_rec>
            c->arg_list = NULL;
 8080356:	2300      	movs	r3, #0
 8080358:	60a3      	str	r3, [r4, #8]
 808035a:	bd10      	pop	{r4, pc}
        } else {
            arg_reset_rec(c->arg_list);
        }
    }
}
 808035c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (c) {
        if (c->mode == CMD_BOUNDLESS) {
            arg_destroy_rec(c->arg_list);
            c->arg_list = NULL;
        } else {
            arg_reset_rec(c->arg_list);
 8080360:	f000 bb09 	b.w	8080976 <arg_reset_rec>
 8080364:	bd10      	pop	{r4, pc}

08080366 <cmd_parse>:
    if (a == b) return CMD_NAME_EQUALS;
    return cmd_name_equals(a, b->name, strlen(b->name), case_sensetive);
}

// Parser
cmd_error* cmd_parse(cmd* c, line_node* n) {
 8080366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808036a:	4688      	mov	r8, r1
    if (!c || !n) return cmd_error_create_null_ptr(c);
 808036c:	4604      	mov	r4, r0
 808036e:	b100      	cbz	r0, 8080372 <cmd_parse+0xc>
 8080370:	b921      	cbnz	r1, 808037c <cmd_parse+0x16>
 8080372:	4620      	mov	r0, r4
        }
        a = a->next;
    }

    return cmd_error_create_parse_success(c);
}
 8080374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return cmd_name_equals(a, b->name, strlen(b->name), case_sensetive);
}

// Parser
cmd_error* cmd_parse(cmd* c, line_node* n) {
    if (!c || !n) return cmd_error_create_null_ptr(c);
 8080378:	f7ff bebf 	b.w	80800fa <cmd_error_create_null_ptr>
    if (!n->words || (n->words->size == 0) || !n->words->first) return cmd_error_create_empty_line(c);
 808037c:	688f      	ldr	r7, [r1, #8]
 808037e:	b11f      	cbz	r7, 8080388 <cmd_parse+0x22>
 8080380:	68bb      	ldr	r3, [r7, #8]
 8080382:	b10b      	cbz	r3, 8080388 <cmd_parse+0x22>
 8080384:	683e      	ldr	r6, [r7, #0]
 8080386:	b926      	cbnz	r6, 8080392 <cmd_parse+0x2c>
 8080388:	4620      	mov	r0, r4
        }
        a = a->next;
    }

    return cmd_error_create_parse_success(c);
}
 808038a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

// Parser
cmd_error* cmd_parse(cmd* c, line_node* n) {
    if (!c || !n) return cmd_error_create_null_ptr(c);
    if (!n->words || (n->words->size == 0) || !n->words->first) return cmd_error_create_empty_line(c);
 808038e:	f7ff bebb 	b.w	8080108 <cmd_error_create_empty_line>
    word_list* wl        = n->words;
    word_node* cmd_name  = wl->first;
    word_node* first_arg = cmd_name->next;

    // Check if name equals command name
    if (compare(cmd_name->str, cmd_name->len, c->name, c->case_sensetive) == COMPARE_UNEQUAL) return cmd_error_create_not_found(c, cmd_name);
 8080392:	7b03      	ldrb	r3, [r0, #12]
 8080394:	6802      	ldr	r2, [r0, #0]
 8080396:	f003 0301 	and.w	r3, r3, #1
 808039a:	e896 0003 	ldmia.w	r6, {r0, r1}
    if (!c || !n) return cmd_error_create_null_ptr(c);
    if (!n->words || (n->words->size == 0) || !n->words->first) return cmd_error_create_empty_line(c);

    word_list* wl        = n->words;
    word_node* cmd_name  = wl->first;
    word_node* first_arg = cmd_name->next;
 808039e:	68b5      	ldr	r5, [r6, #8]

    // Check if name equals command name
    if (compare(cmd_name->str, cmd_name->len, c->name, c->case_sensetive) == COMPARE_UNEQUAL) return cmd_error_create_not_found(c, cmd_name);
 80803a0:	f000 f9af 	bl	8080702 <compare>
 80803a4:	b928      	cbnz	r0, 80803b2 <cmd_parse+0x4c>
 80803a6:	4631      	mov	r1, r6
 80803a8:	4620      	mov	r0, r4
        }
        a = a->next;
    }

    return cmd_error_create_parse_success(c);
}
 80803aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    word_list* wl        = n->words;
    word_node* cmd_name  = wl->first;
    word_node* first_arg = cmd_name->next;

    // Check if name equals command name
    if (compare(cmd_name->str, cmd_name->len, c->name, c->case_sensetive) == COMPARE_UNEQUAL) return cmd_error_create_not_found(c, cmd_name);
 80803ae:	f7ff beb8 	b.w	8080122 <cmd_error_create_not_found>

    // When command boundless, set all words as anonymous args
    if (c->mode == CMD_BOUNDLESS) {
 80803b2:	7923      	ldrb	r3, [r4, #4]
 80803b4:	f003 0303 	and.w	r3, r3, #3
 80803b8:	2b01      	cmp	r3, #1
 80803ba:	d113      	bne.n	80803e4 <cmd_parse+0x7e>
        // Delete all old args
        arg_destroy_rec(c->arg_list);
 80803bc:	68a0      	ldr	r0, [r4, #8]
 80803be:	f000 facf 	bl	8080960 <arg_destroy_rec>
        c->arg_list = NULL;
 80803c2:	2300      	movs	r3, #0
 80803c4:	60a3      	str	r3, [r4, #8]

        // Fill command with an anonymous arg for each word
        word_node* w = first_arg;

        while (w) {
 80803c6:	b33d      	cbz	r5, 8080418 <cmd_parse+0xb2>
            arg* a = arg_create_req_positional(NULL);
 80803c8:	2000      	movs	r0, #0
 80803ca:	f000 fa36 	bl	808083a <arg_create_req_positional>
            arg_set_value(a, w->str, w->len);
 80803ce:	e895 0006 	ldmia.w	r5, {r1, r2}

        // Fill command with an anonymous arg for each word
        word_node* w = first_arg;

        while (w) {
            arg* a = arg_create_req_positional(NULL);
 80803d2:	4606      	mov	r6, r0
            arg_set_value(a, w->str, w->len);
 80803d4:	f000 faf4 	bl	80809c0 <arg_set_value>
            cmd_add_arg(c, a);
 80803d8:	4631      	mov	r1, r6
 80803da:	4620      	mov	r0, r4
 80803dc:	f7ff ffa2 	bl	8080324 <cmd_add_arg>
            w = w->next;
 80803e0:	68ad      	ldr	r5, [r5, #8]
 80803e2:	e7f0      	b.n	80803c6 <cmd_parse+0x60>

        return cmd_error_create_parse_success(c);
    }

    // When command single-arg, set full string as first arg
    if (c->mode == CMD_SINGLE) {
 80803e4:	2b02      	cmp	r3, #2
 80803e6:	d13b      	bne.n	8080460 <cmd_parse+0xfa>
        if (!c->arg_list) c->arg_list = arg_create_opt_positional(NULL, NULL);
 80803e8:	68a1      	ldr	r1, [r4, #8]
 80803ea:	b919      	cbnz	r1, 80803f4 <cmd_parse+0x8e>
 80803ec:	4608      	mov	r0, r1
 80803ee:	f000 fa20 	bl	8080832 <arg_create_opt_positional>
 80803f2:	60a0      	str	r0, [r4, #8]
        if (wl->size > 1) arg_set_value(c->arg_list, first_arg->str, n->len - cmd_name->len - 1);
 80803f4:	68bb      	ldr	r3, [r7, #8]
 80803f6:	2b01      	cmp	r3, #1
 80803f8:	d90e      	bls.n	8080418 <cmd_parse+0xb2>
 80803fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80803fe:	6872      	ldr	r2, [r6, #4]
 8080400:	3b01      	subs	r3, #1
 8080402:	1a9a      	subs	r2, r3, r2
 8080404:	6829      	ldr	r1, [r5, #0]
 8080406:	68a0      	ldr	r0, [r4, #8]
 8080408:	f000 fada 	bl	80809c0 <arg_set_value>
 808040c:	e004      	b.n	8080418 <cmd_parse+0xb2>

            // Default Arg -> value in next word
            case ARG_DEFAULT:
                if (!nw) return cmd_error_create_missing_arg(c, a);
                if (arg_set_value(a, nw->str, nw->len) == ARG_VALUE_FAIL) return cmd_error_create_unclosed_quote(c, a, nw);
                w  = w->next;
 808040e:	68ad      	ldr	r5, [r5, #8]
                nw = w ? w->next : NULL;
 8080410:	bb2d      	cbnz	r5, 808045e <cmd_parse+0xf8>
            nw = w ? w->next : NULL;
        }
    }

    // Check if all required args have been set
    arg* a = c->arg_list;
 8080412:	68a1      	ldr	r1, [r4, #8]

    while (a) {
 8080414:	2900      	cmp	r1, #0
 8080416:	d134      	bne.n	8080482 <cmd_parse+0x11c>
            return cmd_error_create_missing_arg(c, a);
        }
        a = a->next;
    }

    return cmd_error_create_parse_success(c);
 8080418:	4620      	mov	r0, r4
}
 808041a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            return cmd_error_create_missing_arg(c, a);
        }
        a = a->next;
    }

    return cmd_error_create_parse_success(c);
 808041e:	f7ff be7a 	b.w	8080116 <cmd_error_create_parse_success>
    word_node* nw = w ? w->next : NULL;

    while (w) {
        // Look for arg which matches the word name
        arg* a      = c->arg_list;
        char prefix = w->str[0];
 8080422:	682b      	ldr	r3, [r5, #0]
        return cmd_error_create_parse_success(c);
    }

    // Go through all words and try to find a matching arg
    word_node* w  = first_arg;
    word_node* nw = w ? w->next : NULL;
 8080424:	68af      	ldr	r7, [r5, #8]

    while (w) {
        // Look for arg which matches the word name
        arg* a      = c->arg_list;
 8080426:	68a6      	ldr	r6, [r4, #8]
        char prefix = w->str[0];
 8080428:	f893 8000 	ldrb.w	r8, [r3]

        while (a) {
 808042c:	2e00      	cmp	r6, #0
 808042e:	d04b      	beq.n	80804c8 <cmd_parse+0x162>
            if (a->set == ARG_UNSET) {
 8080430:	7b33      	ldrb	r3, [r6, #12]
 8080432:	071a      	lsls	r2, r3, #28
 8080434:	d417      	bmi.n	8080466 <cmd_parse+0x100>
                if ((prefix != '-') && (a->mode == ARG_POS)) break;
 8080436:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
 808043a:	d016      	beq.n	808046a <cmd_parse+0x104>
 808043c:	f003 0303 	and.w	r3, r3, #3
 8080440:	2b01      	cmp	r3, #1
                if ((prefix == '-') && (compare(&w->str[1], w->len - 1, a->name, c->case_sensetive) == COMPARE_EQUAL)) break;
 8080442:	d110      	bne.n	8080466 <cmd_parse+0x100>
        }

        // No mathing arg found
        if (!a) return cmd_error_create_unknown_arg(c, w);

        switch (a->mode) {
 8080444:	7b33      	ldrb	r3, [r6, #12]
 8080446:	f003 0303 	and.w	r3, r3, #3
 808044a:	2b01      	cmp	r3, #1
 808044c:	d125      	bne.n	808049a <cmd_parse+0x134>
            // Anonym, Template Arg -> value = value
            case ARG_POS:
                if (prefix != '-') {
 808044e:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
 8080452:	d023      	beq.n	808049c <cmd_parse+0x136>
                    arg_set_value(a, w->str, w->len);
 8080454:	e895 0006 	ldmia.w	r5, {r1, r2}
                nw = w ? w->next : NULL;
                break;

            // Empty Arg -> no value
            case ARG_FLAG:
                arg_set_value(a, NULL, 0);
 8080458:	4630      	mov	r0, r6
 808045a:	f000 fab1 	bl	80809c0 <arg_set_value>
                break;
        }

        // Next word
        if (w) {
            w  = w->next;
 808045e:	68ad      	ldr	r5, [r5, #8]
            nw = w ? w->next : NULL;
 8080460:	2d00      	cmp	r5, #0
 8080462:	d1de      	bne.n	8080422 <cmd_parse+0xbc>
 8080464:	e7d5      	b.n	8080412 <cmd_parse+0xac>
        while (a) {
            if (a->set == ARG_UNSET) {
                if ((prefix != '-') && (a->mode == ARG_POS)) break;
                if ((prefix == '-') && (compare(&w->str[1], w->len - 1, a->name, c->case_sensetive) == COMPARE_EQUAL)) break;
            }
            a = a->next;
 8080466:	6936      	ldr	r6, [r6, #16]
 8080468:	e7e0      	b.n	808042c <cmd_parse+0xc6>
        char prefix = w->str[0];

        while (a) {
            if (a->set == ARG_UNSET) {
                if ((prefix != '-') && (a->mode == ARG_POS)) break;
                if ((prefix == '-') && (compare(&w->str[1], w->len - 1, a->name, c->case_sensetive) == COMPARE_EQUAL)) break;
 808046a:	7b23      	ldrb	r3, [r4, #12]
 808046c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8080470:	f003 0301 	and.w	r3, r3, #1
 8080474:	6832      	ldr	r2, [r6, #0]
 8080476:	3901      	subs	r1, #1
 8080478:	3001      	adds	r0, #1
 808047a:	f000 f942 	bl	8080702 <compare>
 808047e:	2801      	cmp	r0, #1
 8080480:	e7df      	b.n	8080442 <cmd_parse+0xdc>

    // Check if all required args have been set
    arg* a = c->arg_list;

    while (a) {
        if (a->req && !a->set) {
 8080482:	7b0b      	ldrb	r3, [r1, #12]
 8080484:	f003 030c 	and.w	r3, r3, #12
 8080488:	2b04      	cmp	r3, #4
 808048a:	d104      	bne.n	8080496 <cmd_parse+0x130>
            return cmd_error_create_missing_arg(c, a);
 808048c:	4620      	mov	r0, r4
        }
        a = a->next;
    }

    return cmd_error_create_parse_success(c);
}
 808048e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // Check if all required args have been set
    arg* a = c->arg_list;

    while (a) {
        if (a->req && !a->set) {
            return cmd_error_create_missing_arg(c, a);
 8080492:	f7ff be52 	b.w	808013a <cmd_error_create_missing_arg>
        }
        a = a->next;
 8080496:	6909      	ldr	r1, [r1, #16]
 8080498:	e7bc      	b.n	8080414 <cmd_parse+0xae>
        }

        // No mathing arg found
        if (!a) return cmd_error_create_unknown_arg(c, w);

        switch (a->mode) {
 808049a:	d210      	bcs.n	80804be <cmd_parse+0x158>
                    break;
                }

            // Default Arg -> value in next word
            case ARG_DEFAULT:
                if (!nw) return cmd_error_create_missing_arg(c, a);
 808049c:	b90f      	cbnz	r7, 80804a2 <cmd_parse+0x13c>
 808049e:	4631      	mov	r1, r6
 80804a0:	e7f4      	b.n	808048c <cmd_parse+0x126>
                if (arg_set_value(a, nw->str, nw->len) == ARG_VALUE_FAIL) return cmd_error_create_unclosed_quote(c, a, nw);
 80804a2:	e897 0006 	ldmia.w	r7, {r1, r2}
 80804a6:	4630      	mov	r0, r6
 80804a8:	f000 fa8a 	bl	80809c0 <arg_set_value>
 80804ac:	2800      	cmp	r0, #0
 80804ae:	d1ae      	bne.n	808040e <cmd_parse+0xa8>
 80804b0:	463a      	mov	r2, r7
 80804b2:	4631      	mov	r1, r6
 80804b4:	4620      	mov	r0, r4
        }
        a = a->next;
    }

    return cmd_error_create_parse_success(c);
}
 80804b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                }

            // Default Arg -> value in next word
            case ARG_DEFAULT:
                if (!nw) return cmd_error_create_missing_arg(c, a);
                if (arg_set_value(a, nw->str, nw->len) == ARG_VALUE_FAIL) return cmd_error_create_unclosed_quote(c, a, nw);
 80804ba:	f7ff be44 	b.w	8080146 <cmd_error_create_unclosed_quote>
        }

        // No mathing arg found
        if (!a) return cmd_error_create_unknown_arg(c, w);

        switch (a->mode) {
 80804be:	2b02      	cmp	r3, #2
 80804c0:	d1cd      	bne.n	808045e <cmd_parse+0xf8>
                nw = w ? w->next : NULL;
                break;

            // Empty Arg -> no value
            case ARG_FLAG:
                arg_set_value(a, NULL, 0);
 80804c2:	2200      	movs	r2, #0
 80804c4:	4611      	mov	r1, r2
 80804c6:	e7c7      	b.n	8080458 <cmd_parse+0xf2>
            }
            a = a->next;
        }

        // No mathing arg found
        if (!a) return cmd_error_create_unknown_arg(c, w);
 80804c8:	4629      	mov	r1, r5
 80804ca:	4620      	mov	r0, r4
        }
        a = a->next;
    }

    return cmd_error_create_parse_success(c);
}
 80804cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            }
            a = a->next;
        }

        // No mathing arg found
        if (!a) return cmd_error_create_unknown_arg(c, w);
 80804d0:	f7ff be2d 	b.w	808012e <cmd_error_create_unknown_arg>

080804d4 <cmd_get_description>:
    return cmd_error_create_parse_success(c);
}

// Getter
const char* cmd_get_description(cmd* c) {
    if (!c) return NULL;
 80804d4:	b100      	cbz	r0, 80804d8 <cmd_get_description+0x4>
    return c->description;
 80804d6:	6940      	ldr	r0, [r0, #20]
}
 80804d8:	4770      	bx	lr

080804da <word_node_create>:
#include "c/parser.h"

#include <stdlib.h> // malloc

// ===== Word Node ===== //
word_node* word_node_create(const char* str, size_t len) {
 80804da:	b538      	push	{r3, r4, r5, lr}
 80804dc:	4605      	mov	r5, r0
    word_node* n = (word_node*)malloc(sizeof(word_node));
 80804de:	200c      	movs	r0, #12
#include "c/parser.h"

#include <stdlib.h> // malloc

// ===== Word Node ===== //
word_node* word_node_create(const char* str, size_t len) {
 80804e0:	460c      	mov	r4, r1
    word_node* n = (word_node*)malloc(sizeof(word_node));
 80804e2:	f003 ff63 	bl	80843ac <malloc>

    n->str  = str;
    n->len  = len;
    n->next = NULL;
 80804e6:	2200      	movs	r2, #0

// ===== Word Node ===== //
word_node* word_node_create(const char* str, size_t len) {
    word_node* n = (word_node*)malloc(sizeof(word_node));

    n->str  = str;
 80804e8:	6005      	str	r5, [r0, #0]
    n->len  = len;
 80804ea:	6044      	str	r4, [r0, #4]
    n->next = NULL;
 80804ec:	6082      	str	r2, [r0, #8]
    return n;
}
 80804ee:	bd38      	pop	{r3, r4, r5, pc}

080804f0 <word_node_destroy>:

word_node* word_node_destroy(word_node* n) {
 80804f0:	b508      	push	{r3, lr}
    if (n) {
 80804f2:	b108      	cbz	r0, 80804f8 <word_node_destroy+0x8>
        free(n);
 80804f4:	f003 ff62 	bl	80843bc <free>
    }
    return NULL;
}
 80804f8:	2000      	movs	r0, #0
 80804fa:	bd08      	pop	{r3, pc}

080804fc <word_node_destroy_rec>:

word_node* word_node_destroy_rec(word_node* n) {
 80804fc:	b510      	push	{r4, lr}
    if (n) {
 80804fe:	4604      	mov	r4, r0
 8080500:	b128      	cbz	r0, 808050e <word_node_destroy_rec+0x12>
        word_node_destroy_rec(n->next);
 8080502:	6880      	ldr	r0, [r0, #8]
 8080504:	f7ff fffa 	bl	80804fc <word_node_destroy_rec>
        word_node_destroy(n);
 8080508:	4620      	mov	r0, r4
 808050a:	f7ff fff1 	bl	80804f0 <word_node_destroy>
    }
    return NULL;
}
 808050e:	2000      	movs	r0, #0
 8080510:	bd10      	pop	{r4, pc}

08080512 <word_list_create>:

// ===== Word List ===== //
word_list* word_list_create() {
 8080512:	b508      	push	{r3, lr}
    word_list* l = (word_list*)malloc(sizeof(word_list));
 8080514:	200c      	movs	r0, #12
 8080516:	f003 ff49 	bl	80843ac <malloc>

    l->first = NULL;
 808051a:	2200      	movs	r2, #0
 808051c:	6002      	str	r2, [r0, #0]
    l->last  = NULL;
 808051e:	6042      	str	r2, [r0, #4]
    l->size  = 0;
 8080520:	6082      	str	r2, [r0, #8]
    return l;
}
 8080522:	bd08      	pop	{r3, pc}

08080524 <word_list_destroy>:

word_list* word_list_destroy(word_list* l) {
 8080524:	b510      	push	{r4, lr}
    if (l) {
 8080526:	4604      	mov	r4, r0
 8080528:	b128      	cbz	r0, 8080536 <word_list_destroy+0x12>
        word_node_destroy_rec(l->first);
 808052a:	6800      	ldr	r0, [r0, #0]
 808052c:	f7ff ffe6 	bl	80804fc <word_node_destroy_rec>
        free(l);
 8080530:	4620      	mov	r0, r4
 8080532:	f003 ff43 	bl	80843bc <free>
    }
    return NULL;
}
 8080536:	2000      	movs	r0, #0
 8080538:	bd10      	pop	{r4, pc}

0808053a <word_list_push>:

void word_list_push(word_list* l, word_node* n) {
    if (l && n) {
 808053a:	b148      	cbz	r0, 8080550 <word_list_push+0x16>
 808053c:	b141      	cbz	r1, 8080550 <word_list_push+0x16>
        if (l->last) {
 808053e:	6843      	ldr	r3, [r0, #4]
 8080540:	b10b      	cbz	r3, 8080546 <word_list_push+0xc>
            l->last->next = n;
 8080542:	6099      	str	r1, [r3, #8]
 8080544:	e000      	b.n	8080548 <word_list_push+0xe>
        } else {
            l->first = n;
 8080546:	6001      	str	r1, [r0, #0]
        }

        l->last = n;
        ++(l->size);
 8080548:	6883      	ldr	r3, [r0, #8]
            l->last->next = n;
        } else {
            l->first = n;
        }

        l->last = n;
 808054a:	6041      	str	r1, [r0, #4]
        ++(l->size);
 808054c:	3301      	adds	r3, #1
 808054e:	6083      	str	r3, [r0, #8]
 8080550:	4770      	bx	lr

08080552 <line_node_create>:

    return h;
}

// ===== Line Node ==== //
line_node* line_node_create(const char* str, size_t len) {
 8080552:	b538      	push	{r3, r4, r5, lr}
 8080554:	4605      	mov	r5, r0
    line_node* n = (line_node*)malloc(sizeof(line_node));
 8080556:	2010      	movs	r0, #16

    return h;
}

// ===== Line Node ==== //
line_node* line_node_create(const char* str, size_t len) {
 8080558:	460c      	mov	r4, r1
    line_node* n = (line_node*)malloc(sizeof(line_node));
 808055a:	f003 ff27 	bl	80843ac <malloc>

    n->str   = str;
    n->len   = len;
    n->words = NULL;
 808055e:	2200      	movs	r2, #0

// ===== Line Node ==== //
line_node* line_node_create(const char* str, size_t len) {
    line_node* n = (line_node*)malloc(sizeof(line_node));

    n->str   = str;
 8080560:	6005      	str	r5, [r0, #0]
    n->len   = len;
 8080562:	6044      	str	r4, [r0, #4]
    n->words = NULL;
 8080564:	6082      	str	r2, [r0, #8]
    n->next  = NULL;
 8080566:	60c2      	str	r2, [r0, #12]

    return n;
}
 8080568:	bd38      	pop	{r3, r4, r5, pc}

0808056a <line_node_destroy>:

word_node* line_node_destroy(line_node* n) {
 808056a:	b510      	push	{r4, lr}
    if (n) {
 808056c:	4604      	mov	r4, r0
 808056e:	b128      	cbz	r0, 808057c <line_node_destroy+0x12>
        word_list_destroy(n->words);
 8080570:	6880      	ldr	r0, [r0, #8]
 8080572:	f7ff ffd7 	bl	8080524 <word_list_destroy>
        free(n);
 8080576:	4620      	mov	r0, r4
 8080578:	f003 ff20 	bl	80843bc <free>
    }
    return NULL;
}
 808057c:	2000      	movs	r0, #0
 808057e:	bd10      	pop	{r4, pc}

08080580 <line_node_destroy_rec>:

word_node* line_node_destroy_rec(line_node* n) {
 8080580:	b510      	push	{r4, lr}
    if (n) {
 8080582:	4604      	mov	r4, r0
 8080584:	b128      	cbz	r0, 8080592 <line_node_destroy_rec+0x12>
        line_node_destroy_rec(n->next);
 8080586:	68c0      	ldr	r0, [r0, #12]
 8080588:	f7ff fffa 	bl	8080580 <line_node_destroy_rec>
        line_node_destroy(n);
 808058c:	4620      	mov	r0, r4
 808058e:	f7ff ffec 	bl	808056a <line_node_destroy>
    }
    return NULL;
}
 8080592:	2000      	movs	r0, #0
 8080594:	bd10      	pop	{r4, pc}

08080596 <line_list_create>:

// ===== Line List ===== //
line_list* line_list_create() {
 8080596:	b508      	push	{r3, lr}
    line_list* l = (line_list*)malloc(sizeof(line_list));
 8080598:	200c      	movs	r0, #12
 808059a:	f003 ff07 	bl	80843ac <malloc>

    l->first = NULL;
 808059e:	2200      	movs	r2, #0
 80805a0:	6002      	str	r2, [r0, #0]
    l->last  = NULL;
 80805a2:	6042      	str	r2, [r0, #4]
    l->size  = 0;
 80805a4:	6082      	str	r2, [r0, #8]

    return l;
}
 80805a6:	bd08      	pop	{r3, pc}

080805a8 <line_list_destroy>:

line_list* line_list_destroy(line_list* l) {
 80805a8:	b510      	push	{r4, lr}
    if (l) {
 80805aa:	4604      	mov	r4, r0
 80805ac:	b128      	cbz	r0, 80805ba <line_list_destroy+0x12>
        line_node_destroy_rec(l->first);
 80805ae:	6800      	ldr	r0, [r0, #0]
 80805b0:	f7ff ffe6 	bl	8080580 <line_node_destroy_rec>
        free(l);
 80805b4:	4620      	mov	r0, r4
 80805b6:	f003 ff01 	bl	80843bc <free>
    }
    return NULL;
}
 80805ba:	2000      	movs	r0, #0
 80805bc:	bd10      	pop	{r4, pc}

080805be <line_list_push>:

void line_list_push(line_list* l, line_node* n) {
    if (l && n) {
 80805be:	b148      	cbz	r0, 80805d4 <line_list_push+0x16>
 80805c0:	b141      	cbz	r1, 80805d4 <line_list_push+0x16>
        if (l->last) {
 80805c2:	6843      	ldr	r3, [r0, #4]
 80805c4:	b10b      	cbz	r3, 80805ca <line_list_push+0xc>
            l->last->next = n;
 80805c6:	60d9      	str	r1, [r3, #12]
 80805c8:	e000      	b.n	80805cc <line_list_push+0xe>
        } else {
            l->first = n;
 80805ca:	6001      	str	r1, [r0, #0]
        }

        l->last = n;

        ++(l->size);
 80805cc:	6883      	ldr	r3, [r0, #8]
            l->last->next = n;
        } else {
            l->first = n;
        }

        l->last = n;
 80805ce:	6041      	str	r1, [r0, #4]

        ++(l->size);
 80805d0:	3301      	adds	r3, #1
 80805d2:	6083      	str	r3, [r0, #8]
 80805d4:	4770      	bx	lr

080805d6 <parse_words>:

    return h;
}

// ===== Parser ===== //
word_list* parse_words(const char* str, size_t len) {
 80805d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80805da:	4680      	mov	r8, r0
 80805dc:	460e      	mov	r6, r1
    word_list* l = word_list_create();
 80805de:	f7ff ff98 	bl	8080512 <word_list_create>
 80805e2:	4607      	mov	r7, r0

    if (len == 0) return l;
 80805e4:	b376      	cbz	r6, 8080644 <parse_words+0x6e>
 80805e6:	2500      	movs	r5, #0
 80805e8:	462c      	mov	r4, r5
 80805ea:	4628      	mov	r0, r5
 80805ec:	4629      	mov	r1, r5

    int escaped      = 0;
    int ignore_space = 0;

    for (i = 0; i <= len; ++i) {
        if ((str[i] == '\\') && (escaped == 0)) {
 80805ee:	f818 3001 	ldrb.w	r3, [r8, r1]
 80805f2:	f101 0901 	add.w	r9, r1, #1
 80805f6:	2b5c      	cmp	r3, #92	; 0x5c
 80805f8:	d102      	bne.n	8080600 <parse_words+0x2a>
 80805fa:	bb04      	cbnz	r4, 808063e <parse_words+0x68>
            escaped = 1;
 80805fc:	2401      	movs	r4, #1
 80805fe:	e01a      	b.n	8080636 <parse_words+0x60>
        } else if ((str[i] == '"') && (escaped == 0)) {
 8080600:	2b22      	cmp	r3, #34	; 0x22
 8080602:	d103      	bne.n	808060c <parse_words+0x36>
 8080604:	b9dc      	cbnz	r4, 808063e <parse_words+0x68>
 8080606:	f085 0501 	eor.w	r5, r5, #1
            ignore_space = !ignore_space;
 808060a:	e014      	b.n	8080636 <parse_words+0x60>
        } else if ((i == len) || ((str[i] == ' ') && (ignore_space == 0) && (escaped == 0))) {
 808060c:	428e      	cmp	r6, r1
 808060e:	d003      	beq.n	8080618 <parse_words+0x42>
 8080610:	2b20      	cmp	r3, #32
 8080612:	d10d      	bne.n	8080630 <parse_words+0x5a>
 8080614:	b95d      	cbnz	r5, 808062e <parse_words+0x58>
 8080616:	b96c      	cbnz	r4, 8080634 <parse_words+0x5e>
            size_t k = i - j; // length of word

            // for every word, add to list
            if (k > 0) {
 8080618:	1a09      	subs	r1, r1, r0
 808061a:	d006      	beq.n	808062a <parse_words+0x54>
                n = word_node_create(&str[j], k);
 808061c:	4440      	add	r0, r8
 808061e:	f7ff ff5c 	bl	80804da <word_node_create>
                word_list_push(l, n);
 8080622:	4601      	mov	r1, r0
 8080624:	4638      	mov	r0, r7
 8080626:	f7ff ff88 	bl	808053a <word_list_push>
            }

            j = i + 1; // reset start index of word
 808062a:	4648      	mov	r0, r9
    for (i = 0; i <= len; ++i) {
        if ((str[i] == '\\') && (escaped == 0)) {
            escaped = 1;
        } else if ((str[i] == '"') && (escaped == 0)) {
            ignore_space = !ignore_space;
        } else if ((i == len) || ((str[i] == ' ') && (ignore_space == 0) && (escaped == 0))) {
 808062c:	e003      	b.n	8080636 <parse_words+0x60>
 808062e:	2501      	movs	r5, #1
                word_list_push(l, n);
            }

            j = i + 1; // reset start index of word
        } else if (escaped == 1) {
            escaped = 0;
 8080630:	2400      	movs	r4, #0
 8080632:	e000      	b.n	8080636 <parse_words+0x60>
 8080634:	462c      	mov	r4, r5
    size_t j = 0; // start index of word

    int escaped      = 0;
    int ignore_space = 0;

    for (i = 0; i <= len; ++i) {
 8080636:	454e      	cmp	r6, r9
 8080638:	4649      	mov	r1, r9
 808063a:	d2d8      	bcs.n	80805ee <parse_words+0x18>
 808063c:	e002      	b.n	8080644 <parse_words+0x6e>
        if ((str[i] == '\\') && (escaped == 0)) {
            escaped = 1;
        } else if ((str[i] == '"') && (escaped == 0)) {
            ignore_space = !ignore_space;
        } else if ((i == len) || ((str[i] == ' ') && (ignore_space == 0) && (escaped == 0))) {
 808063e:	428e      	cmp	r6, r1
 8080640:	d1f6      	bne.n	8080630 <parse_words+0x5a>
 8080642:	e7e9      	b.n	8080618 <parse_words+0x42>
            escaped = 0;
        }
    }

    return l;
}
 8080644:	4638      	mov	r0, r7
 8080646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808064a <parse_lines>:

line_list* parse_lines(const char* str, size_t len) {
 808064a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808064e:	4607      	mov	r7, r0
 8080650:	468a      	mov	sl, r1
    line_list* l = line_list_create();
 8080652:	f7ff ffa0 	bl	8080596 <line_list_create>
 8080656:	4681      	mov	r9, r0

    if (len == 0) return l;
 8080658:	f1ba 0f00 	cmp.w	sl, #0
 808065c:	d046      	beq.n	80806ec <parse_lines+0xa2>
 808065e:	2500      	movs	r5, #0
 8080660:	4628      	mov	r0, r5
 8080662:	462c      	mov	r4, r5
    int delimiter        = 0;
    int linebreak        = 0;
    int endofline        = 0;

    for (i = 0; i <= len; ++i) {
        if ((str[i] == '"') && ((str[i-1] != '\\') || (i==0))) ignore_delimiter = !ignore_delimiter;
 8080664:	5d3b      	ldrb	r3, [r7, r4]
 8080666:	2b22      	cmp	r3, #34	; 0x22
 8080668:	d108      	bne.n	808067c <parse_lines+0x32>
 808066a:	193b      	adds	r3, r7, r4
 808066c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8080670:	2b5c      	cmp	r3, #92	; 0x5c
 8080672:	d100      	bne.n	8080676 <parse_lines+0x2c>
 8080674:	b9d4      	cbnz	r4, 80806ac <parse_lines+0x62>
 8080676:	f085 0501 	eor.w	r5, r5, #1
 808067a:	e017      	b.n	80806ac <parse_lines+0x62>

        delimiter = (str[i] == ';' && str[i+1] == ';' && !ignore_delimiter && (i == 0 || str[i-1] != '\\'));
 808067c:	2b3b      	cmp	r3, #59	; 0x3b
 808067e:	d10a      	bne.n	8080696 <parse_lines+0x4c>
 8080680:	193b      	adds	r3, r7, r4
 8080682:	785a      	ldrb	r2, [r3, #1]
 8080684:	2a3b      	cmp	r2, #59	; 0x3b
 8080686:	d111      	bne.n	80806ac <parse_lines+0x62>
 8080688:	b97d      	cbnz	r5, 80806aa <parse_lines+0x60>
 808068a:	b15c      	cbz	r4, 80806a4 <parse_lines+0x5a>
 808068c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8080690:	2b5c      	cmp	r3, #92	; 0x5c
 8080692:	d107      	bne.n	80806a4 <parse_lines+0x5a>
 8080694:	e00a      	b.n	80806ac <parse_lines+0x62>
        linebreak = ((str[i] == '\r') || (str[i] == '\n')) && !ignore_delimiter;
 8080696:	2b0d      	cmp	r3, #13
 8080698:	d001      	beq.n	808069e <parse_lines+0x54>
 808069a:	2b0a      	cmp	r3, #10
 808069c:	d106      	bne.n	80806ac <parse_lines+0x62>
 808069e:	b925      	cbnz	r5, 80806aa <parse_lines+0x60>
 80806a0:	46a8      	mov	r8, r5
 80806a2:	e007      	b.n	80806b4 <parse_lines+0x6a>
 80806a4:	f04f 0801 	mov.w	r8, #1
 80806a8:	e004      	b.n	80806b4 <parse_lines+0x6a>
 80806aa:	2501      	movs	r5, #1
        endofline = (i == len);

        if (linebreak || endofline || delimiter) {
 80806ac:	45a2      	cmp	sl, r4
 80806ae:	d11a      	bne.n	80806e6 <parse_lines+0x9c>
 80806b0:	f04f 0800 	mov.w	r8, #0
            size_t k = i - j; // length of line

            // for every line, parse_words and add to list
            if (k > 0) {
 80806b4:	1a23      	subs	r3, r4, r0
 80806b6:	d011      	beq.n	80806dc <parse_lines+0x92>
                n        = line_node_create(&str[j], k);
 80806b8:	183e      	adds	r6, r7, r0
 80806ba:	4619      	mov	r1, r3
 80806bc:	4630      	mov	r0, r6
 80806be:	9301      	str	r3, [sp, #4]
 80806c0:	f7ff ff47 	bl	8080552 <line_node_create>
                n->words = parse_words(&str[j], k);
 80806c4:	9b01      	ldr	r3, [sp, #4]
        if (linebreak || endofline || delimiter) {
            size_t k = i - j; // length of line

            // for every line, parse_words and add to list
            if (k > 0) {
                n        = line_node_create(&str[j], k);
 80806c6:	4683      	mov	fp, r0
                n->words = parse_words(&str[j], k);
 80806c8:	4619      	mov	r1, r3
 80806ca:	4630      	mov	r0, r6
 80806cc:	f7ff ff83 	bl	80805d6 <parse_words>
                line_list_push(l, n);
 80806d0:	4659      	mov	r1, fp
            size_t k = i - j; // length of line

            // for every line, parse_words and add to list
            if (k > 0) {
                n        = line_node_create(&str[j], k);
                n->words = parse_words(&str[j], k);
 80806d2:	f8cb 0008 	str.w	r0, [fp, #8]
                line_list_push(l, n);
 80806d6:	4648      	mov	r0, r9
 80806d8:	f7ff ff71 	bl	80805be <line_list_push>
            }

            if (delimiter) ++i;
 80806dc:	f1b8 0f00 	cmp.w	r8, #0
 80806e0:	d000      	beq.n	80806e4 <parse_lines+0x9a>
 80806e2:	3401      	adds	r4, #1

            j = i+1; // reset start index of line
 80806e4:	1c60      	adds	r0, r4, #1
    int ignore_delimiter = 0;
    int delimiter        = 0;
    int linebreak        = 0;
    int endofline        = 0;

    for (i = 0; i <= len; ++i) {
 80806e6:	3401      	adds	r4, #1
 80806e8:	45a2      	cmp	sl, r4
 80806ea:	d2bb      	bcs.n	8080664 <parse_lines+0x1a>
            j = i+1; // reset start index of line
        }
    }

    return l;
 80806ec:	4648      	mov	r0, r9
 80806ee:	b003      	add	sp, #12
 80806f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080806f4 <to_lower>:

#include "c/comparator.h"

// My own implementation, because the default one in ctype.h make problems on older ESP8266 SDKs
char to_lower(char c) {
    if ((c >= 65) && (c <= 90)) {
 80806f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80806f8:	2b19      	cmp	r3, #25
        return (char)(c + 32);
 80806fa:	bf9c      	itt	ls
 80806fc:	3020      	addls	r0, #32
 80806fe:	b2c0      	uxtbls	r0, r0
    }
    return c;
}
 8080700:	4770      	bx	lr

08080702 <compare>:

int compare(const char* user_str, size_t user_str_len, const char* templ_str, int case_sensetive) {
    if (user_str == templ_str) return COMPARE_EQUAL;
 8080702:	4290      	cmp	r0, r2
        return (char)(c + 32);
    }
    return c;
}

int compare(const char* user_str, size_t user_str_len, const char* templ_str, int case_sensetive) {
 8080704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080708:	4607      	mov	r7, r0
 808070a:	4688      	mov	r8, r1
 808070c:	4614      	mov	r4, r2
 808070e:	4699      	mov	r9, r3
    if (user_str == templ_str) return COMPARE_EQUAL;
 8080710:	d064      	beq.n	80807dc <compare+0xda>

    // null check string pointers
    if (!user_str || !templ_str) return COMPARE_UNEQUAL;
 8080712:	2800      	cmp	r0, #0
 8080714:	d05b      	beq.n	80807ce <compare+0xcc>
    if (res && (a == str_len) &&
        ((templ_str[b] == ',') ||
         (templ_str[b] == '/') ||
         (templ_str[b] == '\0'))) return COMPARE_EQUAL;  // res_i

    return COMPARE_UNEQUAL;
 8080716:	4610      	mov	r0, r2

int compare(const char* user_str, size_t user_str_len, const char* templ_str, int case_sensetive) {
    if (user_str == templ_str) return COMPARE_EQUAL;

    // null check string pointers
    if (!user_str || !templ_str) return COMPARE_UNEQUAL;
 8080718:	2a00      	cmp	r2, #0
 808071a:	d05a      	beq.n	80807d2 <compare+0xd0>

    // string lengths
    size_t str_len = user_str_len; // strlen(user_str);
    size_t key_len = strlen(templ_str);
 808071c:	f007 fc7a 	bl	8088014 <strlen>

    // when same length, it there is no need to check for slashes or commas
    if (str_len == key_len) {
 8080720:	4580      	cmp	r8, r0
    // null check string pointers
    if (!user_str || !templ_str) return COMPARE_UNEQUAL;

    // string lengths
    size_t str_len = user_str_len; // strlen(user_str);
    size_t key_len = strlen(templ_str);
 8080722:	4602      	mov	r2, r0

    // when same length, it there is no need to check for slashes or commas
    if (str_len == key_len) {
 8080724:	d116      	bne.n	8080754 <compare+0x52>
 8080726:	463d      	mov	r5, r7
 8080728:	44b8      	add	r8, r7
        for (size_t i = 0; i < key_len; i++) {
 808072a:	45a8      	cmp	r8, r5
 808072c:	d056      	beq.n	80807dc <compare+0xda>
            if (case_sensetive == COMPARE_CASE_SENSETIVE) {
 808072e:	f1b9 0f01 	cmp.w	r9, #1
 8080732:	d103      	bne.n	808073c <compare+0x3a>
                if (user_str[i] != templ_str[i]) return COMPARE_UNEQUAL;
 8080734:	782a      	ldrb	r2, [r5, #0]
 8080736:	7823      	ldrb	r3, [r4, #0]
 8080738:	429a      	cmp	r2, r3
 808073a:	e007      	b.n	808074c <compare+0x4a>
            } else {
                if (to_lower(user_str[i]) != to_lower(templ_str[i])) return COMPARE_UNEQUAL;
 808073c:	7828      	ldrb	r0, [r5, #0]
 808073e:	f7ff ffd9 	bl	80806f4 <to_lower>
 8080742:	4602      	mov	r2, r0
 8080744:	7820      	ldrb	r0, [r4, #0]
 8080746:	f7ff ffd5 	bl	80806f4 <to_lower>
 808074a:	4282      	cmp	r2, r0
 808074c:	d143      	bne.n	80807d6 <compare+0xd4>
 808074e:	3501      	adds	r5, #1
 8080750:	3401      	adds	r4, #1
 8080752:	e7ea      	b.n	808072a <compare+0x28>
        }
        return COMPARE_EQUAL;
    }

    // string can't be longer than templ_str (but can be smaller because of  '/' and ',')
    if (str_len > key_len) return COMPARE_UNEQUAL;
 8080754:	d83f      	bhi.n	80807d6 <compare+0xd4>
 8080756:	2500      	movs	r5, #0
 8080758:	462e      	mov	r6, r5
        } else {
            if (to_lower(user_str[a]) != to_lower(templ_str[b])) res = 0;
        }

        // comparison incorrect or string checked until the end and templ_str not checked until the end
        if (!res || ((a == str_len - 1) &&
 808075a:	f108 31ff 	add.w	r1, r8, #4294967295
    unsigned int res_i = 0;
    unsigned int a     = 0;
    unsigned int b     = 0;
    unsigned int res   = 1;

    while (a < str_len && b < key_len) {
 808075e:	4546      	cmp	r6, r8
 8080760:	d229      	bcs.n	80807b6 <compare+0xb4>
 8080762:	4295      	cmp	r5, r2
 8080764:	d227      	bcs.n	80807b6 <compare+0xb4>
        if (templ_str[b] == '/') {
 8080766:	5d63      	ldrb	r3, [r4, r5]
 8080768:	2b2f      	cmp	r3, #47	; 0x2f
 808076a:	d101      	bne.n	8080770 <compare+0x6e>
            // skip slash in templ_str
            ++b;
 808076c:	3501      	adds	r5, #1
 808076e:	e003      	b.n	8080778 <compare+0x76>
        } else if (templ_str[b] == ',') {
 8080770:	2b2c      	cmp	r3, #44	; 0x2c
            // on comma increment res_i and reset str-index
            ++b;
 8080772:	bf04      	itt	eq
 8080774:	3501      	addeq	r5, #1
            a = 0;
 8080776:	2600      	moveq	r6, #0
            ++res_i;
        }

        // compare character
        if (case_sensetive == COMPARE_CASE_SENSETIVE) {
 8080778:	f1b9 0f01 	cmp.w	r9, #1
            if (user_str[a] != templ_str[b]) res = 0;
 808077c:	5db8      	ldrb	r0, [r7, r6]
            a = 0;
            ++res_i;
        }

        // compare character
        if (case_sensetive == COMPARE_CASE_SENSETIVE) {
 808077e:	d102      	bne.n	8080786 <compare+0x84>
            if (user_str[a] != templ_str[b]) res = 0;
 8080780:	5d63      	ldrb	r3, [r4, r5]
 8080782:	4298      	cmp	r0, r3
 8080784:	e006      	b.n	8080794 <compare+0x92>
        } else {
            if (to_lower(user_str[a]) != to_lower(templ_str[b])) res = 0;
 8080786:	f7ff ffb5 	bl	80806f4 <to_lower>
 808078a:	4682      	mov	sl, r0
 808078c:	5d60      	ldrb	r0, [r4, r5]
 808078e:	f7ff ffb1 	bl	80806f4 <to_lower>
 8080792:	4582      	cmp	sl, r0
 8080794:	d108      	bne.n	80807a8 <compare+0xa6>
        }

        // comparison incorrect or string checked until the end and templ_str not checked until the end
        if (!res || ((a == str_len - 1) &&
 8080796:	428e      	cmp	r6, r1
 8080798:	d123      	bne.n	80807e2 <compare+0xe0>
                     (templ_str[b + 1] != ',') &&
 808079a:	1963      	adds	r3, r4, r5
 808079c:	785b      	ldrb	r3, [r3, #1]
        } else {
            if (to_lower(user_str[a]) != to_lower(templ_str[b])) res = 0;
        }

        // comparison incorrect or string checked until the end and templ_str not checked until the end
        if (!res || ((a == str_len - 1) &&
 808079e:	2b2c      	cmp	r3, #44	; 0x2c
 80807a0:	d01f      	beq.n	80807e2 <compare+0xe0>
                     (templ_str[b + 1] != ',') &&
 80807a2:	2b2f      	cmp	r3, #47	; 0x2f
 80807a4:	d01d      	beq.n	80807e2 <compare+0xe0>
                     (templ_str[b + 1] != '/') &&
 80807a6:	b1e3      	cbz	r3, 80807e2 <compare+0xe0>
                     (templ_str[b + 1] != '\0'))) {
            // fast forward to next comma
            while (b < key_len && templ_str[b] != ',') b++;
 80807a8:	4295      	cmp	r5, r2
 80807aa:	d2d8      	bcs.n	808075e <compare+0x5c>
 80807ac:	5d63      	ldrb	r3, [r4, r5]
 80807ae:	2b2c      	cmp	r3, #44	; 0x2c
 80807b0:	d0d5      	beq.n	808075e <compare+0x5c>
 80807b2:	3501      	adds	r5, #1
 80807b4:	e7f8      	b.n	80807a8 <compare+0xa6>
            ++b;
        }
    }

    // comparison correct AND string checked until the end AND templ_str checked until the end
    if (res && (a == str_len) &&
 80807b6:	4546      	cmp	r6, r8
 80807b8:	d10d      	bne.n	80807d6 <compare+0xd4>
        ((templ_str[b] == ',') ||
 80807ba:	5d60      	ldrb	r0, [r4, r5]
            ++b;
        }
    }

    // comparison correct AND string checked until the end AND templ_str checked until the end
    if (res && (a == str_len) &&
 80807bc:	282c      	cmp	r0, #44	; 0x2c
 80807be:	d00d      	beq.n	80807dc <compare+0xda>
        ((templ_str[b] == ',') ||
 80807c0:	282f      	cmp	r0, #47	; 0x2f
 80807c2:	d00b      	beq.n	80807dc <compare+0xda>
    }
    return c;
}

int compare(const char* user_str, size_t user_str_len, const char* templ_str, int case_sensetive) {
    if (user_str == templ_str) return COMPARE_EQUAL;
 80807c4:	fab0 f080 	clz	r0, r0
 80807c8:	0940      	lsrs	r0, r0, #5
 80807ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80807ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80807d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (res && (a == str_len) &&
        ((templ_str[b] == ',') ||
         (templ_str[b] == '/') ||
         (templ_str[b] == '\0'))) return COMPARE_EQUAL;  // res_i

    return COMPARE_UNEQUAL;
 80807d6:	2000      	movs	r0, #0
 80807d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    return c;
}

int compare(const char* user_str, size_t user_str_len, const char* templ_str, int case_sensetive) {
    if (user_str == templ_str) return COMPARE_EQUAL;
 80807dc:	2001      	movs	r0, #1
 80807de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            // fast forward to next comma
            while (b < key_len && templ_str[b] != ',') b++;
            res = 1;
        } else {
            // otherwise icrement indices
            ++a;
 80807e2:	3601      	adds	r6, #1
            ++b;
 80807e4:	3501      	adds	r5, #1
 80807e6:	e7ba      	b.n	808075e <compare+0x5c>

080807e8 <arg_create>:
#include "c/comparator.h" // compare

// ===== Arg ===== //

// Constructors
arg* arg_create(const char* name, const char* default_val, unsigned int mode, unsigned int req) {
 80807e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80807ec:	4615      	mov	r5, r2
 80807ee:	4680      	mov	r8, r0
    arg* a = (arg*)malloc(sizeof(arg));
 80807f0:	2014      	movs	r0, #20
#include "c/comparator.h" // compare

// ===== Arg ===== //

// Constructors
arg* arg_create(const char* name, const char* default_val, unsigned int mode, unsigned int req) {
 80807f2:	460e      	mov	r6, r1
 80807f4:	461f      	mov	r7, r3
    arg* a = (arg*)malloc(sizeof(arg));
 80807f6:	f003 fdd9 	bl	80843ac <malloc>

    a->name        = name;
    a->default_val = default_val;
    a->val         = NULL;
    a->mode        = mode % 3;
 80807fa:	2103      	movs	r1, #3
 80807fc:	fbb5 f1f1 	udiv	r1, r5, r1
 8080800:	7b02      	ldrb	r2, [r0, #12]
 8080802:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8080806:	1a69      	subs	r1, r5, r1
 8080808:	f361 0201 	bfi	r2, r1, #0, #2
    a->req         = req % 2;
 808080c:	f367 0282 	bfi	r2, r7, #2, #1
    a->set         = ARG_UNSET;
 8080810:	4613      	mov	r3, r2
// Constructors
arg* arg_create(const char* name, const char* default_val, unsigned int mode, unsigned int req) {
    arg* a = (arg*)malloc(sizeof(arg));

    a->name        = name;
    a->default_val = default_val;
 8080812:	6046      	str	r6, [r0, #4]
    a->val         = NULL;
 8080814:	2600      	movs	r6, #0
    a->mode        = mode % 3;
    a->req         = req % 2;
    a->set         = ARG_UNSET;
 8080816:	f366 03c3 	bfi	r3, r6, #3, #1

// Constructors
arg* arg_create(const char* name, const char* default_val, unsigned int mode, unsigned int req) {
    arg* a = (arg*)malloc(sizeof(arg));

    a->name        = name;
 808081a:	f8c0 8000 	str.w	r8, [r0]
    a->default_val = default_val;
    a->val         = NULL;
 808081e:	6086      	str	r6, [r0, #8]
    a->mode        = mode % 3;
    a->req         = req % 2;
    a->set         = ARG_UNSET;
 8080820:	7303      	strb	r3, [r0, #12]
    a->next        = NULL;
 8080822:	6106      	str	r6, [r0, #16]

    return a;
}
 8080824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080828 <arg_create_req>:
arg* arg_create_opt(const char* name, const char* default_val) {
    return arg_create(name, default_val, ARG_DEFAULT, ARG_OPT);
}

arg* arg_create_req(const char* name) {
    return arg_create(name, NULL, ARG_DEFAULT, ARG_REQ);
 8080828:	2200      	movs	r2, #0
 808082a:	2301      	movs	r3, #1
 808082c:	4611      	mov	r1, r2
 808082e:	f7ff bfdb 	b.w	80807e8 <arg_create>

08080832 <arg_create_opt_positional>:
}

arg* arg_create_opt_positional(const char* name, const char* default_value) {
    return arg_create(name, default_value, ARG_POS, ARG_OPT);
 8080832:	2300      	movs	r3, #0
 8080834:	2201      	movs	r2, #1
 8080836:	f7ff bfd7 	b.w	80807e8 <arg_create>

0808083a <arg_create_req_positional>:
}

arg* arg_create_req_positional(const char* name) {
    return arg_create(name, NULL, ARG_POS, ARG_REQ);
 808083a:	2301      	movs	r3, #1
 808083c:	461a      	mov	r2, r3
 808083e:	2100      	movs	r1, #0
 8080840:	f7ff bfd2 	b.w	80807e8 <arg_create>

08080844 <arg_copy>:
    return arg_create(name, default_value, ARG_FLAG, ARG_OPT);
}

// Copy & Move Constructors

arg* arg_copy(arg* a) {
 8080844:	b538      	push	{r3, r4, r5, lr}
    if (!a) return NULL;
 8080846:	4605      	mov	r5, r0
 8080848:	b368      	cbz	r0, 80808a6 <arg_copy+0x62>

    arg* na = (arg*)malloc(sizeof(arg));
 808084a:	2014      	movs	r0, #20
 808084c:	f003 fdae 	bl	80843ac <malloc>

    na->name        = a->name;
 8080850:	682b      	ldr	r3, [r5, #0]
    na->default_val = a->default_val;
    na->val         = NULL;
 8080852:	2200      	movs	r2, #0
arg* arg_copy(arg* a) {
    if (!a) return NULL;

    arg* na = (arg*)malloc(sizeof(arg));

    na->name        = a->name;
 8080854:	6003      	str	r3, [r0, #0]
    na->default_val = a->default_val;
 8080856:	686b      	ldr	r3, [r5, #4]
    na->val         = NULL;
 8080858:	6082      	str	r2, [r0, #8]
    if (!a) return NULL;

    arg* na = (arg*)malloc(sizeof(arg));

    na->name        = a->name;
    na->default_val = a->default_val;
 808085a:	6043      	str	r3, [r0, #4]
    na->val         = NULL;
    na->mode        = a->mode;
 808085c:	7b29      	ldrb	r1, [r5, #12]
 808085e:	7b03      	ldrb	r3, [r0, #12]
// Copy & Move Constructors

arg* arg_copy(arg* a) {
    if (!a) return NULL;

    arg* na = (arg*)malloc(sizeof(arg));
 8080860:	4604      	mov	r4, r0

    na->name        = a->name;
    na->default_val = a->default_val;
    na->val         = NULL;
    na->mode        = a->mode;
 8080862:	f361 0301 	bfi	r3, r1, #0, #2
 8080866:	7303      	strb	r3, [r0, #12]
    na->req         = a->req;
 8080868:	7b2b      	ldrb	r3, [r5, #12]
 808086a:	7b01      	ldrb	r1, [r0, #12]
 808086c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8080870:	f363 0182 	bfi	r1, r3, #2, #1
 8080874:	7301      	strb	r1, [r0, #12]
    na->set         = a->set;
 8080876:	7b2b      	ldrb	r3, [r5, #12]
 8080878:	b2c9      	uxtb	r1, r1
 808087a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 808087e:	f363 01c3 	bfi	r1, r3, #3, #1
 8080882:	7301      	strb	r1, [r0, #12]
    na->next        = NULL;
 8080884:	6102      	str	r2, [r0, #16]

    if (a->val) {
 8080886:	68a8      	ldr	r0, [r5, #8]
 8080888:	b170      	cbz	r0, 80808a8 <arg_copy+0x64>
        na->val = (char*)malloc(strlen(a->val) + 1);
 808088a:	f007 fbc3 	bl	8088014 <strlen>
 808088e:	3001      	adds	r0, #1
 8080890:	f003 fd8c 	bl	80843ac <malloc>
 8080894:	60a0      	str	r0, [r4, #8]
        strcpy(na->val, a->val);
 8080896:	68a9      	ldr	r1, [r5, #8]
 8080898:	f006 fe84 	bl	80875a4 <strcpy>
        na->set = ARG_SET;
 808089c:	7b23      	ldrb	r3, [r4, #12]
 808089e:	f043 0308 	orr.w	r3, r3, #8
 80808a2:	7323      	strb	r3, [r4, #12]
 80808a4:	e000      	b.n	80808a8 <arg_copy+0x64>
 80808a6:	bd38      	pop	{r3, r4, r5, pc}
 80808a8:	4620      	mov	r0, r4
    }

    return na;
}
 80808aa:	bd38      	pop	{r3, r4, r5, pc}

080808ac <arg_copy_rec>:

arg* arg_copy_rec(arg* a) {
 80808ac:	b538      	push	{r3, r4, r5, lr}
    if (!a) return NULL;
 80808ae:	4604      	mov	r4, r0
 80808b0:	b140      	cbz	r0, 80808c4 <arg_copy_rec+0x18>

    arg* na = arg_copy(a);
 80808b2:	f7ff ffc7 	bl	8080844 <arg_copy>
 80808b6:	4605      	mov	r5, r0
    na->next = arg_copy_rec(a->next);
 80808b8:	6920      	ldr	r0, [r4, #16]
 80808ba:	f7ff fff7 	bl	80808ac <arg_copy_rec>
 80808be:	6128      	str	r0, [r5, #16]

    return na;
 80808c0:	4628      	mov	r0, r5
 80808c2:	bd38      	pop	{r3, r4, r5, pc}
}
 80808c4:	bd38      	pop	{r3, r4, r5, pc}

080808c6 <arg_move>:

arg* arg_move(arg* a) {
 80808c6:	b510      	push	{r4, lr}
    if (!a) return NULL;
 80808c8:	4604      	mov	r4, r0
 80808ca:	b318      	cbz	r0, 8080914 <arg_move+0x4e>

    arg* na = (arg*)malloc(sizeof(arg));
 80808cc:	2014      	movs	r0, #20
 80808ce:	f003 fd6d 	bl	80843ac <malloc>

    na->name        = a->name;
 80808d2:	6823      	ldr	r3, [r4, #0]
 80808d4:	6003      	str	r3, [r0, #0]
    na->default_val = a->default_val;
 80808d6:	6863      	ldr	r3, [r4, #4]
 80808d8:	6043      	str	r3, [r0, #4]
    na->val         = a->val;
 80808da:	68a3      	ldr	r3, [r4, #8]
 80808dc:	6083      	str	r3, [r0, #8]
    na->mode        = a->mode;
 80808de:	7b22      	ldrb	r2, [r4, #12]
 80808e0:	7b03      	ldrb	r3, [r0, #12]
 80808e2:	f362 0301 	bfi	r3, r2, #0, #2
 80808e6:	7303      	strb	r3, [r0, #12]
    na->req         = a->req;
 80808e8:	7b23      	ldrb	r3, [r4, #12]
 80808ea:	7b02      	ldrb	r2, [r0, #12]
 80808ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80808f0:	f363 0282 	bfi	r2, r3, #2, #1
 80808f4:	7302      	strb	r2, [r0, #12]
    na->set         = a->set;
 80808f6:	7b23      	ldrb	r3, [r4, #12]
 80808f8:	b2d2      	uxtb	r2, r2
 80808fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80808fe:	f363 02c3 	bfi	r2, r3, #3, #1
    na->next        = NULL;
 8080902:	2300      	movs	r3, #0
    na->name        = a->name;
    na->default_val = a->default_val;
    na->val         = a->val;
    na->mode        = a->mode;
    na->req         = a->req;
    na->set         = a->set;
 8080904:	7302      	strb	r2, [r0, #12]
    na->next        = NULL;
 8080906:	6103      	str	r3, [r0, #16]

    a->val = NULL;
    a->set = ARG_UNSET;
 8080908:	7b22      	ldrb	r2, [r4, #12]
    na->mode        = a->mode;
    na->req         = a->req;
    na->set         = a->set;
    na->next        = NULL;

    a->val = NULL;
 808090a:	60a3      	str	r3, [r4, #8]
    a->set = ARG_UNSET;
 808090c:	f363 02c3 	bfi	r2, r3, #3, #1
 8080910:	7322      	strb	r2, [r4, #12]

    return na;
 8080912:	bd10      	pop	{r4, pc}
}
 8080914:	bd10      	pop	{r4, pc}

08080916 <arg_move_rec>:

arg* arg_move_rec(arg* a) {
 8080916:	b538      	push	{r3, r4, r5, lr}
    if (!a) return NULL;
 8080918:	4604      	mov	r4, r0
 808091a:	b140      	cbz	r0, 808092e <arg_move_rec+0x18>

    arg* na = arg_move(a);
 808091c:	f7ff ffd3 	bl	80808c6 <arg_move>
 8080920:	4605      	mov	r5, r0
    na->next = arg_move_rec(a->next);
 8080922:	6920      	ldr	r0, [r4, #16]
 8080924:	f7ff fff7 	bl	8080916 <arg_move_rec>
 8080928:	6128      	str	r0, [r5, #16]

    return na;
 808092a:	4628      	mov	r0, r5
 808092c:	bd38      	pop	{r3, r4, r5, pc}
}
 808092e:	bd38      	pop	{r3, r4, r5, pc}

08080930 <arg_reset>:
    }
    return NULL;
}

// Reset
void arg_reset(arg* a) {
 8080930:	b510      	push	{r4, lr}
    if (a) {
 8080932:	4604      	mov	r4, r0
 8080934:	b148      	cbz	r0, 808094a <arg_reset+0x1a>
        if (a->val) {
 8080936:	6880      	ldr	r0, [r0, #8]
 8080938:	b118      	cbz	r0, 8080942 <arg_reset+0x12>
            free(a->val);
 808093a:	f003 fd3f 	bl	80843bc <free>
            a->val = NULL;
 808093e:	2300      	movs	r3, #0
 8080940:	60a3      	str	r3, [r4, #8]
        }
        a->set = ARG_UNSET;
 8080942:	7b23      	ldrb	r3, [r4, #12]
 8080944:	f36f 03c3 	bfc	r3, #3, #1
 8080948:	7323      	strb	r3, [r4, #12]
 808094a:	bd10      	pop	{r4, pc}

0808094c <arg_destroy>:

    return na;
}

// Destructors
arg* arg_destroy(arg* a) {
 808094c:	b510      	push	{r4, lr}
    if (a) {
 808094e:	4604      	mov	r4, r0
 8080950:	b120      	cbz	r0, 808095c <arg_destroy+0x10>
        arg_reset(a);
 8080952:	f7ff ffed 	bl	8080930 <arg_reset>
        free(a);
 8080956:	4620      	mov	r0, r4
 8080958:	f003 fd30 	bl	80843bc <free>
    }
    return NULL;
}
 808095c:	2000      	movs	r0, #0
 808095e:	bd10      	pop	{r4, pc}

08080960 <arg_destroy_rec>:

arg* arg_destroy_rec(arg* a) {
 8080960:	b510      	push	{r4, lr}
    if (a) {
 8080962:	4604      	mov	r4, r0
 8080964:	b128      	cbz	r0, 8080972 <arg_destroy_rec+0x12>
        arg_destroy_rec(a->next);
 8080966:	6900      	ldr	r0, [r0, #16]
 8080968:	f7ff fffa 	bl	8080960 <arg_destroy_rec>
        arg_destroy(a);
 808096c:	4620      	mov	r0, r4
 808096e:	f7ff ffed 	bl	808094c <arg_destroy>
    }
    return NULL;
}
 8080972:	2000      	movs	r0, #0
 8080974:	bd10      	pop	{r4, pc}

08080976 <arg_reset_rec>:
        }
        a->set = ARG_UNSET;
    }
}

void arg_reset_rec(arg* a) {
 8080976:	b510      	push	{r4, lr}
 8080978:	4604      	mov	r4, r0
    if (a) {
 808097a:	b124      	cbz	r4, 8080986 <arg_reset_rec+0x10>
        arg_reset(a);
 808097c:	4620      	mov	r0, r4
 808097e:	f7ff ffd7 	bl	8080930 <arg_reset>
        arg_reset_rec(a->next);
 8080982:	6924      	ldr	r4, [r4, #16]
 8080984:	e7f9      	b.n	808097a <arg_reset_rec+0x4>
 8080986:	bd10      	pop	{r4, pc}

08080988 <arg_name_equals>:
    }
}

// Comparisons
int arg_name_equals(arg* a, const char* name, size_t name_len, int case_sensetive) {
 8080988:	b510      	push	{r4, lr}
 808098a:	460c      	mov	r4, r1
 808098c:	4611      	mov	r1, r2
    if (!a) return ARG_NAME_UNEQUALS;
 808098e:	b130      	cbz	r0, 808099e <arg_name_equals+0x16>
    return compare(name, name_len, a->name, case_sensetive) == COMPARE_EQUAL ? ARG_NAME_EQUALS : ARG_NAME_UNEQUALS;
 8080990:	6802      	ldr	r2, [r0, #0]
 8080992:	4620      	mov	r0, r4
 8080994:	f7ff feb5 	bl	8080702 <compare>
 8080998:	1e43      	subs	r3, r0, #1
 808099a:	4258      	negs	r0, r3
 808099c:	4158      	adcs	r0, r3
}
 808099e:	bd10      	pop	{r4, pc}

080809a0 <arg_get_value>:
    return arg_name_equals(a, b->name, strlen(b->name), case_sensetive);
}

// Getter
const char* arg_get_value(arg* a) {
    if (a) {
 80809a0:	b138      	cbz	r0, 80809b2 <arg_get_value+0x12>
        if (a->val) return a->val;
 80809a2:	6883      	ldr	r3, [r0, #8]
 80809a4:	b93b      	cbnz	r3, 80809b6 <arg_get_value+0x16>
        if (a->default_val) return a->default_val;
 80809a6:	6840      	ldr	r0, [r0, #4]
    }
    return "";
 80809a8:	4b04      	ldr	r3, [pc, #16]	; (80809bc <arg_get_value+0x1c>)
 80809aa:	2800      	cmp	r0, #0
 80809ac:	bf08      	it	eq
 80809ae:	4618      	moveq	r0, r3
 80809b0:	4770      	bx	lr
 80809b2:	4802      	ldr	r0, [pc, #8]	; (80809bc <arg_get_value+0x1c>)
 80809b4:	4770      	bx	lr
 80809b6:	4618      	mov	r0, r3
}
 80809b8:	4770      	bx	lr
 80809ba:	bf00      	nop
 80809bc:	0808a71d 	.word	0x0808a71d

080809c0 <arg_set_value>:

// Setter
int arg_set_value(arg* a, const char* val, size_t val_size) {
 80809c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80809c2:	460d      	mov	r5, r1
 80809c4:	4616      	mov	r6, r2
    if (a) {
 80809c6:	4604      	mov	r4, r0
 80809c8:	2800      	cmp	r0, #0
 80809ca:	d038      	beq.n	8080a3e <arg_set_value+0x7e>
        if (val && (val_size > 0)) {
 80809cc:	b929      	cbnz	r1, 80809da <arg_set_value+0x1a>
            while (j <= val_size) {
                a->val[j++] = '\0';
            }
        }

        a->set = ARG_SET;
 80809ce:	7b23      	ldrb	r3, [r4, #12]
        return ARG_VALUE_SUCCESS;
 80809d0:	2001      	movs	r0, #1
            while (j <= val_size) {
                a->val[j++] = '\0';
            }
        }

        a->set = ARG_SET;
 80809d2:	f043 0308 	orr.w	r3, r3, #8
 80809d6:	7323      	strb	r3, [r4, #12]
        return ARG_VALUE_SUCCESS;
 80809d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

// Setter
int arg_set_value(arg* a, const char* val, size_t val_size) {
    if (a) {
        if (val && (val_size > 0)) {
 80809da:	2a00      	cmp	r2, #0
 80809dc:	d0f7      	beq.n	80809ce <arg_set_value+0xe>
            if (a->set) arg_reset(a);
 80809de:	7b03      	ldrb	r3, [r0, #12]
 80809e0:	071b      	lsls	r3, r3, #28
 80809e2:	d501      	bpl.n	80809e8 <arg_set_value+0x28>
 80809e4:	f7ff ffa4 	bl	8080930 <arg_reset>
            a->val = (char*)malloc(val_size + 1);
 80809e8:	1c70      	adds	r0, r6, #1
 80809ea:	f003 fcdf 	bl	80843ac <malloc>

            size_t i = 0;
            size_t j = 0;

            int escaped  = 0;
            int in_quote = 0;
 80809ee:	2300      	movs	r3, #0
// Setter
int arg_set_value(arg* a, const char* val, size_t val_size) {
    if (a) {
        if (val && (val_size > 0)) {
            if (a->set) arg_reset(a);
            a->val = (char*)malloc(val_size + 1);
 80809f0:	60a0      	str	r0, [r4, #8]
 80809f2:	4629      	mov	r1, r5

            size_t i = 0;
            size_t j = 0;

            int escaped  = 0;
 80809f4:	461a      	mov	r2, r3
        if (val && (val_size > 0)) {
            if (a->set) arg_reset(a);
            a->val = (char*)malloc(val_size + 1);

            size_t i = 0;
            size_t j = 0;
 80809f6:	4618      	mov	r0, r3
 80809f8:	19af      	adds	r7, r5, r6

            int escaped  = 0;
            int in_quote = 0;

            while (i < val_size) {
 80809fa:	42b9      	cmp	r1, r7
 80809fc:	d012      	beq.n	8080a24 <arg_set_value+0x64>
                if ((val[i] == '\\') && (escaped == 0)) {
 80809fe:	f811 5b01 	ldrb.w	r5, [r1], #1
 8080a02:	2d5c      	cmp	r5, #92	; 0x5c
 8080a04:	d101      	bne.n	8080a0a <arg_set_value+0x4a>
 8080a06:	b15a      	cbz	r2, 8080a20 <arg_set_value+0x60>
 8080a08:	e005      	b.n	8080a16 <arg_set_value+0x56>
                    escaped = 1;
                } else if ((val[i] == '"') && (escaped == 0)) {
 8080a0a:	2d22      	cmp	r5, #34	; 0x22
 8080a0c:	d103      	bne.n	8080a16 <arg_set_value+0x56>
 8080a0e:	b912      	cbnz	r2, 8080a16 <arg_set_value+0x56>
 8080a10:	f083 0301 	eor.w	r3, r3, #1
                    in_quote = !in_quote;
 8080a14:	e7f1      	b.n	80809fa <arg_set_value+0x3a>
                } else {
                    a->val[j++] = val[i];
 8080a16:	68a2      	ldr	r2, [r4, #8]
 8080a18:	5415      	strb	r5, [r2, r0]
 8080a1a:	3001      	adds	r0, #1
                    escaped     = 0;
 8080a1c:	2200      	movs	r2, #0
 8080a1e:	e7ec      	b.n	80809fa <arg_set_value+0x3a>
            int escaped  = 0;
            int in_quote = 0;

            while (i < val_size) {
                if ((val[i] == '\\') && (escaped == 0)) {
                    escaped = 1;
 8080a20:	2201      	movs	r2, #1
 8080a22:	e7ea      	b.n	80809fa <arg_set_value+0x3a>
                }

                ++i;
            }

            if (in_quote) {
 8080a24:	b12b      	cbz	r3, 8080a32 <arg_set_value+0x72>
                free(a->val);
 8080a26:	68a0      	ldr	r0, [r4, #8]
 8080a28:	f003 fcc8 	bl	80843bc <free>
                a->val = NULL;
 8080a2c:	2000      	movs	r0, #0
 8080a2e:	60a0      	str	r0, [r4, #8]
                return ARG_VALUE_FAIL;
 8080a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }

            while (j <= val_size) {
 8080a32:	42b0      	cmp	r0, r6
 8080a34:	d8cb      	bhi.n	80809ce <arg_set_value+0xe>
                a->val[j++] = '\0';
 8080a36:	68a2      	ldr	r2, [r4, #8]
 8080a38:	5413      	strb	r3, [r2, r0]
 8080a3a:	3001      	adds	r0, #1
 8080a3c:	e7f9      	b.n	8080a32 <arg_set_value+0x72>
        a->set = ARG_SET;
        return ARG_VALUE_SUCCESS;
    }

    return ARG_VALUE_FAIL;
 8080a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080a40 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080a40:	b510      	push	{r4, lr}
 8080a42:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 8080a44:	6800      	ldr	r0, [r0, #0]
 8080a46:	b108      	cbz	r0, 8080a4c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080a48:	f003 fcb8 	bl	80843bc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080a4c:	4620      	mov	r0, r4
 8080a4e:	bd10      	pop	{r4, pc}

08080a50 <_Z15setup_USBSerialv>:
STARTUP(setup_USBSerial());
SYSTEM_MODE(MANUAL);



void setup_USBSerial(){
 8080a50:	b508      	push	{r3, lr}
  Serial.begin(9600);
 8080a52:	f004 fe1d 	bl	8085690 <_Z16_fetch_usbserialv>
}
 8080a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SYSTEM_MODE(MANUAL);



void setup_USBSerial(){
  Serial.begin(9600);
 8080a5a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080a5e:	f004 bdfd 	b.w	808565c <_ZN9USBSerial5beginEl>
	...

08080a64 <setup>:
void setup() {
  // Put initialization like pinMode and begin functions here.
  //obj.setSamplingRate(1);
  //obj.setSamplingPeriod(2);
  //obj.setLoggingFrequency(0.5);
  obj.cmdStart(); // will run Serial CLI thread 
 8080a64:	4801      	ldr	r0, [pc, #4]	; (8080a6c <setup+0x8>)
 8080a66:	f000 befb 	b.w	8081860 <_ZN9Co2System8cmdStartEv>
 8080a6a:	bf00      	nop
 8080a6c:	20000148 	.word	0x20000148

08080a70 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 8080a70:	b510      	push	{r4, lr}

  obj.readSensors(); // will read Co2 and GPS data.
 8080a72:	4c09      	ldr	r4, [pc, #36]	; (8080a98 <loop+0x28>)
 8080a74:	4620      	mov	r0, r4
 8080a76:	f000 fe6b 	bl	8081750 <_ZN9Co2System11readSensorsEv>
  obj.log();         // log data into SD card using JSON format.
 8080a7a:	4620      	mov	r0, r4
 8080a7c:	f000 fe6f 	bl	808175e <_ZN9Co2System3logEv>
  //obj.publish();   // will publish sensors data to Particle cloud.
  delay(30000);
 8080a80:	f247 5030 	movw	r0, #30000	; 0x7530
 8080a84:	f004 f9b0 	bl	8084de8 <delay>
  obj.sleep();       // will sleep for (SamplingPeriod - SamplingRate) * 60  minutes
 8080a88:	4620      	mov	r0, r4
 8080a8a:	f000 fe5a 	bl	8081742 <_ZN9Co2System5sleepEv>
  obj.wakeup();      // change the current state of the State Machine.
 8080a8e:	4620      	mov	r0, r4

}
 8080a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  obj.readSensors(); // will read Co2 and GPS data.
  obj.log();         // log data into SD card using JSON format.
  //obj.publish();   // will publish sensors data to Particle cloud.
  delay(30000);
  obj.sleep();       // will sleep for (SamplingPeriod - SamplingRate) * 60  minutes
  obj.wakeup();      // change the current state of the State Machine.
 8080a94:	f000 be6a 	b.w	808176c <_ZN9Co2System6wakeupEv>
 8080a98:	20000148 	.word	0x20000148

08080a9c <_GLOBAL__sub_I_SystemMode>:

}
 8080a9c:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8080a9e:	4c12      	ldr	r4, [pc, #72]	; (8080ae8 <_GLOBAL__sub_I_SystemMode+0x4c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080aa0:	f003 fa08 	bl	8083eb4 <HAL_Pin_Map>
#include "Co2System.h"

STARTUP(setup_USBSerial());
 8080aa4:	f7ff ffd4 	bl	8080a50 <_Z15setup_USBSerialv>
 8080aa8:	2300      	movs	r3, #0
 8080aaa:	6023      	str	r3, [r4, #0]
 8080aac:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8080aae:	71a3      	strb	r3, [r4, #6]
 8080ab0:	8123      	strh	r3, [r4, #8]
 8080ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
SYSTEM_MODE(MANUAL);
 8080ab6:	4d0d      	ldr	r5, [pc, #52]	; (8080aec <_GLOBAL__sub_I_SystemMode+0x50>)
 8080ab8:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080aba:	2003      	movs	r0, #3
 8080abc:	f003 fbaa 	bl	8084214 <set_system_mode>
 8080ac0:	4620      	mov	r0, r4


void setup_USBSerial(){
  Serial.begin(9600);
}
Co2System obj(1,2,0.5); // Creat an State Machine object.
 8080ac2:	4c0b      	ldr	r4, [pc, #44]	; (8080af0 <_GLOBAL__sub_I_SystemMode+0x54>)
#include "Co2System.h"

STARTUP(setup_USBSerial());
SYSTEM_MODE(MANUAL);
 8080ac4:	462a      	mov	r2, r5
 8080ac6:	490b      	ldr	r1, [pc, #44]	; (8080af4 <_GLOBAL__sub_I_SystemMode+0x58>)
 8080ac8:	f005 fa2a 	bl	8085f20 <__aeabi_atexit>


void setup_USBSerial(){
  Serial.begin(9600);
}
Co2System obj(1,2,0.5); // Creat an State Machine object.
 8080acc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8080ad0:	2202      	movs	r2, #2
 8080ad2:	2101      	movs	r1, #1
 8080ad4:	4620      	mov	r0, r4
 8080ad6:	f000 fdbb 	bl	8081650 <_ZN9Co2SystemC1Ejjf>
 8080ada:	462a      	mov	r2, r5
 8080adc:	4620      	mov	r0, r4
  //obj.publish();   // will publish sensors data to Particle cloud.
  delay(30000);
  obj.sleep();       // will sleep for (SamplingPeriod - SamplingRate) * 60  minutes
  obj.wakeup();      // change the current state of the State Machine.

}
 8080ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}


void setup_USBSerial(){
  Serial.begin(9600);
}
Co2System obj(1,2,0.5); // Creat an State Machine object.
 8080ae2:	4905      	ldr	r1, [pc, #20]	; (8080af8 <_GLOBAL__sub_I_SystemMode+0x5c>)
 8080ae4:	f005 ba1c 	b.w	8085f20 <__aeabi_atexit>
 8080ae8:	20000178 	.word	0x20000178
 8080aec:	20000140 	.word	0x20000140
 8080af0:	20000148 	.word	0x20000148
 8080af4:	08080a41 	.word	0x08080a41
 8080af8:	08081729 	.word	0x08081729

08080afc <_ZN5COZIRC1ER11USARTSerial>:

////////////////////////////////////////////////////////////
//
// CONSTRUCTOR
//
COZIR::COZIR(USARTSerial& nss) : CZR_Serial(nss)
 8080afc:	b510      	push	{r4, lr}
 8080afe:	4604      	mov	r4, r0
 8080b00:	4608      	mov	r0, r1
 8080b02:	6021      	str	r1, [r4, #0]
{
  CZR_Serial.begin(9600);
 8080b04:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8080b08:	f004 ff26 	bl	8085958 <_ZN11USARTSerial5beginEm>
}
 8080b0c:	4620      	mov	r0, r4
 8080b0e:	bd10      	pop	{r4, pc}

08080b10 <_ZN5COZIR7CommandEPc>:

/////////////////////////////////////////////////////////
// PRIVATE
  
void COZIR::Command(char* s)
{
 8080b10:	b510      	push	{r4, lr}
 8080b12:	4604      	mov	r4, r0
  CZR_Serial.print(s);
 8080b14:	6800      	ldr	r0, [r0, #0]
 8080b16:	f003 ff08 	bl	808492a <_ZN5Print5printEPKc>
  CZR_Serial.print("\r\n");
 8080b1a:	6820      	ldr	r0, [r4, #0]
 8080b1c:	4902      	ldr	r1, [pc, #8]	; (8080b28 <_ZN5COZIR7CommandEPc+0x18>)
}
 8080b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// PRIVATE
  
void COZIR::Command(char* s)
{
  CZR_Serial.print(s);
  CZR_Serial.print("\r\n");
 8080b22:	f003 bf02 	b.w	808492a <_ZN5Print5printEPKc>
 8080b26:	bf00      	nop
 8080b28:	0808a388 	.word	0x0808a388

08080b2c <_ZN5COZIR7RequestEPc>:
}

uint16_t COZIR::Request(char* s)
{
 8080b2c:	b570      	push	{r4, r5, r6, lr}
 8080b2e:	4604      	mov	r4, r0
  Command(s);
  // empty buffer
  buffer[0] = '\0';
 8080b30:	2500      	movs	r5, #0
  CZR_Serial.print("\r\n");
}

uint16_t COZIR::Request(char* s)
{
  Command(s);
 8080b32:	f7ff ffed 	bl	8080b10 <_ZN5COZIR7CommandEPc>
  // empty buffer
  buffer[0] = '\0';
 8080b36:	7125      	strb	r5, [r4, #4]
  // read answer; there may be a 100ms delay!
  // TODO: PROPER TIMEOUT CODE.
  delay(250);  
 8080b38:	20fa      	movs	r0, #250	; 0xfa
 8080b3a:	f004 f955 	bl	8084de8 <delay>
 8080b3e:	1ce6      	adds	r6, r4, #3
  int idx = 0;
  while(CZR_Serial.available())
 8080b40:	6820      	ldr	r0, [r4, #0]
 8080b42:	6803      	ldr	r3, [r0, #0]
 8080b44:	691b      	ldr	r3, [r3, #16]
 8080b46:	4798      	blx	r3
 8080b48:	b138      	cbz	r0, 8080b5a <_ZN5COZIR7RequestEPc+0x2e>
  {
	buffer[idx++] = CZR_Serial.read();
 8080b4a:	6820      	ldr	r0, [r4, #0]
 8080b4c:	3501      	adds	r5, #1
 8080b4e:	6803      	ldr	r3, [r0, #0]
 8080b50:	695b      	ldr	r3, [r3, #20]
 8080b52:	4798      	blx	r3
 8080b54:	f806 0f01 	strb.w	r0, [r6, #1]!
  buffer[0] = '\0';
  // read answer; there may be a 100ms delay!
  // TODO: PROPER TIMEOUT CODE.
  delay(250);  
  int idx = 0;
  while(CZR_Serial.available())
 8080b58:	e7f2      	b.n	8080b40 <_ZN5COZIR7RequestEPc+0x14>
  {
	buffer[idx++] = CZR_Serial.read();
  }
  buffer[idx] = '\0';
 8080b5a:	4425      	add	r5, r4
 8080b5c:	7128      	strb	r0, [r5, #4]
  uint16_t rv = 0;

  switch(buffer[1])
 8080b5e:	7963      	ldrb	r3, [r4, #5]
 8080b60:	2b54      	cmp	r3, #84	; 0x54
 8080b62:	d10a      	bne.n	8080b7a <_ZN5COZIR7RequestEPc+0x4e>
  {
    case 'T' :
            rv = atoi(&buffer[5]);
 8080b64:	f104 0009 	add.w	r0, r4, #9
 8080b68:	f006 fbb5 	bl	80872d6 <atoi>
            if (buffer[4] == 1) rv += 1000;
 8080b6c:	7a23      	ldrb	r3, [r4, #8]
  uint16_t rv = 0;

  switch(buffer[1])
  {
    case 'T' :
            rv = atoi(&buffer[5]);
 8080b6e:	b280      	uxth	r0, r0
            if (buffer[4] == 1) rv += 1000;
 8080b70:	2b01      	cmp	r3, #1
 8080b72:	d106      	bne.n	8080b82 <_ZN5COZIR7RequestEPc+0x56>
 8080b74:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8080b78:	e002      	b.n	8080b80 <_ZN5COZIR7RequestEPc+0x54>
            break;
    default :
            rv = atoi(&buffer[2]);
 8080b7a:	1da0      	adds	r0, r4, #6
 8080b7c:	f006 fbab 	bl	80872d6 <atoi>
 8080b80:	b280      	uxth	r0, r0
            break;
  }
  return rv;
}
 8080b82:	bd70      	pop	{r4, r5, r6, pc}

08080b84 <_ZN5COZIR3CO2Ev>:
  return 1.0 * Request("L");
}

uint16_t COZIR::CO2()
{
  return Request("Z");
 8080b84:	4901      	ldr	r1, [pc, #4]	; (8080b8c <_ZN5COZIR3CO2Ev+0x8>)
 8080b86:	f7ff bfd1 	b.w	8080b2c <_ZN5COZIR7RequestEPc>
 8080b8a:	bf00      	nop
 8080b8c:	0808af41 	.word	0x0808af41

08080b90 <_GLOBAL__sub_I__ZN5COZIRC2ER11USARTSerial>:
 8080b90:	f003 b990 	b.w	8083eb4 <HAL_Pin_Map>

08080b94 <_GLOBAL__sub_I__ZN12Adafruit_GPS12newDataValueE12nmea_index_tf>:
 8080b94:	f003 b98e 	b.w	8083eb4 <HAL_Pin_Map>

08080b98 <_GLOBAL__sub_I__ZN12Adafruit_GPS5parseEPc>:
 8080b98:	f003 b98c 	b.w	8083eb4 <HAL_Pin_Map>

08080b9c <_GLOBAL__sub_I__ZN12Adafruit_GPS5buildEPcPKcS2_cb>:
 8080b9c:	f003 b98a 	b.w	8083eb4 <HAL_Pin_Map>

08080ba0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080ba2:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 8080ba4:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080ba6:	4608      	mov	r0, r1
 8080ba8:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 8080baa:	b133      	cbz	r3, 8080bba <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 8080bac:	b93d      	cbnz	r5, 8080bbe <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 8080bae:	490c      	ldr	r1, [pc, #48]	; (8080be0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 8080bb0:	b004      	add	sp, #16
 8080bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 8080bb6:	f003 beb8 	b.w	808492a <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 8080bba:	4b0a      	ldr	r3, [pc, #40]	; (8080be4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 8080bbc:	e000      	b.n	8080bc0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 8080bbe:	4b0a      	ldr	r3, [pc, #40]	; (8080be8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 8080bc0:	7b16      	ldrb	r6, [r2, #12]
 8080bc2:	4c0a      	ldr	r4, [pc, #40]	; (8080bec <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 8080bc4:	490a      	ldr	r1, [pc, #40]	; (8080bf0 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080bc6:	7b52      	ldrb	r2, [r2, #13]
 8080bc8:	2e01      	cmp	r6, #1
 8080bca:	bf08      	it	eq
 8080bcc:	4621      	moveq	r1, r4
 8080bce:	9202      	str	r2, [sp, #8]
 8080bd0:	9101      	str	r1, [sp, #4]
 8080bd2:	9500      	str	r5, [sp, #0]
 8080bd4:	4a07      	ldr	r2, [pc, #28]	; (8080bf4 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 8080bd6:	2100      	movs	r1, #0
 8080bd8:	f003 ffb1 	bl	8084b3e <_ZN5Print11printf_implEbPKcz>
  }
 8080bdc:	b004      	add	sp, #16
 8080bde:	bd70      	pop	{r4, r5, r6, pc}
 8080be0:	0808a3d9 	.word	0x0808a3d9
 8080be4:	0808a71d 	.word	0x0808a71d
 8080be8:	0808a3c8 	.word	0x0808a3c8
 8080bec:	0808a3d1 	.word	0x0808a3d1
 8080bf0:	0808a3d5 	.word	0x0808a3d5
 8080bf4:	0808a3ef 	.word	0x0808a3ef

08080bf8 <_GLOBAL__sub_I__ZN12Adafruit_GPS5beginEm>:
 8080bf8:	f003 b95c 	b.w	8083eb4 <HAL_Pin_Map>

08080bfc <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 8080bfc:	6803      	ldr	r3, [r0, #0]
 8080bfe:	4718      	bx	r3

08080c00 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080c00:	2a01      	cmp	r2, #1
 8080c02:	d002      	beq.n	8080c0a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 8080c04:	2a02      	cmp	r2, #2
 8080c06:	d002      	beq.n	8080c0e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 8080c08:	e004      	b.n	8080c14 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080c0a:	6001      	str	r1, [r0, #0]
	      break;
 8080c0c:	e002      	b.n	8080c14 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8080c0e:	680b      	ldr	r3, [r1, #0]
 8080c10:	b100      	cbz	r0, 8080c14 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 8080c12:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080c14:	2000      	movs	r0, #0
 8080c16:	4770      	bx	lr

08080c18 <_ZN13IntervalTimerD1Ev>:
	}
#endif

    }

    ~IntervalTimer() { end(); }
 8080c18:	b510      	push	{r4, lr}
 8080c1a:	4604      	mov	r4, r0
 8080c1c:	f003 f93e 	bl	8083e9c <_ZN13IntervalTimer3endEv>
 8080c20:	4620      	mov	r0, r4
 8080c22:	bd10      	pop	{r4, pc}

08080c24 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080c24:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080c26:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080c28:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080c2a:	b113      	cbz	r3, 8080c32 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080c2c:	2203      	movs	r2, #3
 8080c2e:	4601      	mov	r1, r0
 8080c30:	4798      	blx	r3
    }
 8080c32:	4620      	mov	r0, r4
 8080c34:	bd10      	pop	{r4, pc}
	...

08080c38 <_ZN13IntervalTimerC1Ev>:
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8080c38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080c3a:	223b      	movs	r2, #59	; 0x3b
 8080c3c:	8042      	strh	r2, [r0, #2]
 8080c3e:	f247 522f 	movw	r2, #29999	; 0x752f
 8080c42:	8082      	strh	r2, [r0, #4]
 8080c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8080c48:	80c2      	strh	r2, [r0, #6]
	status = TIMER_OFF;

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 8080c4a:	4a25      	ldr	r2, [pc, #148]	; (8080ce0 <_ZN13IntervalTimerC1Ev+0xa8>)
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8080c4c:	2300      	movs	r3, #0
 8080c4e:	7003      	strb	r3, [r0, #0]
	status = TIMER_OFF;
 8080c50:	7203      	strb	r3, [r0, #8]

	for (int i=0; i < NUM_SIT; i++)		//Set all SIT slots to unused
		SIT_used[i] = false;
 8080c52:	7013      	strb	r3, [r2, #0]
 8080c54:	7053      	strb	r3, [r2, #1]
 8080c56:	7093      	strb	r3, [r2, #2]
 8080c58:	70d3      	strb	r3, [r2, #3]
 8080c5a:	7113      	strb	r3, [r2, #4]
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8080c5c:	7803      	ldrb	r3, [r0, #0]
 	ISRcallback myISRcallback;

    bool beginCycles(void (*isrCallback)(), intPeriod Period, bool scale, TIMid id);

  public:
    IntervalTimer() {
 8080c5e:	4604      	mov	r4, r0
		if (!attachSystemInterrupt(SysInterrupt_TIM2_Update, Wiring_TIM2_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
	}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	if (!sysIntSetupDone) {
 8080c60:	2b00      	cmp	r3, #0
 8080c62:	d13a      	bne.n	8080cda <_ZN13IntervalTimerC1Ev+0xa2>
		sysIntSetupDone = true;
 8080c64:	2301      	movs	r3, #1
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080c66:	4e1f      	ldr	r6, [pc, #124]	; (8080ce4 <_ZN13IntervalTimerC1Ev+0xac>)
	    _M_manager = &_My_handler::_M_manager;
 8080c68:	4d1f      	ldr	r5, [pc, #124]	; (8080ce8 <_ZN13IntervalTimerC1Ev+0xb0>)
 8080c6a:	7003      	strb	r3, [r0, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080c6c:	4b1f      	ldr	r3, [pc, #124]	; (8080cec <_ZN13IntervalTimerC1Ev+0xb4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM3_Update, Wiring_TIM3_Interrupt_Handler_override)) ;	//error
 8080c6e:	4669      	mov	r1, sp
 8080c70:	2013      	movs	r0, #19
 8080c72:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080c74:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080c76:	9502      	str	r5, [sp, #8]
 8080c78:	f004 fd84 	bl	8085784 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080c7c:	4668      	mov	r0, sp
 8080c7e:	f7ff ffd1 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080c82:	4b1b      	ldr	r3, [pc, #108]	; (8080cf0 <_ZN13IntervalTimerC1Ev+0xb8>)
		if (!attachSystemInterrupt(SysInterrupt_TIM4_Update, Wiring_TIM4_Interrupt_Handler_override)) ;	//error
 8080c84:	4669      	mov	r1, sp
 8080c86:	201a      	movs	r0, #26
 8080c88:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080c8a:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080c8c:	9502      	str	r5, [sp, #8]
 8080c8e:	f004 fd79 	bl	8085784 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080c92:	4668      	mov	r0, sp
 8080c94:	f7ff ffc6 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080c98:	4b16      	ldr	r3, [pc, #88]	; (8080cf4 <_ZN13IntervalTimerC1Ev+0xbc>)
		if (!attachSystemInterrupt(SysInterrupt_TIM5_Update, Wiring_TIM5_Interrupt_Handler_override)) ;	//error
 8080c9a:	4669      	mov	r1, sp
 8080c9c:	2021      	movs	r0, #33	; 0x21
 8080c9e:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080ca0:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080ca2:	9502      	str	r5, [sp, #8]
 8080ca4:	f004 fd6e 	bl	8085784 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080ca8:	4668      	mov	r0, sp
 8080caa:	f7ff ffbb 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080cae:	4b12      	ldr	r3, [pc, #72]	; (8080cf8 <_ZN13IntervalTimerC1Ev+0xc0>)
		if (!attachSystemInterrupt(SysInterrupt_TIM6_Update, Wiring_TIM6_Interrupt_Handler_override));	//error
 8080cb0:	4669      	mov	r1, sp
 8080cb2:	2024      	movs	r0, #36	; 0x24
 8080cb4:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080cb6:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080cb8:	9502      	str	r5, [sp, #8]
 8080cba:	f004 fd63 	bl	8085784 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080cbe:	4668      	mov	r0, sp
 8080cc0:	f7ff ffb0 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8080cc4:	4b0d      	ldr	r3, [pc, #52]	; (8080cfc <_ZN13IntervalTimerC1Ev+0xc4>)
		if (!attachSystemInterrupt(SysInterrupt_TIM7_Update, Wiring_TIM7_Interrupt_Handler_override));	//error
 8080cc6:	4669      	mov	r1, sp
 8080cc8:	2026      	movs	r0, #38	; 0x26
 8080cca:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080ccc:	9603      	str	r6, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080cce:	9502      	str	r5, [sp, #8]
 8080cd0:	f004 fd58 	bl	8085784 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080cd4:	4668      	mov	r0, sp
 8080cd6:	f7ff ffa5 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
	}
#endif

    }
 8080cda:	4620      	mov	r0, r4
 8080cdc:	b004      	add	sp, #16
 8080cde:	bd70      	pop	{r4, r5, r6, pc}
 8080ce0:	20000338 	.word	0x20000338
 8080ce4:	08080bfd 	.word	0x08080bfd
 8080ce8:	08080c01 	.word	0x08080c01
 8080cec:	08083d55 	.word	0x08083d55
 8080cf0:	08083d7d 	.word	0x08083d7d
 8080cf4:	08083da5 	.word	0x08083da5
 8080cf8:	08083dcd 	.word	0x08083dcd
 8080cfc:	08083df5 	.word	0x08083df5

08080d00 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE>:
  }
  else
  {
    _txBitPos++;
  }
}
 8080d00:	b570      	push	{r4, r5, r6, lr}
 8080d02:	f003 f8d7 	bl	8083eb4 <HAL_Pin_Map>
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 8080d06:	4c0c      	ldr	r4, [pc, #48]	; (8080d38 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x38>)
 8080d08:	4b0c      	ldr	r3, [pc, #48]	; (8080d3c <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x3c>)
 8080d0a:	4e0d      	ldr	r6, [pc, #52]	; (8080d40 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x40>)
 8080d0c:	6018      	str	r0, [r3, #0]
 8080d0e:	4d0d      	ldr	r5, [pc, #52]	; (8080d44 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x44>)
 8080d10:	4620      	mov	r0, r4
 8080d12:	f7ff ff91 	bl	8080c38 <_ZN13IntervalTimerC1Ev>
 8080d16:	4620      	mov	r0, r4
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8080d18:	4c0b      	ldr	r4, [pc, #44]	; (8080d48 <_GLOBAL__sub_I__ZN18ParticleSoftSerial6_rxPinE+0x48>)
char ParticleSoftSerial::_txBuffer[_PSS_BUFF_SIZE] =           "";
volatile uint8_t ParticleSoftSerial::_txBufferHead =            0; 
volatile uint8_t ParticleSoftSerial::_txBufferTail =            0; 
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
 8080d1a:	4632      	mov	r2, r6
 8080d1c:	4629      	mov	r1, r5
 8080d1e:	f005 f8ff 	bl	8085f20 <__aeabi_atexit>
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8080d22:	4620      	mov	r0, r4
 8080d24:	f7ff ff88 	bl	8080c38 <_ZN13IntervalTimerC1Ev>
 8080d28:	4632      	mov	r2, r6
 8080d2a:	4629      	mov	r1, r5
 8080d2c:	4620      	mov	r0, r4
  }
  else
  {
    _txBitPos++;
  }
}
 8080d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
volatile int8_t  ParticleSoftSerial::_txBitPos     = PSS_INACTIVE; 

IntervalTimer ParticleSoftSerial::rxTimer;
TIMid         ParticleSoftSerial::_rxTimId         = TIMER7;        // HW timer ID used for SparkIntervalTimer

IntervalTimer ParticleSoftSerial::txTimer;
 8080d32:	f005 b8f5 	b.w	8085f20 <__aeabi_atexit>
 8080d36:	bf00      	nop
 8080d38:	20000198 	.word	0x20000198
 8080d3c:	20000194 	.word	0x20000194
 8080d40:	20000140 	.word	0x20000140
 8080d44:	08080c19 	.word	0x08080c19
 8080d48:	20000184 	.word	0x20000184

08080d4c <_ZN12PublishState5sleepEP9Co2System>:
#include "PublishState.h"

bool PublishState::sleep(Co2System* pCo2Sys) {
 8080d4c:	b513      	push	{r0, r1, r4, lr}
	pCo2Sys->setCurrentState(new SleepState());
 8080d4e:	2004      	movs	r0, #4
#include "PublishState.h"

bool PublishState::sleep(Co2System* pCo2Sys) {
 8080d50:	460c      	mov	r4, r1
	pCo2Sys->setCurrentState(new SleepState());
 8080d52:	f7ff f9a4 	bl	808009e <_Znwj>
 8080d56:	4601      	mov	r1, r0
 8080d58:	b108      	cbz	r0, 8080d5e <_ZN12PublishState5sleepEP9Co2System+0x12>
#pragma once
#include "Co2System.h"
#include "State.h"
class SleepState : public State {
 8080d5a:	4b0d      	ldr	r3, [pc, #52]	; (8080d90 <_ZN12PublishState5sleepEP9Co2System+0x44>)
 8080d5c:	6003      	str	r3, [r0, #0]
 8080d5e:	4620      	mov	r0, r4
 8080d60:	f000 fd0b 	bl	808177a <_ZN9Co2System15setCurrentStateEP5State>
	Serial.print("going to sleep\n");
 8080d64:	f004 fc94 	bl	8085690 <_Z16_fetch_usbserialv>
 8080d68:	490a      	ldr	r1, [pc, #40]	; (8080d94 <_ZN12PublishState5sleepEP9Co2System+0x48>)
 8080d6a:	f003 fdde 	bl	808492a <_ZN5Print5printEPKc>
	System.sleep(SLEEP_MODE_DEEP, (pCo2Sys->T.samplingPeriod - pCo2Sys->T.samplingRate) * 60);
 8080d6e:	4b0a      	ldr	r3, [pc, #40]	; (8080d98 <_ZN12PublishState5sleepEP9Co2System+0x4c>)
 8080d70:	4a0a      	ldr	r2, [pc, #40]	; (8080d9c <_ZN12PublishState5sleepEP9Co2System+0x50>)
 8080d72:	681b      	ldr	r3, [r3, #0]
 8080d74:	6812      	ldr	r2, [r2, #0]
 8080d76:	213c      	movs	r1, #60	; 0x3c
 8080d78:	1a9a      	subs	r2, r3, r2
 8080d7a:	4b09      	ldr	r3, [pc, #36]	; (8080da0 <_ZN12PublishState5sleepEP9Co2System+0x54>)
 8080d7c:	434a      	muls	r2, r1
 8080d7e:	4668      	mov	r0, sp
 8080d80:	681b      	ldr	r3, [r3, #0]
 8080d82:	2101      	movs	r1, #1
 8080d84:	f003 fca4 	bl	80846d0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
	return true;
}
 8080d88:	2001      	movs	r0, #1
 8080d8a:	b002      	add	sp, #8
 8080d8c:	bd10      	pop	{r4, pc}
 8080d8e:	bf00      	nop
 8080d90:	0808a60c 	.word	0x0808a60c
 8080d94:	0808a4f2 	.word	0x0808a4f2
 8080d98:	200001f8 	.word	0x200001f8
 8080d9c:	200001c8 	.word	0x200001c8
 8080da0:	200001ac 	.word	0x200001ac

08080da4 <_ZN12PublishState3logEP9Co2System>:
        Serial.println("Not max time, try again to publish");
      }
	}
	return true;
}
bool PublishState::log(Co2System* pCo2Sys) {
 8080da4:	b513      	push	{r0, r1, r4, lr}
    char fileName[] = "Log.txt"; // SD library only supports up to 8.3 names
 8080da6:	466b      	mov	r3, sp
 8080da8:	4a0c      	ldr	r2, [pc, #48]	; (8080ddc <_ZN12PublishState3logEP9Co2System+0x38>)
        Serial.println("Not max time, try again to publish");
      }
	}
	return true;
}
bool PublishState::log(Co2System* pCo2Sys) {
 8080daa:	460c      	mov	r4, r1
    char fileName[] = "Log.txt"; // SD library only supports up to 8.3 names
 8080dac:	6810      	ldr	r0, [r2, #0]
 8080dae:	6851      	ldr	r1, [r2, #4]
 8080db0:	c303      	stmia	r3!, {r0, r1}
    while(!pCo2Sys->initSdCard(fileName, A2, A0));
 8080db2:	230a      	movs	r3, #10
 8080db4:	220c      	movs	r2, #12
 8080db6:	4669      	mov	r1, sp
 8080db8:	4620      	mov	r0, r4
 8080dba:	f000 fcef 	bl	808179c <_ZN9Co2System10initSdCardEPchh>
 8080dbe:	2800      	cmp	r0, #0
 8080dc0:	d0f7      	beq.n	8080db2 <_ZN12PublishState3logEP9Co2System+0xe>
	pCo2Sys->writeJson(fileName);
 8080dc2:	4669      	mov	r1, sp
 8080dc4:	4620      	mov	r0, r4
 8080dc6:	f000 ffd1 	bl	8081d6c <_ZN9Co2System9writeJsonEPc>
	Serial.print("logging done!\n");
 8080dca:	f004 fc61 	bl	8085690 <_Z16_fetch_usbserialv>
 8080dce:	4904      	ldr	r1, [pc, #16]	; (8080de0 <_ZN12PublishState3logEP9Co2System+0x3c>)
 8080dd0:	f003 fdab 	bl	808492a <_ZN5Print5printEPKc>
	return true;
 8080dd4:	2001      	movs	r0, #1
 8080dd6:	b002      	add	sp, #8
 8080dd8:	bd10      	pop	{r4, pc}
 8080dda:	bf00      	nop
 8080ddc:	0808a511 	.word	0x0808a511
 8080de0:	0808a502 	.word	0x0808a502

08080de4 <_ZN12PublishStateD1Ev>:
#pragma once
#include "State.h"
#include "SleepState.h"
#include "Co2System.h"

class PublishState : public State {
 8080de4:	b510      	push	{r4, lr}
 8080de6:	4604      	mov	r4, r0
 8080de8:	4b02      	ldr	r3, [pc, #8]	; (8080df4 <_ZN12PublishStateD1Ev+0x10>)
 8080dea:	6003      	str	r3, [r0, #0]
 8080dec:	f000 f8b8 	bl	8080f60 <_ZN5StateD1Ev>
 8080df0:	4620      	mov	r0, r4
 8080df2:	bd10      	pop	{r4, pc}
 8080df4:	0808a588 	.word	0x0808a588

08080df8 <_ZN12PublishStateD0Ev>:
 8080df8:	b510      	push	{r4, lr}
 8080dfa:	4604      	mov	r4, r0
 8080dfc:	f7ff fff2 	bl	8080de4 <_ZN12PublishStateD1Ev>
 8080e00:	4620      	mov	r0, r4
 8080e02:	2104      	movs	r1, #4
 8080e04:	f005 f89a 	bl	8085f3c <_ZdlPvj>
 8080e08:	4620      	mov	r0, r4
 8080e0a:	bd10      	pop	{r4, pc}

08080e0c <_ZN12PublishState7publishEP9Co2System>:
bool PublishState::readSensors(Co2System* pCo2Sys) {
	Serial.print(Time.format(TIME_FORMAT_ISO8601_FULL));
 	Serial.print("-> CO2 : ");Serial.println(pCo2Sys->co2());
	return true;
}
bool PublishState::publish(Co2System* pCo2Sys) {
 8080e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080e0e:	460e      	mov	r6, r1
	Serial.print("Publish\n");
 8080e10:	f004 fc3e 	bl	8085690 <_Z16_fetch_usbserialv>
 8080e14:	4928      	ldr	r1, [pc, #160]	; (8080eb8 <_ZN12PublishState7publishEP9Co2System+0xac>)
 8080e16:	f003 fd88 	bl	808492a <_ZN5Print5printEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080e1a:	f003 f8d3 	bl	8083fc4 <HAL_Timer_Get_Milli_Seconds>
	bool isMaxTime = false;
	pCo2Sys->T.stateTime = millis();
 8080e1e:	4b27      	ldr	r3, [pc, #156]	; (8080ebc <_ZN12PublishState7publishEP9Co2System+0xb0>)
 8080e20:	461d      	mov	r5, r3
 8080e22:	6018      	str	r0, [r3, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080e24:	f003 faa2 	bl	808436c <spark_cloud_flag_connected>
	
	while(!isMaxTime)
    {
      //connect particle to the cloud
      if (Particle.connected() == false)
 8080e28:	b908      	cbnz	r0, 8080e2e <_ZN12PublishState7publishEP9Co2System+0x22>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080e2a:	f003 fa97 	bl	808435c <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080e2e:	f003 fa9d 	bl	808436c <spark_cloud_flag_connected>
      {
        Particle.connect();
      }
	  // If connected, publish data buffer
      if (Particle.connected())
 8080e32:	4604      	mov	r4, r0
 8080e34:	b340      	cbz	r0, 8080e88 <_ZN12PublishState7publishEP9Co2System+0x7c>
      {
        Serial.println("publishing data");
 8080e36:	f004 fc2b 	bl	8085690 <_Z16_fetch_usbserialv>
 8080e3a:	4921      	ldr	r1, [pc, #132]	; (8080ec0 <_ZN12PublishState7publishEP9Co2System+0xb4>)
 8080e3c:	f003 fd8c 	bl	8084958 <_ZN5Print7printlnEPKc>
        Particle.publish("deltaPCo2", (char*)pCo2Sys->getCo2Level() , 60, PRIVATE);
 8080e40:	4630      	mov	r0, r6
 8080e42:	f000 fc7c 	bl	808173e <_ZN9Co2System11getCo2LevelEv>
 8080e46:	4b1f      	ldr	r3, [pc, #124]	; (8080ec4 <_ZN12PublishState7publishEP9Co2System+0xb8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080e48:	4602      	mov	r2, r0
 8080e4a:	781b      	ldrb	r3, [r3, #0]
 8080e4c:	491e      	ldr	r1, [pc, #120]	; (8080ec8 <_ZN12PublishState7publishEP9Co2System+0xbc>)
 8080e4e:	f88d 3000 	strb.w	r3, [sp]
 8080e52:	a802      	add	r0, sp, #8
 8080e54:	233c      	movs	r3, #60	; 0x3c
 8080e56:	f004 f9d9 	bl	808520c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8080e5a:	9c03      	ldr	r4, [sp, #12]
 8080e5c:	b17c      	cbz	r4, 8080e7e <_ZN12PublishState7publishEP9Co2System+0x72>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080e5e:	6863      	ldr	r3, [r4, #4]
 8080e60:	3b01      	subs	r3, #1
 8080e62:	6063      	str	r3, [r4, #4]
 8080e64:	b95b      	cbnz	r3, 8080e7e <_ZN12PublishState7publishEP9Co2System+0x72>
        {
          _M_dispose();
 8080e66:	6823      	ldr	r3, [r4, #0]
 8080e68:	4620      	mov	r0, r4
 8080e6a:	689b      	ldr	r3, [r3, #8]
 8080e6c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080e6e:	68a3      	ldr	r3, [r4, #8]
 8080e70:	3b01      	subs	r3, #1
 8080e72:	60a3      	str	r3, [r4, #8]
 8080e74:	b91b      	cbnz	r3, 8080e7e <_ZN12PublishState7publishEP9Co2System+0x72>
            _M_destroy();
 8080e76:	6823      	ldr	r3, [r4, #0]
 8080e78:	4620      	mov	r0, r4
 8080e7a:	68db      	ldr	r3, [r3, #12]
 8080e7c:	4798      	blx	r3

        // Wait for the publish data
        delay(4000);
 8080e7e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8080e82:	f003 ffb1 	bl	8084de8 <delay>
 8080e86:	e013      	b.n	8080eb0 <_ZN12PublishState7publishEP9Co2System+0xa4>
 8080e88:	f003 f89c 	bl	8083fc4 <HAL_Timer_Get_Milli_Seconds>
        isMaxTime = true;
	  }
	  else
      {
        // Took too long to publish, just go to sleep
        if ((millis() - pCo2Sys->T.stateTime) >= 4000)
 8080e8c:	682b      	ldr	r3, [r5, #0]
 8080e8e:	1ac0      	subs	r0, r0, r3
 8080e90:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 8080e94:	d305      	bcc.n	8080ea2 <_ZN12PublishState7publishEP9Co2System+0x96>
        {
          isMaxTime = true;
          Serial.println("max time for pulishing reach");
 8080e96:	f004 fbfb 	bl	8085690 <_Z16_fetch_usbserialv>
 8080e9a:	490c      	ldr	r1, [pc, #48]	; (8080ecc <_ZN12PublishState7publishEP9Co2System+0xc0>)
 8080e9c:	f003 fd5c 	bl	8084958 <_ZN5Print7printlnEPKc>
	  else
      {
        // Took too long to publish, just go to sleep
        if ((millis() - pCo2Sys->T.stateTime) >= 4000)
        {
          isMaxTime = true;
 8080ea0:	2401      	movs	r4, #1
          Serial.println("max time for pulishing reach");
        }
        Serial.println("Not max time, try again to publish");
 8080ea2:	f004 fbf5 	bl	8085690 <_Z16_fetch_usbserialv>
 8080ea6:	490a      	ldr	r1, [pc, #40]	; (8080ed0 <_ZN12PublishState7publishEP9Co2System+0xc4>)
 8080ea8:	f003 fd56 	bl	8084958 <_ZN5Print7printlnEPKc>
bool PublishState::publish(Co2System* pCo2Sys) {
	Serial.print("Publish\n");
	bool isMaxTime = false;
	pCo2Sys->T.stateTime = millis();
	
	while(!isMaxTime)
 8080eac:	2c00      	cmp	r4, #0
 8080eae:	d0b9      	beq.n	8080e24 <_ZN12PublishState7publishEP9Co2System+0x18>
        }
        Serial.println("Not max time, try again to publish");
      }
	}
	return true;
}
 8080eb0:	2001      	movs	r0, #1
 8080eb2:	b004      	add	sp, #16
 8080eb4:	bd70      	pop	{r4, r5, r6, pc}
 8080eb6:	bf00      	nop
 8080eb8:	0808a5ac 	.word	0x0808a5ac
 8080ebc:	20000288 	.word	0x20000288
 8080ec0:	0808a519 	.word	0x0808a519
 8080ec4:	200001a8 	.word	0x200001a8
 8080ec8:	0808a529 	.word	0x0808a529
 8080ecc:	0808a533 	.word	0x0808a533
 8080ed0:	0808a550 	.word	0x0808a550

08080ed4 <_ZN12PublishState11readSensorsEP9Co2System>:
	pCo2Sys->setCurrentState(new SleepState());
	Serial.print("going to sleep\n");
	System.sleep(SLEEP_MODE_DEEP, (pCo2Sys->T.samplingPeriod - pCo2Sys->T.samplingRate) * 60);
	return true;
}
bool PublishState::readSensors(Co2System* pCo2Sys) {
 8080ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080ed6:	460c      	mov	r4, r1
	Serial.print(Time.format(TIME_FORMAT_ISO8601_FULL));
 8080ed8:	f004 fbda 	bl	8085690 <_Z16_fetch_usbserialv>
 8080edc:	4b17      	ldr	r3, [pc, #92]	; (8080f3c <_ZN12PublishState11readSensorsEP9Co2System+0x68>)
 8080ede:	4605      	mov	r5, r0
 8080ee0:	681e      	ldr	r6, [r3, #0]
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 8080ee2:	f003 ff70 	bl	8084dc6 <_ZN9TimeClass3nowEv>
 8080ee6:	4633      	mov	r3, r6
 8080ee8:	4602      	mov	r2, r0
 8080eea:	4915      	ldr	r1, [pc, #84]	; (8080f40 <_ZN12PublishState11readSensorsEP9Co2System+0x6c>)
 8080eec:	4668      	mov	r0, sp
 8080eee:	f003 ff17 	bl	8084d20 <_ZN9TimeClass6formatElPKc>
 8080ef2:	9900      	ldr	r1, [sp, #0]
 8080ef4:	4628      	mov	r0, r5
 8080ef6:	f003 fd18 	bl	808492a <_ZN5Print5printEPKc>
 8080efa:	4668      	mov	r0, sp
 8080efc:	f003 fc28 	bl	8084750 <_ZN6StringD1Ev>
 	Serial.print("-> CO2 : ");Serial.println(pCo2Sys->co2());
 8080f00:	f004 fbc6 	bl	8085690 <_Z16_fetch_usbserialv>
 8080f04:	490f      	ldr	r1, [pc, #60]	; (8080f44 <_ZN12PublishState11readSensorsEP9Co2System+0x70>)
 8080f06:	f003 fd10 	bl	808492a <_ZN5Print5printEPKc>
 8080f0a:	f004 fbc1 	bl	8085690 <_Z16_fetch_usbserialv>
 8080f0e:	4605      	mov	r5, r0
 8080f10:	4620      	mov	r0, r4
 8080f12:	f000 fc3c 	bl	808178e <_ZN9Co2System3co2Ev>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8080f16:	1e04      	subs	r4, r0, #0
 8080f18:	da05      	bge.n	8080f26 <_ZN12PublishState11readSensorsEP9Co2System+0x52>
            t = print('-');
 8080f1a:	212d      	movs	r1, #45	; 0x2d
 8080f1c:	4628      	mov	r0, r5
 8080f1e:	f003 fd08 	bl	8084932 <_ZN5Print5printEc>
            val = -n;
 8080f22:	4261      	negs	r1, r4
 8080f24:	e000      	b.n	8080f28 <_ZN12PublishState11readSensorsEP9Co2System+0x54>
        } else {
            val = n;
 8080f26:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
 8080f28:	220a      	movs	r2, #10
 8080f2a:	4628      	mov	r0, r5
 8080f2c:	f003 fd1e 	bl	808496c <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 8080f30:	4628      	mov	r0, r5
 8080f32:	f003 fd05 	bl	8084940 <_ZN5Print7printlnEv>
	return true;
}
 8080f36:	2001      	movs	r0, #1
 8080f38:	b004      	add	sp, #16
 8080f3a:	bd70      	pop	{r4, r5, r6, pc}
 8080f3c:	20000048 	.word	0x20000048
 8080f40:	2000035c 	.word	0x2000035c
 8080f44:	0808a573 	.word	0x0808a573

08080f48 <_GLOBAL__sub_I__ZN12PublishState5sleepEP9Co2System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080f48:	4b03      	ldr	r3, [pc, #12]	; (8080f58 <_GLOBAL__sub_I__ZN12PublishState5sleepEP9Co2System+0x10>)
 8080f4a:	2200      	movs	r2, #0
 8080f4c:	601a      	str	r2, [r3, #0]
 8080f4e:	4b03      	ldr	r3, [pc, #12]	; (8080f5c <_GLOBAL__sub_I__ZN12PublishState5sleepEP9Co2System+0x14>)
 8080f50:	2201      	movs	r2, #1
 8080f52:	701a      	strb	r2, [r3, #0]
 8080f54:	f002 bfae 	b.w	8083eb4 <HAL_Pin_Map>
 8080f58:	200001ac 	.word	0x200001ac
 8080f5c:	200001a8 	.word	0x200001a8

08080f60 <_ZN5StateD1Ev>:

#include "State.h"

State::~State(){

}
 8080f60:	4770      	bx	lr
	...

08080f64 <_ZN5State7publishEP9Co2System>:
bool State::publish(Co2System* pCo2Sys) {
 8080f64:	b508      	push	{r3, lr}
	Serial.print("Can not Publish\n");
 8080f66:	f004 fb93 	bl	8085690 <_Z16_fetch_usbserialv>
 8080f6a:	4902      	ldr	r1, [pc, #8]	; (8080f74 <_ZN5State7publishEP9Co2System+0x10>)
 8080f6c:	f003 fcdd 	bl	808492a <_ZN5Print5printEPKc>
	return false;
}
 8080f70:	2000      	movs	r0, #0
 8080f72:	bd08      	pop	{r3, pc}
 8080f74:	0808a5a4 	.word	0x0808a5a4

08080f78 <_ZN5State5sleepEP9Co2System>:
bool State::sleep(Co2System* pCo2Sys) {
 8080f78:	b508      	push	{r3, lr}
	Serial.print("Can not Sleep\n");
 8080f7a:	f004 fb89 	bl	8085690 <_Z16_fetch_usbserialv>
 8080f7e:	4902      	ldr	r1, [pc, #8]	; (8080f88 <_ZN5State5sleepEP9Co2System+0x10>)
 8080f80:	f003 fcd3 	bl	808492a <_ZN5Print5printEPKc>
	return false;
}
 8080f84:	2000      	movs	r0, #0
 8080f86:	bd08      	pop	{r3, pc}
 8080f88:	0808a5b5 	.word	0x0808a5b5

08080f8c <_ZN5State11readSensorsEP9Co2System>:
bool State::readSensors(Co2System* pCo2Sys) {
 8080f8c:	b508      	push	{r3, lr}
	Serial.print("Can not Read Sensors\n");
 8080f8e:	f004 fb7f 	bl	8085690 <_Z16_fetch_usbserialv>
 8080f92:	4902      	ldr	r1, [pc, #8]	; (8080f9c <_ZN5State11readSensorsEP9Co2System+0x10>)
 8080f94:	f003 fcc9 	bl	808492a <_ZN5Print5printEPKc>
	return false;
}
 8080f98:	2000      	movs	r0, #0
 8080f9a:	bd08      	pop	{r3, pc}
 8080f9c:	0808a5c4 	.word	0x0808a5c4

08080fa0 <_ZN5State3logEP9Co2System>:
bool State::log(Co2System* pCo2Sys) {
 8080fa0:	b508      	push	{r3, lr}
	Serial.print("Can not log\n");
 8080fa2:	f004 fb75 	bl	8085690 <_Z16_fetch_usbserialv>
 8080fa6:	4902      	ldr	r1, [pc, #8]	; (8080fb0 <_ZN5State3logEP9Co2System+0x10>)
 8080fa8:	f003 fcbf 	bl	808492a <_ZN5Print5printEPKc>
	return false;
}
 8080fac:	2000      	movs	r0, #0
 8080fae:	bd08      	pop	{r3, pc}
 8080fb0:	0808a5da 	.word	0x0808a5da

08080fb4 <_ZN5State6wakeupEP9Co2System>:
bool State::wakeup(Co2System* pCo2Sys) {
 8080fb4:	b508      	push	{r3, lr}
	Serial.print("Can not wakeup\n");
 8080fb6:	f004 fb6b 	bl	8085690 <_Z16_fetch_usbserialv>
 8080fba:	4902      	ldr	r1, [pc, #8]	; (8080fc4 <_ZN5State6wakeupEP9Co2System+0x10>)
 8080fbc:	f003 fcb5 	bl	808492a <_ZN5Print5printEPKc>
	return false;
}
 8080fc0:	2000      	movs	r0, #0
 8080fc2:	bd08      	pop	{r3, pc}
 8080fc4:	0808a5e7 	.word	0x0808a5e7

08080fc8 <_GLOBAL__sub_I__ZN5StateD2Ev>:
 8080fc8:	f002 bf74 	b.w	8083eb4 <HAL_Pin_Map>

08080fcc <_ZN10SleepState6wakeupEP9Co2System>:
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"


bool SleepState::wakeup(Co2System* pCo2Sys) {
 8080fcc:	b510      	push	{r4, lr}
	pCo2Sys->setCurrentState(new PublishState());
 8080fce:	2004      	movs	r0, #4
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"


bool SleepState::wakeup(Co2System* pCo2Sys) {
 8080fd0:	460c      	mov	r4, r1
	pCo2Sys->setCurrentState(new PublishState());
 8080fd2:	f7ff f864 	bl	808009e <_Znwj>
 8080fd6:	4601      	mov	r1, r0
 8080fd8:	b108      	cbz	r0, 8080fde <_ZN10SleepState6wakeupEP9Co2System+0x12>
 8080fda:	4b06      	ldr	r3, [pc, #24]	; (8080ff4 <_ZN10SleepState6wakeupEP9Co2System+0x28>)
 8080fdc:	6003      	str	r3, [r0, #0]
 8080fde:	4620      	mov	r0, r4
 8080fe0:	f000 fbcb 	bl	808177a <_ZN9Co2System15setCurrentStateEP5State>
	Serial.print("Woke up!\n");
 8080fe4:	f004 fb54 	bl	8085690 <_Z16_fetch_usbserialv>
 8080fe8:	4903      	ldr	r1, [pc, #12]	; (8080ff8 <_ZN10SleepState6wakeupEP9Co2System+0x2c>)
 8080fea:	f003 fc9e 	bl	808492a <_ZN5Print5printEPKc>
	return true;
}
 8080fee:	2001      	movs	r0, #1
 8080ff0:	bd10      	pop	{r4, pc}
 8080ff2:	bf00      	nop
 8080ff4:	0808a588 	.word	0x0808a588
 8080ff8:	0808a5f7 	.word	0x0808a5f7

08080ffc <_ZN10SleepStateD1Ev>:
 8080ffc:	b510      	push	{r4, lr}
 8080ffe:	4604      	mov	r4, r0
 8081000:	4b02      	ldr	r3, [pc, #8]	; (808100c <_ZN10SleepStateD1Ev+0x10>)
 8081002:	6003      	str	r3, [r0, #0]
 8081004:	f7ff ffac 	bl	8080f60 <_ZN5StateD1Ev>
 8081008:	4620      	mov	r0, r4
 808100a:	bd10      	pop	{r4, pc}
 808100c:	0808a60c 	.word	0x0808a60c

08081010 <_ZN10SleepStateD0Ev>:
 8081010:	b510      	push	{r4, lr}
 8081012:	4604      	mov	r4, r0
 8081014:	f7ff fff2 	bl	8080ffc <_ZN10SleepStateD1Ev>
 8081018:	4620      	mov	r0, r4
 808101a:	2104      	movs	r1, #4
 808101c:	f004 ff8e 	bl	8085f3c <_ZdlPvj>
 8081020:	4620      	mov	r0, r4
 8081022:	bd10      	pop	{r4, pc}

08081024 <_GLOBAL__sub_I__ZN10SleepState6wakeupEP9Co2System>:
 8081024:	f002 bf46 	b.w	8083eb4 <HAL_Pin_Map>

08081028 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8081028:	4770      	bx	lr

0808102a <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 808102a:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 808102c:	4602      	mov	r2, r0
 808102e:	f003 0308 	and.w	r3, r3, #8
 8081032:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8081036:	b12b      	cbz	r3, 8081044 <_ZN4File9availableEv+0x1a>
 8081038:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 808103a:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 808103c:	1a18      	subs	r0, r3, r0
 808103e:	bf48      	it	mi
 8081040:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8081044:	4770      	bx	lr

08081046 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 8081046:	4770      	bx	lr

08081048 <_ZN4FileD0Ev>:
 8081048:	b510      	push	{r4, lr}
 808104a:	4604      	mov	r4, r0
 808104c:	2134      	movs	r1, #52	; 0x34
 808104e:	f004 ff75 	bl	8085f3c <_ZdlPvj>
 8081052:	4620      	mov	r0, r4
 8081054:	bd10      	pop	{r4, pc}

08081056 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8081056:	3010      	adds	r0, #16
 8081058:	f001 bca8 	b.w	80829ac <_ZN7FatFile4syncEv>

0808105c <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 808105c:	3010      	adds	r0, #16
 808105e:	f001 bbbd 	b.w	80827dc <_ZN7FatFile4peekEv>

08081062 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8081062:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8081064:	2201      	movs	r2, #1
 8081066:	f10d 0107 	add.w	r1, sp, #7
 808106a:	3010      	adds	r0, #16
 808106c:	f001 fb03 	bl	8082676 <_ZN7FatFile4readEPvj>
 8081070:	2801      	cmp	r0, #1
 8081072:	bf0c      	ite	eq
 8081074:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8081078:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 808107c:	b003      	add	sp, #12
 808107e:	f85d fb04 	ldr.w	pc, [sp], #4

08081082 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8081082:	3010      	adds	r0, #16
 8081084:	f001 bd1e 	b.w	8082ac4 <_ZN7FatFile5writeEPKvj>

08081088 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8081088:	b507      	push	{r0, r1, r2, lr}
 808108a:	ab02      	add	r3, sp, #8
 808108c:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8081090:	2201      	movs	r2, #1
 8081092:	4619      	mov	r1, r3
 8081094:	3010      	adds	r0, #16
 8081096:	f001 fd15 	bl	8082ac4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 808109a:	b003      	add	sp, #12
 808109c:	f85d fb04 	ldr.w	pc, [sp], #4

080810a0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80810a0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80810a2:	2301      	movs	r3, #1
 80810a4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80810a6:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80810a8:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80810aa:	b10b      	cbz	r3, 80810b0 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80810ac:	68c0      	ldr	r0, [r0, #12]
 80810ae:	e006      	b.n	80810be <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80810b0:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80810b2:	b128      	cbz	r0, 80810c0 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80810b4:	6883      	ldr	r3, [r0, #8]
 80810b6:	b90b      	cbnz	r3, 80810bc <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80810b8:	f004 ff53 	bl	8085f62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80810bc:	68c3      	ldr	r3, [r0, #12]
 80810be:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80810c0:	2301      	movs	r3, #1
 80810c2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 80810c4:	2000      	movs	r0, #0
    }
 80810c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 80810ca:	f002 bfd3 	b.w	8084074 <os_thread_exit>
	...

080810d0 <_ZL13lfreqCallbackP3cmd>:
	Serial.println("   Ok!");	
	}



 static void lfreqCallback(cmd* c) {
 80810d0:	b530      	push	{r4, r5, lr}
 80810d2:	b089      	sub	sp, #36	; 0x24
	Timing t;
    Command cmd(c); // Create wrapper object
 80810d4:	4601      	mov	r1, r0
 80810d6:	2201      	movs	r2, #1
 80810d8:	4668      	mov	r0, sp
 80810da:	f002 fd3f 	bl	8083b5c <_ZN7CommandC1EP3cmdb>
	Argument inputArg = cmd.getArgument("v");
 80810de:	4a17      	ldr	r2, [pc, #92]	; (808113c <_ZL13lfreqCallbackP3cmd+0x6c>)
 80810e0:	4669      	mov	r1, sp
 80810e2:	a802      	add	r0, sp, #8
 80810e4:	f002 fd8c 	bl	8083c00 <_ZNK7Command11getArgumentEPKc>
	int argValue = inputArg.getValue().toFloat();
 80810e8:	a902      	add	r1, sp, #8
 80810ea:	a804      	add	r0, sp, #16
 80810ec:	f002 fbce 	bl	808388c <_ZNK8Argument8getValueEv>
 80810f0:	a804      	add	r0, sp, #16
 80810f2:	f003 fbfa 	bl	80848ea <_ZNK6String7toFloatEv>
 80810f6:	4605      	mov	r5, r0
 80810f8:	a804      	add	r0, sp, #16
 80810fa:	f003 fb29 	bl	8084750 <_ZN6StringD1Ev>
	t.loggingFrequency = argValue;
 80810fe:	4628      	mov	r0, r5
 8081100:	f006 f864 	bl	80871cc <__aeabi_f2iz>
 8081104:	f005 fe32 	bl	8086d6c <__aeabi_i2f>
 8081108:	4c0d      	ldr	r4, [pc, #52]	; (8081140 <_ZL13lfreqCallbackP3cmd+0x70>)
 808110a:	6020      	str	r0, [r4, #0]
	Serial.print("Logging Frequency = ");
 808110c:	f004 fac0 	bl	8085690 <_Z16_fetch_usbserialv>
 8081110:	490c      	ldr	r1, [pc, #48]	; (8081144 <_ZL13lfreqCallbackP3cmd+0x74>)
 8081112:	f003 fc0a 	bl	808492a <_ZN5Print5printEPKc>
	Serial.print(t.loggingFrequency);
 8081116:	f004 fabb 	bl	8085690 <_Z16_fetch_usbserialv>
 808111a:	2202      	movs	r2, #2
 808111c:	6821      	ldr	r1, [r4, #0]
 808111e:	f003 fcff 	bl	8084b20 <_ZN5Print5printEfi>
	Serial.println("   Ok!");	
 8081122:	f004 fab5 	bl	8085690 <_Z16_fetch_usbserialv>
 8081126:	4908      	ldr	r1, [pc, #32]	; (8081148 <_ZL13lfreqCallbackP3cmd+0x78>)
 8081128:	f003 fc16 	bl	8084958 <_ZN5Print7printlnEPKc>


 static void lfreqCallback(cmd* c) {
	Timing t;
    Command cmd(c); // Create wrapper object
	Argument inputArg = cmd.getArgument("v");
 808112c:	a802      	add	r0, sp, #8
 808112e:	f002 fb89 	bl	8083844 <_ZN8ArgumentD1Ev>



 static void lfreqCallback(cmd* c) {
	Timing t;
    Command cmd(c); // Create wrapper object
 8081132:	4668      	mov	r0, sp
 8081134:	f002 fd1d 	bl	8083b72 <_ZN7CommandD1Ev>
	int argValue = inputArg.getValue().toFloat();
	t.loggingFrequency = argValue;
	Serial.print("Logging Frequency = ");
	Serial.print(t.loggingFrequency);
	Serial.println("   Ok!");	
	}
 8081138:	b009      	add	sp, #36	; 0x24
 808113a:	bd30      	pop	{r4, r5, pc}
 808113c:	0808ad52 	.word	0x0808ad52
 8081140:	200001fc 	.word	0x200001fc
 8081144:	0808a652 	.word	0x0808a652
 8081148:	0808a667 	.word	0x0808a667

0808114c <_ZL13errorCallbackP9cmd_error>:





static void errorCallback(cmd_error* e) {
 808114c:	b510      	push	{r4, lr}
 808114e:	b088      	sub	sp, #32
    CommandError cmdError(e); // Create wrapper object
 8081150:	2201      	movs	r2, #1
 8081152:	4601      	mov	r1, r0
 8081154:	4668      	mov	r0, sp
 8081156:	f002 fa23 	bl	80835a0 <_ZN12CommandErrorC1EP9cmd_errorb>
    Serial.print("ERROR: ");
 808115a:	f004 fa99 	bl	8085690 <_Z16_fetch_usbserialv>
 808115e:	491d      	ldr	r1, [pc, #116]	; (80811d4 <_ZL13errorCallbackP9cmd_error+0x88>)
 8081160:	f003 fbe3 	bl	808492a <_ZN5Print5printEPKc>
    Serial.println(cmdError.toString());
 8081164:	f004 fa94 	bl	8085690 <_Z16_fetch_usbserialv>
 8081168:	4604      	mov	r4, r0
 808116a:	4669      	mov	r1, sp
 808116c:	a804      	add	r0, sp, #16
 808116e:	f002 fb4f 	bl	8083810 <_ZNK12CommandError8toStringEv>
 8081172:	9904      	ldr	r1, [sp, #16]
 8081174:	4620      	mov	r0, r4
 8081176:	f003 fbef 	bl	8084958 <_ZN5Print7printlnEPKc>
 808117a:	a804      	add	r0, sp, #16
 808117c:	f003 fae8 	bl	8084750 <_ZN6StringD1Ev>

    if (cmdError.hasCommand()) {
 8081180:	4668      	mov	r0, sp
 8081182:	f002 fa28 	bl	80835d6 <_ZNK12CommandError10hasCommandEv>
 8081186:	b1f8      	cbz	r0, 80811c8 <_ZL13errorCallbackP9cmd_error+0x7c>
        Serial.print("Did you mean \"");
 8081188:	f004 fa82 	bl	8085690 <_Z16_fetch_usbserialv>
 808118c:	4912      	ldr	r1, [pc, #72]	; (80811d8 <_ZL13errorCallbackP9cmd_error+0x8c>)
 808118e:	f003 fbcc 	bl	808492a <_ZN5Print5printEPKc>
        Serial.print(cmdError.getCommand().toString());
 8081192:	f004 fa7d 	bl	8085690 <_Z16_fetch_usbserialv>
 8081196:	4604      	mov	r4, r0
 8081198:	4669      	mov	r1, sp
 808119a:	a802      	add	r0, sp, #8
 808119c:	f002 fa30 	bl	8083600 <_ZNK12CommandError10getCommandEv>
 80811a0:	2201      	movs	r2, #1
 80811a2:	a902      	add	r1, sp, #8
 80811a4:	a804      	add	r0, sp, #16
 80811a6:	f002 fdc3 	bl	8083d30 <_ZNK7Command8toStringEb>
 80811aa:	9904      	ldr	r1, [sp, #16]
 80811ac:	4620      	mov	r0, r4
 80811ae:	f003 fbbc 	bl	808492a <_ZN5Print5printEPKc>
 80811b2:	a804      	add	r0, sp, #16
 80811b4:	f003 facc 	bl	8084750 <_ZN6StringD1Ev>
 80811b8:	a802      	add	r0, sp, #8
 80811ba:	f002 fcda 	bl	8083b72 <_ZN7CommandD1Ev>
        Serial.println("\"?");
 80811be:	f004 fa67 	bl	8085690 <_Z16_fetch_usbserialv>
 80811c2:	4906      	ldr	r1, [pc, #24]	; (80811dc <_ZL13errorCallbackP9cmd_error+0x90>)
 80811c4:	f003 fbc8 	bl	8084958 <_ZN5Print7printlnEPKc>




static void errorCallback(cmd_error* e) {
    CommandError cmdError(e); // Create wrapper object
 80811c8:	4668      	mov	r0, sp
 80811ca:	f002 f9fb 	bl	80835c4 <_ZN12CommandErrorD1Ev>
    if (cmdError.hasCommand()) {
        Serial.print("Did you mean \"");
        Serial.print(cmdError.getCommand().toString());
        Serial.println("\"?");
    }
}
 80811ce:	b008      	add	sp, #32
 80811d0:	bd10      	pop	{r4, pc}
 80811d2:	bf00      	nop
 80811d4:	0808a66e 	.word	0x0808a66e
 80811d8:	0808a676 	.word	0x0808a676
 80811dc:	0808a685 	.word	0x0808a685

080811e0 <_ZN9Co2System18serialReadToBufferEv>:
   hardwareThread = Thread("CommandBuffer", serialReadToBuffer, OS_THREAD_PRIORITY_DEFAULT + 1);
}


// the actual thread function responsible fo receiving the commands.
void Co2System::serialReadToBuffer() {
 80811e0:	b530      	push	{r4, r5, lr}
	serialCommandBuffer="\0";
 80811e2:	4956      	ldr	r1, [pc, #344]	; (808133c <_ZN9Co2System18serialReadToBufferEv+0x15c>)
   hardwareThread = Thread("CommandBuffer", serialReadToBuffer, OS_THREAD_PRIORITY_DEFAULT + 1);
}


// the actual thread function responsible fo receiving the commands.
void Co2System::serialReadToBuffer() {
 80811e4:	b08f      	sub	sp, #60	; 0x3c
	serialCommandBuffer="\0";
 80811e6:	4856      	ldr	r0, [pc, #344]	; (8081340 <_ZN9Co2System18serialReadToBufferEv+0x160>)
 80811e8:	f003 fb26 	bl	8084838 <_ZN6StringaSEPKc>


// this function will define the commands and deligate the input command string to the CLI parser.

static void cmdProcessor(String buffer){
	if (!initialized) {
 80811ec:	4c55      	ldr	r4, [pc, #340]	; (8081344 <_ZN9Co2System18serialReadToBufferEv+0x164>)
// the actual thread function responsible fo receiving the commands.
void Co2System::serialReadToBuffer() {
	serialCommandBuffer="\0";
    while(true)
      {
        if (Serial.available() > 0) {              //Device responded
 80811ee:	f004 fa4f 	bl	8085690 <_Z16_fetch_usbserialv>
 80811f2:	6803      	ldr	r3, [r0, #0]
 80811f4:	691b      	ldr	r3, [r3, #16]
 80811f6:	4798      	blx	r3
 80811f8:	2800      	cmp	r0, #0
 80811fa:	f340 809b 	ble.w	8081334 <_ZN9Co2System18serialReadToBufferEv+0x154>
        char inchar = (char)Serial.read();         //get the char we just received
 80811fe:	f004 fa47 	bl	8085690 <_Z16_fetch_usbserialv>
 8081202:	6803      	ldr	r3, [r0, #0]
 8081204:	695b      	ldr	r3, [r3, #20]
 8081206:	4798      	blx	r3
 8081208:	b2c5      	uxtb	r5, r0

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808120a:	4629      	mov	r1, r5
 808120c:	484c      	ldr	r0, [pc, #304]	; (8081340 <_ZN9Co2System18serialReadToBufferEv+0x160>)
 808120e:	f003 fb4e 	bl	80848ae <_ZN6String6concatEc>
        serialCommandBuffer += inchar;             //add the char to the var called sensorstring
        if (inchar == '\r') {                      //if the incoming character is a <CR> end of message
 8081212:	2d0d      	cmp	r5, #13
 8081214:	f040 808e 	bne.w	8081334 <_ZN9Co2System18serialReadToBufferEv+0x154>
		  cmdProcessor(serialCommandBuffer);
 8081218:	4949      	ldr	r1, [pc, #292]	; (8081340 <_ZN9Co2System18serialReadToBufferEv+0x160>)
 808121a:	a806      	add	r0, sp, #24
 808121c:	f003 fb01 	bl	8084822 <_ZN6StringC1ERKS_>


// this function will define the commands and deligate the input command string to the CLI parser.

static void cmdProcessor(String buffer){
	if (!initialized) {
 8081220:	7823      	ldrb	r3, [r4, #0]
 8081222:	2b00      	cmp	r3, #0
 8081224:	d138      	bne.n	8081298 <_ZN9Co2System18serialReadToBufferEv+0xb8>
  		initialized = true;
 8081226:	2301      	movs	r3, #1
		cli.setOnError(errorCallback); // Set error Callback
 8081228:	4947      	ldr	r1, [pc, #284]	; (8081348 <_ZN9Co2System18serialReadToBufferEv+0x168>)
 808122a:	4848      	ldr	r0, [pc, #288]	; (808134c <_ZN9Co2System18serialReadToBufferEv+0x16c>)

// this function will define the commands and deligate the input command string to the CLI parser.

static void cmdProcessor(String buffer){
	if (!initialized) {
  		initialized = true;
 808122c:	7023      	strb	r3, [r4, #0]
		cli.setOnError(errorCallback); // Set error Callback
 808122e:	f002 fc91 	bl	8083b54 <_ZN9SimpleCLI10setOnErrorEPFvP9cmd_errorE>
	
		Command srate = cli.addCommand("srate", srateCallback);
 8081232:	4b47      	ldr	r3, [pc, #284]	; (8081350 <_ZN9Co2System18serialReadToBufferEv+0x170>)
 8081234:	4a47      	ldr	r2, [pc, #284]	; (8081354 <_ZN9Co2System18serialReadToBufferEv+0x174>)
 8081236:	4945      	ldr	r1, [pc, #276]	; (808134c <_ZN9Co2System18serialReadToBufferEv+0x16c>)
 8081238:	4668      	mov	r0, sp
 808123a:	f002 fc85 	bl	8083b48 <_ZN9SimpleCLI10addCommandEPKcPFvP3cmdE>
    	srate.addArgument("v");
 808123e:	4a46      	ldr	r2, [pc, #280]	; (8081358 <_ZN9Co2System18serialReadToBufferEv+0x178>)
 8081240:	4669      	mov	r1, sp
 8081242:	a80a      	add	r0, sp, #40	; 0x28
 8081244:	f002 fcc8 	bl	8083bd8 <_ZN7Command11addArgumentEPKc>
 8081248:	a80a      	add	r0, sp, #40	; 0x28
 808124a:	f002 fafb 	bl	8083844 <_ZN8ArgumentD1Ev>
		Command speriod = cli.addCommand("speriod", speriodCallback);
 808124e:	4b43      	ldr	r3, [pc, #268]	; (808135c <_ZN9Co2System18serialReadToBufferEv+0x17c>)
 8081250:	4a43      	ldr	r2, [pc, #268]	; (8081360 <_ZN9Co2System18serialReadToBufferEv+0x180>)
 8081252:	493e      	ldr	r1, [pc, #248]	; (808134c <_ZN9Co2System18serialReadToBufferEv+0x16c>)
 8081254:	a802      	add	r0, sp, #8
 8081256:	f002 fc77 	bl	8083b48 <_ZN9SimpleCLI10addCommandEPKcPFvP3cmdE>
    	speriod.addArgument("v");
 808125a:	4a3f      	ldr	r2, [pc, #252]	; (8081358 <_ZN9Co2System18serialReadToBufferEv+0x178>)
 808125c:	a902      	add	r1, sp, #8
 808125e:	a80a      	add	r0, sp, #40	; 0x28
 8081260:	f002 fcba 	bl	8083bd8 <_ZN7Command11addArgumentEPKc>
 8081264:	a80a      	add	r0, sp, #40	; 0x28
 8081266:	f002 faed 	bl	8083844 <_ZN8ArgumentD1Ev>
		Command lfreq = cli.addCommand("lfreq", lfreqCallback);
 808126a:	4b3e      	ldr	r3, [pc, #248]	; (8081364 <_ZN9Co2System18serialReadToBufferEv+0x184>)
 808126c:	4a3e      	ldr	r2, [pc, #248]	; (8081368 <_ZN9Co2System18serialReadToBufferEv+0x188>)
 808126e:	4937      	ldr	r1, [pc, #220]	; (808134c <_ZN9Co2System18serialReadToBufferEv+0x16c>)
 8081270:	a804      	add	r0, sp, #16
 8081272:	f002 fc69 	bl	8083b48 <_ZN9SimpleCLI10addCommandEPKcPFvP3cmdE>
    	lfreq.addArgument("v");
 8081276:	4a38      	ldr	r2, [pc, #224]	; (8081358 <_ZN9Co2System18serialReadToBufferEv+0x178>)
 8081278:	a904      	add	r1, sp, #16
 808127a:	a80a      	add	r0, sp, #40	; 0x28
 808127c:	f002 fcac 	bl	8083bd8 <_ZN7Command11addArgumentEPKc>
 8081280:	a80a      	add	r0, sp, #40	; 0x28
 8081282:	f002 fadf 	bl	8083844 <_ZN8ArgumentD1Ev>
	
		Command srate = cli.addCommand("srate", srateCallback);
    	srate.addArgument("v");
		Command speriod = cli.addCommand("speriod", speriodCallback);
    	speriod.addArgument("v");
		Command lfreq = cli.addCommand("lfreq", lfreqCallback);
 8081286:	a804      	add	r0, sp, #16
 8081288:	f002 fc73 	bl	8083b72 <_ZN7CommandD1Ev>
  		initialized = true;
		cli.setOnError(errorCallback); // Set error Callback
	
		Command srate = cli.addCommand("srate", srateCallback);
    	srate.addArgument("v");
		Command speriod = cli.addCommand("speriod", speriodCallback);
 808128c:	a802      	add	r0, sp, #8
 808128e:	f002 fc70 	bl	8083b72 <_ZN7CommandD1Ev>
static void cmdProcessor(String buffer){
	if (!initialized) {
  		initialized = true;
		cli.setOnError(errorCallback); // Set error Callback
	
		Command srate = cli.addCommand("srate", srateCallback);
 8081292:	4668      	mov	r0, sp
 8081294:	f002 fc6d 	bl	8083b72 <_ZN7CommandD1Ev>
		Command speriod = cli.addCommand("speriod", speriodCallback);
    	speriod.addArgument("v");
		Command lfreq = cli.addCommand("lfreq", lfreqCallback);
    	lfreq.addArgument("v");
	}
	cli.parse(buffer);
 8081298:	482c      	ldr	r0, [pc, #176]	; (808134c <_ZN9Co2System18serialReadToBufferEv+0x16c>)
 808129a:	a906      	add	r1, sp, #24
 808129c:	f002 fc04 	bl	8083aa8 <_ZN9SimpleCLI5parseERK6String>
	if (cli.errored()) {
 80812a0:	482a      	ldr	r0, [pc, #168]	; (808134c <_ZN9Co2System18serialReadToBufferEv+0x16c>)
 80812a2:	f002 fc05 	bl	8083ab0 <_ZNK9SimpleCLI7erroredEv>
 80812a6:	2800      	cmp	r0, #0
 80812a8:	d03d      	beq.n	8081326 <_ZN9Co2System18serialReadToBufferEv+0x146>
        CommandError cmdError = cli.getError();
 80812aa:	4928      	ldr	r1, [pc, #160]	; (808134c <_ZN9Co2System18serialReadToBufferEv+0x16c>)
 80812ac:	a802      	add	r0, sp, #8
 80812ae:	f002 fc04 	bl	8083aba <_ZN9SimpleCLI8getErrorEv>

        Serial.print("ERROR: ");
 80812b2:	f004 f9ed 	bl	8085690 <_Z16_fetch_usbserialv>
 80812b6:	492d      	ldr	r1, [pc, #180]	; (808136c <_ZN9Co2System18serialReadToBufferEv+0x18c>)
 80812b8:	f003 fb37 	bl	808492a <_ZN5Print5printEPKc>
        Serial.println(cmdError.toString());
 80812bc:	f004 f9e8 	bl	8085690 <_Z16_fetch_usbserialv>
 80812c0:	4605      	mov	r5, r0
 80812c2:	a902      	add	r1, sp, #8
 80812c4:	a80a      	add	r0, sp, #40	; 0x28
 80812c6:	f002 faa3 	bl	8083810 <_ZNK12CommandError8toStringEv>
 80812ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80812cc:	4628      	mov	r0, r5
 80812ce:	f003 fb43 	bl	8084958 <_ZN5Print7printlnEPKc>
 80812d2:	a80a      	add	r0, sp, #40	; 0x28
 80812d4:	f003 fa3c 	bl	8084750 <_ZN6StringD1Ev>
        if (cmdError.hasCommand()) {
 80812d8:	a802      	add	r0, sp, #8
 80812da:	f002 f97c 	bl	80835d6 <_ZNK12CommandError10hasCommandEv>
 80812de:	b1f8      	cbz	r0, 8081320 <_ZN9Co2System18serialReadToBufferEv+0x140>
            Serial.print("Did you mean \"");
 80812e0:	f004 f9d6 	bl	8085690 <_Z16_fetch_usbserialv>
 80812e4:	4922      	ldr	r1, [pc, #136]	; (8081370 <_ZN9Co2System18serialReadToBufferEv+0x190>)
 80812e6:	f003 fb20 	bl	808492a <_ZN5Print5printEPKc>
            Serial.print(cmdError.getCommand().toString());
 80812ea:	f004 f9d1 	bl	8085690 <_Z16_fetch_usbserialv>
 80812ee:	4605      	mov	r5, r0
 80812f0:	a902      	add	r1, sp, #8
 80812f2:	a804      	add	r0, sp, #16
 80812f4:	f002 f984 	bl	8083600 <_ZNK12CommandError10getCommandEv>
 80812f8:	2201      	movs	r2, #1
 80812fa:	a904      	add	r1, sp, #16
 80812fc:	a80a      	add	r0, sp, #40	; 0x28
 80812fe:	f002 fd17 	bl	8083d30 <_ZNK7Command8toStringEb>
 8081302:	990a      	ldr	r1, [sp, #40]	; 0x28
 8081304:	4628      	mov	r0, r5
 8081306:	f003 fb10 	bl	808492a <_ZN5Print5printEPKc>
 808130a:	a80a      	add	r0, sp, #40	; 0x28
 808130c:	f003 fa20 	bl	8084750 <_ZN6StringD1Ev>
 8081310:	a804      	add	r0, sp, #16
 8081312:	f002 fc2e 	bl	8083b72 <_ZN7CommandD1Ev>
            Serial.println("\"?");
 8081316:	f004 f9bb 	bl	8085690 <_Z16_fetch_usbserialv>
 808131a:	4916      	ldr	r1, [pc, #88]	; (8081374 <_ZN9Co2System18serialReadToBufferEv+0x194>)
 808131c:	f003 fb1c 	bl	8084958 <_ZN5Print7printlnEPKc>
		Command lfreq = cli.addCommand("lfreq", lfreqCallback);
    	lfreq.addArgument("v");
	}
	cli.parse(buffer);
	if (cli.errored()) {
        CommandError cmdError = cli.getError();
 8081320:	a802      	add	r0, sp, #8
 8081322:	f002 f94f 	bl	80835c4 <_ZN12CommandErrorD1Ev>
      {
        if (Serial.available() > 0) {              //Device responded
        char inchar = (char)Serial.read();         //get the char we just received
        serialCommandBuffer += inchar;             //add the char to the var called sensorstring
        if (inchar == '\r') {                      //if the incoming character is a <CR> end of message
		  cmdProcessor(serialCommandBuffer);
 8081326:	a806      	add	r0, sp, #24
 8081328:	f003 fa12 	bl	8084750 <_ZN6StringD1Ev>
		  serialCommandBuffer = "\0";
 808132c:	4903      	ldr	r1, [pc, #12]	; (808133c <_ZN9Co2System18serialReadToBufferEv+0x15c>)
 808132e:	4804      	ldr	r0, [pc, #16]	; (8081340 <_ZN9Co2System18serialReadToBufferEv+0x160>)
 8081330:	f003 fa82 	bl	8084838 <_ZN6StringaSEPKc>
        }
      }
        HAL_Delay_Milliseconds(10);
 8081334:	200a      	movs	r0, #10
 8081336:	f002 fe35 	bl	8083fa4 <HAL_Delay_Milliseconds>


// the actual thread function responsible fo receiving the commands.
void Co2System::serialReadToBuffer() {
	serialCommandBuffer="\0";
    while(true)
 808133a:	e758      	b.n	80811ee <_ZN9Co2System18serialReadToBufferEv+0xe>
 808133c:	0808a650 	.word	0x0808a650
 8081340:	200001cc 	.word	0x200001cc
 8081344:	2000028c 	.word	0x2000028c
 8081348:	0808114d 	.word	0x0808114d
 808134c:	200001dc 	.word	0x200001dc
 8081350:	080813ed 	.word	0x080813ed
 8081354:	0808a688 	.word	0x0808a688
 8081358:	0808ad52 	.word	0x0808ad52
 808135c:	08081379 	.word	0x08081379
 8081360:	0808a68e 	.word	0x0808a68e
 8081364:	080810d1 	.word	0x080810d1
 8081368:	0808a696 	.word	0x0808a696
 808136c:	0808a66e 	.word	0x0808a66e
 8081370:	0808a676 	.word	0x0808a676
 8081374:	0808a685 	.word	0x0808a685

08081378 <_ZL15speriodCallbackP3cmd>:
        }
    }
}


 static void speriodCallback(cmd* c) {
 8081378:	b530      	push	{r4, r5, lr}
 808137a:	b089      	sub	sp, #36	; 0x24
	Timing t;
    Command cmd(c); // Create wrapper object
 808137c:	4601      	mov	r1, r0
 808137e:	2201      	movs	r2, #1
 8081380:	4668      	mov	r0, sp
 8081382:	f002 fbeb 	bl	8083b5c <_ZN7CommandC1EP3cmdb>

	Argument inputArg = cmd.getArgument("v");
 8081386:	4a15      	ldr	r2, [pc, #84]	; (80813dc <_ZL15speriodCallbackP3cmd+0x64>)
 8081388:	4669      	mov	r1, sp
 808138a:	a802      	add	r0, sp, #8
 808138c:	f002 fc38 	bl	8083c00 <_ZNK7Command11getArgumentEPKc>
	int argValue = inputArg.getValue().toInt();
 8081390:	a902      	add	r1, sp, #8
 8081392:	a804      	add	r0, sp, #16
 8081394:	f002 fa7a 	bl	808388c <_ZNK8Argument8getValueEv>
 8081398:	a804      	add	r0, sp, #16
 808139a:	f003 faa1 	bl	80848e0 <_ZNK6String5toIntEv>
 808139e:	4605      	mov	r5, r0
	t.samplingPeriod = argValue;
 80813a0:	4c0f      	ldr	r4, [pc, #60]	; (80813e0 <_ZL15speriodCallbackP3cmd+0x68>)
 static void speriodCallback(cmd* c) {
	Timing t;
    Command cmd(c); // Create wrapper object

	Argument inputArg = cmd.getArgument("v");
	int argValue = inputArg.getValue().toInt();
 80813a2:	a804      	add	r0, sp, #16
 80813a4:	f003 f9d4 	bl	8084750 <_ZN6StringD1Ev>
	t.samplingPeriod = argValue;
 80813a8:	6025      	str	r5, [r4, #0]
	Serial.print("Sampling Period = "); 
 80813aa:	f004 f971 	bl	8085690 <_Z16_fetch_usbserialv>
 80813ae:	490d      	ldr	r1, [pc, #52]	; (80813e4 <_ZL15speriodCallbackP3cmd+0x6c>)
 80813b0:	f003 fabb 	bl	808492a <_ZN5Print5printEPKc>
	Serial.print(t.samplingPeriod);
 80813b4:	f004 f96c 	bl	8085690 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80813b8:	220a      	movs	r2, #10
 80813ba:	6821      	ldr	r1, [r4, #0]
 80813bc:	f003 fad6 	bl	808496c <_ZN5Print11printNumberEmh>
	Serial.println("   Ok!");
 80813c0:	f004 f966 	bl	8085690 <_Z16_fetch_usbserialv>
 80813c4:	4908      	ldr	r1, [pc, #32]	; (80813e8 <_ZL15speriodCallbackP3cmd+0x70>)
 80813c6:	f003 fac7 	bl	8084958 <_ZN5Print7printlnEPKc>

 static void speriodCallback(cmd* c) {
	Timing t;
    Command cmd(c); // Create wrapper object

	Argument inputArg = cmd.getArgument("v");
 80813ca:	a802      	add	r0, sp, #8
 80813cc:	f002 fa3a 	bl	8083844 <_ZN8ArgumentD1Ev>
}


 static void speriodCallback(cmd* c) {
	Timing t;
    Command cmd(c); // Create wrapper object
 80813d0:	4668      	mov	r0, sp
 80813d2:	f002 fbce 	bl	8083b72 <_ZN7CommandD1Ev>
	t.samplingPeriod = argValue;
	Serial.print("Sampling Period = "); 
	Serial.print(t.samplingPeriod);
	Serial.println("   Ok!");
		
	}
 80813d6:	b009      	add	sp, #36	; 0x24
 80813d8:	bd30      	pop	{r4, r5, pc}
 80813da:	bf00      	nop
 80813dc:	0808ad52 	.word	0x0808ad52
 80813e0:	200001f8 	.word	0x200001f8
 80813e4:	0808a69c 	.word	0x0808a69c
 80813e8:	0808a667 	.word	0x0808a667

080813ec <_ZL13srateCallbackP3cmd>:


 static void srateCallback(cmd* c) {
 80813ec:	b530      	push	{r4, r5, lr}
 80813ee:	b089      	sub	sp, #36	; 0x24
	Timing t;
    Command cmd(c); // Create wrapper object
 80813f0:	4601      	mov	r1, r0
 80813f2:	2201      	movs	r2, #1
 80813f4:	4668      	mov	r0, sp
 80813f6:	f002 fbb1 	bl	8083b5c <_ZN7CommandC1EP3cmdb>

	Argument inputArg = cmd.getArgument("v");
 80813fa:	4a15      	ldr	r2, [pc, #84]	; (8081450 <_ZL13srateCallbackP3cmd+0x64>)
 80813fc:	4669      	mov	r1, sp
 80813fe:	a802      	add	r0, sp, #8
 8081400:	f002 fbfe 	bl	8083c00 <_ZNK7Command11getArgumentEPKc>
	int argValue = inputArg.getValue().toInt();
 8081404:	a902      	add	r1, sp, #8
 8081406:	a804      	add	r0, sp, #16
 8081408:	f002 fa40 	bl	808388c <_ZNK8Argument8getValueEv>
 808140c:	a804      	add	r0, sp, #16
 808140e:	f003 fa67 	bl	80848e0 <_ZNK6String5toIntEv>
 8081412:	4605      	mov	r5, r0
	t.samplingRate = argValue;
 8081414:	4c0f      	ldr	r4, [pc, #60]	; (8081454 <_ZL13srateCallbackP3cmd+0x68>)
 static void srateCallback(cmd* c) {
	Timing t;
    Command cmd(c); // Create wrapper object

	Argument inputArg = cmd.getArgument("v");
	int argValue = inputArg.getValue().toInt();
 8081416:	a804      	add	r0, sp, #16
 8081418:	f003 f99a 	bl	8084750 <_ZN6StringD1Ev>
	t.samplingRate = argValue;
 808141c:	6025      	str	r5, [r4, #0]
	Serial.print("Sampling Rate = ");
 808141e:	f004 f937 	bl	8085690 <_Z16_fetch_usbserialv>
 8081422:	490d      	ldr	r1, [pc, #52]	; (8081458 <_ZL13srateCallbackP3cmd+0x6c>)
 8081424:	f003 fa81 	bl	808492a <_ZN5Print5printEPKc>
	Serial.print(t.samplingRate);
 8081428:	f004 f932 	bl	8085690 <_Z16_fetch_usbserialv>
 808142c:	220a      	movs	r2, #10
 808142e:	6821      	ldr	r1, [r4, #0]
 8081430:	f003 fa9c 	bl	808496c <_ZN5Print11printNumberEmh>
	Serial.println("   Ok!");	
 8081434:	f004 f92c 	bl	8085690 <_Z16_fetch_usbserialv>
 8081438:	4908      	ldr	r1, [pc, #32]	; (808145c <_ZL13srateCallbackP3cmd+0x70>)
 808143a:	f003 fa8d 	bl	8084958 <_ZN5Print7printlnEPKc>

 static void srateCallback(cmd* c) {
	Timing t;
    Command cmd(c); // Create wrapper object

	Argument inputArg = cmd.getArgument("v");
 808143e:	a802      	add	r0, sp, #8
 8081440:	f002 fa00 	bl	8083844 <_ZN8ArgumentD1Ev>
	}


 static void srateCallback(cmd* c) {
	Timing t;
    Command cmd(c); // Create wrapper object
 8081444:	4668      	mov	r0, sp
 8081446:	f002 fb94 	bl	8083b72 <_ZN7CommandD1Ev>
	int argValue = inputArg.getValue().toInt();
	t.samplingRate = argValue;
	Serial.print("Sampling Rate = ");
	Serial.print(t.samplingRate);
	Serial.println("   Ok!");	
	}
 808144a:	b009      	add	sp, #36	; 0x24
 808144c:	bd30      	pop	{r4, r5, pc}
 808144e:	bf00      	nop
 8081450:	0808ad52 	.word	0x0808ad52
 8081454:	200001c8 	.word	0x200001c8
 8081458:	0808a6af 	.word	0x0808a6af
 808145c:	0808a667 	.word	0x0808a667

08081460 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.24>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
 8081460:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 8081462:	4604      	mov	r4, r0
 8081464:	b170      	cbz	r0, 8081484 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.24+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 8081466:	6805      	ldr	r5, [r0, #0]
 8081468:	b135      	cbz	r5, 8081478 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.24+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808146a:	4628      	mov	r0, r5
 808146c:	f7ff fbda 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 8081470:	2110      	movs	r1, #16
 8081472:	4628      	mov	r0, r5
 8081474:	f004 fd62 	bl	8085f3c <_ZdlPvj>
 8081478:	4620      	mov	r0, r4
      }
 808147a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 808147e:	2114      	movs	r1, #20
 8081480:	f004 bd5c 	b.w	8085f3c <_ZdlPvj>
 8081484:	bd38      	pop	{r3, r4, r5, pc}
	...

08081488 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
 8081488:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808148c:	4606      	mov	r6, r0
 808148e:	460f      	mov	r7, r1
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 8081490:	2014      	movs	r0, #20
 8081492:	492b      	ldr	r1, [pc, #172]	; (8081540 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
 8081494:	4615      	mov	r5, r2
 8081496:	4698      	mov	r8, r3
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 8081498:	f004 fd54 	bl	8085f44 <_ZnwjRKSt9nothrow_t>
 808149c:	4604      	mov	r4, r0
 808149e:	b130      	cbz	r0, 80814ae <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80814a0:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80814a2:	7403      	strb	r3, [r0, #16]
 80814a4:	6003      	str	r3, [r0, #0]
 80814a6:	6043      	str	r3, [r0, #4]
 80814a8:	6083      	str	r3, [r0, #8]
 80814aa:	60c3      	str	r3, [r0, #12]
 80814ac:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80814ae:	6034      	str	r4, [r6, #0]

    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 80814b0:	2c00      	cmp	r4, #0
 80814b2:	d03a      	beq.n	808152a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa2>
            goto error;
        }
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
 80814b4:	4922      	ldr	r1, [pc, #136]	; (8081540 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
 80814b6:	2010      	movs	r0, #16
 80814b8:	f004 fd44 	bl	8085f44 <_ZnwjRKSt9nothrow_t>
 80814bc:	4603      	mov	r3, r0
 80814be:	b1b0      	cbz	r0, 80814ee <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x66>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80814c0:	2200      	movs	r2, #0
 80814c2:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80814c4:	aa02      	add	r2, sp, #8
 80814c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80814ca:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80814ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80814d2:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80814d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80814da:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80814de:	6899      	ldr	r1, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80814e0:	68aa      	ldr	r2, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 80814e2:	60a9      	str	r1, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80814e4:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80814e6:	68ea      	ldr	r2, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 80814e8:	68d9      	ldr	r1, [r3, #12]
 80814ea:	60e9      	str	r1, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80814ec:	60da      	str	r2, [r3, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80814ee:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80814f0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80814f2:	b135      	cbz	r5, 8081502 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x7a>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80814f4:	4628      	mov	r0, r5
 80814f6:	f7ff fb95 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80814fa:	2110      	movs	r1, #16
 80814fc:	4628      	mov	r0, r5
 80814fe:	f004 fd1d 	bl	8085f3c <_ZdlPvj>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 8081502:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
 8081504:	6803      	ldr	r3, [r0, #0]
 8081506:	b183      	cbz	r3, 808152a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa2>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8081508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808150a:	4642      	mov	r2, r8
 808150c:	e88d 0009 	stmia.w	sp, {r0, r3}
 8081510:	4639      	mov	r1, r7
 8081512:	4b0c      	ldr	r3, [pc, #48]	; (8081544 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xbc>)
 8081514:	3004      	adds	r0, #4
 8081516:	f002 fd6d 	bl	8083ff4 <os_thread_create>
 808151a:	b930      	cbnz	r0, 808152a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa2>
 808151c:	6833      	ldr	r3, [r6, #0]
            goto error;
        }
        while (!d_->started) {
 808151e:	7c1b      	ldrb	r3, [r3, #16]
 8081520:	b94b      	cbnz	r3, 8081536 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xae>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 8081522:	2001      	movs	r0, #1
 8081524:	f002 fd3e 	bl	8083fa4 <HAL_Delay_Milliseconds>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
            goto error;
        }
        while (!d_->started) {
 8081528:	e7f8      	b.n	808151c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x94>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808152a:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
 808152c:	2300      	movs	r3, #0
 808152e:	6033      	str	r3, [r6, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 8081530:	b108      	cbz	r0, 8081536 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xae>
	  get_deleter()(__p);
 8081532:	f7ff ff95 	bl	8081460 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.24>
            HAL_Delay_Milliseconds(1);
        }
        return;
    error:
        d_.reset();
    }
 8081536:	4630      	mov	r0, r6
 8081538:	b004      	add	sp, #16
 808153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808153e:	bf00      	nop
 8081540:	0808aa48 	.word	0x0808aa48
 8081544:	080810a1 	.word	0x080810a1

08081548 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
 8081548:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 808154a:	6803      	ldr	r3, [r0, #0]
 808154c:	4604      	mov	r4, r0
    {
        if (!isValid())
 808154e:	b1b3      	cbz	r3, 808157e <_ZN6Thread7disposeEv+0x36>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
 8081550:	6858      	ldr	r0, [r3, #4]
 8081552:	f002 fd57 	bl	8084004 <os_thread_is_current>
 8081556:	b100      	cbz	r0, 808155a <_ZN6Thread7disposeEv+0x12>
 8081558:	bd10      	pop	{r4, pc}
 808155a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
 808155c:	7c5a      	ldrb	r2, [r3, #17]
 808155e:	b912      	cbnz	r2, 8081566 <_ZN6Thread7disposeEv+0x1e>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
 8081560:	6858      	ldr	r0, [r3, #4]
 8081562:	f002 fd57 	bl	8084014 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
 8081566:	6823      	ldr	r3, [r4, #0]
 8081568:	6858      	ldr	r0, [r3, #4]
 808156a:	f002 fd5b 	bl	8084024 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808156e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081570:	2300      	movs	r3, #0
 8081572:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 8081574:	b118      	cbz	r0, 808157e <_ZN6Thread7disposeEv+0x36>

        d_.reset();
    }
 8081576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  get_deleter()(__p);
 808157a:	f7ff bf71 	b.w	8081460 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.24>
 808157e:	bd10      	pop	{r4, pc}

08081580 <_ZN11USARTSerialD0Ev>:
 8081580:	b510      	push	{r4, lr}
 8081582:	4604      	mov	r4, r0
 8081584:	2114      	movs	r1, #20
 8081586:	f004 fcd9 	bl	8085f3c <_ZdlPvj>
 808158a:	4620      	mov	r0, r4
 808158c:	bd10      	pop	{r4, pc}

0808158e <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv>:
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
 808158e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8081592:	b113      	cbz	r3, 808159a <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv+0xc>
 8081594:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8081598:	4770      	bx	lr
 808159a:	4618      	mov	r0, r3
  }
 808159c:	4770      	bx	lr

0808159e <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include <ArduinoJson/Collection/CollectionData.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 808159e:	b510      	push	{r4, lr}
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes))
 80815a0:	684b      	ldr	r3, [r1, #4]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 80815a2:	688a      	ldr	r2, [r1, #8]
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes))
 80815a4:	3310      	adds	r3, #16
 80815a6:	429a      	cmp	r2, r3
 80815a8:	d201      	bcs.n	80815ae <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE+0x10>
  VariantSlot* slot = pool->allocVariant();
  if (!slot)
    return 0;
 80815aa:	2000      	movs	r0, #0
 80815ac:	bd10      	pop	{r4, pc}
      return 0;
    _right -= bytes;
 80815ae:	f1a2 0310 	sub.w	r3, r2, #16
 80815b2:	608b      	str	r3, [r1, #8]

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
  VariantSlot* slot = pool->allocVariant();
  if (!slot)
 80815b4:	2b00      	cmp	r3, #0
 80815b6:	d0f8      	beq.n	80815aa <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE+0xc>
    return 0;

  if (_tail) {
 80815b8:	6841      	ldr	r1, [r0, #4]
 80815ba:	b119      	cbz	r1, 80815c4 <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE+0x26>
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 80815bc:	1a5c      	subs	r4, r3, r1
 80815be:	1124      	asrs	r4, r4, #4
 80815c0:	814c      	strh	r4, [r1, #10]
 80815c2:	e000      	b.n	80815c6 <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE+0x28>
    _tail->setNextNotNull(slot);
    _tail = slot;
  } else {
    _head = slot;
 80815c4:	6003      	str	r3, [r0, #0]
  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
    _next = 0;
 80815c6:	2100      	movs	r1, #0
    _tail = slot;
 80815c8:	6043      	str	r3, [r0, #4]
 80815ca:	f822 1c06 	strh.w	r1, [r2, #-6]
    _flags = 0;
 80815ce:	f802 1c08 	strb.w	r1, [r2, #-8]
    _key = 0;
 80815d2:	f842 1c04 	str.w	r1, [r2, #-4]
  }

  slot->clear();
  return slot;
 80815d6:	4618      	mov	r0, r3
}
 80815d8:	bd10      	pop	{r4, pc}
	...

080815dc <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 80815dc:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 80815de:	4c0c      	ldr	r4, [pc, #48]	; (8081610 <_Z22__fetch_global_Serial4v+0x34>)
 80815e0:	6823      	ldr	r3, [r4, #0]
 80815e2:	07db      	lsls	r3, r3, #31
 80815e4:	d411      	bmi.n	808160a <_Z22__fetch_global_Serial4v+0x2e>
 80815e6:	4620      	mov	r0, r4
 80815e8:	f7fe fd5d 	bl	80800a6 <__cxa_guard_acquire>
 80815ec:	b168      	cbz	r0, 808160a <_Z22__fetch_global_Serial4v+0x2e>
 80815ee:	4a09      	ldr	r2, [pc, #36]	; (8081614 <_Z22__fetch_global_Serial4v+0x38>)
 80815f0:	2103      	movs	r1, #3
 80815f2:	4b09      	ldr	r3, [pc, #36]	; (8081618 <_Z22__fetch_global_Serial4v+0x3c>)
 80815f4:	4809      	ldr	r0, [pc, #36]	; (808161c <_Z22__fetch_global_Serial4v+0x40>)
 80815f6:	f004 f995 	bl	8085924 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80815fa:	4620      	mov	r0, r4
 80815fc:	f7fe fd58 	bl	80800b0 <__cxa_guard_release>
 8081600:	4a07      	ldr	r2, [pc, #28]	; (8081620 <_Z22__fetch_global_Serial4v+0x44>)
 8081602:	4908      	ldr	r1, [pc, #32]	; (8081624 <_Z22__fetch_global_Serial4v+0x48>)
 8081604:	4805      	ldr	r0, [pc, #20]	; (808161c <_Z22__fetch_global_Serial4v+0x40>)
 8081606:	f004 fc8b 	bl	8085f20 <__aeabi_atexit>
	return serial4;
}
 808160a:	4804      	ldr	r0, [pc, #16]	; (808161c <_Z22__fetch_global_Serial4v+0x40>)
 808160c:	bd10      	pop	{r4, pc}
 808160e:	bf00      	nop
 8081610:	200001c4 	.word	0x200001c4
 8081614:	20000204 	.word	0x20000204
 8081618:	2000028e 	.word	0x2000028e
 808161c:	200001b0 	.word	0x200001b0
 8081620:	20000140 	.word	0x20000140
 8081624:	08081029 	.word	0x08081029

08081628 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8081628:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 808162a:	f7ff ffd7 	bl	80815dc <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 808162e:	4b07      	ldr	r3, [pc, #28]	; (808164c <_Z15serialEventRun4v+0x24>)
 8081630:	4604      	mov	r4, r0
 8081632:	b153      	cbz	r3, 808164a <_Z15serialEventRun4v+0x22>
 8081634:	f004 f993 	bl	808595e <_ZN11USARTSerial9isEnabledEv>
 8081638:	b138      	cbz	r0, 808164a <_Z15serialEventRun4v+0x22>
 808163a:	6823      	ldr	r3, [r4, #0]
 808163c:	4620      	mov	r0, r4
 808163e:	691b      	ldr	r3, [r3, #16]
 8081640:	4798      	blx	r3
 8081642:	2800      	cmp	r0, #0
 8081644:	dd01      	ble.n	808164a <_Z15serialEventRun4v+0x22>
        handler();
 8081646:	f3af 8000 	nop.w
 808164a:	bd10      	pop	{r4, pc}
 808164c:	00000000 	.word	0x00000000

08081650 <_ZN9Co2SystemC1Ejjf>:
static void errorCallback(cmd_error* e);
static void srateCallback(cmd* c);
static void speriodCallback(cmd* c); 
static void lfreqCallback(cmd* c); 

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
 8081650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	SYSTEM_THREAD(ENABLED);
 8081654:	4e2d      	ldr	r6, [pc, #180]	; (808170c <_ZN9Co2SystemC1Ejjf+0xbc>)
static void errorCallback(cmd_error* e);
static void srateCallback(cmd* c);
static void speriodCallback(cmd* c); 
static void lfreqCallback(cmd* c); 

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
 8081656:	4689      	mov	r9, r1
	SYSTEM_THREAD(ENABLED);
 8081658:	6831      	ldr	r1, [r6, #0]
static void errorCallback(cmd_error* e);
static void srateCallback(cmd* c);
static void speriodCallback(cmd* c); 
static void lfreqCallback(cmd* c); 

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
 808165a:	461f      	mov	r7, r3
	SYSTEM_THREAD(ENABLED);
 808165c:	f011 0401 	ands.w	r4, r1, #1

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 8081660:	f04f 0300 	mov.w	r3, #0
static void errorCallback(cmd_error* e);
static void srateCallback(cmd* c);
static void speriodCallback(cmd* c); 
static void lfreqCallback(cmd* c); 

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
 8081664:	4605      	mov	r5, r0
 8081666:	4690      	mov	r8, r2
 8081668:	6283      	str	r3, [r0, #40]	; 0x28
	SYSTEM_THREAD(ENABLED);
 808166a:	d10a      	bne.n	8081682 <_ZN9Co2SystemC1Ejjf+0x32>
 808166c:	4630      	mov	r0, r6
 808166e:	f7fe fd1a 	bl	80800a6 <__cxa_guard_acquire>
 8081672:	b130      	cbz	r0, 8081682 <_ZN9Co2SystemC1Ejjf+0x32>
 8081674:	2001      	movs	r0, #1
 8081676:	4621      	mov	r1, r4
 8081678:	f002 fde4 	bl	8084244 <system_thread_set_state>
 808167c:	4630      	mov	r0, r6
 808167e:	f7fe fd17 	bl	80800b0 <__cxa_guard_release>
	T.stateTime = 0;
 8081682:	4b23      	ldr	r3, [pc, #140]	; (8081710 <_ZN9Co2SystemC1Ejjf+0xc0>)
 8081684:	2200      	movs	r2, #0
 8081686:	601a      	str	r2, [r3, #0]
	T.samplingRate = sr;
 8081688:	4b22      	ldr	r3, [pc, #136]	; (8081714 <_ZN9Co2SystemC1Ejjf+0xc4>)
	T.samplingPeriod = sp; 
	T.loggingFrequency = lf; 

	m_CurrentState = new PublishState();
 808168a:	2004      	movs	r0, #4
static void lfreqCallback(cmd* c); 

Co2System::Co2System(unsigned int sr, unsigned int sp, float lf){
	SYSTEM_THREAD(ENABLED);
	T.stateTime = 0;
	T.samplingRate = sr;
 808168c:	f8c3 9000 	str.w	r9, [r3]
	T.samplingPeriod = sp; 
 8081690:	4b21      	ldr	r3, [pc, #132]	; (8081718 <_ZN9Co2SystemC1Ejjf+0xc8>)
 8081692:	f8c3 8000 	str.w	r8, [r3]
	T.loggingFrequency = lf; 
 8081696:	4b21      	ldr	r3, [pc, #132]	; (808171c <_ZN9Co2SystemC1Ejjf+0xcc>)
 8081698:	601f      	str	r7, [r3, #0]

	m_CurrentState = new PublishState();
 808169a:	f7fe fd00 	bl	808009e <_Znwj>
 808169e:	b108      	cbz	r0, 80816a4 <_ZN9Co2SystemC1Ejjf+0x54>
 80816a0:	4b1f      	ldr	r3, [pc, #124]	; (8081720 <_ZN9Co2SystemC1Ejjf+0xd0>)
 80816a2:	6003      	str	r3, [r0, #0]
 80816a4:	6268      	str	r0, [r5, #36]	; 0x24
	czr = new COZIR(Serial1);
 80816a6:	f004 f95d 	bl	8085964 <_Z22__fetch_global_Serial1v>
 80816aa:	4606      	mov	r6, r0
 80816ac:	2018      	movs	r0, #24
 80816ae:	f7fe fcf6 	bl	808009e <_Znwj>
 80816b2:	4604      	mov	r4, r0
 80816b4:	b110      	cbz	r0, 80816bc <_ZN9Co2SystemC1Ejjf+0x6c>
 80816b6:	4631      	mov	r1, r6
 80816b8:	f7ff fa20 	bl	8080afc <_ZN5COZIRC1ER11USARTSerial>
 80816bc:	61ec      	str	r4, [r5, #28]
	SD = new SdFat();
 80816be:	f240 4084 	movw	r0, #1156	; 0x484
 80816c2:	f7fe fcec 	bl	808009e <_Znwj>
 80816c6:	4604      	mov	r4, r0
 80816c8:	b1d0      	cbz	r0, 8081700 <_ZN9Co2SystemC1Ejjf+0xb0>
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80816ca:	2264      	movs	r2, #100	; 0x64
 80816cc:	f880 2460 	strb.w	r2, [r0, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80816d0:	4a14      	ldr	r2, [pc, #80]	; (8081724 <_ZN9Co2SystemC1Ejjf+0xd4>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80816d2:	2300      	movs	r3, #0
 80816d4:	f8c0 2470 	str.w	r2, [r0, #1136]	; 0x470
 80816d8:	2201      	movs	r2, #1
 80816da:	71c3      	strb	r3, [r0, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80816dc:	f880 343c 	strb.w	r3, [r0, #1084]	; 0x43c
 80816e0:	f880 343d 	strb.w	r3, [r0, #1085]	; 0x43d
 80816e4:	f880 346a 	strb.w	r3, [r0, #1130]	; 0x46a
 80816e8:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 80816ec:	f8c0 3478 	str.w	r3, [r0, #1144]	; 0x478
 80816f0:	f880 347c 	strb.w	r3, [r0, #1148]	; 0x47c
 80816f4:	f880 347d 	strb.w	r3, [r0, #1149]	; 0x47d
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 80816f8:	f004 fb94 	bl	8085e24 <_ZN8particle7globals11instanceSpiEv>
 80816fc:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
	co2Level = 0;
 8081700:	2300      	movs	r3, #0
	T.samplingPeriod = sp; 
	T.loggingFrequency = lf; 

	m_CurrentState = new PublishState();
	czr = new COZIR(Serial1);
	SD = new SdFat();
 8081702:	61ac      	str	r4, [r5, #24]
	co2Level = 0;
 8081704:	606b      	str	r3, [r5, #4]
}
 8081706:	4628      	mov	r0, r5
 8081708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808170c:	20000200 	.word	0x20000200
 8081710:	20000288 	.word	0x20000288
 8081714:	200001c8 	.word	0x200001c8
 8081718:	200001f8 	.word	0x200001f8
 808171c:	200001fc 	.word	0x200001fc
 8081720:	0808a588 	.word	0x0808a588
 8081724:	0808a3c4 	.word	0x0808a3c4

08081728 <_ZN9Co2SystemD1Ev>:

Co2System::~Co2System() {
 8081728:	b510      	push	{r4, lr}
 808172a:	4604      	mov	r4, r0
    {
    }

    ~Thread()
    {
        dispose();
 808172c:	3028      	adds	r0, #40	; 0x28
 808172e:	f7ff ff0b 	bl	8081548 <_ZN6Thread7disposeEv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 8081732:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8081734:	b108      	cbz	r0, 808173a <_ZN9Co2SystemD1Ev+0x12>
	  get_deleter()(__ptr);
 8081736:	f7ff fe93 	bl	8081460 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.24>

}
 808173a:	4620      	mov	r0, r4
 808173c:	bd10      	pop	{r4, pc}

0808173e <_ZN9Co2System11getCo2LevelEv>:
	co2Level = aCo2;
}

int Co2System::getCo2Level(){
	return co2Level;	
}
 808173e:	6840      	ldr	r0, [r0, #4]
 8081740:	4770      	bx	lr

08081742 <_ZN9Co2System5sleepEv>:
bool Co2System::publish() {
	if (m_CurrentState)
		return m_CurrentState->publish(this);
	return false;
}
bool Co2System::sleep() {
 8081742:	4601      	mov	r1, r0
	if (m_CurrentState)
 8081744:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081746:	b110      	cbz	r0, 808174e <_ZN9Co2System5sleepEv+0xc>
		return m_CurrentState->sleep(this);
 8081748:	6803      	ldr	r3, [r0, #0]
 808174a:	68db      	ldr	r3, [r3, #12]
 808174c:	4718      	bx	r3
	return false;
}
 808174e:	4770      	bx	lr

08081750 <_ZN9Co2System11readSensorsEv>:
bool Co2System::readSensors() {
 8081750:	4601      	mov	r1, r0
	if (m_CurrentState)
 8081752:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081754:	b110      	cbz	r0, 808175c <_ZN9Co2System11readSensorsEv+0xc>
		return m_CurrentState->readSensors(this);
 8081756:	6803      	ldr	r3, [r0, #0]
 8081758:	689b      	ldr	r3, [r3, #8]
 808175a:	4718      	bx	r3
	return false;
}
 808175c:	4770      	bx	lr

0808175e <_ZN9Co2System3logEv>:
bool Co2System::log() {
 808175e:	4601      	mov	r1, r0
	if (m_CurrentState)
 8081760:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081762:	b110      	cbz	r0, 808176a <_ZN9Co2System3logEv+0xc>
		return m_CurrentState->log(this);
 8081764:	6803      	ldr	r3, [r0, #0]
 8081766:	699b      	ldr	r3, [r3, #24]
 8081768:	4718      	bx	r3
	return false;
}
 808176a:	4770      	bx	lr

0808176c <_ZN9Co2System6wakeupEv>:
bool Co2System::wakeup() {
 808176c:	4601      	mov	r1, r0
	if (m_CurrentState)
 808176e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081770:	b110      	cbz	r0, 8081778 <_ZN9Co2System6wakeupEv+0xc>
		return m_CurrentState->wakeup(this);
 8081772:	6803      	ldr	r3, [r0, #0]
 8081774:	691b      	ldr	r3, [r3, #16]
 8081776:	4718      	bx	r3
	return false;
}
 8081778:	4770      	bx	lr

0808177a <_ZN9Co2System15setCurrentStateEP5State>:
void Co2System::setCurrentState(State* currentState) {
 808177a:	b538      	push	{r3, r4, r5, lr}
 808177c:	4604      	mov	r4, r0
	if (m_CurrentState) {
 808177e:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool Co2System::wakeup() {
	if (m_CurrentState)
		return m_CurrentState->wakeup(this);
	return false;
}
void Co2System::setCurrentState(State* currentState) {
 8081780:	460d      	mov	r5, r1
	if (m_CurrentState) {
 8081782:	b110      	cbz	r0, 808178a <_ZN9Co2System15setCurrentStateEP5State+0x10>
		delete m_CurrentState;
 8081784:	6803      	ldr	r3, [r0, #0]
 8081786:	685b      	ldr	r3, [r3, #4]
 8081788:	4798      	blx	r3
		m_CurrentState = NULL;
	}
	m_CurrentState = currentState;
 808178a:	6265      	str	r5, [r4, #36]	; 0x24
 808178c:	bd38      	pop	{r3, r4, r5, pc}

0808178e <_ZN9Co2System3co2Ev>:
////////////////////////////////////////////////////////////
int Co2System::gps(){

	return 0;
}
int Co2System::co2(){
 808178e:	b510      	push	{r4, lr}
 8081790:	4604      	mov	r4, r0
	co2Level = czr->CO2();
 8081792:	69c0      	ldr	r0, [r0, #28]
 8081794:	f7ff f9f6 	bl	8080b84 <_ZN5COZIR3CO2Ev>
 8081798:	6060      	str	r0, [r4, #4]
	return co2Level;
}
 808179a:	bd10      	pop	{r4, pc}

0808179c <_ZN9Co2System10initSdCardEPchh>:


bool Co2System::initSdCard(char* fileName, uint8_t chipSelect, uint8_t cardDetect)
{
 808179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808179e:	4605      	mov	r5, r0
 80817a0:	b085      	sub	sp, #20
	// Is there even a card?
	if (!digitalRead(cardDetect))
 80817a2:	4618      	mov	r0, r3
	return co2Level;
}


bool Co2System::initSdCard(char* fileName, uint8_t chipSelect, uint8_t cardDetect)
{
 80817a4:	4617      	mov	r7, r2
	// Is there even a card?
	if (!digitalRead(cardDetect))
 80817a6:	f004 fb2a 	bl	8085dfe <digitalRead>
 80817aa:	4604      	mov	r4, r0
 80817ac:	b950      	cbnz	r0, 80817c4 <_ZN9Co2System10initSdCardEPchh+0x28>
	{
		Serial.print(F("No card detected. Waiting for card."));
 80817ae:	f003 ff6f 	bl	8085690 <_Z16_fetch_usbserialv>
 80817b2:	4926      	ldr	r1, [pc, #152]	; (808184c <_ZN9Co2System10initSdCardEPchh+0xb0>)
 80817b4:	f003 f8c0 	bl	8084938 <_ZN5Print5printEPK19__FlashStringHelper>
		delay(1000);
 80817b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80817bc:	f003 fb14 	bl	8084de8 <delay>
		return false;
 80817c0:	4620      	mov	r0, r4
 80817c2:	e040      	b.n	8081846 <_ZN9Co2System10initSdCardEPchh+0xaa>
	}
	// Card seems to exist.  begin() returns failure
	// even if it worked if it's not the first call.
	if (!SD->begin(chipSelect, SPI_FULL_SPEED))  
 80817c4:	69ac      	ldr	r4, [r5, #24]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 80817c6:	4b22      	ldr	r3, [pc, #136]	; (8081850 <_ZN9Co2System10initSdCardEPchh+0xb4>)
 80817c8:	4a22      	ldr	r2, [pc, #136]	; (8081854 <_ZN9Co2System10initSdCardEPchh+0xb8>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80817ca:	f504 658c 	add.w	r5, r4, #1120	; 0x460
 80817ce:	9300      	str	r3, [sp, #0]
 80817d0:	2300      	movs	r3, #0
 80817d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80817d6:	9202      	str	r2, [sp, #8]
 80817d8:	2601      	movs	r6, #1
 80817da:	f88d 300d 	strb.w	r3, [sp, #13]
 80817de:	463a      	mov	r2, r7
 80817e0:	466b      	mov	r3, sp
 80817e2:	f204 416c 	addw	r1, r4, #1132	; 0x46c
 80817e6:	4628      	mov	r0, r5
 80817e8:	f88d 600c 	strb.w	r6, [sp, #12]
 80817ec:	f001 fcb4 	bl	8083158 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 80817f0:	b1f8      	cbz	r0, 8081832 <_ZN9Co2System10initSdCardEPchh+0x96>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 80817f2:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 80817f4:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 80817f8:	4628      	mov	r0, r5
 80817fa:	f001 f90d 	bl	8082a18 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80817fe:	4631      	mov	r1, r6
 8081800:	4620      	mov	r0, r4
 8081802:	f001 fb52 	bl	8082eaa <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8081806:	4601      	mov	r1, r0
 8081808:	b128      	cbz	r0, 8081816 <_ZN9Co2System10initSdCardEPchh+0x7a>
 808180a:	4621      	mov	r1, r4
 808180c:	4628      	mov	r0, r5
 808180e:	f000 ff1a 	bl	8082646 <_ZN7FatFile8openRootEP9FatVolume>
 8081812:	b170      	cbz	r0, 8081832 <_ZN9Co2System10initSdCardEPchh+0x96>
 8081814:	e005      	b.n	8081822 <_ZN9Co2System10initSdCardEPchh+0x86>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8081816:	4620      	mov	r0, r4
 8081818:	f001 fb47 	bl	8082eaa <_ZN9FatVolume4initEh>
 808181c:	2800      	cmp	r0, #0
 808181e:	d1f4      	bne.n	808180a <_ZN9Co2System10initSdCardEPchh+0x6e>
 8081820:	e007      	b.n	8081832 <_ZN9Co2System10initSdCardEPchh+0x96>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8081822:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 8081826:	f013 0f70 	tst.w	r3, #112	; 0x70
 808182a:	d002      	beq.n	8081832 <_ZN9Co2System10initSdCardEPchh+0x96>
      return false;
    }
    m_cwd = dir;
 808182c:	4b0a      	ldr	r3, [pc, #40]	; (8081858 <_ZN9Co2System10initSdCardEPchh+0xbc>)
 808182e:	601d      	str	r5, [r3, #0]
 8081830:	e009      	b.n	8081846 <_ZN9Co2System10initSdCardEPchh+0xaa>
	{
		Serial.print(F("SD Initialization failed!\n"));
 8081832:	f003 ff2d 	bl	8085690 <_Z16_fetch_usbserialv>
 8081836:	4909      	ldr	r1, [pc, #36]	; (808185c <_ZN9Co2System10initSdCardEPchh+0xc0>)
 8081838:	f003 f87e 	bl	8084938 <_ZN5Print5printEPK19__FlashStringHelper>
		delay(1000);
 808183c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081840:	f003 fad2 	bl	8084de8 <delay>
		return false;
 8081844:	2000      	movs	r0, #0
	}
	return true;
}
 8081846:	b005      	add	sp, #20
 8081848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808184a:	bf00      	nop
 808184c:	0808a6c0 	.word	0x0808a6c0
 8081850:	0808a3c4 	.word	0x0808a3c4
 8081854:	02faf080 	.word	0x02faf080
 8081858:	20000314 	.word	0x20000314
 808185c:	0808a6e4 	.word	0x0808a6e4

08081860 <_ZN9Co2System8cmdStartEv>:
// Command Line Interface
//////////////////////////////////////////////////////////////

// Start the thread for receiving the commands from the USBSerial port.

void Co2System::cmdStart(){
 8081860:	b510      	push	{r4, lr}
 8081862:	4604      	mov	r4, r0
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081864:	4b11      	ldr	r3, [pc, #68]	; (80818ac <_ZN9Co2System8cmdStartEv+0x4c>)
 8081866:	b088      	sub	sp, #32
 8081868:	9304      	str	r3, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808186a:	4b11      	ldr	r3, [pc, #68]	; (80818b0 <_ZN9Co2System8cmdStartEv+0x50>)

   hardwareThread = Thread("CommandBuffer", serialReadToBuffer, OS_THREAD_PRIORITY_DEFAULT + 1);
 808186c:	aa04      	add	r2, sp, #16
 808186e:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8081870:	4b10      	ldr	r3, [pc, #64]	; (80818b4 <_ZN9Co2System8cmdStartEv+0x54>)
 8081872:	4911      	ldr	r1, [pc, #68]	; (80818b8 <_ZN9Co2System8cmdStartEv+0x58>)
 8081874:	9306      	str	r3, [sp, #24]
 8081876:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 808187a:	9300      	str	r3, [sp, #0]
 808187c:	a803      	add	r0, sp, #12
 808187e:	2303      	movs	r3, #3
 8081880:	f7ff fe02 	bl	8081488 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 8081884:	9b03      	ldr	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081886:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
 8081888:	2200      	movs	r2, #0
 808188a:	9203      	str	r2, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808188c:	62a3      	str	r3, [r4, #40]	; 0x28
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 808188e:	b108      	cbz	r0, 8081894 <_ZN9Co2System8cmdStartEv+0x34>
	  get_deleter()(__p);
 8081890:	f7ff fde6 	bl	8081460 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.24>
 8081894:	a803      	add	r0, sp, #12
 8081896:	f7ff fe57 	bl	8081548 <_ZN6Thread7disposeEv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 808189a:	9803      	ldr	r0, [sp, #12]
 808189c:	b108      	cbz	r0, 80818a2 <_ZN9Co2System8cmdStartEv+0x42>
	  get_deleter()(__ptr);
 808189e:	f7ff fddf 	bl	8081460 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80818a2:	a804      	add	r0, sp, #16
 80818a4:	f7ff f9be 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
}
 80818a8:	b008      	add	sp, #32
 80818aa:	bd10      	pop	{r4, pc}
 80818ac:	080811e1 	.word	0x080811e1
 80818b0:	08080bfd 	.word	0x08080bfd
 80818b4:	08080c01 	.word	0x08080c01
 80818b8:	0808a6ff 	.word	0x0808a6ff

080818bc <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>:
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.getMember(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
 80818bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80818be:	7a03      	ldrb	r3, [r0, #8]
 80818c0:	4617      	mov	r7, r2
    if (isNull())
 80818c2:	f013 027f 	ands.w	r2, r3, #127	; 0x7f
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.getMember(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
 80818c6:	4605      	mov	r5, r0
 80818c8:	460e      	mov	r6, r1
    if (isNull())
 80818ca:	d106      	bne.n	80818da <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x1e>
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 80818cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80818d0:	f043 0320 	orr.w	r3, r3, #32
 80818d4:	7203      	strb	r3, [r0, #8]
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
 80818d6:	6002      	str	r2, [r0, #0]
  _tail = 0;
 80818d8:	6042      	str	r2, [r0, #4]

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
    if (isNull())
      toObject();
    if (!isObject())
 80818da:	7a2b      	ldrb	r3, [r5, #8]
 80818dc:	f003 0320 	and.w	r3, r3, #32
 80818e0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80818e4:	b1eb      	cbz	r3, 8081922 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x66>

template <typename TAdaptedString>
inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,
                                                   MemoryPool* pool) {
  // ignore null key
  if (key.isNull())
 80818e6:	b1ce      	cbz	r6, 808191c <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x60>
 80818e8:	682c      	ldr	r4, [r5, #0]
}

template <typename TAdaptedString>
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
  VariantSlot* slot = _head;
  while (slot) {
 80818ea:	b164      	cbz	r4, 8081906 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x4a>
 80818ec:	68e1      	ldr	r1, [r4, #12]
#include <stdint.h>  // int8_t

namespace ARDUINOJSON_NAMESPACE {

inline int safe_strcmp(const char* a, const char* b) {
  if (a == b)
 80818ee:	42b1      	cmp	r1, r6
 80818f0:	d016      	beq.n	8081920 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x64>
    return 0;
  if (!a)
    return -1;
  if (!b)
 80818f2:	b119      	cbz	r1, 80818fc <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x40>
    return 1;
  return strcmp(a, b);
 80818f4:	4630      	mov	r0, r6
 80818f6:	f005 fe4b 	bl	8087590 <strcmp>
    if (key.equals(slot->key()))
 80818fa:	b188      	cbz	r0, 8081920 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x64>
      break;
    slot = slot->next();
 80818fc:	4620      	mov	r0, r4
 80818fe:	f7ff fe46 	bl	808158e <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv>
 8081902:	4604      	mov	r4, r0
 8081904:	e7f1      	b.n	80818ea <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x2e>
}

template <typename TAdaptedString>
inline VariantData* CollectionData::addMember(TAdaptedString key,
                                              MemoryPool* pool) {
  VariantSlot* slot = addSlot(pool);
 8081906:	4639      	mov	r1, r7
 8081908:	4628      	mov	r0, r5
 808190a:	f7ff fe48 	bl	808159e <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE>

namespace ARDUINOJSON_NAMESPACE {

template <typename TAdaptedString>
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
  if (!var)
 808190e:	b138      	cbz	r0, 8081920 <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x64>
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
 8081910:	7a03      	ldrb	r3, [r0, #8]
    _key = k.get();
 8081912:	60c6      	str	r6, [r0, #12]
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
 8081914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8081918:	7203      	strb	r3, [r0, #8]
 808191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return 0;
 808191c:	4630      	mov	r0, r6
 808191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!slotSetKey(slot, key, pool)) {
    removeSlot(slot);
    return 0;
 8081920:	4620      	mov	r0, r4
    return _content.asCollection.getOrAddMember(key, pool);
  }
 8081922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081924 <_ZN23ArduinoJson6141_00000106WriterI4FilevE5writeEPKhj>:
  size_t write(uint8_t c) {
    return _print->write(c);
  }

  size_t write(const uint8_t* s, size_t n) {
    return _print->write(s, n);
 8081924:	6800      	ldr	r0, [r0, #0]
 8081926:	6803      	ldr	r3, [r0, #0]
 8081928:	68db      	ldr	r3, [r3, #12]
 808192a:	4718      	bx	r3

0808192c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
 808192c:	b538      	push	{r3, r4, r5, lr}
 808192e:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
 8081930:	4608      	mov	r0, r1

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
 8081932:	460d      	mov	r5, r1
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
 8081934:	f006 fb6e 	bl	8088014 <strlen>
 8081938:	4629      	mov	r1, r5
 808193a:	4602      	mov	r2, r0
 808193c:	4620      	mov	r0, r4
 808193e:	f7ff fff1 	bl	8081924 <_ZN23ArduinoJson6141_00000106WriterI4FilevE5writeEPKhj>
 8081942:	6863      	ldr	r3, [r4, #4]
 8081944:	4418      	add	r0, r3
 8081946:	6060      	str	r0, [r4, #4]
 8081948:	bd38      	pop	{r3, r4, r5, pc}

0808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
 808194a:	b510      	push	{r4, lr}
 808194c:	4604      	mov	r4, r0
    typename enable_if<is_base_of< ::Print, TDestination>::value>::type> {
 public:
  explicit Writer(::Print& print) : _print(&print) {}

  size_t write(uint8_t c) {
    return _print->write(c);
 808194e:	6800      	ldr	r0, [r0, #0]
 8081950:	6803      	ldr	r3, [r0, #0]
 8081952:	689b      	ldr	r3, [r3, #8]
 8081954:	4798      	blx	r3
    _length += _writer.write(static_cast<uint8_t>(c));
 8081956:	6863      	ldr	r3, [r4, #4]
 8081958:	4418      	add	r0, r3
 808195a:	6060      	str	r0, [r4, #4]
 808195c:	bd10      	pop	{r4, pc}
	...

08081960 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc>:
      writeRaw("true");
    else
      writeRaw("false");
  }

  void writeString(const char *value) {
 8081960:	b570      	push	{r4, r5, r6, lr}
 8081962:	460d      	mov	r5, r1
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
 8081964:	2122      	movs	r1, #34	; 0x22
      writeRaw("true");
    else
      writeRaw("false");
  }

  void writeString(const char *value) {
 8081966:	4604      	mov	r4, r0
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
 8081968:	f7ff ffef 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 808196c:	3d01      	subs	r5, #1
    while (*value) writeChar(*value++);
 808196e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8081972:	b171      	cbz	r1, 8081992 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x32>
 8081974:	4b0b      	ldr	r3, [pc, #44]	; (80819a4 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x44>)
class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
    const char *p = escapeTable(true);
    while (p[0] && p[1] != c) {
 8081976:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 808197a:	b17e      	cbz	r6, 808199c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x3c>
 808197c:	3302      	adds	r3, #2
 808197e:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8081982:	428a      	cmp	r2, r1
 8081984:	d1f7      	bne.n	8081976 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x16>
  }

  void writeChar(char c) {
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
 8081986:	215c      	movs	r1, #92	; 0x5c
 8081988:	4620      	mov	r0, r4
 808198a:	f7ff ffde 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
      writeRaw(specialChar);
 808198e:	4631      	mov	r1, r6
 8081990:	e004      	b.n	808199c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0x3c>

  void writeString(const char *value) {
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
    while (*value) writeChar(*value++);
    writeRaw('\"');
 8081992:	2122      	movs	r1, #34	; 0x22
 8081994:	4620      	mov	r0, r4
 8081996:	f7ff ffd8 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
  }
 808199a:	bd70      	pop	{r4, r5, r6, pc}
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
      writeRaw(specialChar);
    } else {
      writeRaw(c);
 808199c:	4620      	mov	r0, r4
 808199e:	f7ff ffd4 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 80819a2:	e7e4      	b.n	808196e <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc+0xe>
 80819a4:	0808a711 	.word	0x0808a711

080819a8 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef>:
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
 80819a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80819ac:	460d      	mov	r5, r1
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 80819ae:	2306      	movs	r3, #6
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
 80819b0:	4606      	mov	r6, r0
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 80819b2:	7283      	strb	r3, [r0, #10]
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 80819b4:	4954      	ldr	r1, [pc, #336]	; (8081b08 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x160>)
 80819b6:	4628      	mov	r0, r5
 80819b8:	f005 fbde 	bl	8087178 <__aeabi_fcmpge>
 80819bc:	b300      	cbz	r0, 8081a00 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x58>
 80819be:	2700      	movs	r7, #0
 80819c0:	463c      	mov	r4, r7
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
 80819c2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8081b0c <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x164>
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
 80819c6:	f8df a148 	ldr.w	sl, [pc, #328]	; 8081b10 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x168>
 80819ca:	f04f 0820 	mov.w	r8, #32
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
 80819ce:	eb07 0309 	add.w	r3, r7, r9
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
 80819d2:	4629      	mov	r1, r5
 80819d4:	6958      	ldr	r0, [r3, #20]
 80819d6:	f005 fbc5 	bl	8087164 <__aeabi_fcmple>
 80819da:	b140      	cbz	r0, 80819ee <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x46>
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
 80819dc:	eb07 030a 	add.w	r3, r7, sl
          value *= traits::negativeBinaryPowerOfTen(index);
 80819e0:	4628      	mov	r0, r5
 80819e2:	6959      	ldr	r1, [r3, #20]
 80819e4:	f005 fa16 	bl	8086e14 <__aeabi_fmul>
 80819e8:	4605      	mov	r5, r0
          powersOf10 = int16_t(powersOf10 + bit);
 80819ea:	4444      	add	r4, r8
 80819ec:	b224      	sxth	r4, r4
 80819ee:	3f04      	subs	r7, #4

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
 80819f0:	f117 0f18 	cmn.w	r7, #24
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
          value *= traits::negativeBinaryPowerOfTen(index);
          powersOf10 = int16_t(powersOf10 + bit);
        }
        bit >>= 1;
 80819f4:	ea4f 0868 	mov.w	r8, r8, asr #1

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
 80819f8:	d1e9      	bne.n	80819ce <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x26>
 80819fa:	f04f 37ff 	mov.w	r7, #4294967295
 80819fe:	e003      	b.n	8081a08 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x60>
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
 8081a00:	4604      	mov	r4, r0

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
 8081a02:	f04f 0820 	mov.w	r8, #32

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8081a06:	2705      	movs	r7, #5
        }
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8081a08:	2100      	movs	r1, #0
 8081a0a:	4628      	mov	r0, r5
 8081a0c:	f005 fbbe 	bl	808718c <__aeabi_fcmpgt>
 8081a10:	b310      	cbz	r0, 8081a58 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xb0>
 8081a12:	4628      	mov	r0, r5
 8081a14:	f004 fd54 	bl	80864c0 <__aeabi_f2d>
 8081a18:	a339      	add	r3, pc, #228	; (adr r3, 8081b00 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x158>)
 8081a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081a1e:	f005 f81f 	bl	8086a60 <__aeabi_dcmple>
 8081a22:	b1c8      	cbz	r0, 8081a58 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xb0>
  }

  static T negativeBinaryPowerOfTenPlusOne(int index) {
    static T factors[] = {1e0f, 1e-1f, 1e-3f, 1e-7f, 1e-15f, 1e-31f};
    return factors[index];
 8081a24:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8081b14 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x16c>
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
 8081a28:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8081b0c <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x164>
      for (; index >= 0; index--) {
 8081a2c:	1c7b      	adds	r3, r7, #1
 8081a2e:	d013      	beq.n	8081a58 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xb0>
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
 8081a30:	4629      	mov	r1, r5
 8081a32:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
 8081a36:	f005 fba9 	bl	808718c <__aeabi_fcmpgt>
 8081a3a:	b140      	cbz	r0, 8081a4e <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xa6>
          value *= traits::positiveBinaryPowerOfTen(index);
 8081a3c:	4628      	mov	r0, r5
 8081a3e:	f85a 1027 	ldr.w	r1, [sl, r7, lsl #2]
 8081a42:	f005 f9e7 	bl	8086e14 <__aeabi_fmul>
 8081a46:	4605      	mov	r5, r0
          powersOf10 = int16_t(powersOf10 - bit);
 8081a48:	ebc8 0404 	rsb	r4, r8, r4
 8081a4c:	b224      	sxth	r4, r4
 8081a4e:	3f01      	subs	r7, #1
        }
        bit >>= 1;
 8081a50:	ea4f 0868 	mov.w	r8, r8, asr #1
 8081a54:	b27f      	sxtb	r7, r7
 8081a56:	e7e9      	b.n	8081a2c <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x84>

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
 8081a58:	8134      	strh	r4, [r6, #8]

    integral = uint32_t(value);
 8081a5a:	4628      	mov	r0, r5
 8081a5c:	f005 fbdc 	bl	8087218 <__aeabi_f2uiz>
 8081a60:	4607      	mov	r7, r0
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8081a62:	4603      	mov	r3, r0
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 8081a64:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8081b18 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x170>
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
 8081a68:	6030      	str	r0, [r6, #0]
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
      maxDecimalPart /= 10;
 8081a6a:	210a      	movs	r1, #10

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8081a6c:	2b09      	cmp	r3, #9
 8081a6e:	d907      	bls.n	8081a80 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xd8>
      maxDecimalPart /= 10;
      decimalPlaces--;
 8081a70:	7ab2      	ldrb	r2, [r6, #10]
    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
      maxDecimalPart /= 10;
 8081a72:	fbb8 f8f1 	udiv	r8, r8, r1
      decimalPlaces--;
 8081a76:	3a01      	subs	r2, #1
 8081a78:	72b2      	strb	r2, [r6, #10]

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8081a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8081a7e:	e7f5      	b.n	8081a6c <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0xc4>
      maxDecimalPart /= 10;
      decimalPlaces--;
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 8081a80:	4638      	mov	r0, r7
 8081a82:	f005 f96f 	bl	8086d64 <__aeabi_ui2f>
 8081a86:	4601      	mov	r1, r0
 8081a88:	4628      	mov	r0, r5
 8081a8a:	f005 f8b9 	bl	8086c00 <__aeabi_fsub>
 8081a8e:	4605      	mov	r5, r0
 8081a90:	4640      	mov	r0, r8
 8081a92:	f005 f967 	bl	8086d64 <__aeabi_ui2f>
 8081a96:	4601      	mov	r1, r0
 8081a98:	4628      	mov	r0, r5
 8081a9a:	f005 f9bb 	bl	8086e14 <__aeabi_fmul>
 8081a9e:	4681      	mov	r9, r0

    decimal = uint32_t(remainder);
 8081aa0:	f005 fbba 	bl	8087218 <__aeabi_f2uiz>
 8081aa4:	4605      	mov	r5, r0
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 8081aa6:	f005 f95d 	bl	8086d64 <__aeabi_ui2f>
 8081aaa:	4601      	mov	r1, r0
 8081aac:	4648      	mov	r0, r9
 8081aae:	f005 f8a7 	bl	8086c00 <__aeabi_fsub>
 8081ab2:	4601      	mov	r1, r0
 8081ab4:	f005 f8a6 	bl	8086c04 <__addsf3>
 8081ab8:	f005 fbae 	bl	8087218 <__aeabi_f2uiz>
 8081abc:	4428      	add	r0, r5
    if (decimal >= maxDecimalPart) {
 8081abe:	4580      	cmp	r8, r0
 8081ac0:	d901      	bls.n	8081ac6 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x11e>
    decimal = uint32_t(remainder);
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 8081ac2:	6070      	str	r0, [r6, #4]
 8081ac4:	e00a      	b.n	8081adc <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x134>
    if (decimal >= maxDecimalPart) {
      decimal = 0;
 8081ac6:	2300      	movs	r3, #0
      integral++;
 8081ac8:	3701      	adds	r7, #1

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
 8081aca:	6073      	str	r3, [r6, #4]
      integral++;
 8081acc:	6037      	str	r7, [r6, #0]
      if (exponent && integral >= 10) {
 8081ace:	b12c      	cbz	r4, 8081adc <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x134>
 8081ad0:	2f09      	cmp	r7, #9
        exponent++;
 8081ad2:	bf81      	itttt	hi
 8081ad4:	3401      	addhi	r4, #1
        integral = 1;
 8081ad6:	2301      	movhi	r3, #1
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
      integral++;
      if (exponent && integral >= 10) {
        exponent++;
 8081ad8:	8134      	strhhi	r4, [r6, #8]
        integral = 1;
 8081ada:	6033      	strhi	r3, [r6, #0]
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 8081adc:	210a      	movs	r1, #10
 8081ade:	6873      	ldr	r3, [r6, #4]
 8081ae0:	fbb3 f2f1 	udiv	r2, r3, r1
 8081ae4:	fb01 3312 	mls	r3, r1, r2, r3
 8081ae8:	b93b      	cbnz	r3, 8081afa <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x152>
 8081aea:	f996 300a 	ldrsb.w	r3, [r6, #10]
 8081aee:	2b00      	cmp	r3, #0
 8081af0:	dd03      	ble.n	8081afa <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x152>
      decimal /= 10;
      decimalPlaces--;
 8081af2:	3b01      	subs	r3, #1
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
      decimal /= 10;
 8081af4:	6072      	str	r2, [r6, #4]
      decimalPlaces--;
 8081af6:	72b3      	strb	r3, [r6, #10]
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 8081af8:	e7f1      	b.n	8081ade <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef+0x136>
      decimal /= 10;
      decimalPlaces--;
    }
  }
 8081afa:	4630      	mov	r0, r6
 8081afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081b00:	88e368f1 	.word	0x88e368f1
 8081b04:	3ee4f8b5 	.word	0x3ee4f8b5
 8081b08:	4b189680 	.word	0x4b189680
 8081b0c:	20000030 	.word	0x20000030
 8081b10:	20000018 	.word	0x20000018
 8081b14:	20000000 	.word	0x20000000
 8081b18:	000f4240 	.word	0x000f4240

08081b1c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>:

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
 8081b1c:	b510      	push	{r4, lr}
 8081b1e:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
 8081b20:	1a52      	subs	r2, r2, r1
 8081b22:	f7ff feff 	bl	8081924 <_ZN23ArduinoJson6141_00000106WriterI4FilevE5writeEPKhj>
 8081b26:	6863      	ldr	r3, [r4, #4]
 8081b28:	4418      	add	r0, r3
 8081b2a:	6060      	str	r0, [r4, #4]
 8081b2c:	bd10      	pop	{r4, pc}

08081b2e <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE20writePositiveIntegerImEEvT_>:
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
 8081b2e:	b530      	push	{r4, r5, lr}
 8081b30:	b087      	sub	sp, #28
 8081b32:	460b      	mov	r3, r1
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8081b34:	f10d 0116 	add.w	r1, sp, #22
 8081b38:	460a      	mov	r2, r1

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8081b3a:	250a      	movs	r5, #10
 8081b3c:	fbb3 f4f5 	udiv	r4, r3, r5
 8081b40:	fb05 3314 	mls	r3, r5, r4, r3
 8081b44:	3330      	adds	r3, #48	; 0x30
 8081b46:	f801 3d01 	strb.w	r3, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 8081b4a:	4623      	mov	r3, r4
 8081b4c:	2c00      	cmp	r4, #0
 8081b4e:	d1f5      	bne.n	8081b3c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE20writePositiveIntegerImEEvT_+0xe>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 8081b50:	f7ff ffe4 	bl	8081b1c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>
  }
 8081b54:	b007      	add	sp, #28
 8081b56:	bd30      	pop	{r4, r5, pc}

08081b58 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_>:
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
 8081b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081b5a:	4604      	mov	r4, r0
 8081b5c:	b08b      	sub	sp, #44	; 0x2c
    if (isnan(value))
 8081b5e:	4608      	mov	r0, r1
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
 8081b60:	460d      	mov	r5, r1
    if (isnan(value))
 8081b62:	f005 fb1d 	bl	80871a0 <__aeabi_fcmpun>
 8081b66:	b120      	cbz	r0, 8081b72 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x1a>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 8081b68:	493d      	ldr	r1, [pc, #244]	; (8081c60 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x108>)
 8081b6a:	4620      	mov	r0, r4
 8081b6c:	f7ff fede 	bl	808192c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKc>
 8081b70:	e073      	b.n	8081c5a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x102>
    }

    if (isinf(value))
      return writeRaw("Infinity");
#else
    if (isinf(value))
 8081b72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8081b76:	493b      	ldr	r1, [pc, #236]	; (8081c64 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x10c>)
 8081b78:	4630      	mov	r0, r6
 8081b7a:	f005 fb11 	bl	80871a0 <__aeabi_fcmpun>
 8081b7e:	b928      	cbnz	r0, 8081b8c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x34>
 8081b80:	4938      	ldr	r1, [pc, #224]	; (8081c64 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x10c>)
 8081b82:	4630      	mov	r0, r6
 8081b84:	f005 faee 	bl	8087164 <__aeabi_fcmple>
 8081b88:	2800      	cmp	r0, #0
 8081b8a:	d0ed      	beq.n	8081b68 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x10>
      return writeRaw("null");

    if (value < 0.0) {
 8081b8c:	2100      	movs	r1, #0
 8081b8e:	4628      	mov	r0, r5
 8081b90:	f005 fade 	bl	8087150 <__aeabi_fcmplt>
 8081b94:	b128      	cbz	r0, 8081ba2 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x4a>
      writeRaw('-');
 8081b96:	212d      	movs	r1, #45	; 0x2d
 8081b98:	4620      	mov	r0, r4
 8081b9a:	f7ff fed6 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
      value = -value;
 8081b9e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    }
#endif

    FloatParts<T> parts(value);
 8081ba2:	4629      	mov	r1, r5
 8081ba4:	a801      	add	r0, sp, #4
 8081ba6:	f7ff feff 	bl	80819a8 <_ZN23ArduinoJson6141_000001010FloatPartsIfEC1Ef>

    writePositiveInteger(parts.integral);
 8081baa:	9901      	ldr	r1, [sp, #4]
 8081bac:	4620      	mov	r0, r4
 8081bae:	f7ff ffbe 	bl	8081b2e <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE20writePositiveIntegerImEEvT_>
    if (parts.decimalPlaces)
 8081bb2:	f99d 100e 	ldrsb.w	r1, [sp, #14]
 8081bb6:	b1c9      	cbz	r1, 8081bec <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x94>

  void writeDecimals(uint32_t value, int8_t width) {
    // buffer should be big enough for all digits and the dot
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8081bb8:	ad08      	add	r5, sp, #32

    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);
 8081bba:	4608      	mov	r0, r1
 8081bbc:	462a      	mov	r2, r5
 8081bbe:	9b02      	ldr	r3, [sp, #8]
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
      *--begin = char(value % 10 + '0');
 8081bc0:	270a      	movs	r7, #10
 8081bc2:	3801      	subs	r0, #1
 8081bc4:	b240      	sxtb	r0, r0
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
 8081bc6:	1c46      	adds	r6, r0, #1
 8081bc8:	d008      	beq.n	8081bdc <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x84>
      *--begin = char(value % 10 + '0');
 8081bca:	fbb3 f6f7 	udiv	r6, r3, r7
 8081bce:	fb07 3316 	mls	r3, r7, r6, r3
 8081bd2:	3330      	adds	r3, #48	; 0x30
 8081bd4:	f805 3d01 	strb.w	r3, [r5, #-1]!
      value /= 10;
 8081bd8:	4633      	mov	r3, r6
 8081bda:	e7f2      	b.n	8081bc2 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x6a>
 8081bdc:	b2c9      	uxtb	r1, r1
    }
    *--begin = '.';
 8081bde:	1a51      	subs	r1, r2, r1
 8081be0:	232e      	movs	r3, #46	; 0x2e
 8081be2:	f801 3d01 	strb.w	r3, [r1, #-1]!

    // and dump it in the right order
    writeRaw(begin, end);
 8081be6:	4620      	mov	r0, r4
 8081be8:	f7ff ff98 	bl	8081b1c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
 8081bec:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8081bf0:	2b00      	cmp	r3, #0
 8081bf2:	da17      	bge.n	8081c24 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0xcc>
      writeRaw("e-");
 8081bf4:	491c      	ldr	r1, [pc, #112]	; (8081c68 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x110>)
 8081bf6:	4620      	mov	r0, r4
 8081bf8:	f7ff fe98 	bl	808192c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKc>

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8081bfc:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8081c00:	460a      	mov	r2, r1
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
 8081c02:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8081c06:	250a      	movs	r5, #10
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
 8081c08:	425b      	negs	r3, r3
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8081c0a:	fb93 f0f5 	sdiv	r0, r3, r5
 8081c0e:	fb05 3310 	mls	r3, r5, r0, r3
 8081c12:	3330      	adds	r3, #48	; 0x30
 8081c14:	f801 3d01 	strb.w	r3, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 8081c18:	4603      	mov	r3, r0
 8081c1a:	2800      	cmp	r0, #0
 8081c1c:	d1f5      	bne.n	8081c0a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0xb2>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 8081c1e:	4620      	mov	r0, r4
 8081c20:	f7ff ff7c 	bl	8081b1c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>
    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
 8081c24:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8081c28:	2b00      	cmp	r3, #0
 8081c2a:	dd16      	ble.n	8081c5a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0x102>
      writeRaw('e');
 8081c2c:	2165      	movs	r1, #101	; 0x65
 8081c2e:	4620      	mov	r0, r4
 8081c30:	f7ff fe8b 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8081c34:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8081c38:	460a      	mov	r2, r1
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
 8081c3a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8081c3e:	250a      	movs	r5, #10
 8081c40:	fb93 f0f5 	sdiv	r0, r3, r5
 8081c44:	fb05 3310 	mls	r3, r5, r0, r3
 8081c48:	3330      	adds	r3, #48	; 0x30
 8081c4a:	f801 3d01 	strb.w	r3, [r1, #-1]!
      value = T(value / 10);
 8081c4e:	b203      	sxth	r3, r0
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 8081c50:	2b00      	cmp	r3, #0
 8081c52:	d1f5      	bne.n	8081c40 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_+0xe8>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 8081c54:	4620      	mov	r0, r4
 8081c56:	f7ff ff61 	bl	8081b1c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKcS6_>

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
    }
  }
 8081c5a:	b00b      	add	sp, #44	; 0x2c
 8081c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081c5e:	bf00      	nop
 8081c60:	0808a71e 	.word	0x0808a71e
 8081c64:	7f7fffff 	.word	0x7f7fffff
 8081c68:	0808a723 	.word	0x0808a723

08081c6c <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_>:
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 8081c6c:	b538      	push	{r3, r4, r5, lr}
    switch (type()) {
 8081c6e:	7a03      	ldrb	r3, [r0, #8]
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 8081c70:	4605      	mov	r5, r0
    switch (type()) {
 8081c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8081c76:	2b06      	cmp	r3, #6
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 8081c78:	460c      	mov	r4, r1
    switch (type()) {
 8081c7a:	d066      	beq.n	8081d4a <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xde>
 8081c7c:	d808      	bhi.n	8081c90 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x24>
 8081c7e:	2b02      	cmp	r3, #2
 8081c80:	d369      	bcc.n	8081d56 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xea>
 8081c82:	2b03      	cmp	r3, #3
 8081c84:	d953      	bls.n	8081d2e <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xc2>
  void visitFloat(Float value) {
    _formatter.writeFloat(value);
  }

  void visitString(const char *value) {
    _formatter.writeString(value);
 8081c86:	6801      	ldr	r1, [r0, #0]
 8081c88:	4620      	mov	r0, r4
 8081c8a:	f7ff fe69 	bl	8081960 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc>
 8081c8e:	bd38      	pop	{r3, r4, r5, pc}
 8081c90:	2b0c      	cmp	r3, #12
 8081c92:	d015      	beq.n	8081cc0 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x54>
 8081c94:	d80a      	bhi.n	8081cac <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x40>
 8081c96:	2b08      	cmp	r3, #8
 8081c98:	d052      	beq.n	8081d40 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xd4>
 8081c9a:	2b0a      	cmp	r3, #10
 8081c9c:	d15b      	bne.n	8081d56 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xea>
      case VALUE_IS_OWNED_RAW:
      case VALUE_IS_LINKED_RAW:
        return visitor.visitRawJson(_content.asRaw.data, _content.asRaw.size);

      case VALUE_IS_NEGATIVE_INTEGER:
        return visitor.visitNegativeInteger(_content.asInteger);
 8081c9e:	6805      	ldr	r5, [r0, #0]

  void writeNegativeInteger(UInt value) {
    writeRaw('-');
 8081ca0:	212d      	movs	r1, #45	; 0x2d
 8081ca2:	4620      	mov	r0, r4
 8081ca4:	f7ff fe51 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
    writePositiveInteger(value);
 8081ca8:	4629      	mov	r1, r5
 8081caa:	e04a      	b.n	8081d42 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xd6>
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
    switch (type()) {
 8081cac:	2b20      	cmp	r3, #32
 8081cae:	d01d      	beq.n	8081cec <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x80>
 8081cb0:	2b40      	cmp	r3, #64	; 0x40
 8081cb2:	d150      	bne.n	8081d56 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xea>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8081cb4:	215b      	movs	r1, #91	; 0x5b
 8081cb6:	4620      	mov	r0, r4
 8081cb8:	f7ff fe47 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 8081cbc:	682d      	ldr	r5, [r5, #0]
 8081cbe:	e011      	b.n	8081ce4 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x78>

    write('}');
  }

  void visitFloat(Float value) {
    _formatter.writeFloat(value);
 8081cc0:	6801      	ldr	r1, [r0, #0]
 8081cc2:	4620      	mov	r0, r4
 8081cc4:	f7ff ff48 	bl	8081b58 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE10writeFloatIfEEvT_>
 8081cc8:	bd38      	pop	{r3, r4, r5, pc}
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
      slot->data()->accept(*this);
 8081cca:	4628      	mov	r0, r5
 8081ccc:	4621      	mov	r1, r4
 8081cce:	f7ff ffcd 	bl	8081c6c <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_>

      slot = slot->next();
 8081cd2:	4628      	mov	r0, r5
 8081cd4:	f7ff fc5b 	bl	808158e <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv>
      if (slot == 0)
 8081cd8:	4605      	mov	r5, r0
 8081cda:	b128      	cbz	r0, 8081ce8 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x7c>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8081cdc:	212c      	movs	r1, #44	; 0x2c
 8081cde:	4620      	mov	r0, r4
 8081ce0:	f7ff fe33 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
  FORCE_INLINE void visitArray(const CollectionData &array) {
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
 8081ce4:	2d00      	cmp	r5, #0
 8081ce6:	d1f0      	bne.n	8081cca <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x5e>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8081ce8:	215d      	movs	r1, #93	; 0x5d
 8081cea:	e01c      	b.n	8081d26 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xba>
 8081cec:	217b      	movs	r1, #123	; 0x7b
 8081cee:	4620      	mov	r0, r4
 8081cf0:	f7ff fe2b 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 8081cf4:	682d      	ldr	r5, [r5, #0]
  void visitObject(const CollectionData &object) {
    write('{');

    VariantSlot *slot = object.head();

    while (slot != 0) {
 8081cf6:	b1ad      	cbz	r5, 8081d24 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xb8>
      _formatter.writeString(slot->key());
 8081cf8:	68e9      	ldr	r1, [r5, #12]
 8081cfa:	4620      	mov	r0, r4
 8081cfc:	f7ff fe30 	bl	8081960 <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE11writeStringEPKc>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8081d00:	213a      	movs	r1, #58	; 0x3a
 8081d02:	4620      	mov	r0, r4
 8081d04:	f7ff fe21 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
    VariantSlot *slot = object.head();

    while (slot != 0) {
      _formatter.writeString(slot->key());
      write(':');
      slot->data()->accept(*this);
 8081d08:	4628      	mov	r0, r5
 8081d0a:	4621      	mov	r1, r4
 8081d0c:	f7ff ffae 	bl	8081c6c <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_>

      slot = slot->next();
 8081d10:	4628      	mov	r0, r5
 8081d12:	f7ff fc3c 	bl	808158e <_ZN23ArduinoJson6141_000001011VariantSlot4nextEv>
      if (slot == 0)
 8081d16:	4605      	mov	r5, r0
 8081d18:	b120      	cbz	r0, 8081d24 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xb8>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8081d1a:	212c      	movs	r1, #44	; 0x2c
 8081d1c:	4620      	mov	r0, r4
 8081d1e:	f7ff fe14 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 8081d22:	e7e8      	b.n	8081cf6 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0x8a>
 8081d24:	217d      	movs	r1, #125	; 0x7d
 8081d26:	4620      	mov	r0, r4
 8081d28:	f7ff fe0f 	bl	808194a <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEc>
 8081d2c:	bd38      	pop	{r3, r4, r5, pc}
  void writeRaw(const char *s) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
  }

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
 8081d2e:	e890 0006 	ldmia.w	r0, {r1, r2}
 8081d32:	4620      	mov	r0, r4
 8081d34:	f7ff fdf6 	bl	8081924 <_ZN23ArduinoJson6141_00000106WriterI4FilevE5writeEPKhj>
 8081d38:	6863      	ldr	r3, [r4, #4]
 8081d3a:	4418      	add	r0, r3
 8081d3c:	6060      	str	r0, [r4, #4]
 8081d3e:	bd38      	pop	{r3, r4, r5, pc}
  void visitNegativeInteger(UInt value) {
    _formatter.writeNegativeInteger(value);
  }

  void visitPositiveInteger(UInt value) {
    _formatter.writePositiveInteger(value);
 8081d40:	6801      	ldr	r1, [r0, #0]
 8081d42:	4620      	mov	r0, r4
 8081d44:	f7ff fef3 	bl	8081b2e <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE20writePositiveIntegerImEEvT_>
 8081d48:	bd38      	pop	{r3, r4, r5, pc}
  size_t bytesWritten() const {
    return _length;
  }

  void writeBoolean(bool value) {
    if (value)
 8081d4a:	6803      	ldr	r3, [r0, #0]
 8081d4c:	b10b      	cbz	r3, 8081d52 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xe6>
      writeRaw("true");
 8081d4e:	4904      	ldr	r1, [pc, #16]	; (8081d60 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xf4>)
 8081d50:	e002      	b.n	8081d58 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xec>
    else
      writeRaw("false");
 8081d52:	4904      	ldr	r1, [pc, #16]	; (8081d64 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xf8>)
 8081d54:	e000      	b.n	8081d58 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xec>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
 8081d56:	4904      	ldr	r1, [pc, #16]	; (8081d68 <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_+0xfc>)
 8081d58:	4620      	mov	r0, r4
 8081d5a:	f7ff fde7 	bl	808192c <_ZN23ArduinoJson6141_000001013TextFormatterINS_6WriterI4FilevEEE8writeRawEPKc>
 8081d5e:	bd38      	pop	{r3, r4, r5, pc}
 8081d60:	0808a726 	.word	0x0808a726
 8081d64:	0808a72b 	.word	0x0808a72b
 8081d68:	0808a71e 	.word	0x0808a71e

08081d6c <_ZN9Co2System9writeJsonEPc>:
	}
	return true;
}


void Co2System::writeJson(char* fileName){
 8081d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081d70:	2300      	movs	r3, #0
 8081d72:	b0a2      	sub	sp, #136	; 0x88
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
 8081d74:	4c5d      	ldr	r4, [pc, #372]	; (8081eec <_ZN9Co2System9writeJsonEPc+0x180>)
 8081d76:	4605      	mov	r5, r0
 8081d78:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8081d7c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081d80:	9309      	str	r3, [sp, #36]	; 0x24

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t size) {
    return malloc(size);
 8081d82:	20c8      	movs	r0, #200	; 0xc8
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081d88:	460e      	mov	r6, r1
 8081d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8081d8c:	9408      	str	r4, [sp, #32]
 8081d8e:	f002 fb0d 	bl	80843ac <malloc>
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
 8081d92:	b118      	cbz	r0, 8081d9c <_ZN9Co2System9writeJsonEPc+0x30>
 8081d94:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
 8081d98:	461a      	mov	r2, r3
 8081d9a:	e001      	b.n	8081da0 <_ZN9Co2System9writeJsonEPc+0x34>
 8081d9c:	4603      	mov	r3, r0
 8081d9e:	4602      	mov	r2, r0
 protected:
  JsonDocument() : _pool(0, 0) {
    _data.setNull();
  }

  JsonDocument(MemoryPool pool) : _pool(pool) {
 8081da0:	9303      	str	r3, [sp, #12]
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
 8081da2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8081da6:	9001      	str	r0, [sp, #4]
 8081da8:	9002      	str	r0, [sp, #8]
 8081daa:	9204      	str	r2, [sp, #16]
 8081dac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
 8081db0:	aa01      	add	r2, sp, #4
 8081db2:	494f      	ldr	r1, [pc, #316]	; (8081ef0 <_ZN9Co2System9writeJsonEPc+0x184>)
 8081db4:	a805      	add	r0, sp, #20
 8081db6:	f88d 301c 	strb.w	r3, [sp, #28]
 8081dba:	f7ff fd7f 	bl	80818bc <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  var->setSignedInteger(value);
  return true;
}

inline bool variantSetLinkedString(VariantData *var, const char *value) {
  if (!var)
 8081dbe:	b138      	cbz	r0, 8081dd0 <_ZN9Co2System9writeJsonEPc+0x64>
    _flags |= t;
 8081dc0:	7a03      	ldrb	r3, [r0, #8]
 8081dc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8081dc6:	f043 0304 	orr.w	r3, r3, #4
 8081dca:	7203      	strb	r3, [r0, #8]
  }

  void setLinkedString(const char *value) {
    if (value) {
      setType(VALUE_IS_LINKED_STRING);
      _content.asString = value;
 8081dcc:	4b49      	ldr	r3, [pc, #292]	; (8081ef4 <_ZN9Co2System9writeJsonEPc+0x188>)
 8081dce:	6003      	str	r3, [r0, #0]
  File fd;
  DynamicJsonDocument  doc(200);
  doc["sensor"] = "Co2";
  doc["time"] = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S");
 8081dd0:	f002 fff9 	bl	8084dc6 <_ZN9TimeClass3nowEv>
 8081dd4:	4b48      	ldr	r3, [pc, #288]	; (8081ef8 <_ZN9Co2System9writeJsonEPc+0x18c>)
 8081dd6:	4602      	mov	r2, r0
 8081dd8:	4948      	ldr	r1, [pc, #288]	; (8081efc <_ZN9Co2System9writeJsonEPc+0x190>)
 8081dda:	a815      	add	r0, sp, #84	; 0x54
 8081ddc:	f002 ffa0 	bl	8084d20 <_ZN9TimeClass6formatElPKc>
 8081de0:	aa01      	add	r2, sp, #4
 8081de2:	4947      	ldr	r1, [pc, #284]	; (8081f00 <_ZN9Co2System9writeJsonEPc+0x194>)
 8081de4:	a805      	add	r0, sp, #20
 8081de6:	f7ff fd69 	bl	80818bc <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  return true;
}

template <typename T>
inline bool variantSetOwnedString(VariantData *var, T value, MemoryPool *pool) {
  return var != 0 && var->setOwnedString(value, pool);
 8081dea:	4607      	mov	r7, r0
 8081dec:	b1d0      	cbz	r0, 8081e24 <_ZN9Co2System9writeJsonEPc+0xb8>
 8081dee:	9915      	ldr	r1, [sp, #84]	; 0x54
class ArduinoStringAdapter {
 public:
  ArduinoStringAdapter(const ::String& str) : _str(&str) {}

  char* save(MemoryPool* pool) const {
    if (isNull())
 8081df0:	2900      	cmp	r1, #0
 8081df2:	d073      	beq.n	8081edc <_ZN9Co2System9writeJsonEPc+0x170>
      return NULL;
    size_t n = _str->length() + 1;
 8081df4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 8081df6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8081dfa:	3201      	adds	r2, #1
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n))
 8081dfc:	9b03      	ldr	r3, [sp, #12]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 8081dfe:	eb08 0002 	add.w	r0, r8, r2
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n))
 8081e02:	4298      	cmp	r0, r3
 8081e04:	d86a      	bhi.n	8081edc <_ZN9Co2System9writeJsonEPc+0x170>
      return 0;
    char* s = _left;
    _left += n;
 8081e06:	9002      	str	r0, [sp, #8]
    char* dup = pool->allocFrozenString(n);
    if (dup)
 8081e08:	f1b8 0f00 	cmp.w	r8, #0
 8081e0c:	d066      	beq.n	8081edc <_ZN9Co2System9writeJsonEPc+0x170>
      memcpy(dup, _str->c_str(), n);
 8081e0e:	4640      	mov	r0, r8
 8081e10:	f005 fb83 	bl	808751a <memcpy>
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 8081e14:	7a3b      	ldrb	r3, [r7, #8]
    setType(VALUE_IS_NULL);
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
    _content.asString = s.get();
 8081e16:	f8c7 8000 	str.w	r8, [r7]
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 8081e1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8081e1e:	f043 0305 	orr.w	r3, r3, #5
 8081e22:	723b      	strb	r3, [r7, #8]
 8081e24:	a815      	add	r0, sp, #84	; 0x54
 8081e26:	f002 fc93 	bl	8084750 <_ZN6StringD1Ev>
 8081e2a:	aa01      	add	r2, sp, #4
 8081e2c:	4935      	ldr	r1, [pc, #212]	; (8081f04 <_ZN9Co2System9writeJsonEPc+0x198>)
 8081e2e:	a805      	add	r0, sp, #20
 8081e30:	f7ff fd44 	bl	80818bc <_ZN23ArduinoJson6141_000001011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
inline size_t variantSize(const VariantData *var) {
  return var != 0 ? var->size() : 0;
}

inline CollectionData *variantToArray(VariantData *var) {
  if (!var)
 8081e34:	b1d8      	cbz	r0, 8081e6e <_ZN9Co2System9writeJsonEPc+0x102>
 8081e36:	7a03      	ldrb	r3, [r0, #8]
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
  return slotData(addSlot(pool));
 8081e38:	a901      	add	r1, sp, #4
 8081e3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8081e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8081e42:	7203      	strb	r3, [r0, #8]
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
 8081e44:	2300      	movs	r3, #0
 8081e46:	6003      	str	r3, [r0, #0]
  _tail = 0;
 8081e48:	6043      	str	r3, [r0, #4]
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
  return slotData(addSlot(pool));
 8081e4a:	f7ff fba8 	bl	808159e <_ZN23ArduinoJson6141_000001014CollectionData7addSlotEPNS_10MemoryPoolE>
  return var != 0 && var->setOwnedRaw(value, pool);
}

template <typename T>
inline bool variantSetSignedInteger(VariantData *var, T value) {
  if (!var)
 8081e4e:	b170      	cbz	r0, 8081e6e <_ZN9Co2System9writeJsonEPc+0x102>
  // bool add(TValue);
  // TValue = bool, long, int, short, float, double, serialized, VariantRef,
  //          std::string, String, ObjectRef
  template <typename T>
  FORCE_INLINE bool add(const T &value) const {
    return impl()->addElement().set(value);
 8081e50:	686a      	ldr	r2, [r5, #4]
 8081e52:	7a03      	ldrb	r3, [r0, #8]
    setSignedInteger(value);
  }

  template <typename T>
  void setSignedInteger(T value) {
    if (value >= 0) {
 8081e54:	2a00      	cmp	r2, #0
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 8081e56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8081e5a:	bfad      	iteet	ge
 8081e5c:	f043 0308 	orrge.w	r3, r3, #8
 8081e60:	f043 030a 	orrlt.w	r3, r3, #10
    _content.asInteger = value;
  }

  void setNegativeInteger(UInt value) {
    setType(VALUE_IS_NEGATIVE_INTEGER);
    _content.asInteger = value;
 8081e64:	4252      	neglt	r2, r2
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 8081e66:	7203      	strbge	r3, [r0, #8]
 8081e68:	bfb8      	it	lt
 8081e6a:	7203      	strblt	r3, [r0, #8]
    _content.asInteger = value;
  }

  void setNegativeInteger(UInt value) {
    setType(VALUE_IS_NEGATIVE_INTEGER);
    _content.asInteger = value;
 8081e6c:	6002      	str	r2, [r0, #0]
  JsonArray data = doc.createNestedArray("data");
  data.add(co2Level);
  fd = SD->open(fileName, O_RDWR | O_CREAT | O_AT_END);
 8081e6e:	69a9      	ldr	r1, [r5, #24]
 8081e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081e74:	2700      	movs	r7, #0
 8081e76:	9317      	str	r3, [sp, #92]	; 0x5c
 8081e78:	9415      	str	r4, [sp, #84]	; 0x54
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
 8081e7a:	f244 2302 	movw	r3, #16898	; 0x4202
 8081e7e:	4632      	mov	r2, r6
 8081e80:	f201 413c 	addw	r1, r1, #1084	; 0x43c
 8081e84:	a819      	add	r0, sp, #100	; 0x64
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 8081e86:	ad0c      	add	r5, sp, #48	; 0x30
 8081e88:	ac19      	add	r4, sp, #100	; 0x64
 8081e8a:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
 8081e8e:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
 8081e92:	9716      	str	r7, [sp, #88]	; 0x58
 8081e94:	f000 fdc7 	bl	8082a26 <_ZN7FatFile4openEPS_PKci>
 8081e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8081e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8081e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8081e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8081ea0:	6823      	ldr	r3, [r4, #0]
  delay(1);
 8081ea2:	2001      	movs	r0, #1
 8081ea4:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 8081ea6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    if (fd)
 8081ea8:	ac22      	add	r4, sp, #136	; 0x88
 8081eaa:	9309      	str	r3, [sp, #36]	; 0x24
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 8081eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8081eae:	930a      	str	r3, [sp, #40]	; 0x28
 8081eb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8081eb2:	930b      	str	r3, [sp, #44]	; 0x2c
  doc["sensor"] = "Co2";
  doc["time"] = Time.format(Time.now(), "%Y-%m-%d %H:%M:%S");
  JsonArray data = doc.createNestedArray("data");
  data.add(co2Level);
  fd = SD->open(fileName, O_RDWR | O_CREAT | O_AT_END);
  delay(1);
 8081eb4:	f002 ff98 	bl	8084de8 <delay>
    if (fd)
 8081eb8:	f814 3d58 	ldrb.w	r3, [r4, #-88]!
 8081ebc:	b14b      	cbz	r3, 8081ed2 <_ZN9Co2System9writeJsonEPc+0x166>
namespace ARDUINOJSON_NAMESPACE {

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : _writer(writer), _length(0) {}
 8081ebe:	ab08      	add	r3, sp, #32
namespace ARDUINOJSON_NAMESPACE {

template <typename Visitor>
inline void variantAccept(const VariantData *var, Visitor &visitor) {
  if (var != 0)
    var->accept(visitor);
 8081ec0:	a805      	add	r0, sp, #20
 8081ec2:	a915      	add	r1, sp, #84	; 0x54
 8081ec4:	9315      	str	r3, [sp, #84]	; 0x54
 8081ec6:	9716      	str	r7, [sp, #88]	; 0x58
 8081ec8:	f7ff fed0 	bl	8081c6c <_ZNK23ArduinoJson6141_000001011VariantData6acceptINS_14JsonSerializerINS_6WriterI4FilevEEEEEEvRT_>
  {
    serializeJson(doc, fd); fd.close();
 8081ecc:	4620      	mov	r0, r4
 8081ece:	f000 fda3 	bl	8082a18 <_ZN7FatFile5closeEv>
 8081ed2:	9801      	ldr	r0, [sp, #4]
  void* allocate(size_t size) {
    return _allocator.allocate(size);
  }

  void deallocate(void* ptr) {
    if (ptr)
 8081ed4:	b138      	cbz	r0, 8081ee6 <_ZN9Co2System9writeJsonEPc+0x17a>
  }

  void deallocate(void* ptr) {
    free(ptr);
 8081ed6:	f002 fa71 	bl	80843bc <free>
  }
  
}
 8081eda:	e004      	b.n	8081ee6 <_ZN9Co2System9writeJsonEPc+0x17a>
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
 8081edc:	7a3b      	ldrb	r3, [r7, #8]
 8081ede:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8081ee2:	723b      	strb	r3, [r7, #8]
 8081ee4:	e79e      	b.n	8081e24 <_ZN9Co2System9writeJsonEPc+0xb8>
 8081ee6:	b022      	add	sp, #136	; 0x88
 8081ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081eec:	0808a630 	.word	0x0808a630
 8081ef0:	0808a731 	.word	0x0808a731
 8081ef4:	0808a52f 	.word	0x0808a52f
 8081ef8:	0808a738 	.word	0x0808a738
 8081efc:	2000035c 	.word	0x2000035c
 8081f00:	0808a920 	.word	0x0808a920
 8081f04:	0808a524 	.word	0x0808a524

08081f08 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    if (cmdError.hasCommand()) {
        Serial.print("Did you mean \"");
        Serial.print(cmdError.getCommand().toString());
        Serial.println("\"?");
    }
}
 8081f08:	b538      	push	{r3, r4, r5, lr}
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"
#include "Serial4/Serial4.h"

static String serialCommandBuffer;
 8081f0a:	4c0d      	ldr	r4, [pc, #52]	; (8081f40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x38>)
 8081f0c:	4d0d      	ldr	r5, [pc, #52]	; (8081f44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x3c>)
 8081f0e:	f001 ffd1 	bl	8083eb4 <HAL_Pin_Map>
 8081f12:	490d      	ldr	r1, [pc, #52]	; (8081f48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x40>)
 8081f14:	4620      	mov	r0, r4
 8081f16:	f002 fc62 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
 8081f1a:	462a      	mov	r2, r5
 8081f1c:	490b      	ldr	r1, [pc, #44]	; (8081f4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x44>)
 8081f1e:	4620      	mov	r0, r4
static SimpleCLI cli;
 8081f20:	4c0b      	ldr	r4, [pc, #44]	; (8081f50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x48>)
#include "Co2System.h"
#include "SleepState.h"
#include "PublishState.h"
#include "Serial4/Serial4.h"

static String serialCommandBuffer;
 8081f22:	f003 fffd 	bl	8085f20 <__aeabi_atexit>
static SimpleCLI cli;
 8081f26:	220a      	movs	r2, #10
 8081f28:	4611      	mov	r1, r2
 8081f2a:	4620      	mov	r0, r4
 8081f2c:	f001 fd3c 	bl	80839a8 <_ZN9SimpleCLIC1Eii>
 8081f30:	462a      	mov	r2, r5
 8081f32:	4620      	mov	r0, r4
    if (cmdError.hasCommand()) {
        Serial.print("Did you mean \"");
        Serial.print(cmdError.getCommand().toString());
        Serial.println("\"?");
    }
}
 8081f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#include "SleepState.h"
#include "PublishState.h"
#include "Serial4/Serial4.h"

static String serialCommandBuffer;
static SimpleCLI cli;
 8081f38:	4906      	ldr	r1, [pc, #24]	; (8081f54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x4c>)
 8081f3a:	f003 bff1 	b.w	8085f20 <__aeabi_atexit>
 8081f3e:	bf00      	nop
 8081f40:	200001cc 	.word	0x200001cc
 8081f44:	20000140 	.word	0x20000140
 8081f48:	0808a71d 	.word	0x0808a71d
 8081f4c:	08084751 	.word	0x08084751
 8081f50:	200001dc 	.word	0x200001dc
 8081f54:	080839bd 	.word	0x080839bd

08081f58 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 8081f58:	f001 bfac 	b.w	8083eb4 <HAL_Pin_Map>

08081f5c <_GLOBAL__sub_I__ZN7istream3getEv>:
 8081f5c:	f001 bfaa 	b.w	8083eb4 <HAL_Pin_Map>

08081f60 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8081f60:	b510      	push	{r4, lr}
 8081f62:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081f64:	3024      	adds	r0, #36	; 0x24
 8081f66:	f000 fe8d 	bl	8082c84 <_ZN8FatCache4syncEv>
 8081f6a:	b128      	cbz	r0, 8081f78 <_ZN9FatVolume9cacheSyncEv+0x18>
 8081f6c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 8081f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8081f74:	f000 be86 	b.w	8082c84 <_ZN8FatCache4syncEv>
  }
 8081f78:	bd10      	pop	{r4, pc}

08081f7a <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8081f7a:	1e41      	subs	r1, r0, #1
 8081f7c:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8081f80:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8081f82:	0843      	lsrs	r3, r0, #1
 8081f84:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8081f88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8081f8c:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8081f8e:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8081f90:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8081f94:	d1f5      	bne.n	8081f82 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8081f96:	4770      	bx	lr

08081f98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8081f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8081f9c:	7803      	ldrb	r3, [r0, #0]
 8081f9e:	1c44      	adds	r4, r0, #1
 8081fa0:	2b20      	cmp	r3, #32
 8081fa2:	d101      	bne.n	8081fa8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8081fa4:	4620      	mov	r0, r4
 8081fa6:	e7f9      	b.n	8081f9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8081fa8:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8081faa:	4f70      	ldr	r7, [pc, #448]	; (808216c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8081fac:	6088      	str	r0, [r1, #8]
 8081fae:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8081fb0:	462e      	mov	r6, r5
 8081fb2:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8081fb6:	b30b      	cbz	r3, 8081ffc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8081fb8:	2b2f      	cmp	r3, #47	; 0x2f
 8081fba:	d101      	bne.n	8081fc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8081fbc:	1903      	adds	r3, r0, r4
 8081fbe:	e017      	b.n	8081ff0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8081fc0:	2b5c      	cmp	r3, #92	; 0x5c
 8081fc2:	d102      	bne.n	8081fca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8081fc4:	2000      	movs	r0, #0
 8081fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8081fca:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 8081fce:	b2e4      	uxtb	r4, r4
 8081fd0:	2c1d      	cmp	r4, #29
 8081fd2:	d803      	bhi.n	8081fdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8081fd4:	fa27 f404 	lsr.w	r4, r7, r4
 8081fd8:	07e4      	lsls	r4, r4, #31
 8081fda:	d4f3      	bmi.n	8081fc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8081fdc:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8081fe0:	2c3c      	cmp	r4, #60	; 0x3c
 8081fe2:	d0ef      	beq.n	8081fc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8081fe4:	3b20      	subs	r3, #32
 8081fe6:	2b5e      	cmp	r3, #94	; 0x5e
 8081fe8:	d9e1      	bls.n	8081fae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8081fea:	e7eb      	b.n	8081fc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8081fec:	2d2f      	cmp	r5, #47	; 0x2f
 8081fee:	d105      	bne.n	8081ffc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8081ff0:	461e      	mov	r6, r3
 8081ff2:	f813 5b01 	ldrb.w	r5, [r3], #1
 8081ff6:	2d20      	cmp	r5, #32
 8081ff8:	d1f8      	bne.n	8081fec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8081ffa:	e7f9      	b.n	8081ff0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8081ffc:	6016      	str	r6, [r2, #0]
 8081ffe:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8082000:	4298      	cmp	r0, r3
 8082002:	ebc0 0803 	rsb	r8, r0, r3
 8082006:	d009      	beq.n	808201c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8082008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 808200c:	2a2e      	cmp	r2, #46	; 0x2e
 808200e:	d0f7      	beq.n	8082000 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8082010:	2a20      	cmp	r2, #32
 8082012:	d0f5      	beq.n	8082000 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8082014:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8082018:	dcd4      	bgt.n	8081fc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 808201a:	e001      	b.n	8082020 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 808201c:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8082020:	f8c1 8004 	str.w	r8, [r1, #4]
 8082024:	f101 030c 	add.w	r3, r1, #12
 8082028:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 808202c:	2420      	movs	r4, #32
 808202e:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8082032:	4293      	cmp	r3, r2
 8082034:	d1fb      	bne.n	808202e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8082036:	4603      	mov	r3, r0
 8082038:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 808203a:	f813 4b01 	ldrb.w	r4, [r3], #1
 808203e:	2c2e      	cmp	r4, #46	; 0x2e
 8082040:	d0fa      	beq.n	8082038 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8082042:	2c20      	cmp	r4, #32
 8082044:	d0f8      	beq.n	8082038 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8082046:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808204a:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808204e:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8082050:	1c73      	adds	r3, r6, #1
 8082052:	d107      	bne.n	8082064 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8082054:	2700      	movs	r7, #0
 8082056:	f04f 0e07 	mov.w	lr, #7
 808205a:	463d      	mov	r5, r7
 808205c:	46ba      	mov	sl, r7
 808205e:	f04f 0908 	mov.w	r9, #8
 8082062:	e009      	b.n	8082078 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8082064:	5d83      	ldrb	r3, [r0, r6]
 8082066:	2b2e      	cmp	r3, #46	; 0x2e
 8082068:	d0f4      	beq.n	8082054 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 808206a:	3e01      	subs	r6, #1
 808206c:	e7f0      	b.n	8082050 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 808206e:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8082070:	2b20      	cmp	r3, #32
 8082072:	d104      	bne.n	808207e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8082074:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8082076:	3201      	adds	r2, #1
 8082078:	4542      	cmp	r2, r8
 808207a:	dbf8      	blt.n	808206e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 808207c:	e04b      	b.n	8082116 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 808207e:	2b2e      	cmp	r3, #46	; 0x2e
 8082080:	d102      	bne.n	8082088 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8082082:	42b2      	cmp	r2, r6
 8082084:	d1f6      	bne.n	8082074 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8082086:	e003      	b.n	8082090 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8082088:	2b22      	cmp	r3, #34	; 0x22
 808208a:	d017      	beq.n	80820bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 808208c:	2b7c      	cmp	r3, #124	; 0x7c
 808208e:	d015      	beq.n	80820bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8082090:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8082094:	f1bc 0f05 	cmp.w	ip, #5
 8082098:	d801      	bhi.n	808209e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 808209a:	2b2d      	cmp	r3, #45	; 0x2d
 808209c:	d10e      	bne.n	80820bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 808209e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80820a2:	f1bc 0f05 	cmp.w	ip, #5
 80820a6:	d909      	bls.n	80820bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 80820a8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80820ac:	f1bc 0f02 	cmp.w	ip, #2
 80820b0:	d904      	bls.n	80820bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 80820b2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80820b6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80820ba:	d902      	bls.n	80820c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 80820bc:	42b2      	cmp	r2, r6
 80820be:	d10e      	bne.n	80820de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 80820c0:	e049      	b.n	8082156 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80820c2:	42b2      	cmp	r2, r6
 80820c4:	d047      	beq.n	8082156 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 80820c6:	4575      	cmp	r5, lr
 80820c8:	d821      	bhi.n	808210e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 80820ca:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80820ce:	f1bc 0f19 	cmp.w	ip, #25
 80820d2:	d808      	bhi.n	80820e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80820d4:	3b20      	subs	r3, #32
 80820d6:	b2db      	uxtb	r3, r3
        lc |= bit;
 80820d8:	ea49 0707 	orr.w	r7, r9, r7
 80820dc:	e00a      	b.n	80820f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80820de:	4575      	cmp	r5, lr
 80820e0:	d815      	bhi.n	808210e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80820e2:	2400      	movs	r4, #0
      c = '_';
 80820e4:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80820e6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80820ea:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80820ee:	bf98      	it	ls
 80820f0:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80820f4:	f105 0c01 	add.w	ip, r5, #1
 80820f8:	fa5f fc8c 	uxtb.w	ip, ip
 80820fc:	440d      	add	r5, r1
      if (i < 7) {
 80820fe:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8082102:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8082104:	d801      	bhi.n	808210a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8082106:	f881 c00c 	strb.w	ip, [r1, #12]
 808210a:	4665      	mov	r5, ip
 808210c:	e7b3      	b.n	8082076 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 808210e:	f1be 0f0a 	cmp.w	lr, #10
 8082112:	d117      	bne.n	8082144 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8082114:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8082116:	7b4b      	ldrb	r3, [r1, #13]
 8082118:	2b20      	cmp	r3, #32
 808211a:	f43f af53 	beq.w	8081fc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 808211e:	b13c      	cbz	r4, 8082130 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8082120:	ea1a 0f07 	tst.w	sl, r7
 8082124:	bf18      	it	ne
 8082126:	2702      	movne	r7, #2
 8082128:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 808212a:	2001      	movs	r0, #1
 808212c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8082130:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8082132:	2001      	movs	r0, #1
 8082134:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8082136:	4419      	add	r1, r3
 8082138:	237e      	movs	r3, #126	; 0x7e
 808213a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 808213c:	2331      	movs	r3, #49	; 0x31
 808213e:	738b      	strb	r3, [r1, #14]
 8082140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8082144:	42b2      	cmp	r2, r6
 8082146:	dce5      	bgt.n	8082114 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8082148:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808214a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808214e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8082150:	f04f 0910 	mov.w	r9, #16
 8082154:	e78e      	b.n	8082074 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8082156:	f1be 0f0a 	cmp.w	lr, #10
 808215a:	d0db      	beq.n	8082114 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 808215c:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808215e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8082162:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8082164:	f04f 0910 	mov.w	r9, #16
 8082168:	e785      	b.n	8082076 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808216a:	bf00      	nop
 808216c:	31000101 	.word	0x31000101

08082170 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8082170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8082174:	4606      	mov	r6, r0
 8082176:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8082178:	f891 900c 	ldrb.w	r9, [r1, #12]
 808217c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808217e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8082180:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8082184:	6869      	ldr	r1, [r5, #4]
 8082186:	68aa      	ldr	r2, [r5, #8]
 8082188:	1863      	adds	r3, r4, r1
 808218a:	b29b      	uxth	r3, r3
 808218c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 808218e:	4291      	cmp	r1, r2
 8082190:	d006      	beq.n	80821a0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8082192:	f812 0b01 	ldrb.w	r0, [r2], #1
 8082196:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808219a:	4043      	eors	r3, r0
 808219c:	b29b      	uxth	r3, r3
 808219e:	e7f6      	b.n	808218e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 80821a0:	f1b9 0f03 	cmp.w	r9, #3
 80821a4:	bf28      	it	cs
 80821a6:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80821aa:	f109 0204 	add.w	r2, r9, #4
 80821ae:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80821b0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80821b4:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80821b6:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80821b8:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80821ba:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80821bc:	bf94      	ite	ls
 80821be:	3130      	addls	r1, #48	; 0x30
 80821c0:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80821c2:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80821c4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80821c6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80821ca:	d3f1      	bcc.n	80821b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80821cc:	eb05 0309 	add.w	r3, r5, r9
 80821d0:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80821d2:	2100      	movs	r1, #0
 80821d4:	4630      	mov	r0, r6
 80821d6:	f000 fb31 	bl	808283c <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80821da:	2101      	movs	r1, #1
 80821dc:	4630      	mov	r0, r6
 80821de:	f000 fb10 	bl	8082802 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80821e2:	4601      	mov	r1, r0
 80821e4:	b928      	cbnz	r0, 80821f2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80821e6:	7870      	ldrb	r0, [r6, #1]
 80821e8:	fab0 f080 	clz	r0, r0
 80821ec:	0940      	lsrs	r0, r0, #5
 80821ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80821f2:	7803      	ldrb	r3, [r0, #0]
 80821f4:	b14b      	cbz	r3, 808220a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80821f6:	7ac3      	ldrb	r3, [r0, #11]
 80821f8:	071b      	lsls	r3, r3, #28
 80821fa:	d4ee      	bmi.n	80821da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80821fc:	220b      	movs	r2, #11
 80821fe:	4640      	mov	r0, r8
 8082200:	f005 f97c 	bl	80874fc <memcmp>
 8082204:	2800      	cmp	r0, #0
 8082206:	d1e8      	bne.n	80821da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8082208:	e002      	b.n	8082210 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 808220a:	2001      	movs	r0, #1
 808220c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8082210:	3401      	adds	r4, #1
 8082212:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8082214:	2c64      	cmp	r4, #100	; 0x64
 8082216:	d1b5      	bne.n	8082184 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8082218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808221c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 808221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082220:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8082222:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8082224:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8082226:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 808222a:	9005      	str	r0, [sp, #20]
 808222c:	460e      	mov	r6, r1
 808222e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8082230:	d101      	bne.n	8082236 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8082232:	2000      	movs	r0, #0
 8082234:	e1a0      	b.n	8082578 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8082236:	9b05      	ldr	r3, [sp, #20]
 8082238:	781b      	ldrb	r3, [r3, #0]
 808223a:	2b00      	cmp	r3, #0
 808223c:	d1f9      	bne.n	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 808223e:	6853      	ldr	r3, [r2, #4]
 8082240:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8082242:	7813      	ldrb	r3, [r2, #0]
 8082244:	079b      	lsls	r3, r3, #30
 8082246:	f000 818d 	beq.w	8082564 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 808224a:	9b02      	ldr	r3, [sp, #8]
 808224c:	270d      	movs	r7, #13
 808224e:	330c      	adds	r3, #12
 8082250:	fbb3 f7f7 	udiv	r7, r3, r7
 8082254:	3701      	adds	r7, #1
 8082256:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8082258:	f04f 0800 	mov.w	r8, #0
 808225c:	2100      	movs	r1, #0
 808225e:	4630      	mov	r0, r6
 8082260:	f000 faec 	bl	808283c <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8082264:	4644      	mov	r4, r8
  uint8_t ord = 0;
 8082266:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8082268:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808226a:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 808226e:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 8082272:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8082276:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8082278:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 808227a:	2101      	movs	r1, #1
 808227c:	4630      	mov	r0, r6
 808227e:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8082280:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8082284:	f000 fabd 	bl	8082802 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8082288:	9b07      	ldr	r3, [sp, #28]
 808228a:	b920      	cbnz	r0, 8082296 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 808228c:	7873      	ldrb	r3, [r6, #1]
 808228e:	2b00      	cmp	r3, #0
 8082290:	f000 8090 	beq.w	80823b4 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8082294:	e7cd      	b.n	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8082296:	7802      	ldrb	r2, [r0, #0]
 8082298:	2ae5      	cmp	r2, #229	; 0xe5
 808229a:	d000      	beq.n	808229e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 808229c:	b942      	cbnz	r2, 80822b0 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808229e:	2c00      	cmp	r4, #0
 80822a0:	bf08      	it	eq
 80822a2:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 80822a4:	42bc      	cmp	r4, r7
        freeFound++;
 80822a6:	bf3c      	itt	cc
 80822a8:	3401      	addcc	r4, #1
 80822aa:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80822ac:	b922      	cbnz	r2, 80822b8 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 80822ae:	e081      	b.n	80823b4 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 80822b0:	42bc      	cmp	r4, r7
 80822b2:	bf38      	it	cc
 80822b4:	2400      	movcc	r4, #0
 80822b6:	e003      	b.n	80822c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80822b8:	2ae5      	cmp	r2, #229	; 0xe5
 80822ba:	d101      	bne.n	80822c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 80822bc:	2500      	movs	r5, #0
 80822be:	e7db      	b.n	8082278 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80822c0:	2a2e      	cmp	r2, #46	; 0x2e
 80822c2:	d0fb      	beq.n	80822bc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80822c4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80822c6:	290f      	cmp	r1, #15
 80822c8:	d152      	bne.n	8082370 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 80822ca:	b93d      	cbnz	r5, 80822dc <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80822cc:	0651      	lsls	r1, r2, #25
 80822ce:	d5d3      	bpl.n	8082278 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80822d0:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80822d2:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 80822d6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80822d8:	462b      	mov	r3, r5
 80822da:	e007      	b.n	80822ec <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80822dc:	3b01      	subs	r3, #1
 80822de:	b2db      	uxtb	r3, r3
 80822e0:	429a      	cmp	r2, r3
 80822e2:	d1eb      	bne.n	80822bc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80822e4:	7b42      	ldrb	r2, [r0, #13]
 80822e6:	9903      	ldr	r1, [sp, #12]
 80822e8:	4291      	cmp	r1, r2
 80822ea:	d1e7      	bne.n	80822bc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 80822ec:	1e5a      	subs	r2, r3, #1
 80822ee:	f04f 0c0d 	mov.w	ip, #13
 80822f2:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 80822f6:	9a02      	ldr	r2, [sp, #8]
 80822f8:	4562      	cmp	r2, ip
 80822fa:	d9df      	bls.n	80822bc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80822fc:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8082300:	f1be 0f04 	cmp.w	lr, #4
 8082304:	fa5f f28e 	uxtb.w	r2, lr
 8082308:	d804      	bhi.n	8082314 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 808230a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 808230e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8082312:	e00c      	b.n	808232e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8082314:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8082316:	bf95      	itete	ls
 8082318:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808231c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8082320:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8082324:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8082328:	bf94      	ite	ls
 808232a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808232c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 808232e:	9902      	ldr	r1, [sp, #8]
 8082330:	4561      	cmp	r1, ip
 8082332:	d103      	bne.n	808233c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8082334:	2a00      	cmp	r2, #0
 8082336:	bf18      	it	ne
 8082338:	2500      	movne	r5, #0
 808233a:	e79d      	b.n	8082278 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808233c:	2aff      	cmp	r2, #255	; 0xff
 808233e:	d8bd      	bhi.n	80822bc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8082340:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8082342:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8082346:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082348:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808234c:	bf98      	it	ls
 808234e:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082350:	f811 100c 	ldrb.w	r1, [r1, ip]
 8082354:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8082358:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 808235c:	bf98      	it	ls
 808235e:	b2d2      	uxtbls	r2, r2
 8082360:	f1bc 0f19 	cmp.w	ip, #25
 8082364:	bf9c      	itt	ls
 8082366:	3120      	addls	r1, #32
 8082368:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808236a:	4291      	cmp	r1, r2
 808236c:	d1a6      	bne.n	80822bc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 808236e:	e0fb      	b.n	8082568 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8082370:	0709      	lsls	r1, r1, #28
 8082372:	d4a3      	bmi.n	80822bc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 8082374:	b14d      	cbz	r5, 808238a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8082376:	2b01      	cmp	r3, #1
 8082378:	f47f af5b 	bne.w	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 808237c:	f7ff fdfd 	bl	8081f7a <_ZN7FatFile11lfnChecksumEPh>
 8082380:	9b03      	ldr	r3, [sp, #12]
 8082382:	4283      	cmp	r3, r0
 8082384:	f47f af55 	bne.w	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8082388:	e00f      	b.n	80823aa <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808238a:	220b      	movs	r2, #11
 808238c:	9906      	ldr	r1, [sp, #24]
 808238e:	9307      	str	r3, [sp, #28]
 8082390:	f005 f8b4 	bl	80874fc <memcmp>
 8082394:	9b07      	ldr	r3, [sp, #28]
 8082396:	2800      	cmp	r0, #0
 8082398:	f47f af6e 	bne.w	8082278 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 808239c:	f899 2000 	ldrb.w	r2, [r9]
 80823a0:	07d2      	lsls	r2, r2, #31
 80823a2:	d502      	bpl.n	80823aa <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 80823a4:	2201      	movs	r2, #1
 80823a6:	9204      	str	r2, [sp, #16]
 80823a8:	e766      	b.n	8082278 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 80823aa:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 80823ae:	f000 80d1 	beq.w	8082554 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 80823b2:	e73e      	b.n	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 80823b4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80823b8:	f43f af3b 	beq.w	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80823bc:	f00b 0303 	and.w	r3, fp, #3
 80823c0:	3b01      	subs	r3, #1
 80823c2:	2b01      	cmp	r3, #1
 80823c4:	f63f af35 	bhi.w	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 80823c8:	2c00      	cmp	r4, #0
 80823ca:	bf08      	it	eq
 80823cc:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80823ce:	42bc      	cmp	r4, r7
 80823d0:	d302      	bcc.n	80823d8 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 80823d2:	9b04      	ldr	r3, [sp, #16]
 80823d4:	b9cb      	cbnz	r3, 808240a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 80823d6:	e01f      	b.n	8082418 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 80823d8:	2100      	movs	r1, #0
 80823da:	4630      	mov	r0, r6
 80823dc:	f000 fa11 	bl	8082802 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80823e0:	b910      	cbnz	r0, 80823e8 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 80823e2:	7873      	ldrb	r3, [r6, #1]
 80823e4:	b15b      	cbz	r3, 80823fe <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 80823e6:	e724      	b.n	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80823e8:	3401      	adds	r4, #1
 80823ea:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80823ec:	e7ef      	b.n	80823ce <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 80823ee:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80823f0:	791b      	ldrb	r3, [r3, #4]
 80823f2:	2b01      	cmp	r3, #1
 80823f4:	d8ed      	bhi.n	80823d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 80823f6:	3410      	adds	r4, #16
 80823f8:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 80823fa:	42a7      	cmp	r7, r4
 80823fc:	d9e9      	bls.n	80823d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 80823fe:	4630      	mov	r0, r6
 8082400:	f000 f8d2 	bl	80825a8 <_ZN7FatFile13addDirClusterEv>
 8082404:	2800      	cmp	r0, #0
 8082406:	d1f2      	bne.n	80823ee <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 8082408:	e713      	b.n	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 808240a:	4649      	mov	r1, r9
 808240c:	4630      	mov	r0, r6
 808240e:	f7ff feaf 	bl	8082170 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8082412:	2800      	cmp	r0, #0
 8082414:	f43f af0d 	beq.w	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8082418:	ea4f 1148 	mov.w	r1, r8, lsl #5
 808241c:	4630      	mov	r0, r6
 808241e:	f000 fa0d 	bl	808283c <_ZN7FatFile7seekSetEm>
 8082422:	2800      	cmp	r0, #0
 8082424:	f43f af05 	beq.w	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8082428:	1e7d      	subs	r5, r7, #1
 808242a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808242c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808242e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8082432:	f04f 080f 	mov.w	r8, #15
 8082436:	e041      	b.n	80824bc <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8082438:	2100      	movs	r1, #0
 808243a:	4630      	mov	r0, r6
 808243c:	f000 f9e1 	bl	8082802 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8082440:	4607      	mov	r7, r0
 8082442:	2800      	cmp	r0, #0
 8082444:	f43f aef5 	beq.w	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8082448:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808244a:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 808244c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8082450:	f043 0301 	orr.w	r3, r3, #1
 8082454:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8082458:	bf14      	ite	ne
 808245a:	4622      	movne	r2, r4
 808245c:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8082460:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8082462:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8082466:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808246a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808246e:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8082470:	f7ff fd83 	bl	8081f7a <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8082474:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8082476:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8082478:	f887 a01a 	strb.w	sl, [r7, #26]
 808247c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8082480:	f002 021f 	and.w	r2, r2, #31
 8082484:	230d      	movs	r3, #13
 8082486:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8082488:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 808248c:	435a      	muls	r2, r3
 808248e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8082490:	9902      	ldr	r1, [sp, #8]
 8082492:	4291      	cmp	r1, r2
 8082494:	d915      	bls.n	80824c2 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 8082496:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 808249a:	2b04      	cmp	r3, #4
 808249c:	fa5f fc83 	uxtb.w	ip, r3
 80824a0:	f103 0001 	add.w	r0, r3, #1
 80824a4:	d813      	bhi.n	80824ce <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 80824a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80824aa:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 80824ae:	280d      	cmp	r0, #13
 80824b0:	f102 0201 	add.w	r2, r2, #1
 80824b4:	4603      	mov	r3, r0
 80824b6:	d1eb      	bne.n	8082490 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80824b8:	3c01      	subs	r4, #1
 80824ba:	b2e4      	uxtb	r4, r4
 80824bc:	2c00      	cmp	r4, #0
 80824be:	d1bb      	bne.n	8082438 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 80824c0:	e00e      	b.n	80824e0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80824c2:	bf14      	ite	ne
 80824c4:	f04f 31ff 	movne.w	r1, #4294967295
 80824c8:	2100      	moveq	r1, #0
 80824ca:	b289      	uxth	r1, r1
 80824cc:	e7e5      	b.n	808249a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80824ce:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80824d2:	bf94      	ite	ls
 80824d4:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80824d8:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80824dc:	8099      	strh	r1, [r3, #4]
 80824de:	e7e6      	b.n	80824ae <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80824e0:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80824e2:	4621      	mov	r1, r4
 80824e4:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80824e6:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80824ea:	f000 f98a 	bl	8082802 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80824ee:	4607      	mov	r7, r0
 80824f0:	2800      	cmp	r0, #0
 80824f2:	f43f ae9e 	beq.w	8082232 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80824f6:	2220      	movs	r2, #32
 80824f8:	4621      	mov	r1, r4
 80824fa:	f005 f819 	bl	8087530 <memset>
  memcpy(dir->name, fname->sfn, 11);
 80824fe:	464b      	mov	r3, r9
 8082500:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8082504:	603a      	str	r2, [r7, #0]
 8082506:	685a      	ldr	r2, [r3, #4]
 8082508:	607a      	str	r2, [r7, #4]
 808250a:	891a      	ldrh	r2, [r3, #8]
 808250c:	813a      	strh	r2, [r7, #8]
 808250e:	7a9b      	ldrb	r3, [r3, #10]
 8082510:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8082512:	f899 3000 	ldrb.w	r3, [r9]
 8082516:	f003 0318 	and.w	r3, r3, #24
 808251a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 808251c:	4b18      	ldr	r3, [pc, #96]	; (8082580 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 808251e:	681b      	ldr	r3, [r3, #0]
 8082520:	b12b      	cbz	r3, 808252e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8082522:	f107 010e 	add.w	r1, r7, #14
 8082526:	f107 0010 	add.w	r0, r7, #16
 808252a:	4798      	blx	r3
 808252c:	e006      	b.n	808253c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 808252e:	2321      	movs	r3, #33	; 0x21
 8082530:	743b      	strb	r3, [r7, #16]
 8082532:	2328      	movs	r3, #40	; 0x28
 8082534:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8082536:	2308      	movs	r3, #8
 8082538:	73bc      	strb	r4, [r7, #14]
 808253a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 808253c:	8a3b      	ldrh	r3, [r7, #16]
 808253e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8082540:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8082542:	89fb      	ldrh	r3, [r7, #14]
 8082544:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8082546:	68b2      	ldr	r2, [r6, #8]
 8082548:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 808254c:	f043 0301 	orr.w	r3, r3, #1
 8082550:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8082554:	9500      	str	r5, [sp, #0]
 8082556:	465b      	mov	r3, fp
 8082558:	4652      	mov	r2, sl
 808255a:	4631      	mov	r1, r6
 808255c:	9805      	ldr	r0, [sp, #20]
 808255e:	f000 f9b6 	bl	80828ce <_ZN7FatFile15openCachedEntryEPS_tih>
 8082562:	e009      	b.n	8082578 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8082564:	2701      	movs	r7, #1
 8082566:	e677      	b.n	8082258 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 8082568:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 808256c:	f1be 0f0d 	cmp.w	lr, #13
 8082570:	f43f ae82 	beq.w	8082278 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8082574:	46d4      	mov	ip, sl
 8082576:	e6c3      	b.n	8082300 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 8082578:	b009      	add	sp, #36	; 0x24
 808257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808257e:	bf00      	nop
 8082580:	20000318 	.word	0x20000318

08082584 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8082584:	f001 bc96 	b.w	8083eb4 <HAL_Pin_Map>

08082588 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8082588:	f001 bc94 	b.w	8083eb4 <HAL_Pin_Map>

0808258c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 808258c:	f001 bc92 	b.w	8083eb4 <HAL_Pin_Map>

08082590 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8082590:	f001 bc90 	b.w	8083eb4 <HAL_Pin_Map>

08082594 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8082594:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8082596:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808259a:	f043 0304 	orr.w	r3, r3, #4
 808259e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80825a0:	6901      	ldr	r1, [r0, #16]
 80825a2:	6880      	ldr	r0, [r0, #8]
 80825a4:	f000 bc24 	b.w	8082df0 <_ZN9FatVolume15allocateClusterEmPm>

080825a8 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80825a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80825ac:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80825ae:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80825b0:	f003 0320 	and.w	r3, r3, #32
 80825b4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80825b8:	b10b      	cbz	r3, 80825be <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 80825ba:	2600      	movs	r6, #0
 80825bc:	e02e      	b.n	808261c <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 80825be:	6942      	ldr	r2, [r0, #20]
 80825c0:	4b18      	ldr	r3, [pc, #96]	; (8082624 <_ZN7FatFile13addDirClusterEv+0x7c>)
 80825c2:	429a      	cmp	r2, r3
 80825c4:	d8f9      	bhi.n	80825ba <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 80825c6:	f7ff ffe5 	bl	8082594 <_ZN7FatFile10addClusterEv>
 80825ca:	4606      	mov	r6, r0
 80825cc:	2800      	cmp	r0, #0
 80825ce:	d0f4      	beq.n	80825ba <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 80825d0:	6921      	ldr	r1, [r4, #16]
 80825d2:	68a0      	ldr	r0, [r4, #8]
 80825d4:	f000 fba1 	bl	8082d1a <_ZNK9FatVolume17clusterFirstBlockEm>
 80825d8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80825da:	68a0      	ldr	r0, [r4, #8]
 80825dc:	2205      	movs	r2, #5
 80825de:	4639      	mov	r1, r7
 80825e0:	3024      	adds	r0, #36	; 0x24
 80825e2:	f000 fb76 	bl	8082cd2 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 80825e6:	4680      	mov	r8, r0
 80825e8:	2800      	cmp	r0, #0
 80825ea:	d0e6      	beq.n	80825ba <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 80825ec:	4629      	mov	r1, r5
 80825ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80825f2:	f004 ff9d 	bl	8087530 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80825f6:	2501      	movs	r5, #1
 80825f8:	68a3      	ldr	r3, [r4, #8]
 80825fa:	791a      	ldrb	r2, [r3, #4]
 80825fc:	42aa      	cmp	r2, r5
 80825fe:	d909      	bls.n	8082614 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082600:	4642      	mov	r2, r8
 8082602:	19e9      	adds	r1, r5, r7
 8082604:	6818      	ldr	r0, [r3, #0]
 8082606:	f000 fee5 	bl	80833d4 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 808260a:	2800      	cmp	r0, #0
 808260c:	d0d5      	beq.n	80825ba <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 808260e:	3501      	adds	r5, #1
 8082610:	b2ed      	uxtb	r5, r5
 8082612:	e7f1      	b.n	80825f8 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8082614:	6963      	ldr	r3, [r4, #20]
 8082616:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 808261a:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 808261c:	4630      	mov	r0, r6
 808261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082622:	bf00      	nop
 8082624:	001ffdff 	.word	0x001ffdff

08082628 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8082628:	b510      	push	{r4, lr}
 808262a:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808262c:	6880      	ldr	r0, [r0, #8]
 808262e:	460a      	mov	r2, r1
 8082630:	3024      	adds	r0, #36	; 0x24
 8082632:	69a1      	ldr	r1, [r4, #24]
 8082634:	f000 fb4d 	bl	8082cd2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8082638:	b120      	cbz	r0, 8082644 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 808263a:	88a3      	ldrh	r3, [r4, #4]
 808263c:	f003 030f 	and.w	r3, r3, #15
 8082640:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8082644:	bd10      	pop	{r4, pc}

08082646 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8082646:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8082648:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808264a:	4605      	mov	r5, r0
 808264c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 808264e:	b984      	cbnz	r4, 8082672 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8082650:	2224      	movs	r2, #36	; 0x24
 8082652:	4621      	mov	r1, r4
 8082654:	f004 ff6c 	bl	8087530 <memset>

  m_vol = vol;
 8082658:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 808265a:	79f3      	ldrb	r3, [r6, #7]
 808265c:	2b10      	cmp	r3, #16
 808265e:	d003      	beq.n	8082668 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8082660:	2b20      	cmp	r3, #32
 8082662:	d106      	bne.n	8082672 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8082664:	2340      	movs	r3, #64	; 0x40
 8082666:	e000      	b.n	808266a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8082668:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 808266a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 808266c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 808266e:	70a8      	strb	r0, [r5, #2]
 8082670:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8082672:	2000      	movs	r0, #0
 8082674:	bd70      	pop	{r4, r5, r6, pc}

08082676 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8082676:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808267a:	7803      	ldrb	r3, [r0, #0]
 808267c:	4604      	mov	r4, r0
 808267e:	4689      	mov	r9, r1
 8082680:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 8082682:	b14b      	cbz	r3, 8082698 <_ZN7FatFile4readEPvj+0x22>
 8082684:	7882      	ldrb	r2, [r0, #2]
 8082686:	07d1      	lsls	r1, r2, #31
 8082688:	d506      	bpl.n	8082698 <_ZN7FatFile4readEPvj+0x22>
 808268a:	e00c      	b.n	80826a6 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808268c:	465a      	mov	r2, fp
 808268e:	6921      	ldr	r1, [r4, #16]
 8082690:	f000 fb49 	bl	8082d26 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8082694:	2800      	cmp	r0, #0
 8082696:	da3d      	bge.n	8082714 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8082698:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808269a:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808269e:	f043 0302 	orr.w	r3, r3, #2
 80826a2:	7063      	strb	r3, [r4, #1]
  return -1;
 80826a4:	e097      	b.n	80827d6 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80826a6:	071a      	lsls	r2, r3, #28
 80826a8:	d503      	bpl.n	80826b2 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80826aa:	69e3      	ldr	r3, [r4, #28]
 80826ac:	6962      	ldr	r2, [r4, #20]
 80826ae:	1a9b      	subs	r3, r3, r2
 80826b0:	e007      	b.n	80826c2 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 80826b2:	069a      	lsls	r2, r3, #26
 80826b4:	d508      	bpl.n	80826c8 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80826b6:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 80826b8:	891a      	ldrh	r2, [r3, #8]
 80826ba:	6963      	ldr	r3, [r4, #20]
 80826bc:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 80826c0:	b29b      	uxth	r3, r3
 80826c2:	429d      	cmp	r5, r3
 80826c4:	bf28      	it	cs
 80826c6:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80826c8:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 80826ca:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80826ce:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80826d2:	2e00      	cmp	r6, #0
 80826d4:	d035      	beq.n	8082742 <_ZN7FatFile4readEPvj+0xcc>
 80826d6:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80826d8:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80826da:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80826de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80826e2:	68a0      	ldr	r0, [r4, #8]
 80826e4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80826e8:	d002      	beq.n	80826f0 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80826ea:	6a03      	ldr	r3, [r0, #32]
 80826ec:	4419      	add	r1, r3
 80826ee:	e01d      	b.n	808272c <_ZN7FatFile4readEPvj+0xb6>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count,
                       uint32_t* firstCluster, uint32_t startCluster = 0);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80826f0:	f890 8005 	ldrb.w	r8, [r0, #5]
 80826f4:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 80826f8:	f1ba 0f00 	cmp.w	sl, #0
 80826fc:	d110      	bne.n	8082720 <_ZN7FatFile4readEPvj+0xaa>
 80826fe:	f1b8 0f00 	cmp.w	r8, #0
 8082702:	d10d      	bne.n	8082720 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8082704:	2b00      	cmp	r3, #0
 8082706:	d1c1      	bne.n	808268c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8082708:	0653      	lsls	r3, r2, #25
 808270a:	bf4c      	ite	mi
 808270c:	6a03      	ldrmi	r3, [r0, #32]
 808270e:	6a23      	ldrpl	r3, [r4, #32]
 8082710:	6123      	str	r3, [r4, #16]
 8082712:	e005      	b.n	8082720 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8082714:	d104      	bne.n	8082720 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8082716:	7823      	ldrb	r3, [r4, #0]
 8082718:	f013 0f70 	tst.w	r3, #112	; 0x70
 808271c:	d111      	bne.n	8082742 <_ZN7FatFile4readEPvj+0xcc>
 808271e:	e7bb      	b.n	8082698 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8082720:	6921      	ldr	r1, [r4, #16]
 8082722:	68a0      	ldr	r0, [r4, #8]
 8082724:	f000 faf9 	bl	8082d1a <_ZNK9FatVolume17clusterFirstBlockEm>
 8082728:	eb08 0100 	add.w	r1, r8, r0
 808272c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808272e:	f1ba 0f00 	cmp.w	sl, #0
 8082732:	d135      	bne.n	80827a0 <_ZN7FatFile4readEPvj+0x12a>
 8082734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082738:	d332      	bcc.n	80827a0 <_ZN7FatFile4readEPvj+0x12a>
 808273a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 808273c:	4299      	cmp	r1, r3
 808273e:	d102      	bne.n	8082746 <_ZN7FatFile4readEPvj+0xd0>
 8082740:	e02e      	b.n	80827a0 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8082742:	1ba8      	subs	r0, r5, r6
 8082744:	e047      	b.n	80827d6 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8082746:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808274a:	d31b      	bcc.n	8082784 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 808274c:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 808274e:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 8082752:	0697      	lsls	r7, r2, #26
 8082754:	d406      	bmi.n	8082764 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 8082756:	7902      	ldrb	r2, [r0, #4]
 8082758:	ebc8 0202 	rsb	r2, r8, r2
 808275c:	b2d2      	uxtb	r2, r2
 808275e:	4592      	cmp	sl, r2
 8082760:	bf28      	it	cs
 8082762:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082764:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8082766:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808276a:	d207      	bcs.n	808277c <_ZN7FatFile4readEPvj+0x106>
 808276c:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 808276e:	4653      	mov	r3, sl
 8082770:	464a      	mov	r2, r9
 8082772:	6800      	ldr	r0, [r0, #0]
 8082774:	f000 fdec 	bl	8083350 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8082778:	b960      	cbnz	r0, 8082794 <_ZN7FatFile4readEPvj+0x11e>
 808277a:	e78d      	b.n	8082698 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808277c:	4453      	add	r3, sl
 808277e:	4299      	cmp	r1, r3
 8082780:	d321      	bcc.n	80827c6 <_ZN7FatFile4readEPvj+0x150>
 8082782:	e7f3      	b.n	808276c <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8082784:	464a      	mov	r2, r9
 8082786:	6800      	ldr	r0, [r0, #0]
 8082788:	f000 fd9a 	bl	80832c0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 808278c:	2800      	cmp	r0, #0
 808278e:	d083      	beq.n	8082698 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8082790:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8082794:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8082796:	44b9      	add	r9, r7
    m_curPosition += n;
 8082798:	443b      	add	r3, r7
 808279a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 808279c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808279e:	e798      	b.n	80826d2 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80827a0:	2200      	movs	r2, #0
 80827a2:	3024      	adds	r0, #36	; 0x24
 80827a4:	f000 fa95 	bl	8082cd2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 80827a8:	2800      	cmp	r0, #0
 80827aa:	f43f af75 	beq.w	8082698 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 80827ae:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 80827b2:	42b7      	cmp	r7, r6
 80827b4:	bf28      	it	cs
 80827b6:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 80827b8:	eb00 010a 	add.w	r1, r0, sl
 80827bc:	463a      	mov	r2, r7
 80827be:	4648      	mov	r0, r9
 80827c0:	f004 feab 	bl	808751a <memcpy>
 80827c4:	e7e6      	b.n	8082794 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80827c6:	3024      	adds	r0, #36	; 0x24
 80827c8:	9101      	str	r1, [sp, #4]
 80827ca:	f000 fa5b 	bl	8082c84 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 80827ce:	9901      	ldr	r1, [sp, #4]
 80827d0:	2800      	cmp	r0, #0
 80827d2:	d1cb      	bne.n	808276c <_ZN7FatFile4readEPvj+0xf6>
 80827d4:	e760      	b.n	8082698 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 80827d6:	b003      	add	sp, #12
 80827d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080827dc <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 80827dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 80827de:	2201      	movs	r2, #1
 80827e0:	f10d 0107 	add.w	r1, sp, #7
 80827e4:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 80827e6:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 80827e8:	6905      	ldr	r5, [r0, #16]
 80827ea:	f7ff ff44 	bl	8082676 <_ZN7FatFile4readEPvj>
 80827ee:	2801      	cmp	r0, #1
 80827f0:	bf09      	itett	eq
 80827f2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80827f6:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 80827fa:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80827fc:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80827fe:	b002      	add	sp, #8
 8082800:	bd70      	pop	{r4, r5, r6, pc}

08082802 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8082802:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8082804:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8082806:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8082808:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 808280c:	b105      	cbz	r5, 8082810 <_ZN7FatFile12readDirCacheEb+0xe>
 808280e:	b969      	cbnz	r1, 808282c <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8082810:	2201      	movs	r2, #1
 8082812:	f10d 0107 	add.w	r1, sp, #7
 8082816:	4620      	mov	r0, r4
 8082818:	f7ff ff2d 	bl	8082676 <_ZN7FatFile4readEPvj>
 808281c:	b240      	sxtb	r0, r0
    if  (n != 1) {
 808281e:	2801      	cmp	r0, #1
 8082820:	d001      	beq.n	8082826 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8082822:	2000      	movs	r0, #0
 8082824:	e008      	b.n	8082838 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8082826:	6963      	ldr	r3, [r4, #20]
 8082828:	331f      	adds	r3, #31
 808282a:	e000      	b.n	808282e <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 808282c:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 808282e:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8082830:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8082832:	3030      	adds	r0, #48	; 0x30
 8082834:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 8082838:	b003      	add	sp, #12
 808283a:	bd30      	pop	{r4, r5, pc}

0808283c <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 808283c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082840:	460e      	mov	r6, r1
 8082842:	7801      	ldrb	r1, [r0, #0]
 8082844:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8082846:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8082848:	2900      	cmp	r1, #0
 808284a:	d039      	beq.n	80828c0 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 808284c:	6945      	ldr	r5, [r0, #20]
 808284e:	42b5      	cmp	r5, r6
 8082850:	d03a      	beq.n	80828c8 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8082852:	b90e      	cbnz	r6, 8082858 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8082854:	6106      	str	r6, [r0, #16]
    goto done;
 8082856:	e031      	b.n	80828bc <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8082858:	070b      	lsls	r3, r1, #28
 808285a:	d503      	bpl.n	8082864 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 808285c:	69c3      	ldr	r3, [r0, #28]
 808285e:	429e      	cmp	r6, r3
 8082860:	d82e      	bhi.n	80828c0 <_ZN7FatFile7seekSetEm+0x84>
 8082862:	e007      	b.n	8082874 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8082864:	0688      	lsls	r0, r1, #26
 8082866:	d505      	bpl.n	8082874 <_ZN7FatFile7seekSetEm+0x38>
 8082868:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808286a:	891b      	ldrh	r3, [r3, #8]
 808286c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8082870:	d826      	bhi.n	80828c0 <_ZN7FatFile7seekSetEm+0x84>
 8082872:	e023      	b.n	80828bc <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8082874:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8082878:	1e6a      	subs	r2, r5, #1
 808287a:	f89e 3006 	ldrb.w	r3, [lr, #6]
 808287e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8082882:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8082884:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8082886:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8082888:	429a      	cmp	r2, r3
 808288a:	d800      	bhi.n	808288e <_ZN7FatFile7seekSetEm+0x52>
 808288c:	b94d      	cbnz	r5, 80828a2 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808288e:	064a      	lsls	r2, r1, #25
 8082890:	bf4c      	ite	mi
 8082892:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8082896:	6a22      	ldrpl	r2, [r4, #32]
 8082898:	6122      	str	r2, [r4, #16]
 808289a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808289c:	f104 0810 	add.w	r8, r4, #16
 80828a0:	e00a      	b.n	80828b8 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 80828a2:	1a9b      	subs	r3, r3, r2
 80828a4:	e7f9      	b.n	808289a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80828a6:	4642      	mov	r2, r8
 80828a8:	6921      	ldr	r1, [r4, #16]
 80828aa:	68a0      	ldr	r0, [r4, #8]
 80828ac:	f000 fa3b 	bl	8082d26 <_ZN9FatVolume6fatGetEmPm>
 80828b0:	2800      	cmp	r0, #0
 80828b2:	f105 35ff 	add.w	r5, r5, #4294967295
 80828b6:	dd03      	ble.n	80828c0 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 80828b8:	2d00      	cmp	r5, #0
 80828ba:	d1f4      	bne.n	80828a6 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80828bc:	6166      	str	r6, [r4, #20]
 80828be:	e003      	b.n	80828c8 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 80828c0:	6127      	str	r7, [r4, #16]
  return false;
 80828c2:	2000      	movs	r0, #0
 80828c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80828c8:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80828ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080828ce <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 80828ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80828d0:	460f      	mov	r7, r1
 80828d2:	4604      	mov	r4, r0
 80828d4:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80828d6:	2100      	movs	r1, #0
 80828d8:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 80828da:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80828dc:	f004 fe28 	bl	8087530 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80828e0:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80828e2:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80828e4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80828e6:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80828e8:	f005 020f 	and.w	r2, r5, #15
 80828ec:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80828f0:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80828f2:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80828f4:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80828f6:	7acb      	ldrb	r3, [r1, #11]
 80828f8:	071d      	lsls	r5, r3, #28
 80828fa:	d44c      	bmi.n	8082996 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80828fc:	1883      	adds	r3, r0, r2
 80828fe:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8082902:	f003 0317 	and.w	r3, r3, #23
 8082906:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8082908:	7ac9      	ldrb	r1, [r1, #11]
 808290a:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 808290e:	bf04      	itt	eq
 8082910:	f043 0308 	orreq.w	r3, r3, #8
 8082914:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 8082916:	f89d 3018 	ldrb.w	r3, [sp, #24]
 808291a:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 808291c:	f006 0303 	and.w	r3, r6, #3
 8082920:	2b01      	cmp	r3, #1
 8082922:	d009      	beq.n	8082938 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 8082924:	2b02      	cmp	r3, #2
 8082926:	d005      	beq.n	8082934 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 8082928:	2b00      	cmp	r3, #0
 808292a:	d134      	bne.n	8082996 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 808292c:	0571      	lsls	r1, r6, #21
 808292e:	d432      	bmi.n	8082996 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 8082930:	2301      	movs	r3, #1
 8082932:	e002      	b.n	808293a <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 8082934:	2303      	movs	r3, #3
 8082936:	e000      	b.n	808293a <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 8082938:	2302      	movs	r3, #2
 808293a:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 808293c:	78a1      	ldrb	r1, [r4, #2]
 808293e:	078b      	lsls	r3, r1, #30
 8082940:	d503      	bpl.n	808294a <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 8082942:	7823      	ldrb	r3, [r4, #0]
 8082944:	f013 0f11 	tst.w	r3, #17
 8082948:	d125      	bne.n	8082996 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 808294a:	b24b      	sxtb	r3, r1
 808294c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8082950:	f006 0108 	and.w	r1, r6, #8
 8082954:	bf14      	ite	ne
 8082956:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 808295a:	2700      	moveq	r7, #0
 808295c:	4319      	orrs	r1, r3
 808295e:	4339      	orrs	r1, r7
 8082960:	70a1      	strb	r1, [r4, #2]
 8082962:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8082964:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 8082966:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8082968:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 808296c:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 8082970:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8082972:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 8082976:	d504      	bpl.n	8082982 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8082978:	b181      	cbz	r1, 808299c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 808297a:	f000 fa74 	bl	8082e66 <_ZN9FatVolume9freeChainEm>
 808297e:	b968      	cbnz	r0, 808299c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8082980:	e009      	b.n	8082996 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8082982:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8082984:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8082986:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8082988:	0473      	lsls	r3, r6, #17
 808298a:	d50c      	bpl.n	80829a6 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 808298c:	69e1      	ldr	r1, [r4, #28]
 808298e:	4620      	mov	r0, r4
 8082990:	f7ff ff54 	bl	808283c <_ZN7FatFile7seekSetEm>
 8082994:	b938      	cbnz	r0, 80829a6 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 8082996:	2000      	movs	r0, #0
 8082998:	7020      	strb	r0, [r4, #0]
  return false;
 808299a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 808299c:	78a3      	ldrb	r3, [r4, #2]
 808299e:	f043 0304 	orr.w	r3, r3, #4
 80829a2:	70a3      	strb	r3, [r4, #2]
 80829a4:	e7f0      	b.n	8082988 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 80829a6:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 80829a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080829ac <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80829ac:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80829ae:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80829b0:	4604      	mov	r4, r0
  if (!isOpen()) {
 80829b2:	b90b      	cbnz	r3, 80829b8 <_ZN7FatFile4syncEv+0xc>
    return true;
 80829b4:	2001      	movs	r0, #1
 80829b6:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 80829b8:	7883      	ldrb	r3, [r0, #2]
 80829ba:	075a      	lsls	r2, r3, #29
 80829bc:	d523      	bpl.n	8082a06 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80829be:	2101      	movs	r1, #1
 80829c0:	f7ff fe32 	bl	8082628 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80829c4:	4605      	mov	r5, r0
 80829c6:	b928      	cbnz	r0, 80829d4 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80829c8:	7863      	ldrb	r3, [r4, #1]
  return false;
 80829ca:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80829cc:	f043 0301 	orr.w	r3, r3, #1
 80829d0:	7063      	strb	r3, [r4, #1]
 80829d2:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80829d4:	7803      	ldrb	r3, [r0, #0]
 80829d6:	2be5      	cmp	r3, #229	; 0xe5
 80829d8:	d0f6      	beq.n	80829c8 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 80829da:	7823      	ldrb	r3, [r4, #0]
 80829dc:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80829de:	bf44      	itt	mi
 80829e0:	69e3      	ldrmi	r3, [r4, #28]
 80829e2:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80829e4:	8c23      	ldrh	r3, [r4, #32]
 80829e6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80829e8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80829ea:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 80829ec:	4b09      	ldr	r3, [pc, #36]	; (8082a14 <_ZN7FatFile4syncEv+0x68>)
 80829ee:	681b      	ldr	r3, [r3, #0]
 80829f0:	b12b      	cbz	r3, 80829fe <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80829f2:	f100 0116 	add.w	r1, r0, #22
 80829f6:	3018      	adds	r0, #24
 80829f8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80829fa:	8b2b      	ldrh	r3, [r5, #24]
 80829fc:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 80829fe:	78a3      	ldrb	r3, [r4, #2]
 8082a00:	f023 0304 	bic.w	r3, r3, #4
 8082a04:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8082a06:	68a0      	ldr	r0, [r4, #8]
 8082a08:	f7ff faaa 	bl	8081f60 <_ZN9FatVolume9cacheSyncEv>
 8082a0c:	2800      	cmp	r0, #0
 8082a0e:	d0db      	beq.n	80829c8 <_ZN7FatFile4syncEv+0x1c>
 8082a10:	e7d0      	b.n	80829b4 <_ZN7FatFile4syncEv+0x8>
 8082a12:	bf00      	nop
 8082a14:	20000318 	.word	0x20000318

08082a18 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8082a18:	b510      	push	{r4, lr}
 8082a1a:	4604      	mov	r4, r0
  bool rtn = sync();
 8082a1c:	f7ff ffc6 	bl	80829ac <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8082a20:	2300      	movs	r3, #0
 8082a22:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8082a24:	bd10      	pop	{r4, pc}

08082a26 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8082a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082a28:	461f      	mov	r7, r3
 8082a2a:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8082a2c:	2300      	movs	r3, #0
 8082a2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8082a32:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8082a36:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8082a38:	4606      	mov	r6, r0
 8082a3a:	460c      	mov	r4, r1
 8082a3c:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8082a3e:	b10b      	cbz	r3, 8082a44 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8082a40:	2000      	movs	r0, #0
 8082a42:	e03d      	b.n	8082ac0 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8082a44:	780b      	ldrb	r3, [r1, #0]
 8082a46:	f013 0f70 	tst.w	r3, #112	; 0x70
 8082a4a:	d0f9      	beq.n	8082a40 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8082a4c:	7813      	ldrb	r3, [r2, #0]
 8082a4e:	2b2f      	cmp	r3, #47	; 0x2f
 8082a50:	d112      	bne.n	8082a78 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 8082a52:	9b01      	ldr	r3, [sp, #4]
 8082a54:	781a      	ldrb	r2, [r3, #0]
 8082a56:	2a2f      	cmp	r2, #47	; 0x2f
 8082a58:	d102      	bne.n	8082a60 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 8082a5a:	3301      	adds	r3, #1
 8082a5c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8082a5e:	e7f8      	b.n	8082a52 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8082a60:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8082a62:	b91a      	cbnz	r2, 8082a6c <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 8082a64:	4630      	mov	r0, r6
 8082a66:	f7ff fdee 	bl	8082646 <_ZN7FatFile8openRootEP9FatVolume>
 8082a6a:	e029      	b.n	8082ac0 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8082a6c:	a809      	add	r0, sp, #36	; 0x24
 8082a6e:	f7ff fdea 	bl	8082646 <_ZN7FatFile8openRootEP9FatVolume>
 8082a72:	2800      	cmp	r0, #0
 8082a74:	d0e4      	beq.n	8082a40 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8082a76:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8082a78:	aa01      	add	r2, sp, #4
 8082a7a:	a903      	add	r1, sp, #12
 8082a7c:	9801      	ldr	r0, [sp, #4]
 8082a7e:	f7ff fa8b 	bl	8081f98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8082a82:	2800      	cmp	r0, #0
 8082a84:	d0dc      	beq.n	8082a40 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8082a86:	9b01      	ldr	r3, [sp, #4]
 8082a88:	781b      	ldrb	r3, [r3, #0]
 8082a8a:	b19b      	cbz	r3, 8082ab4 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 8082a8c:	2300      	movs	r3, #0
 8082a8e:	aa03      	add	r2, sp, #12
 8082a90:	4621      	mov	r1, r4
 8082a92:	4630      	mov	r0, r6
 8082a94:	f7ff fbc2 	bl	808221c <_ZN7FatFile4openEPS_P7fname_ti>
 8082a98:	2800      	cmp	r0, #0
 8082a9a:	d0d1      	beq.n	8082a40 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8082a9c:	4635      	mov	r5, r6
 8082a9e:	ac09      	add	r4, sp, #36	; 0x24
 8082aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082aa8:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 8082aaa:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8082aac:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8082aae:	f7ff ffb3 	bl	8082a18 <_ZN7FatFile5closeEv>
 8082ab2:	e7e0      	b.n	8082a76 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 8082ab4:	463b      	mov	r3, r7
 8082ab6:	aa03      	add	r2, sp, #12
 8082ab8:	4621      	mov	r1, r4
 8082aba:	4630      	mov	r0, r6
 8082abc:	f7ff fbae 	bl	808221c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 8082ac0:	b013      	add	sp, #76	; 0x4c
 8082ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082ac4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082ac8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082aca:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082acc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8082ace:	4604      	mov	r4, r0
 8082ad0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8082ad2:	d508      	bpl.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
 8082ad4:	7883      	ldrb	r3, [r0, #2]
 8082ad6:	079a      	lsls	r2, r3, #30
 8082ad8:	d505      	bpl.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 8082ada:	071b      	lsls	r3, r3, #28
 8082adc:	d50b      	bpl.n	8082af6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8082ade:	69e1      	ldr	r1, [r4, #28]
 8082ae0:	f7ff feac 	bl	808283c <_ZN7FatFile7seekSetEm>
 8082ae4:	b938      	cbnz	r0, 8082af6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8082ae6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8082ae8:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8082aec:	f043 0301 	orr.w	r3, r3, #1
 8082af0:	7063      	strb	r3, [r4, #1]
  return -1;
 8082af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8082af6:	6963      	ldr	r3, [r4, #20]
 8082af8:	43db      	mvns	r3, r3
 8082afa:	4598      	cmp	r8, r3
 8082afc:	d8f3      	bhi.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
 8082afe:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082b00:	f04f 0a00 	mov.w	sl, #0
 8082b04:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8082b06:	2e00      	cmp	r6, #0
 8082b08:	d07f      	beq.n	8082c0a <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8082b0a:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8082b0c:	f3c3 0708 	ubfx	r7, r3, #0, #9
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count,
                       uint32_t* firstCluster, uint32_t startCluster = 0);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8082b10:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8082b12:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 8082b16:	d11c      	bne.n	8082b52 <_ZN7FatFile5writeEPKvj+0x8e>
 8082b18:	b9df      	cbnz	r7, 8082b52 <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 8082b1a:	6921      	ldr	r1, [r4, #16]
 8082b1c:	b171      	cbz	r1, 8082b3c <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8082b1e:	f104 0210 	add.w	r2, r4, #16
 8082b22:	f000 f900 	bl	8082d26 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8082b26:	2800      	cmp	r0, #0
 8082b28:	dbdd      	blt.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8082b2a:	f040 808d 	bne.w	8082c48 <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 8082b2e:	4620      	mov	r0, r4
 8082b30:	f7ff fd30 	bl	8082594 <_ZN7FatFile10addClusterEv>
 8082b34:	2800      	cmp	r0, #0
 8082b36:	f040 8087 	bne.w	8082c48 <_ZN7FatFile5writeEPKvj+0x184>
 8082b3a:	e7d4      	b.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8082b3c:	6a23      	ldr	r3, [r4, #32]
 8082b3e:	b93b      	cbnz	r3, 8082b50 <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 8082b40:	4620      	mov	r0, r4
 8082b42:	f7ff fd27 	bl	8082594 <_ZN7FatFile10addClusterEv>
 8082b46:	2800      	cmp	r0, #0
 8082b48:	d0cd      	beq.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8082b4a:	6923      	ldr	r3, [r4, #16]
 8082b4c:	6223      	str	r3, [r4, #32]
 8082b4e:	e000      	b.n	8082b52 <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 8082b50:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8082b52:	6921      	ldr	r1, [r4, #16]
 8082b54:	68a0      	ldr	r0, [r4, #8]
 8082b56:	f000 f8e0 	bl	8082d1a <_ZNK9FatVolume17clusterFirstBlockEm>
 8082b5a:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8082b5c:	b917      	cbnz	r7, 8082b64 <_ZN7FatFile5writeEPKvj+0xa0>
 8082b5e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082b62:	d221      	bcs.n	8082ba8 <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8082b64:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 8082b68:	42b5      	cmp	r5, r6
 8082b6a:	bf28      	it	cs
 8082b6c:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8082b6e:	b937      	cbnz	r7, 8082b7e <_ZN7FatFile5writeEPKvj+0xba>
 8082b70:	6963      	ldr	r3, [r4, #20]
 8082b72:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8082b74:	4293      	cmp	r3, r2
 8082b76:	bf34      	ite	cc
 8082b78:	2201      	movcc	r2, #1
 8082b7a:	2205      	movcs	r2, #5
 8082b7c:	e000      	b.n	8082b80 <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8082b7e:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8082b80:	68a0      	ldr	r0, [r4, #8]
 8082b82:	3024      	adds	r0, #36	; 0x24
 8082b84:	f000 f8a5 	bl	8082cd2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8082b88:	2800      	cmp	r0, #0
 8082b8a:	d0ac      	beq.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8082b8c:	4438      	add	r0, r7
 8082b8e:	462a      	mov	r2, r5
 8082b90:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8082b92:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8082b94:	f004 fcc1 	bl	808751a <memcpy>
      if (512 == (n + blockOffset)) {
 8082b98:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8082b9c:	d12f      	bne.n	8082bfe <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8082b9e:	68a0      	ldr	r0, [r4, #8]
 8082ba0:	3024      	adds	r0, #36	; 0x24
 8082ba2:	f000 f86f 	bl	8082c84 <_ZN8FatCache4syncEv>
 8082ba6:	e016      	b.n	8082bd6 <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8082ba8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8082bac:	68a0      	ldr	r0, [r4, #8]
 8082bae:	d314      	bcc.n	8082bda <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 8082bb0:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 8082bb2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 8082bb4:	1b52      	subs	r2, r2, r5
 8082bb6:	b2d2      	uxtb	r2, r2
 8082bb8:	4293      	cmp	r3, r2
 8082bba:	bf28      	it	cs
 8082bbc:	4613      	movcs	r3, r2
 8082bbe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 8082bc0:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8082bc2:	4291      	cmp	r1, r2
 8082bc4:	d302      	bcc.n	8082bcc <_ZN7FatFile5writeEPKvj+0x108>
 8082bc6:	441a      	add	r2, r3
 8082bc8:	4291      	cmp	r1, r2
 8082bca:	d337      	bcc.n	8082c3c <_ZN7FatFile5writeEPKvj+0x178>
 8082bcc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 8082bce:	464a      	mov	r2, r9
 8082bd0:	6838      	ldr	r0, [r7, #0]
 8082bd2:	f000 fc71 	bl	80834b8 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 8082bd6:	b990      	cbnz	r0, 8082bfe <_ZN7FatFile5writeEPKvj+0x13a>
 8082bd8:	e785      	b.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8082bda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082bdc:	464a      	mov	r2, r9
 8082bde:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8082be0:	bf02      	ittt	eq
 8082be2:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082be6:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8082bea:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8082bec:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082bee:	6818      	ldr	r0, [r3, #0]
 8082bf0:	f000 fbf0 	bl	80833d4 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8082bf4:	2800      	cmp	r0, #0
 8082bf6:	f43f af76 	beq.w	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8082bfa:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8082bfe:	6963      	ldr	r3, [r4, #20]
    src += n;
 8082c00:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8082c02:	442b      	add	r3, r5
 8082c04:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8082c06:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8082c08:	e77c      	b.n	8082b04 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8082c0a:	69e2      	ldr	r2, [r4, #28]
 8082c0c:	4293      	cmp	r3, r2
 8082c0e:	d901      	bls.n	8082c14 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8082c10:	61e3      	str	r3, [r4, #28]
 8082c12:	e002      	b.n	8082c1a <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8082c14:	4b0f      	ldr	r3, [pc, #60]	; (8082c54 <_ZN7FatFile5writeEPKvj+0x190>)
 8082c16:	681b      	ldr	r3, [r3, #0]
 8082c18:	b11b      	cbz	r3, 8082c22 <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8082c1a:	78a3      	ldrb	r3, [r4, #2]
 8082c1c:	f043 0304 	orr.w	r3, r3, #4
 8082c20:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 8082c22:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8082c26:	2b00      	cmp	r3, #0
 8082c28:	db02      	blt.n	8082c30 <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8082c2a:	4640      	mov	r0, r8
 8082c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 8082c30:	4620      	mov	r0, r4
 8082c32:	f7ff febb 	bl	80829ac <_ZN7FatFile4syncEv>
 8082c36:	2800      	cmp	r0, #0
 8082c38:	d1f7      	bne.n	8082c2a <_ZN7FatFile5writeEPKvj+0x166>
 8082c3a:	e754      	b.n	8082ae6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8082c3c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082c40:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8082c44:	62c2      	str	r2, [r0, #44]	; 0x2c
 8082c46:	e7c1      	b.n	8082bcc <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8082c48:	6921      	ldr	r1, [r4, #16]
 8082c4a:	68a0      	ldr	r0, [r4, #8]
 8082c4c:	f000 f865 	bl	8082d1a <_ZNK9FatVolume17clusterFirstBlockEm>
 8082c50:	4601      	mov	r1, r0
 8082c52:	e784      	b.n	8082b5e <_ZN7FatFile5writeEPKvj+0x9a>
 8082c54:	20000318 	.word	0x20000318

08082c58 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8082c58:	f001 b92c 	b.w	8083eb4 <HAL_Pin_Map>

08082c5c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082c5c:	b570      	push	{r4, r5, r6, lr}
 8082c5e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082c60:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082c62:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082c64:	b149      	cbz	r1, 8082c7a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082c66:	f005 f9d5 	bl	8088014 <strlen>
 8082c6a:	682b      	ldr	r3, [r5, #0]
 8082c6c:	4602      	mov	r2, r0
 8082c6e:	4621      	mov	r1, r4
 8082c70:	4628      	mov	r0, r5
    }
 8082c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082c76:	68db      	ldr	r3, [r3, #12]
 8082c78:	4718      	bx	r3
    }
 8082c7a:	bd70      	pop	{r4, r5, r6, pc}

08082c7c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8082c7c:	f001 b91a 	b.w	8083eb4 <HAL_Pin_Map>

08082c80 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8082c80:	f001 b918 	b.w	8083eb4 <HAL_Pin_Map>

08082c84 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8082c84:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8082c86:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8082c88:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8082c8a:	07da      	lsls	r2, r3, #31
 8082c8c:	d51e      	bpl.n	8082ccc <_ZN8FatCache4syncEv+0x48>
 8082c8e:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8082c90:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8082c94:	6881      	ldr	r1, [r0, #8]
 8082c96:	4632      	mov	r2, r6
 8082c98:	6818      	ldr	r0, [r3, #0]
 8082c9a:	f000 fb9b 	bl	80833d4 <_ZN9SdSpiCard10writeBlockEmPKh>
 8082c9e:	4605      	mov	r5, r0
 8082ca0:	b908      	cbnz	r0, 8082ca6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8082ca2:	2500      	movs	r5, #0
 8082ca4:	e013      	b.n	8082cce <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8082ca6:	7823      	ldrb	r3, [r4, #0]
 8082ca8:	079b      	lsls	r3, r3, #30
 8082caa:	d404      	bmi.n	8082cb6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8082cac:	7823      	ldrb	r3, [r4, #0]
 8082cae:	f023 0301 	bic.w	r3, r3, #1
 8082cb2:	7023      	strb	r3, [r4, #0]
 8082cb4:	e00b      	b.n	8082cce <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8082cb6:	6863      	ldr	r3, [r4, #4]
 8082cb8:	68a0      	ldr	r0, [r4, #8]
 8082cba:	6919      	ldr	r1, [r3, #16]
 8082cbc:	4632      	mov	r2, r6
 8082cbe:	4401      	add	r1, r0
 8082cc0:	6818      	ldr	r0, [r3, #0]
 8082cc2:	f000 fb87 	bl	80833d4 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8082cc6:	2800      	cmp	r0, #0
 8082cc8:	d1f0      	bne.n	8082cac <_ZN8FatCache4syncEv+0x28>
 8082cca:	e7ea      	b.n	8082ca2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8082ccc:	2501      	movs	r5, #1

fail:
  return false;
}
 8082cce:	4628      	mov	r0, r5
 8082cd0:	bd70      	pop	{r4, r5, r6, pc}

08082cd2 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082cd2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8082cd4:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082cd6:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8082cd8:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8082cda:	460e      	mov	r6, r1
 8082cdc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8082cde:	d014      	beq.n	8082d0a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8082ce0:	f7ff ffd0 	bl	8082c84 <_ZN8FatCache4syncEv>
 8082ce4:	b908      	cbnz	r0, 8082cea <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 8082ce6:	2000      	movs	r0, #0
 8082ce8:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8082cea:	076b      	lsls	r3, r5, #29
 8082cec:	d503      	bpl.n	8082cf6 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8082cee:	2300      	movs	r3, #0
 8082cf0:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8082cf2:	60a6      	str	r6, [r4, #8]
 8082cf4:	e009      	b.n	8082d0a <_ZN8FatCache4readEmh+0x38>
 8082cf6:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8082cf8:	f104 020c 	add.w	r2, r4, #12
 8082cfc:	4631      	mov	r1, r6
 8082cfe:	6818      	ldr	r0, [r3, #0]
 8082d00:	f000 fade 	bl	80832c0 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8082d04:	2800      	cmp	r0, #0
 8082d06:	d1f2      	bne.n	8082cee <_ZN8FatCache4readEmh+0x1c>
 8082d08:	e7ed      	b.n	8082ce6 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8082d0a:	4620      	mov	r0, r4
 8082d0c:	7823      	ldrb	r3, [r4, #0]
 8082d0e:	f005 0503 	and.w	r5, r5, #3
 8082d12:	431d      	orrs	r5, r3
 8082d14:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 8082d18:	bd70      	pop	{r4, r5, r6, pc}

08082d1a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8082d1a:	7983      	ldrb	r3, [r0, #6]
 8082d1c:	3902      	subs	r1, #2
 8082d1e:	6940      	ldr	r0, [r0, #20]
 8082d20:	4099      	lsls	r1, r3
}
 8082d22:	4408      	add	r0, r1
 8082d24:	4770      	bx	lr

08082d26 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082d26:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8082d28:	b570      	push	{r4, r5, r6, lr}
 8082d2a:	4605      	mov	r5, r0
 8082d2c:	460c      	mov	r4, r1
 8082d2e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082d30:	d802      	bhi.n	8082d38 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8082d32:	f04f 30ff 	mov.w	r0, #4294967295
 8082d36:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082d38:	69c3      	ldr	r3, [r0, #28]
 8082d3a:	4299      	cmp	r1, r3
 8082d3c:	d8f9      	bhi.n	8082d32 <_ZN9FatVolume6fatGetEmPm+0xc>
 8082d3e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8082d40:	2b20      	cmp	r3, #32
 8082d42:	d110      	bne.n	8082d66 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8082d44:	6981      	ldr	r1, [r0, #24]
 8082d46:	2202      	movs	r2, #2
 8082d48:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082d4c:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082d50:	f7ff ffbf 	bl	8082cd2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082d54:	2800      	cmp	r0, #0
 8082d56:	d0ec      	beq.n	8082d32 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8082d58:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082d5c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8082d60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8082d64:	e00f      	b.n	8082d86 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 8082d66:	2b10      	cmp	r3, #16
 8082d68:	d1e3      	bne.n	8082d32 <_ZN9FatVolume6fatGetEmPm+0xc>
 8082d6a:	6983      	ldr	r3, [r0, #24]
 8082d6c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082d70:	2202      	movs	r2, #2
 8082d72:	4419      	add	r1, r3
 8082d74:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082d78:	f7ff ffab 	bl	8082cd2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082d7c:	2800      	cmp	r0, #0
 8082d7e:	d0d8      	beq.n	8082d32 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8082d80:	b2e4      	uxtb	r4, r4
 8082d82:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8082d86:	69ea      	ldr	r2, [r5, #28]
 8082d88:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8082d8a:	bf9a      	itte	ls
 8082d8c:	6033      	strls	r3, [r6, #0]
  return 1;
 8082d8e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8082d90:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8082d92:	bd70      	pop	{r4, r5, r6, pc}

08082d94 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082d94:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8082d96:	b538      	push	{r3, r4, r5, lr}
 8082d98:	460c      	mov	r4, r1
 8082d9a:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082d9c:	d801      	bhi.n	8082da2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8082d9e:	2000      	movs	r0, #0
 8082da0:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8082da2:	69c3      	ldr	r3, [r0, #28]
 8082da4:	4299      	cmp	r1, r3
 8082da6:	d8fa      	bhi.n	8082d9e <_ZN9FatVolume6fatPutEmm+0xa>
 8082da8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8082daa:	2b20      	cmp	r3, #32
 8082dac:	d10e      	bne.n	8082dcc <_ZN9FatVolume6fatPutEmm+0x38>
 8082dae:	6981      	ldr	r1, [r0, #24]
 8082db0:	2203      	movs	r2, #3
 8082db2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8082db6:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082dba:	f7ff ff8a 	bl	8082cd2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8082dbe:	2800      	cmp	r0, #0
 8082dc0:	d0ed      	beq.n	8082d9e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8082dc2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8082dc6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8082dca:	e00f      	b.n	8082dec <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 8082dcc:	2b10      	cmp	r3, #16
 8082dce:	d1e6      	bne.n	8082d9e <_ZN9FatVolume6fatPutEmm+0xa>
 8082dd0:	6983      	ldr	r3, [r0, #24]
 8082dd2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8082dd6:	2203      	movs	r2, #3
 8082dd8:	4419      	add	r1, r3
 8082dda:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8082dde:	f7ff ff78 	bl	8082cd2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8082de2:	2800      	cmp	r0, #0
 8082de4:	d0db      	beq.n	8082d9e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8082de6:	b2e4      	uxtb	r4, r4
 8082de8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8082dec:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8082dee:	bd38      	pop	{r3, r4, r5, pc}

08082df0 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082df0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082df4:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082df6:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082df8:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8082dfa:	460e      	mov	r6, r1
 8082dfc:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8082dfe:	d207      	bcs.n	8082e10 <_ZN9FatVolume15allocateClusterEmPm+0x20>
 8082e00:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 8082e02:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 8082e04:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 8082e06:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 8082e08:	429c      	cmp	r4, r3
 8082e0a:	d903      	bls.n	8082e14 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 8082e0c:	b9cf      	cbnz	r7, 8082e42 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 8082e0e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 8082e10:	2701      	movs	r7, #1
 8082e12:	e7f7      	b.n	8082e04 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 8082e14:	42a6      	cmp	r6, r4
 8082e16:	d014      	beq.n	8082e42 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8082e18:	aa01      	add	r2, sp, #4
 8082e1a:	4621      	mov	r1, r4
 8082e1c:	4628      	mov	r0, r5
 8082e1e:	f7ff ff82 	bl	8082d26 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8082e22:	2800      	cmp	r0, #0
 8082e24:	db0d      	blt.n	8082e42 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8082e26:	d0ed      	beq.n	8082e04 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8082e28:	9b01      	ldr	r3, [sp, #4]
 8082e2a:	2b00      	cmp	r3, #0
 8082e2c:	d1ea      	bne.n	8082e04 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 8082e2e:	b107      	cbz	r7, 8082e32 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 8082e30:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8082e32:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8082e36:	4621      	mov	r1, r4
 8082e38:	4628      	mov	r0, r5
 8082e3a:	f7ff ffab 	bl	8082d94 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 8082e3e:	4607      	mov	r7, r0
 8082e40:	b908      	cbnz	r0, 8082e46 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8082e42:	2700      	movs	r7, #0
 8082e44:	e00b      	b.n	8082e5e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8082e46:	b916      	cbnz	r6, 8082e4e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 8082e48:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8082e4c:	e007      	b.n	8082e5e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 8082e4e:	4622      	mov	r2, r4
 8082e50:	4631      	mov	r1, r6
 8082e52:	4628      	mov	r0, r5
 8082e54:	f7ff ff9e 	bl	8082d94 <_ZN9FatVolume6fatPutEmm>
 8082e58:	2800      	cmp	r0, #0
 8082e5a:	d1f5      	bne.n	8082e48 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 8082e5c:	e7f1      	b.n	8082e42 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 8082e5e:	4638      	mov	r0, r7
 8082e60:	b002      	add	sp, #8
 8082e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082e66 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8082e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082e68:	4605      	mov	r5, r0
 8082e6a:	460c      	mov	r4, r1
  uint32_t next = 0;
 8082e6c:	ae02      	add	r6, sp, #8
 8082e6e:	2300      	movs	r3, #0
 8082e70:	f846 3d04 	str.w	r3, [r6, #-4]!
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8082e74:	4632      	mov	r2, r6
 8082e76:	4621      	mov	r1, r4
 8082e78:	4628      	mov	r0, r5
 8082e7a:	f7ff ff54 	bl	8082d26 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8082e7e:	1e07      	subs	r7, r0, #0
 8082e80:	da01      	bge.n	8082e86 <_ZN9FatVolume9freeChainEm+0x20>
  } while (fg);

  return true;

fail:
  return false;
 8082e82:	2000      	movs	r0, #0
 8082e84:	e00f      	b.n	8082ea6 <_ZN9FatVolume9freeChainEm+0x40>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8082e86:	2200      	movs	r2, #0
 8082e88:	4621      	mov	r1, r4
 8082e8a:	4628      	mov	r0, r5
 8082e8c:	f7ff ff82 	bl	8082d94 <_ZN9FatVolume6fatPutEmm>
 8082e90:	2800      	cmp	r0, #0
 8082e92:	d0f6      	beq.n	8082e82 <_ZN9FatVolume9freeChainEm+0x1c>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 8082e94:	68eb      	ldr	r3, [r5, #12]
 8082e96:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 8082e98:	bf9c      	itt	ls
 8082e9a:	f104 34ff 	addls.w	r4, r4, #4294967295
 8082e9e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 8082ea0:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next = 0;
  int8_t fg;
  do {
 8082ea2:	2f00      	cmp	r7, #0
 8082ea4:	d1e6      	bne.n	8082e74 <_ZN9FatVolume9freeChainEm+0xe>

  return true;

fail:
  return false;
}
 8082ea6:	b003      	add	sp, #12
 8082ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082eaa <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8082eaa:	b570      	push	{r4, r5, r6, lr}
 8082eac:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8082eae:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8082eb0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8082eb2:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8082eb4:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8082eb8:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8082eba:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8082ebc:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082ebe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8082ec2:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8082ec4:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8082ec8:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 8082ecc:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 8082ed0:	b1a1      	cbz	r1, 8082efc <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8082ed2:	2904      	cmp	r1, #4
 8082ed4:	d85d      	bhi.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8082ed6:	4611      	mov	r1, r2
 8082ed8:	3024      	adds	r0, #36	; 0x24
 8082eda:	f7ff fefa 	bl	8082cd2 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8082ede:	2800      	cmp	r0, #0
 8082ee0:	d057      	beq.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8082ee2:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8082ee6:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8082eea:	065b      	lsls	r3, r3, #25
 8082eec:	d151      	bne.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
 8082eee:	351b      	adds	r5, #27
 8082ef0:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8082ef4:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8082ef8:	2d00      	cmp	r5, #0
 8082efa:	d04a      	beq.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
 8082efc:	2200      	movs	r2, #0
 8082efe:	4629      	mov	r1, r5
 8082f00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8082f04:	f7ff fee5 	bl	8082cd2 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8082f08:	2800      	cmp	r0, #0
 8082f0a:	d042      	beq.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8082f0c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8082f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8082f14:	d13d      	bne.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
 8082f16:	7c03      	ldrb	r3, [r0, #16]
 8082f18:	2b02      	cmp	r3, #2
 8082f1a:	d13a      	bne.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 8082f1c:	89c3      	ldrh	r3, [r0, #14]
 8082f1e:	2b00      	cmp	r3, #0
 8082f20:	d037      	beq.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8082f22:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8082f24:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8082f26:	1e4b      	subs	r3, r1, #1
 8082f28:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8082f2a:	2300      	movs	r3, #0
 8082f2c:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8082f2e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8082f30:	2301      	movs	r3, #1
 8082f32:	428b      	cmp	r3, r1
 8082f34:	d007      	beq.n	8082f46 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8082f36:	3e01      	subs	r6, #1
 8082f38:	d02b      	beq.n	8082f92 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8082f3a:	79a2      	ldrb	r2, [r4, #6]
 8082f3c:	005b      	lsls	r3, r3, #1
 8082f3e:	3201      	adds	r2, #1
 8082f40:	b2db      	uxtb	r3, r3
 8082f42:	71a2      	strb	r2, [r4, #6]
 8082f44:	e7f5      	b.n	8082f32 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8082f46:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8082f48:	b902      	cbnz	r2, 8082f4c <_ZN9FatVolume4initEh+0xa2>
 8082f4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8082f4c:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8082f4e:	89c6      	ldrh	r6, [r0, #14]
 8082f50:	442e      	add	r6, r5
 8082f52:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8082f54:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8082f58:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8082f5c:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8082f5e:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8082f60:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8082f64:	0152      	lsls	r2, r2, #5
 8082f66:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8082f6a:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8082f6e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8082f70:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8082f74:	b903      	cbnz	r3, 8082f78 <_ZN9FatVolume4initEh+0xce>
 8082f76:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8082f78:	1aad      	subs	r5, r5, r2
 8082f7a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8082f7c:	79a5      	ldrb	r5, [r4, #6]
 8082f7e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8082f82:	1c6b      	adds	r3, r5, #1
 8082f84:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8082f86:	f640 73f4 	movw	r3, #4084	; 0xff4
 8082f8a:	429d      	cmp	r5, r3
 8082f8c:	d803      	bhi.n	8082f96 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 8082f8e:	230c      	movs	r3, #12
 8082f90:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8082f92:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8082f94:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8082f96:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8082f9a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082f9c:	bf89      	itett	hi
 8082f9e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8082fa0:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8082fa2:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8082fa4:	2320      	movhi	r3, #32
 8082fa6:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8082fa8:	2001      	movs	r0, #1

fail:
  return false;
}
 8082faa:	bd70      	pop	{r4, r5, r6, pc}

08082fac <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8082fac:	f000 bf82 	b.w	8083eb4 <HAL_Pin_Map>

08082fb0 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 8082fb0:	f000 bf80 	b.w	8083eb4 <HAL_Pin_Map>

08082fb4 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 8082fb4:	f000 bf7e 	b.w	8083eb4 <HAL_Pin_Map>

08082fb8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 8082fb8:	b570      	push	{r4, r5, r6, lr}
 8082fba:	460e      	mov	r6, r1
 8082fbc:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 8082fbe:	f000 fff9 	bl	8083fb4 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 8082fc2:	4c0c      	ldr	r4, [pc, #48]	; (8082ff4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 8082fc4:	6823      	ldr	r3, [r4, #0]
 8082fc6:	1ac0      	subs	r0, r0, r3
 8082fc8:	4b0b      	ldr	r3, [pc, #44]	; (8082ff8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 8082fca:	4298      	cmp	r0, r3
 8082fcc:	d908      	bls.n	8082fe0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082fce:	f000 fff9 	bl	8083fc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082fd2:	4b0a      	ldr	r3, [pc, #40]	; (8082ffc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 8082fd4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8082fd6:	f001 f9b9 	bl	808434c <spark_process>
 8082fda:	f000 ffeb 	bl	8083fb4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 8082fde:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8082fe0:	f000 fff0 	bl	8083fc4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 8082fe4:	b280      	uxth	r0, r0
 8082fe6:	1b80      	subs	r0, r0, r6
}
 8082fe8:	42a8      	cmp	r0, r5
 8082fea:	bfd4      	ite	le
 8082fec:	2000      	movle	r0, #0
 8082fee:	2001      	movgt	r0, #1
 8082ff0:	bd70      	pop	{r4, r5, r6, pc}
 8082ff2:	bf00      	nop
 8082ff4:	2000031c 	.word	0x2000031c
 8082ff8:	000186a0 	.word	0x000186a0
 8082ffc:	20000820 	.word	0x20000820

08083000 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8083000:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 8083002:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 8083004:	4604      	mov	r4, r0
  if (!m_spiActive) {
 8083006:	b94d      	cbnz	r5, 808301c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 8083008:	6840      	ldr	r0, [r0, #4]
 808300a:	f000 fa7d 	bl	8083508 <_ZN14SdSpiAltDriver8activateEv>
 808300e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 8083010:	4629      	mov	r1, r5
 8083012:	7d18      	ldrb	r0, [r3, #20]
 8083014:	f002 feda 	bl	8085dcc <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 8083018:	2301      	movs	r3, #1
 808301a:	7223      	strb	r3, [r4, #8]
 808301c:	bd38      	pop	{r3, r4, r5, pc}

0808301e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 808301e:	b510      	push	{r4, lr}
  if (m_spiActive) {
 8083020:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 8083022:	4604      	mov	r4, r0
  if (m_spiActive) {
 8083024:	b16b      	cbz	r3, 8083042 <_ZN9SdSpiCard7spiStopEv+0x24>
 8083026:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 8083028:	2101      	movs	r1, #1
 808302a:	7d18      	ldrb	r0, [r3, #20]
 808302c:	f002 fece 	bl	8085dcc <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8083030:	21ff      	movs	r1, #255	; 0xff
 8083032:	6860      	ldr	r0, [r4, #4]
 8083034:	f000 fa9a 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 8083038:	6860      	ldr	r0, [r4, #4]
 808303a:	f000 fa79 	bl	8083530 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 808303e:	2300      	movs	r3, #0
 8083040:	7223      	strb	r3, [r4, #8]
 8083042:	bd10      	pop	{r4, pc}

08083044 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8083044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083046:	4604      	mov	r4, r0
 8083048:	460d      	mov	r5, r1
 808304a:	4616      	mov	r6, r2
 808304c:	f000 ffba 	bl	8083fc4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 8083050:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8083052:	6860      	ldr	r0, [r4, #4]
 8083054:	f000 fa6f 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 8083058:	28ff      	cmp	r0, #255	; 0xff
 808305a:	7260      	strb	r0, [r4, #9]
 808305c:	d109      	bne.n	8083072 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 808305e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083062:	4639      	mov	r1, r7
 8083064:	4620      	mov	r0, r4
 8083066:	f7ff ffa7 	bl	8082fb8 <_ZN9SdSpiCard10isTimedOutEtt>
 808306a:	2800      	cmp	r0, #0
 808306c:	d0f1      	beq.n	8083052 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808306e:	2355      	movs	r3, #85	; 0x55
 8083070:	e00b      	b.n	808308a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 8083072:	28fe      	cmp	r0, #254	; 0xfe
 8083074:	d001      	beq.n	808307a <_ZN9SdSpiCard8readDataEPhj+0x36>
 8083076:	2350      	movs	r3, #80	; 0x50
 8083078:	e007      	b.n	808308a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 808307a:	4632      	mov	r2, r6
 808307c:	4629      	mov	r1, r5
 808307e:	6860      	ldr	r0, [r4, #4]
 8083080:	f000 fa5e 	bl	8083540 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8083084:	7260      	strb	r0, [r4, #9]
 8083086:	b130      	cbz	r0, 8083096 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8083088:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 808308a:	4620      	mov	r0, r4
 808308c:	7023      	strb	r3, [r4, #0]
 808308e:	f7ff ffc6 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083092:	2000      	movs	r0, #0
}
 8083094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8083096:	6860      	ldr	r0, [r4, #4]
 8083098:	f000 fa4d 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
 808309c:	6860      	ldr	r0, [r4, #4]
 808309e:	f000 fa4a 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
 80830a2:	2001      	movs	r0, #1
 80830a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080830a6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 80830a6:	b570      	push	{r4, r5, r6, lr}
 80830a8:	4604      	mov	r4, r0
 80830aa:	460e      	mov	r6, r1
 80830ac:	f000 ff8a 	bl	8083fc4 <HAL_Timer_Get_Milli_Seconds>
 80830b0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 80830b2:	4632      	mov	r2, r6
 80830b4:	4629      	mov	r1, r5
 80830b6:	4620      	mov	r0, r4
 80830b8:	f7ff ff7e 	bl	8082fb8 <_ZN9SdSpiCard10isTimedOutEtt>
 80830bc:	b930      	cbnz	r0, 80830cc <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 80830be:	6860      	ldr	r0, [r4, #4]
 80830c0:	f000 fa39 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 80830c4:	28ff      	cmp	r0, #255	; 0xff
 80830c6:	d1f4      	bne.n	80830b2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 80830c8:	2001      	movs	r0, #1
 80830ca:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 80830cc:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 80830ce:	bd70      	pop	{r4, r5, r6, pc}

080830d0 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80830d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 80830d2:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80830d4:	4604      	mov	r4, r0
 80830d6:	460d      	mov	r5, r1
 80830d8:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 80830da:	b90b      	cbnz	r3, 80830e0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 80830dc:	f7ff ff90 	bl	8083000 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 80830e0:	b125      	cbz	r5, 80830ec <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 80830e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80830e6:	4620      	mov	r0, r4
 80830e8:	f7ff ffdd 	bl	80830a6 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80830ec:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80830f0:	6860      	ldr	r0, [r4, #4]
 80830f2:	f000 fa3b 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
 80830f6:	f10d 0607 	add.w	r6, sp, #7
 80830fa:	f10d 0703 	add.w	r7, sp, #3
 80830fe:	f816 1901 	ldrb.w	r1, [r6], #-1
 8083102:	6860      	ldr	r0, [r4, #4]
 8083104:	f000 fa32 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 8083108:	42be      	cmp	r6, r7
 808310a:	d1f8      	bne.n	80830fe <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 808310c:	2d00      	cmp	r5, #0
 808310e:	bf0c      	ite	eq
 8083110:	2195      	moveq	r1, #149	; 0x95
 8083112:	2187      	movne	r1, #135	; 0x87
 8083114:	6860      	ldr	r0, [r4, #4]
 8083116:	f000 fa29 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808311a:	6860      	ldr	r0, [r4, #4]
 808311c:	f000 fa0b 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
 8083120:	250b      	movs	r5, #11
 8083122:	6860      	ldr	r0, [r4, #4]
 8083124:	f000 fa07 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 8083128:	0603      	lsls	r3, r0, #24
 808312a:	7260      	strb	r0, [r4, #9]
 808312c:	d503      	bpl.n	8083136 <_ZN9SdSpiCard11cardCommandEhm+0x66>
 808312e:	3d01      	subs	r5, #1
 8083130:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8083134:	d1f5      	bne.n	8083122 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 8083136:	b003      	add	sp, #12
 8083138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808313a <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 808313a:	b570      	push	{r4, r5, r6, lr}
 808313c:	4604      	mov	r4, r0
 808313e:	460d      	mov	r5, r1
 8083140:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 8083142:	2137      	movs	r1, #55	; 0x37
 8083144:	2200      	movs	r2, #0
 8083146:	f7ff ffc3 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 808314a:	4632      	mov	r2, r6
 808314c:	4629      	mov	r1, r5
 808314e:	4620      	mov	r0, r4
  }
 8083150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 8083154:	f7ff bfbc 	b.w	80830d0 <_ZN9SdSpiCard11cardCommandEhm>

08083158 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8083158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 808315c:	2500      	movs	r5, #0
 808315e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 8083160:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 8083162:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 8083164:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8083166:	4604      	mov	r4, r0
 8083168:	4690      	mov	r8, r2
 808316a:	461e      	mov	r6, r3
 808316c:	f000 ff2a 	bl	8083fc4 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 8083170:	4641      	mov	r1, r8
 8083172:	4607      	mov	r7, r0
 8083174:	6860      	ldr	r0, [r4, #4]
 8083176:	f000 f9cb 	bl	8083510 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 808317a:	6863      	ldr	r3, [r4, #4]
 808317c:	4a4f      	ldr	r2, [pc, #316]	; (80832bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 808317e:	f04f 0801 	mov.w	r8, #1
 8083182:	721d      	strb	r5, [r3, #8]
 8083184:	60da      	str	r2, [r3, #12]
 8083186:	745d      	strb	r5, [r3, #17]
 8083188:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 808318c:	4620      	mov	r0, r4
 808318e:	f7ff ff37 	bl	8083000 <_ZN9SdSpiCard8spiStartEv>
 8083192:	6863      	ldr	r3, [r4, #4]
 8083194:	4641      	mov	r1, r8
 8083196:	7d18      	ldrb	r0, [r3, #20]
 8083198:	f002 fe18 	bl	8085dcc <digitalWrite>
 808319c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808319e:	21ff      	movs	r1, #255	; 0xff
 80831a0:	6860      	ldr	r0, [r4, #4]
 80831a2:	3d01      	subs	r5, #1
 80831a4:	f000 f9e2 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 80831a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80831ac:	d1f7      	bne.n	808319e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 80831ae:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80831b0:	4629      	mov	r1, r5
 80831b2:	7d18      	ldrb	r0, [r3, #20]
 80831b4:	f002 fe0a 	bl	8085dcc <digitalWrite>
 80831b8:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 80831ba:	2200      	movs	r2, #0
 80831bc:	4611      	mov	r1, r2
 80831be:	4620      	mov	r0, r4
 80831c0:	f7ff ff86 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 80831c4:	2801      	cmp	r0, #1
 80831c6:	4680      	mov	r8, r0
 80831c8:	d012      	beq.n	80831f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 80831ca:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 80831cc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80831d0:	d101      	bne.n	80831d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80831d2:	2320      	movs	r3, #32
 80831d4:	e057      	b.n	8083286 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80831d6:	21fd      	movs	r1, #253	; 0xfd
 80831d8:	6860      	ldr	r0, [r4, #4]
 80831da:	f000 f9c7 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
 80831de:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80831e2:	6860      	ldr	r0, [r4, #4]
 80831e4:	f000 f9a7 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 80831e8:	f1b8 0801 	subs.w	r8, r8, #1
 80831ec:	d1f9      	bne.n	80831e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 80831ee:	e7e4      	b.n	80831ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80831f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80831f4:	2108      	movs	r1, #8
 80831f6:	4620      	mov	r0, r4
 80831f8:	f7ff ff6a 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 80831fc:	2805      	cmp	r0, #5
 80831fe:	d102      	bne.n	8083206 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8083200:	f884 800a 	strb.w	r8, [r4, #10]
 8083204:	e00f      	b.n	8083226 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 8083206:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8083208:	6860      	ldr	r0, [r4, #4]
 808320a:	f000 f994 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
 808320e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 8083210:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8083214:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 8083216:	d1f7      	bne.n	8083208 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8083218:	28aa      	cmp	r0, #170	; 0xaa
 808321a:	d102      	bne.n	8083222 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 808321c:	2302      	movs	r3, #2
 808321e:	72a3      	strb	r3, [r4, #10]
 8083220:	e001      	b.n	8083226 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8083222:	2325      	movs	r3, #37	; 0x25
 8083224:	e02f      	b.n	8083286 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8083226:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8083228:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 808322a:	2b02      	cmp	r3, #2
 808322c:	bf0c      	ite	eq
 808322e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8083232:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8083234:	462a      	mov	r2, r5
 8083236:	2129      	movs	r1, #41	; 0x29
 8083238:	4620      	mov	r0, r4
 808323a:	f7ff ff7e 	bl	808313a <_ZN9SdSpiCard8cardAcmdEhm>
 808323e:	4602      	mov	r2, r0
 8083240:	b148      	cbz	r0, 8083256 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8083242:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8083246:	4639      	mov	r1, r7
 8083248:	4620      	mov	r0, r4
 808324a:	f7ff feb5 	bl	8082fb8 <_ZN9SdSpiCard10isTimedOutEtt>
 808324e:	2800      	cmp	r0, #0
 8083250:	d0f0      	beq.n	8083234 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 8083252:	2343      	movs	r3, #67	; 0x43
 8083254:	e017      	b.n	8083286 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8083256:	7aa3      	ldrb	r3, [r4, #10]
 8083258:	2b02      	cmp	r3, #2
 808325a:	d00e      	beq.n	808327a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 808325c:	4620      	mov	r0, r4
 808325e:	f7ff fede 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 8083262:	6863      	ldr	r3, [r4, #4]
 8083264:	68b0      	ldr	r0, [r6, #8]
 8083266:	7934      	ldrb	r4, [r6, #4]
 8083268:	7b31      	ldrb	r1, [r6, #12]
 808326a:	7b72      	ldrb	r2, [r6, #13]
 808326c:	60d8      	str	r0, [r3, #12]
 808326e:	721c      	strb	r4, [r3, #8]
 8083270:	7419      	strb	r1, [r3, #16]
 8083272:	745a      	strb	r2, [r3, #17]
  return true;
 8083274:	2001      	movs	r0, #1
 8083276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 808327a:	213a      	movs	r1, #58	; 0x3a
 808327c:	4620      	mov	r0, r4
 808327e:	f7ff ff27 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 8083282:	b138      	cbz	r0, 8083294 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8083284:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 8083286:	4620      	mov	r0, r4
 8083288:	7023      	strb	r3, [r4, #0]
 808328a:	f7ff fec8 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 808328e:	2000      	movs	r0, #0
}
 8083290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8083294:	6860      	ldr	r0, [r4, #4]
 8083296:	f000 f94e 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 808329a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 808329e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80832a0:	bf04      	itt	eq
 80832a2:	2303      	moveq	r3, #3
 80832a4:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80832a6:	6860      	ldr	r0, [r4, #4]
 80832a8:	f000 f945 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
 80832ac:	6860      	ldr	r0, [r4, #4]
 80832ae:	f000 f942 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
 80832b2:	6860      	ldr	r0, [r4, #4]
 80832b4:	f000 f93f 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
 80832b8:	e7d0      	b.n	808325c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 80832ba:	bf00      	nop
 80832bc:	0003d090 	.word	0x0003d090

080832c0 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80832c0:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80832c2:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80832c4:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80832c6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80832c8:	bf18      	it	ne
 80832ca:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 80832cc:	460a      	mov	r2, r1
 80832ce:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80832d0:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 80832d2:	f7ff fefd 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 80832d6:	b110      	cbz	r0, 80832de <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80832d8:	2330      	movs	r3, #48	; 0x30
 80832da:	7023      	strb	r3, [r4, #0]
 80832dc:	e00b      	b.n	80832f6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80832de:	4629      	mov	r1, r5
 80832e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80832e4:	4620      	mov	r0, r4
 80832e6:	f7ff fead 	bl	8083044 <_ZN9SdSpiCard8readDataEPhj>
 80832ea:	4605      	mov	r5, r0
 80832ec:	b118      	cbz	r0, 80832f6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 80832ee:	4620      	mov	r0, r4
 80832f0:	f7ff fe95 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return true;
 80832f4:	e003      	b.n	80832fe <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 80832f6:	4620      	mov	r0, r4
 80832f8:	f7ff fe91 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80832fc:	2500      	movs	r5, #0
}
 80832fe:	4628      	mov	r0, r5
 8083300:	bd38      	pop	{r3, r4, r5, pc}

08083302 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8083302:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8083304:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8083306:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8083308:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808330a:	bf18      	it	ne
 808330c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 808330e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8083310:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8083312:	f7ff fedd 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 8083316:	b130      	cbz	r0, 8083326 <_ZN9SdSpiCard9readStartEm+0x24>
 8083318:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 808331a:	4620      	mov	r0, r4
 808331c:	7023      	strb	r3, [r4, #0]
 808331e:	f7ff fe7e 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083322:	2000      	movs	r0, #0
 8083324:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 8083326:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8083328:	bd10      	pop	{r4, pc}

0808332a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 808332a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 808332c:	2200      	movs	r2, #0
 808332e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8083330:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8083332:	f7ff fecd 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 8083336:	b130      	cbz	r0, 8083346 <_ZN9SdSpiCard8readStopEv+0x1c>
 8083338:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 808333a:	4620      	mov	r0, r4
 808333c:	7023      	strb	r3, [r4, #0]
 808333e:	f7ff fe6e 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083342:	2000      	movs	r0, #0
 8083344:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 8083346:	4620      	mov	r0, r4
 8083348:	f7ff fe69 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return true;
 808334c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 808334e:	bd10      	pop	{r4, pc}

08083350 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8083350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083352:	4605      	mov	r5, r0
 8083354:	4616      	mov	r6, r2
 8083356:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8083358:	f7ff ffd3 	bl	8083302 <_ZN9SdSpiCard9readStartEm>
 808335c:	b198      	cbz	r0, 8083386 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 808335e:	2400      	movs	r4, #0
 8083360:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8083362:	429f      	cmp	r7, r3
 8083364:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8083368:	d908      	bls.n	808337c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 808336a:	f44f 7200 	mov.w	r2, #512	; 0x200
 808336e:	4628      	mov	r0, r5
 8083370:	f7ff fe68 	bl	8083044 <_ZN9SdSpiCard8readDataEPhj>
 8083374:	3401      	adds	r4, #1
 8083376:	2800      	cmp	r0, #0
 8083378:	d1f2      	bne.n	8083360 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 808337a:	e004      	b.n	8083386 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 808337c:	4628      	mov	r0, r5
}
 808337e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8083382:	f7ff bfd2 	b.w	808332a <_ZN9SdSpiCard8readStopEv>
}
 8083386:	2000      	movs	r0, #0
 8083388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808338a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 808338a:	b538      	push	{r3, r4, r5, lr}
 808338c:	4604      	mov	r4, r0
 808338e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8083390:	6840      	ldr	r0, [r0, #4]
 8083392:	f000 f8eb 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 8083396:	f44f 7200 	mov.w	r2, #512	; 0x200
 808339a:	4629      	mov	r1, r5
 808339c:	6860      	ldr	r0, [r4, #4]
 808339e:	f000 f8e9 	bl	8083574 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80833a2:	21ff      	movs	r1, #255	; 0xff
 80833a4:	6860      	ldr	r0, [r4, #4]
 80833a6:	f000 f8e1 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
 80833aa:	21ff      	movs	r1, #255	; 0xff
 80833ac:	6860      	ldr	r0, [r4, #4]
 80833ae:	f000 f8dd 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80833b2:	6860      	ldr	r0, [r4, #4]
 80833b4:	f000 f8bf 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 80833b8:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80833ba:	f000 001f 	and.w	r0, r0, #31
 80833be:	2805      	cmp	r0, #5
 80833c0:	d006      	beq.n	80833d0 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80833c2:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 80833c4:	4620      	mov	r0, r4
 80833c6:	7023      	strb	r3, [r4, #0]
 80833c8:	f7ff fe29 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80833cc:	2000      	movs	r0, #0
 80833ce:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 80833d0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80833d2:	bd38      	pop	{r3, r4, r5, pc}

080833d4 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80833d4:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80833d6:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80833d8:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80833da:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80833dc:	bf18      	it	ne
 80833de:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 80833e0:	460a      	mov	r2, r1
 80833e2:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80833e4:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 80833e6:	f7ff fe73 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 80833ea:	4606      	mov	r6, r0
 80833ec:	b108      	cbz	r0, 80833f2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 80833ee:	2332      	movs	r3, #50	; 0x32
 80833f0:	e01d      	b.n	808342e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 80833f2:	462a      	mov	r2, r5
 80833f4:	21fe      	movs	r1, #254	; 0xfe
 80833f6:	4620      	mov	r0, r4
 80833f8:	f7ff ffc7 	bl	808338a <_ZN9SdSpiCard9writeDataEhPKh>
 80833fc:	b1c0      	cbz	r0, 8083430 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80833fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8083402:	4620      	mov	r0, r4
 8083404:	f7ff fe4f 	bl	80830a6 <_ZN9SdSpiCard11waitNotBusyEt>
 8083408:	4605      	mov	r5, r0
 808340a:	b908      	cbnz	r0, 8083410 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 808340c:	235a      	movs	r3, #90	; 0x5a
 808340e:	e00e      	b.n	808342e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 8083410:	4632      	mov	r2, r6
 8083412:	210d      	movs	r1, #13
 8083414:	4620      	mov	r0, r4
 8083416:	f7ff fe5b 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 808341a:	b938      	cbnz	r0, 808342c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808341c:	6860      	ldr	r0, [r4, #4]
 808341e:	f000 f88a 	bl	8083536 <_ZN14SdSpiAltDriver7receiveEv>
 8083422:	b918      	cbnz	r0, 808342c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 8083424:	4620      	mov	r0, r4
 8083426:	f7ff fdfa 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return true;
 808342a:	e005      	b.n	8083438 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808342c:	2329      	movs	r3, #41	; 0x29
 808342e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 8083430:	4620      	mov	r0, r4
 8083432:	f7ff fdf4 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083436:	2500      	movs	r5, #0
}
 8083438:	4628      	mov	r0, r5
 808343a:	bd70      	pop	{r4, r5, r6, pc}

0808343c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 808343c:	b538      	push	{r3, r4, r5, lr}
 808343e:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083440:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8083444:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083446:	f7ff fe2e 	bl	80830a6 <_ZN9SdSpiCard11waitNotBusyEt>
 808344a:	b910      	cbnz	r0, 8083452 <_ZN9SdSpiCard9writeDataEPKh+0x16>
 808344c:	235b      	movs	r3, #91	; 0x5b
 808344e:	7023      	strb	r3, [r4, #0]
 8083450:	e005      	b.n	808345e <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8083452:	462a      	mov	r2, r5
 8083454:	21fc      	movs	r1, #252	; 0xfc
 8083456:	4620      	mov	r0, r4
 8083458:	f7ff ff97 	bl	808338a <_ZN9SdSpiCard9writeDataEhPKh>
 808345c:	b918      	cbnz	r0, 8083466 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 808345e:	4620      	mov	r0, r4
 8083460:	f7ff fddd 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083464:	2000      	movs	r0, #0
}
 8083466:	bd38      	pop	{r3, r4, r5, pc}

08083468 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8083468:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808346a:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 808346c:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808346e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8083470:	bf18      	it	ne
 8083472:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8083474:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8083476:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8083478:	f7ff fe2a 	bl	80830d0 <_ZN9SdSpiCard11cardCommandEhm>
 808347c:	b130      	cbz	r0, 808348c <_ZN9SdSpiCard10writeStartEm+0x24>
 808347e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 8083480:	4620      	mov	r0, r4
 8083482:	7023      	strb	r3, [r4, #0]
 8083484:	f7ff fdcb 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
 8083488:	2000      	movs	r0, #0
 808348a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 808348c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 808348e:	bd10      	pop	{r4, pc}

08083490 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8083490:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083492:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8083496:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8083498:	f7ff fe05 	bl	80830a6 <_ZN9SdSpiCard11waitNotBusyEt>
 808349c:	4605      	mov	r5, r0
 808349e:	b120      	cbz	r0, 80834aa <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80834a0:	21fd      	movs	r1, #253	; 0xfd
 80834a2:	6860      	ldr	r0, [r4, #4]
 80834a4:	f000 f862 	bl	808356c <_ZN14SdSpiAltDriver4sendEh>
 80834a8:	e001      	b.n	80834ae <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80834aa:	2356      	movs	r3, #86	; 0x56
 80834ac:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 80834ae:	4620      	mov	r0, r4
 80834b0:	f7ff fdb5 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80834b4:	4628      	mov	r0, r5
 80834b6:	bd38      	pop	{r3, r4, r5, pc}

080834b8 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80834b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80834ba:	4605      	mov	r5, r0
 80834bc:	4616      	mov	r6, r2
 80834be:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 80834c0:	f7ff ffd2 	bl	8083468 <_ZN9SdSpiCard10writeStartEm>
 80834c4:	b170      	cbz	r0, 80834e4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 80834c6:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80834c8:	42bc      	cmp	r4, r7
 80834ca:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80834ce:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80834d0:	d004      	beq.n	80834dc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 80834d2:	f7ff ffb3 	bl	808343c <_ZN9SdSpiCard9writeDataEPKh>
 80834d6:	b128      	cbz	r0, 80834e4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80834d8:	3401      	adds	r4, #1
 80834da:	e7f5      	b.n	80834c8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 80834dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80834e0:	f7ff bfd6 	b.w	8083490 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 80834e4:	4628      	mov	r0, r5
 80834e6:	f7ff fd9a 	bl	808301e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80834ea:	2000      	movs	r0, #0
 80834ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080834ee <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 80834ee:	f000 bce1 	b.w	8083eb4 <HAL_Pin_Map>

080834f2 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 80834f2:	f000 bcdf 	b.w	8083eb4 <HAL_Pin_Map>

080834f6 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 80834f6:	f000 bcdd 	b.w	8083eb4 <HAL_Pin_Map>
	...

080834fc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80834fc:	4b01      	ldr	r3, [pc, #4]	; (8083504 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80834fe:	2201      	movs	r2, #1
 8083500:	701a      	strb	r2, [r3, #0]
 8083502:	4770      	bx	lr
 8083504:	20000320 	.word	0x20000320

08083508 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 8083508:	1d01      	adds	r1, r0, #4
 808350a:	6800      	ldr	r0, [r0, #0]
 808350c:	f000 bffa 	b.w	8084504 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

08083510 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 8083510:	b510      	push	{r4, lr}
 8083512:	4604      	mov	r4, r0
  m_csPin = csPin;
 8083514:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 8083516:	6800      	ldr	r0, [r0, #0]
 8083518:	f000 ffc8 	bl	80844ac <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 808351c:	7d20      	ldrb	r0, [r4, #20]
 808351e:	2101      	movs	r1, #1
 8083520:	f002 fc43 	bl	8085daa <pinMode>
  digitalWrite(m_csPin, HIGH);
 8083524:	7d20      	ldrb	r0, [r4, #20]
 8083526:	2101      	movs	r1, #1
}
 8083528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 808352c:	f002 bc4e 	b.w	8085dcc <digitalWrite>

08083530 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 8083530:	6800      	ldr	r0, [r0, #0]
 8083532:	f000 bfcb 	b.w	80844cc <_ZN8SPIClass14endTransactionEv>

08083536 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 8083536:	21ff      	movs	r1, #255	; 0xff
 8083538:	6800      	ldr	r0, [r0, #0]
 808353a:	f001 b852 	b.w	80845e2 <_ZN8SPIClass8transferEh>
	...

08083540 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 8083540:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8083542:	4b08      	ldr	r3, [pc, #32]	; (8083564 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083544:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8083546:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083548:	4c07      	ldr	r4, [pc, #28]	; (8083568 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808354a:	4613      	mov	r3, r2
 808354c:	6800      	ldr	r0, [r0, #0]
 808354e:	460a      	mov	r2, r1
 8083550:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083552:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8083554:	f001 f857 	bl	8084606 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8083558:	7823      	ldrb	r3, [r4, #0]
 808355a:	2b00      	cmp	r3, #0
 808355c:	d0fc      	beq.n	8083558 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 808355e:	2000      	movs	r0, #0
 8083560:	b003      	add	sp, #12
 8083562:	bd30      	pop	{r4, r5, pc}
 8083564:	080834fd 	.word	0x080834fd
 8083568:	20000320 	.word	0x20000320

0808356c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 808356c:	6800      	ldr	r0, [r0, #0]
 808356e:	f001 b838 	b.w	80845e2 <_ZN8SPIClass8transferEh>
	...

08083574 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 8083574:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8083576:	4b07      	ldr	r3, [pc, #28]	; (8083594 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083578:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808357a:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 808357c:	4c06      	ldr	r4, [pc, #24]	; (8083598 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808357e:	4613      	mov	r3, r2
 8083580:	6800      	ldr	r0, [r0, #0]
 8083582:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8083584:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8083586:	f001 f83e 	bl	8084606 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 808358a:	7823      	ldrb	r3, [r4, #0]
 808358c:	2b00      	cmp	r3, #0
 808358e:	d0fc      	beq.n	808358a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 8083590:	b003      	add	sp, #12
 8083592:	bd30      	pop	{r4, r5, pc}
 8083594:	080834fd 	.word	0x080834fd
 8083598:	20000320 	.word	0x20000320

0808359c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 808359c:	f000 bc8a 	b.w	8083eb4 <HAL_Pin_Map>

080835a0 <_ZN12CommandErrorC1EP9cmd_errorb>:

extern "C" {
  #include "c/cmd_error.h" // cmd_error_create, cmd_error_destroy
}

CommandError::CommandError(cmd_error* errorPointer, bool persistent) : errorPointer(errorPointer), persistent(persistent) {
 80835a0:	b510      	push	{r4, lr}
 80835a2:	4604      	mov	r4, r0
 80835a4:	6001      	str	r1, [r0, #0]
 80835a6:	7102      	strb	r2, [r0, #4]
    if (!persistent) this->errorPointer = cmd_error_copy(errorPointer);
 80835a8:	b91a      	cbnz	r2, 80835b2 <_ZN12CommandErrorC1EP9cmd_errorb+0x12>
 80835aa:	4608      	mov	r0, r1
 80835ac:	f7fc fdd1 	bl	8080152 <cmd_error_copy>
 80835b0:	6020      	str	r0, [r4, #0]
}
 80835b2:	4620      	mov	r0, r4
 80835b4:	bd10      	pop	{r4, pc}

080835b6 <_ZN12CommandErrorC1EOS_>:
    errorPointer = e.errorPointer;
    if (!persistent) errorPointer = cmd_error_copy(errorPointer);
}

CommandError::CommandError(CommandError&& e) {
    persistent     = e.persistent;
 80835b6:	790a      	ldrb	r2, [r1, #4]
    errorPointer   = e.errorPointer;
    e.errorPointer = NULL;
 80835b8:	2300      	movs	r3, #0
    errorPointer = e.errorPointer;
    if (!persistent) errorPointer = cmd_error_copy(errorPointer);
}

CommandError::CommandError(CommandError&& e) {
    persistent     = e.persistent;
 80835ba:	7102      	strb	r2, [r0, #4]
    errorPointer   = e.errorPointer;
 80835bc:	680a      	ldr	r2, [r1, #0]
 80835be:	6002      	str	r2, [r0, #0]
    e.errorPointer = NULL;
 80835c0:	600b      	str	r3, [r1, #0]
}
 80835c2:	4770      	bx	lr

080835c4 <_ZN12CommandErrorD1Ev>:

CommandError::~CommandError() {
 80835c4:	b510      	push	{r4, lr}
    if (!persistent) cmd_error_destroy(errorPointer);
 80835c6:	7903      	ldrb	r3, [r0, #4]
    persistent     = e.persistent;
    errorPointer   = e.errorPointer;
    e.errorPointer = NULL;
}

CommandError::~CommandError() {
 80835c8:	4604      	mov	r4, r0
    if (!persistent) cmd_error_destroy(errorPointer);
 80835ca:	b913      	cbnz	r3, 80835d2 <_ZN12CommandErrorD1Ev+0xe>
 80835cc:	6800      	ldr	r0, [r0, #0]
 80835ce:	f7fc fde0 	bl	8080192 <cmd_error_destroy>
}
 80835d2:	4620      	mov	r0, r4
 80835d4:	bd10      	pop	{r4, pc}

080835d6 <_ZNK12CommandError10hasCommandEv>:
CommandError::operator bool() const {
    return errorPointer && errorPointer->mode != CMD_PARSE_SUCCESS;
}

bool CommandError::hasCommand() const {
    return errorPointer && errorPointer->command;
 80835d6:	6800      	ldr	r0, [r0, #0]
 80835d8:	b118      	cbz	r0, 80835e2 <_ZNK12CommandError10hasCommandEv+0xc>
 80835da:	6840      	ldr	r0, [r0, #4]
 80835dc:	3000      	adds	r0, #0
 80835de:	bf18      	it	ne
 80835e0:	2001      	movne	r0, #1
}
 80835e2:	4770      	bx	lr

080835e4 <_ZNK12CommandError11hasArgumentEv>:

bool CommandError::hasArgument() const {
    return errorPointer && errorPointer->argument;
 80835e4:	6800      	ldr	r0, [r0, #0]
 80835e6:	b118      	cbz	r0, 80835f0 <_ZNK12CommandError11hasArgumentEv+0xc>
 80835e8:	6880      	ldr	r0, [r0, #8]
 80835ea:	3000      	adds	r0, #0
 80835ec:	bf18      	it	ne
 80835ee:	2001      	movne	r0, #1
}
 80835f0:	4770      	bx	lr

080835f2 <_ZNK12CommandError7hasDataEv>:

bool CommandError::hasData() const {
    return errorPointer && errorPointer->data;
 80835f2:	6800      	ldr	r0, [r0, #0]
 80835f4:	b118      	cbz	r0, 80835fe <_ZNK12CommandError7hasDataEv+0xc>
 80835f6:	68c0      	ldr	r0, [r0, #12]
 80835f8:	3000      	adds	r0, #0
 80835fa:	bf18      	it	ne
 80835fc:	2001      	movne	r0, #1
}
 80835fe:	4770      	bx	lr

08083600 <_ZNK12CommandError10getCommandEv>:

bool CommandError::hasArg() const {
    return hasArgument();
}

Command CommandError::getCommand() const {
 8083600:	b510      	push	{r4, lr}
    return Command(errorPointer ? errorPointer->command : NULL);
 8083602:	6809      	ldr	r1, [r1, #0]

bool CommandError::hasArg() const {
    return hasArgument();
}

Command CommandError::getCommand() const {
 8083604:	4604      	mov	r4, r0
    return Command(errorPointer ? errorPointer->command : NULL);
 8083606:	b101      	cbz	r1, 808360a <_ZNK12CommandError10getCommandEv+0xa>
 8083608:	6849      	ldr	r1, [r1, #4]
 808360a:	2201      	movs	r2, #1
 808360c:	4620      	mov	r0, r4
 808360e:	f000 faa5 	bl	8083b5c <_ZN7CommandC1EP3cmdb>
}
 8083612:	4620      	mov	r0, r4
 8083614:	bd10      	pop	{r4, pc}

08083616 <_ZNK12CommandError11getArgumentEv>:

Argument CommandError::getArgument() const {
 8083616:	b510      	push	{r4, lr}
    return Argument(errorPointer ? errorPointer->argument : NULL);
 8083618:	6809      	ldr	r1, [r1, #0]

Command CommandError::getCommand() const {
    return Command(errorPointer ? errorPointer->command : NULL);
}

Argument CommandError::getArgument() const {
 808361a:	4604      	mov	r4, r0
    return Argument(errorPointer ? errorPointer->argument : NULL);
 808361c:	b101      	cbz	r1, 8083620 <_ZNK12CommandError11getArgumentEv+0xa>
 808361e:	6889      	ldr	r1, [r1, #8]
 8083620:	2201      	movs	r2, #1
 8083622:	4620      	mov	r0, r4
 8083624:	f000 f904 	bl	8083830 <_ZN8ArgumentC1EP3argb>
}
 8083628:	4620      	mov	r0, r4
 808362a:	bd10      	pop	{r4, pc}

0808362c <_ZNK12CommandError7getDataEv>:

String CommandError::getData() const {
 808362c:	b510      	push	{r4, lr}
    if (!errorPointer || !errorPointer->data) return String();
 808362e:	680b      	ldr	r3, [r1, #0]

Argument CommandError::getArgument() const {
    return Argument(errorPointer ? errorPointer->argument : NULL);
}

String CommandError::getData() const {
 8083630:	4604      	mov	r4, r0
    if (!errorPointer || !errorPointer->data) return String();
 8083632:	b10b      	cbz	r3, 8083638 <_ZNK12CommandError7getDataEv+0xc>
 8083634:	68d9      	ldr	r1, [r3, #12]
 8083636:	b909      	cbnz	r1, 808363c <_ZNK12CommandError7getDataEv+0x10>
 8083638:	4620      	mov	r0, r4
 808363a:	4902      	ldr	r1, [pc, #8]	; (8083644 <_ZNK12CommandError7getDataEv+0x18>)
    return String(errorPointer->data);
 808363c:	f001 f8cf 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
}
 8083640:	4620      	mov	r0, r4
 8083642:	bd10      	pop	{r4, pc}
 8083644:	0808a71d 	.word	0x0808a71d

08083648 <_ZNK12CommandError10getMessageEv>:

String CommandError::getMessage() const {
 8083648:	b510      	push	{r4, lr}
    if (errorPointer) {
 808364a:	680b      	ldr	r3, [r1, #0]
String CommandError::getData() const {
    if (!errorPointer || !errorPointer->data) return String();
    return String(errorPointer->data);
}

String CommandError::getMessage() const {
 808364c:	4604      	mov	r4, r0
    if (errorPointer) {
 808364e:	b1cb      	cbz	r3, 8083684 <_ZNK12CommandError10getMessageEv+0x3c>
        switch (errorPointer->mode) {
 8083650:	681b      	ldr	r3, [r3, #0]
 8083652:	3302      	adds	r3, #2
 8083654:	2b07      	cmp	r3, #7
 8083656:	d815      	bhi.n	8083684 <_ZNK12CommandError10getMessageEv+0x3c>
 8083658:	e8df f003 	tbb	[pc, r3]
 808365c:	0a080604 	.word	0x0a080604
 8083660:	12100e0c 	.word	0x12100e0c
            case CMD_NULL_PTR: return String(F("NULL Pointer"));
 8083664:	490a      	ldr	r1, [pc, #40]	; (8083690 <_ZNK12CommandError10getMessageEv+0x48>)
 8083666:	e00e      	b.n	8083686 <_ZNK12CommandError10getMessageEv+0x3e>
            case CMD_EMPTY_LINE: return String(F("Empty input"));
 8083668:	490a      	ldr	r1, [pc, #40]	; (8083694 <_ZNK12CommandError10getMessageEv+0x4c>)
 808366a:	e00c      	b.n	8083686 <_ZNK12CommandError10getMessageEv+0x3e>
            case CMD_PARSE_SUCCESS: return String(F("No error"));
 808366c:	490a      	ldr	r1, [pc, #40]	; (8083698 <_ZNK12CommandError10getMessageEv+0x50>)
 808366e:	e00a      	b.n	8083686 <_ZNK12CommandError10getMessageEv+0x3e>
            case CMD_NOT_FOUND: return String(F("Command not found"));
 8083670:	490a      	ldr	r1, [pc, #40]	; (808369c <_ZNK12CommandError10getMessageEv+0x54>)
 8083672:	e008      	b.n	8083686 <_ZNK12CommandError10getMessageEv+0x3e>
            case CMD_UNKOWN_ARG: return String(F("Unknown argument"));
 8083674:	490a      	ldr	r1, [pc, #40]	; (80836a0 <_ZNK12CommandError10getMessageEv+0x58>)
 8083676:	e006      	b.n	8083686 <_ZNK12CommandError10getMessageEv+0x3e>
            case CMD_MISSING_ARG: return String(F("Missing argument"));
 8083678:	490a      	ldr	r1, [pc, #40]	; (80836a4 <_ZNK12CommandError10getMessageEv+0x5c>)
 808367a:	e004      	b.n	8083686 <_ZNK12CommandError10getMessageEv+0x3e>
            case CMD_MISSING_ARG_VALUE: return String(F("Missing argument value"));
 808367c:	490a      	ldr	r1, [pc, #40]	; (80836a8 <_ZNK12CommandError10getMessageEv+0x60>)
 808367e:	e002      	b.n	8083686 <_ZNK12CommandError10getMessageEv+0x3e>
            case CMD_UNCLOSED_QUOTE: return String(F("Unclosed quote"));
 8083680:	490a      	ldr	r1, [pc, #40]	; (80836ac <_ZNK12CommandError10getMessageEv+0x64>)
 8083682:	e000      	b.n	8083686 <_ZNK12CommandError10getMessageEv+0x3e>
        }
    }
    return String();
 8083684:	490a      	ldr	r1, [pc, #40]	; (80836b0 <_ZNK12CommandError10getMessageEv+0x68>)
 8083686:	4620      	mov	r0, r4
 8083688:	f001 f8a9 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
}
 808368c:	4620      	mov	r0, r4
 808368e:	bd10      	pop	{r4, pc}
 8083690:	0808a74a 	.word	0x0808a74a
 8083694:	0808a757 	.word	0x0808a757
 8083698:	0808a763 	.word	0x0808a763
 808369c:	0808a76c 	.word	0x0808a76c
 80836a0:	0808a77e 	.word	0x0808a77e
 80836a4:	0808a78f 	.word	0x0808a78f
 80836a8:	0808a7a0 	.word	0x0808a7a0
 80836ac:	0808a7b7 	.word	0x0808a7b7
 80836b0:	0808a71d 	.word	0x0808a71d

080836b4 <_ZNK12CommandError8toStringER6String>:

    toString(s);
    return s;
}

void CommandError::toString(String& s) const {
 80836b4:	b570      	push	{r4, r5, r6, lr}
 80836b6:	460d      	mov	r5, r1
 80836b8:	4604      	mov	r4, r0
 80836ba:	b092      	sub	sp, #72	; 0x48
    s += getMessage();
 80836bc:	4601      	mov	r1, r0
 80836be:	a80e      	add	r0, sp, #56	; 0x38
 80836c0:	f7ff ffc2 	bl	8083648 <_ZNK12CommandError10getMessageEv>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80836c4:	a90e      	add	r1, sp, #56	; 0x38
 80836c6:	4628      	mov	r0, r5
 80836c8:	f001 f8de 	bl	8084888 <_ZN6String6concatERKS_>
 80836cc:	a80e      	add	r0, sp, #56	; 0x38
 80836ce:	f001 f83f 	bl	8084750 <_ZN6StringD1Ev>
    if (hasCommand()) s += String(F(" at command '")) + getCommand().getName() + String(F("'"));
 80836d2:	4620      	mov	r0, r4
 80836d4:	f7ff ff7f 	bl	80835d6 <_ZNK12CommandError10hasCommandEv>
 80836d8:	b378      	cbz	r0, 808373a <_ZNK12CommandError8toStringER6String+0x86>
 80836da:	4949      	ldr	r1, [pc, #292]	; (8083800 <_ZNK12CommandError8toStringER6String+0x14c>)
 80836dc:	a802      	add	r0, sp, #8
 80836de:	f001 f87e 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80836e2:	a902      	add	r1, sp, #8
 80836e4:	a80a      	add	r0, sp, #40	; 0x28
 80836e6:	f001 f89c 	bl	8084822 <_ZN6StringC1ERKS_>
 80836ea:	4621      	mov	r1, r4
 80836ec:	4668      	mov	r0, sp
 80836ee:	f7ff ff87 	bl	8083600 <_ZNK12CommandError10getCommandEv>
 80836f2:	4669      	mov	r1, sp
 80836f4:	a806      	add	r0, sp, #24
 80836f6:	f000 fa75 	bl	8083be4 <_ZNK7Command7getNameEv>
 80836fa:	a906      	add	r1, sp, #24
 80836fc:	a80a      	add	r0, sp, #40	; 0x28
 80836fe:	f001 f8e3 	bl	80848c8 <_ZplRK15StringSumHelperRK6String>
 8083702:	4606      	mov	r6, r0
 8083704:	493f      	ldr	r1, [pc, #252]	; (8083804 <_ZNK12CommandError8toStringER6String+0x150>)
 8083706:	a80e      	add	r0, sp, #56	; 0x38
 8083708:	f001 f869 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
 808370c:	a90e      	add	r1, sp, #56	; 0x38
 808370e:	4630      	mov	r0, r6
 8083710:	f001 f8da 	bl	80848c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083714:	4601      	mov	r1, r0
 8083716:	4628      	mov	r0, r5
 8083718:	f001 f8b6 	bl	8084888 <_ZN6String6concatERKS_>
 808371c:	a80e      	add	r0, sp, #56	; 0x38
 808371e:	f001 f817 	bl	8084750 <_ZN6StringD1Ev>
 8083722:	a806      	add	r0, sp, #24
 8083724:	f001 f814 	bl	8084750 <_ZN6StringD1Ev>
 8083728:	4668      	mov	r0, sp
 808372a:	f000 fa22 	bl	8083b72 <_ZN7CommandD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808372e:	a80a      	add	r0, sp, #40	; 0x28
 8083730:	f001 f80e 	bl	8084750 <_ZN6StringD1Ev>
 8083734:	a802      	add	r0, sp, #8
 8083736:	f001 f80b 	bl	8084750 <_ZN6StringD1Ev>
    if (hasArgument()) s += String(F(" at argument '")) + getArgument().toString() + String(F("'"));
 808373a:	4620      	mov	r0, r4
 808373c:	f7ff ff52 	bl	80835e4 <_ZNK12CommandError11hasArgumentEv>
 8083740:	b378      	cbz	r0, 80837a2 <_ZNK12CommandError8toStringER6String+0xee>
 8083742:	4931      	ldr	r1, [pc, #196]	; (8083808 <_ZNK12CommandError8toStringER6String+0x154>)
 8083744:	a802      	add	r0, sp, #8
 8083746:	f001 f84a 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808374a:	a902      	add	r1, sp, #8
 808374c:	a80a      	add	r0, sp, #40	; 0x28
 808374e:	f001 f868 	bl	8084822 <_ZN6StringC1ERKS_>
 8083752:	4621      	mov	r1, r4
 8083754:	4668      	mov	r0, sp
 8083756:	f7ff ff5e 	bl	8083616 <_ZNK12CommandError11getArgumentEv>
 808375a:	4669      	mov	r1, sp
 808375c:	a806      	add	r0, sp, #24
 808375e:	f000 f913 	bl	8083988 <_ZNK8Argument8toStringEv>
 8083762:	a906      	add	r1, sp, #24
 8083764:	a80a      	add	r0, sp, #40	; 0x28
 8083766:	f001 f8af 	bl	80848c8 <_ZplRK15StringSumHelperRK6String>
 808376a:	4606      	mov	r6, r0
 808376c:	4925      	ldr	r1, [pc, #148]	; (8083804 <_ZNK12CommandError8toStringER6String+0x150>)
 808376e:	a80e      	add	r0, sp, #56	; 0x38
 8083770:	f001 f835 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
 8083774:	a90e      	add	r1, sp, #56	; 0x38
 8083776:	4630      	mov	r0, r6
 8083778:	f001 f8a6 	bl	80848c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808377c:	4601      	mov	r1, r0
 808377e:	4628      	mov	r0, r5
 8083780:	f001 f882 	bl	8084888 <_ZN6String6concatERKS_>
 8083784:	a80e      	add	r0, sp, #56	; 0x38
 8083786:	f000 ffe3 	bl	8084750 <_ZN6StringD1Ev>
 808378a:	a806      	add	r0, sp, #24
 808378c:	f000 ffe0 	bl	8084750 <_ZN6StringD1Ev>
 8083790:	4668      	mov	r0, sp
 8083792:	f000 f857 	bl	8083844 <_ZN8ArgumentD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8083796:	a80a      	add	r0, sp, #40	; 0x28
 8083798:	f000 ffda 	bl	8084750 <_ZN6StringD1Ev>
 808379c:	a802      	add	r0, sp, #8
 808379e:	f000 ffd7 	bl	8084750 <_ZN6StringD1Ev>
    if (hasData()) s += String(F(" at '")) + getData() + String(F("'"));
 80837a2:	4620      	mov	r0, r4
 80837a4:	f7ff ff25 	bl	80835f2 <_ZNK12CommandError7hasDataEv>
 80837a8:	b340      	cbz	r0, 80837fc <_ZNK12CommandError8toStringER6String+0x148>
 80837aa:	4918      	ldr	r1, [pc, #96]	; (808380c <_ZNK12CommandError8toStringER6String+0x158>)
 80837ac:	a802      	add	r0, sp, #8
 80837ae:	f001 f816 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80837b2:	a902      	add	r1, sp, #8
 80837b4:	a80a      	add	r0, sp, #40	; 0x28
 80837b6:	f001 f834 	bl	8084822 <_ZN6StringC1ERKS_>
 80837ba:	4621      	mov	r1, r4
 80837bc:	a806      	add	r0, sp, #24
 80837be:	f7ff ff35 	bl	808362c <_ZNK12CommandError7getDataEv>
 80837c2:	a906      	add	r1, sp, #24
 80837c4:	a80a      	add	r0, sp, #40	; 0x28
 80837c6:	f001 f87f 	bl	80848c8 <_ZplRK15StringSumHelperRK6String>
 80837ca:	4604      	mov	r4, r0
 80837cc:	490d      	ldr	r1, [pc, #52]	; (8083804 <_ZNK12CommandError8toStringER6String+0x150>)
 80837ce:	a80e      	add	r0, sp, #56	; 0x38
 80837d0:	f001 f805 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
 80837d4:	a90e      	add	r1, sp, #56	; 0x38
 80837d6:	4620      	mov	r0, r4
 80837d8:	f001 f876 	bl	80848c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80837dc:	4601      	mov	r1, r0
 80837de:	4628      	mov	r0, r5
 80837e0:	f001 f852 	bl	8084888 <_ZN6String6concatERKS_>
 80837e4:	a80e      	add	r0, sp, #56	; 0x38
 80837e6:	f000 ffb3 	bl	8084750 <_ZN6StringD1Ev>
 80837ea:	a806      	add	r0, sp, #24
 80837ec:	f000 ffb0 	bl	8084750 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80837f0:	a80a      	add	r0, sp, #40	; 0x28
 80837f2:	f000 ffad 	bl	8084750 <_ZN6StringD1Ev>
 80837f6:	a802      	add	r0, sp, #8
 80837f8:	f000 ffaa 	bl	8084750 <_ZN6StringD1Ev>
 80837fc:	b012      	add	sp, #72	; 0x48
 80837fe:	bd70      	pop	{r4, r5, r6, pc}
 8083800:	0808a7c6 	.word	0x0808a7c6
 8083804:	0808a7d2 	.word	0x0808a7d2
 8083808:	0808a7d4 	.word	0x0808a7d4
 808380c:	0808a7e3 	.word	0x0808a7e3

08083810 <_ZNK12CommandError8toStringEv>:

String CommandError::getMsg() const {
    return getMessage();
}

String CommandError::toString() const {
 8083810:	b538      	push	{r3, r4, r5, lr}
 8083812:	4604      	mov	r4, r0
 8083814:	460d      	mov	r5, r1
    String s;
 8083816:	4904      	ldr	r1, [pc, #16]	; (8083828 <_ZNK12CommandError8toStringEv+0x18>)
 8083818:	f000 ffe1 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>

    toString(s);
 808381c:	4628      	mov	r0, r5
 808381e:	4621      	mov	r1, r4
 8083820:	f7ff ff48 	bl	80836b4 <_ZNK12CommandError8toStringER6String>
    return s;
}
 8083824:	4620      	mov	r0, r4
 8083826:	bd38      	pop	{r3, r4, r5, pc}
 8083828:	0808a71d 	.word	0x0808a71d

0808382c <_GLOBAL__sub_I__ZN12CommandErrorC2EP9cmd_errorb>:
 808382c:	f000 bb42 	b.w	8083eb4 <HAL_Pin_Map>

08083830 <_ZN8ArgumentC1EP3argb>:

extern "C" {
#include "c/arg.h"
}

Argument::Argument(arg* argPointer, bool persistent) : argPointer(argPointer), persistent(persistent) {
 8083830:	b510      	push	{r4, lr}
 8083832:	4604      	mov	r4, r0
 8083834:	6001      	str	r1, [r0, #0]
 8083836:	7102      	strb	r2, [r0, #4]
    if (!persistent) argPointer = arg_copy(argPointer);
 8083838:	b912      	cbnz	r2, 8083840 <_ZN8ArgumentC1EP3argb+0x10>
 808383a:	4608      	mov	r0, r1
 808383c:	f7fd f802 	bl	8080844 <arg_copy>
}
 8083840:	4620      	mov	r0, r4
 8083842:	bd10      	pop	{r4, pc}

08083844 <_ZN8ArgumentD1Ev>:
    argPointer   = a.argPointer;
    persistent   = a.persistent;
    a.argPointer = NULL;
}

Argument::~Argument() {
 8083844:	b510      	push	{r4, lr}
    if (!persistent) arg_destroy(argPointer);
 8083846:	7903      	ldrb	r3, [r0, #4]
    argPointer   = a.argPointer;
    persistent   = a.persistent;
    a.argPointer = NULL;
}

Argument::~Argument() {
 8083848:	4604      	mov	r4, r0
    if (!persistent) arg_destroy(argPointer);
 808384a:	b913      	cbnz	r3, 8083852 <_ZN8ArgumentD1Ev+0xe>
 808384c:	6800      	ldr	r0, [r0, #0]
 808384e:	f7fd f87d 	bl	808094c <arg_destroy>
}
 8083852:	4620      	mov	r0, r4
 8083854:	bd10      	pop	{r4, pc}

08083856 <_ZNK8Argument10isRequiredEv>:
bool Argument::isSet() const {
    return argPointer && argPointer->set == ARG_SET;
}

bool Argument::isRequired() const {
    return argPointer && argPointer->req == ARG_REQ;
 8083856:	6800      	ldr	r0, [r0, #0]
 8083858:	b110      	cbz	r0, 8083860 <_ZNK8Argument10isRequiredEv+0xa>
 808385a:	7b00      	ldrb	r0, [r0, #12]
 808385c:	f3c0 0080 	ubfx	r0, r0, #2, #1
}
 8083860:	4770      	bx	lr

08083862 <_ZNK8Argument10isOptionalEv>:

bool Argument::isOptional() const {
 8083862:	b508      	push	{r3, lr}
    return !isRequired();
 8083864:	f7ff fff7 	bl	8083856 <_ZNK8Argument10isRequiredEv>
 8083868:	f080 0001 	eor.w	r0, r0, #1
}
 808386c:	b2c0      	uxtb	r0, r0
 808386e:	bd08      	pop	{r3, pc}

08083870 <_ZNK8Argument7getNameEv>:

bool Argument::isOpt() const {
    return isOptional();
}

String Argument::getName() const {
 8083870:	b510      	push	{r4, lr}
    if (argPointer) return String(argPointer->name);
 8083872:	680b      	ldr	r3, [r1, #0]

bool Argument::isOpt() const {
    return isOptional();
}

String Argument::getName() const {
 8083874:	4604      	mov	r4, r0
    if (argPointer) return String(argPointer->name);
 8083876:	b10b      	cbz	r3, 808387c <_ZNK8Argument7getNameEv+0xc>
 8083878:	6819      	ldr	r1, [r3, #0]
 808387a:	e000      	b.n	808387e <_ZNK8Argument7getNameEv+0xe>
    return String();
 808387c:	4902      	ldr	r1, [pc, #8]	; (8083888 <_ZNK8Argument7getNameEv+0x18>)
 808387e:	f000 ffae 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
}
 8083882:	4620      	mov	r0, r4
 8083884:	bd10      	pop	{r4, pc}
 8083886:	bf00      	nop
 8083888:	0808a71d 	.word	0x0808a71d

0808388c <_ZNK8Argument8getValueEv>:

String Argument::getValue() const {
 808388c:	b510      	push	{r4, lr}
    if (argPointer) return String(arg_get_value(argPointer));
 808388e:	680b      	ldr	r3, [r1, #0]
String Argument::getName() const {
    if (argPointer) return String(argPointer->name);
    return String();
}

String Argument::getValue() const {
 8083890:	4604      	mov	r4, r0
    if (argPointer) return String(arg_get_value(argPointer));
 8083892:	b12b      	cbz	r3, 80838a0 <_ZNK8Argument8getValueEv+0x14>
 8083894:	4618      	mov	r0, r3
 8083896:	f7fd f883 	bl	80809a0 <arg_get_value>
 808389a:	4601      	mov	r1, r0
 808389c:	4620      	mov	r0, r4
 808389e:	e000      	b.n	80838a2 <_ZNK8Argument8getValueEv+0x16>
    return String();
 80838a0:	4902      	ldr	r1, [pc, #8]	; (80838ac <_ZNK8Argument8getValueEv+0x20>)
 80838a2:	f000 ff9c 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
}
 80838a6:	4620      	mov	r0, r4
 80838a8:	bd10      	pop	{r4, pc}
 80838aa:	bf00      	nop
 80838ac:	0808a71d 	.word	0x0808a71d

080838b0 <_ZNK8Argument7getTypeEv>:

ArgumentType Argument::getType() const {
    if (argPointer) {
 80838b0:	6800      	ldr	r0, [r0, #0]
 80838b2:	b148      	cbz	r0, 80838c8 <_ZNK8Argument7getTypeEv+0x18>
        if (argPointer->mode == ARG_DEFAULT) return ArgumentType::NORMAL;
 80838b4:	7b00      	ldrb	r0, [r0, #12]
 80838b6:	f010 0003 	ands.w	r0, r0, #3
 80838ba:	d005      	beq.n	80838c8 <_ZNK8Argument7getTypeEv+0x18>
        if (argPointer->mode == ARG_POS) return ArgumentType::POSITIONAL;
 80838bc:	2801      	cmp	r0, #1
 80838be:	d003      	beq.n	80838c8 <_ZNK8Argument7getTypeEv+0x18>
        if (argPointer->mode == ARG_FLAG) return ArgumentType::FLAG;
 80838c0:	2802      	cmp	r0, #2
 80838c2:	bf14      	ite	ne
 80838c4:	2000      	movne	r0, #0
 80838c6:	2002      	moveq	r0, #2
    }
    return ArgumentType::NORMAL;
}
 80838c8:	4770      	bx	lr
	...

080838cc <_ZNK8Argument8toStringER6String>:

    toString(s);
    return s;
}

void Argument::toString(String& s) const {
 80838cc:	b530      	push	{r4, r5, lr}
 80838ce:	b08d      	sub	sp, #52	; 0x34
 80838d0:	4605      	mov	r5, r0
 80838d2:	460c      	mov	r4, r1
    if (isOptional()) s += '[';
 80838d4:	f7ff ffc5 	bl	8083862 <_ZNK8Argument10isOptionalEv>
 80838d8:	b118      	cbz	r0, 80838e2 <_ZNK8Argument8toStringER6String+0x16>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80838da:	215b      	movs	r1, #91	; 0x5b
 80838dc:	4620      	mov	r0, r4
 80838de:	f000 ffe6 	bl	80848ae <_ZN6String6concatEc>

    String n = getName();
 80838e2:	4629      	mov	r1, r5
 80838e4:	4668      	mov	r0, sp
 80838e6:	f7ff ffc3 	bl	8083870 <_ZNK8Argument7getNameEv>
    String v = getValue();
 80838ea:	4629      	mov	r1, r5
 80838ec:	a804      	add	r0, sp, #16
 80838ee:	f7ff ffcd 	bl	808388c <_ZNK8Argument8getValueEv>

    switch (getType()) {
 80838f2:	4628      	mov	r0, r5
 80838f4:	f7ff ffdc 	bl	80838b0 <_ZNK8Argument7getTypeEv>
 80838f8:	2800      	cmp	r0, #0
 80838fa:	db32      	blt.n	8083962 <_ZNK8Argument8toStringER6String+0x96>
 80838fc:	2801      	cmp	r0, #1
 80838fe:	dd0a      	ble.n	8083916 <_ZNK8Argument8toStringER6String+0x4a>
 8083900:	2802      	cmp	r0, #2
 8083902:	d12e      	bne.n	8083962 <_ZNK8Argument8toStringER6String+0x96>
 8083904:	212d      	movs	r1, #45	; 0x2d
 8083906:	4620      	mov	r0, r4
 8083908:	f000 ffd1 	bl	80848ae <_ZN6String6concatEc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808390c:	4669      	mov	r1, sp
 808390e:	4620      	mov	r0, r4
 8083910:	f000 ffba 	bl	8084888 <_ZN6String6concatERKS_>
 8083914:	e025      	b.n	8083962 <_ZNK8Argument8toStringER6String+0x96>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8083916:	212d      	movs	r1, #45	; 0x2d
 8083918:	4620      	mov	r0, r4
 808391a:	f000 ffc8 	bl	80848ae <_ZN6String6concatEc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808391e:	4669      	mov	r1, sp
 8083920:	4620      	mov	r0, r4
 8083922:	f000 ffb1 	bl	8084888 <_ZN6String6concatERKS_>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8083926:	2120      	movs	r1, #32
 8083928:	4620      	mov	r0, r4
 808392a:	f000 ffc0 	bl	80848ae <_ZN6String6concatEc>
 808392e:	213c      	movs	r1, #60	; 0x3c
 8083930:	4620      	mov	r0, r4
 8083932:	f000 ffbc 	bl	80848ae <_ZN6String6concatEc>
        case ArgumentType::POSITIONAL:
            s += '-';
            s += n;
            s += ' ';
            s += '<';
            s += v.length() > 0 ? v : "value";
 8083936:	9b06      	ldr	r3, [sp, #24]
 8083938:	b123      	cbz	r3, 8083944 <_ZNK8Argument8toStringER6String+0x78>
 808393a:	a904      	add	r1, sp, #16
 808393c:	a808      	add	r0, sp, #32
 808393e:	f000 ff70 	bl	8084822 <_ZN6StringC1ERKS_>
 8083942:	e003      	b.n	808394c <_ZNK8Argument8toStringER6String+0x80>
 8083944:	490f      	ldr	r1, [pc, #60]	; (8083984 <_ZNK8Argument8toStringER6String+0xb8>)
 8083946:	a808      	add	r0, sp, #32
 8083948:	f000 ff49 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808394c:	a908      	add	r1, sp, #32
 808394e:	4620      	mov	r0, r4
 8083950:	f000 ff9a 	bl	8084888 <_ZN6String6concatERKS_>
 8083954:	a808      	add	r0, sp, #32
 8083956:	f000 fefb 	bl	8084750 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808395a:	213e      	movs	r1, #62	; 0x3e
 808395c:	4620      	mov	r0, r4
 808395e:	f000 ffa6 	bl	80848ae <_ZN6String6concatEc>
            s += '-';
            s += n;
            break;
    }

    if (isOptional()) s += ']';
 8083962:	4628      	mov	r0, r5
 8083964:	f7ff ff7d 	bl	8083862 <_ZNK8Argument10isOptionalEv>
 8083968:	b118      	cbz	r0, 8083972 <_ZNK8Argument8toStringER6String+0xa6>
 808396a:	215d      	movs	r1, #93	; 0x5d
 808396c:	4620      	mov	r0, r4
 808396e:	f000 ff9e 	bl	80848ae <_ZN6String6concatEc>

void Argument::toString(String& s) const {
    if (isOptional()) s += '[';

    String n = getName();
    String v = getValue();
 8083972:	a804      	add	r0, sp, #16
 8083974:	f000 feec 	bl	8084750 <_ZN6StringD1Ev>
}

void Argument::toString(String& s) const {
    if (isOptional()) s += '[';

    String n = getName();
 8083978:	4668      	mov	r0, sp
 808397a:	f000 fee9 	bl	8084750 <_ZN6StringD1Ev>
            s += n;
            break;
    }

    if (isOptional()) s += ']';
}
 808397e:	b00d      	add	sp, #52	; 0x34
 8083980:	bd30      	pop	{r4, r5, pc}
 8083982:	bf00      	nop
 8083984:	0808a7b1 	.word	0x0808a7b1

08083988 <_ZNK8Argument8toStringEv>:
        if (argPointer->mode == ARG_FLAG) return ArgumentType::FLAG;
    }
    return ArgumentType::NORMAL;
}

String Argument::toString() const {
 8083988:	b538      	push	{r3, r4, r5, lr}
 808398a:	4604      	mov	r4, r0
 808398c:	460d      	mov	r5, r1
    String s;
 808398e:	4904      	ldr	r1, [pc, #16]	; (80839a0 <_ZNK8Argument8toStringEv+0x18>)
 8083990:	f000 ff25 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>

    toString(s);
 8083994:	4628      	mov	r0, r5
 8083996:	4621      	mov	r1, r4
 8083998:	f7ff ff98 	bl	80838cc <_ZNK8Argument8toStringER6String>
    return s;
}
 808399c:	4620      	mov	r0, r4
 808399e:	bd38      	pop	{r3, r4, r5, pc}
 80839a0:	0808a71d 	.word	0x0808a71d

080839a4 <_GLOBAL__sub_I__ZN8ArgumentC2EP3argb>:
 80839a4:	f000 ba86 	b.w	8083eb4 <HAL_Pin_Map>

080839a8 <_ZN9SimpleCLIC1Eii>:
#include "c/cmd.h"       // cmd
#include "c/parser.h"    // parse_lines
#include "c/cmd_error.h" // cmd_error_destroy
}

SimpleCLI::SimpleCLI(int commandQueueSize, int errorQueueSize) : commandQueueSize(commandQueueSize), errorQueueSize(errorQueueSize) {}
 80839a8:	b510      	push	{r4, lr}
 80839aa:	2400      	movs	r4, #0
 80839ac:	7004      	strb	r4, [r0, #0]
 80839ae:	6044      	str	r4, [r0, #4]
 80839b0:	6084      	str	r4, [r0, #8]
 80839b2:	60c4      	str	r4, [r0, #12]
 80839b4:	6101      	str	r1, [r0, #16]
 80839b6:	6142      	str	r2, [r0, #20]
 80839b8:	6184      	str	r4, [r0, #24]
 80839ba:	bd10      	pop	{r4, pc}

080839bc <_ZN9SimpleCLID1Ev>:

SimpleCLI::~SimpleCLI() {
 80839bc:	b510      	push	{r4, lr}
 80839be:	4604      	mov	r4, r0
    cmd_destroy_rec(cmdList);
 80839c0:	6840      	ldr	r0, [r0, #4]
 80839c2:	f7fc fc86 	bl	80802d2 <cmd_destroy_rec>
    cmd_destroy_rec(cmdQueue);
 80839c6:	68a0      	ldr	r0, [r4, #8]
 80839c8:	f7fc fc83 	bl	80802d2 <cmd_destroy_rec>
    cmd_error_destroy_rec(errorQueue);
 80839cc:	68e0      	ldr	r0, [r4, #12]
 80839ce:	f7fc fbec 	bl	80801aa <cmd_error_destroy_rec>
}
 80839d2:	4620      	mov	r0, r4
 80839d4:	bd10      	pop	{r4, pc}

080839d6 <_ZN9SimpleCLI5parseEPKcj>:

void SimpleCLI::parse(const char* input) {
    if (input) parse(input, strlen(input));
}

void SimpleCLI::parse(const char* str, size_t len) {
 80839d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80839da:	4604      	mov	r4, r0
 80839dc:	4608      	mov	r0, r1
    // Split str into a list of lines
    line_list* l = parse_lines(str, len);
 80839de:	4611      	mov	r1, r2
 80839e0:	f7fc fe33 	bl	808064a <parse_lines>
 80839e4:	4681      	mov	r9, r0

    // Go through all lines and try to find a matching command
    line_node* n = l->first;
 80839e6:	6806      	ldr	r6, [r0, #0]

    while (n) {
 80839e8:	2e00      	cmp	r6, #0
 80839ea:	d058      	beq.n	8083a9e <_ZN9SimpleCLI5parseEPKcj+0xc8>
        cmd* h       = cmdList;
        bool success = false;
        bool errored = false;
 80839ec:	f04f 0800 	mov.w	r8, #0
    // Go through all lines and try to find a matching command
    line_node* n = l->first;

    while (n) {
        cmd* h       = cmdList;
        bool success = false;
 80839f0:	4647      	mov	r7, r8

    // Go through all lines and try to find a matching command
    line_node* n = l->first;

    while (n) {
        cmd* h       = cmdList;
 80839f2:	6865      	ldr	r5, [r4, #4]
        bool success = false;
        bool errored = false;

        while (h && !success && !errored) {
 80839f4:	2d00      	cmp	r5, #0
 80839f6:	d036      	beq.n	8083a66 <_ZN9SimpleCLI5parseEPKcj+0x90>
 80839f8:	2f00      	cmp	r7, #0
 80839fa:	d14e      	bne.n	8083a9a <_ZN9SimpleCLI5parseEPKcj+0xc4>
 80839fc:	f1b8 0f00 	cmp.w	r8, #0
 8083a00:	d14b      	bne.n	8083a9a <_ZN9SimpleCLI5parseEPKcj+0xc4>
            cmd_error* e = cmd_parse(h, n);
 8083a02:	4631      	mov	r1, r6
 8083a04:	4628      	mov	r0, r5
 8083a06:	f7fc fcae 	bl	8080366 <cmd_parse>

            // When parsing was successful
            if (e->mode == CMD_PARSE_SUCCESS) {
 8083a0a:	6803      	ldr	r3, [r0, #0]
        cmd* h       = cmdList;
        bool success = false;
        bool errored = false;

        while (h && !success && !errored) {
            cmd_error* e = cmd_parse(h, n);
 8083a0c:	4682      	mov	sl, r0

            // When parsing was successful
            if (e->mode == CMD_PARSE_SUCCESS) {
 8083a0e:	b983      	cbnz	r3, 8083a32 <_ZN9SimpleCLI5parseEPKcj+0x5c>
                if (h->callback) h->callback(h);
 8083a10:	692b      	ldr	r3, [r5, #16]
 8083a12:	b113      	cbz	r3, 8083a1a <_ZN9SimpleCLI5parseEPKcj+0x44>
 8083a14:	4628      	mov	r0, r5
 8083a16:	4798      	blx	r3
 8083a18:	e009      	b.n	8083a2e <_ZN9SimpleCLI5parseEPKcj+0x58>
                else cmdQueue = cmd_push(cmdQueue, cmd_move(h), commandQueueSize);
 8083a1a:	4628      	mov	r0, r5
 8083a1c:	68a7      	ldr	r7, [r4, #8]
 8083a1e:	f7fc fc2d 	bl	808027c <cmd_move>
 8083a22:	6922      	ldr	r2, [r4, #16]
 8083a24:	4601      	mov	r1, r0
 8083a26:	4638      	mov	r0, r7
 8083a28:	f7fc fc5e 	bl	80802e8 <cmd_push>
 8083a2c:	60a0      	str	r0, [r4, #8]

                success = true;
 8083a2e:	2701      	movs	r7, #1
 8083a30:	e011      	b.n	8083a56 <_ZN9SimpleCLI5parseEPKcj+0x80>
            }

            // When command name matches but something else went wrong, exit with error
            else if (e->mode > CMD_NOT_FOUND) {
 8083a32:	2b01      	cmp	r3, #1
 8083a34:	dd0f      	ble.n	8083a56 <_ZN9SimpleCLI5parseEPKcj+0x80>
                if (onError) {
 8083a36:	69a3      	ldr	r3, [r4, #24]
 8083a38:	b10b      	cbz	r3, 8083a3e <_ZN9SimpleCLI5parseEPKcj+0x68>
                    onError(e);
 8083a3a:	4798      	blx	r3
 8083a3c:	e009      	b.n	8083a52 <_ZN9SimpleCLI5parseEPKcj+0x7c>
                } else {
                    errorQueue = cmd_error_push(errorQueue, cmd_error_copy(e), errorQueueSize);
 8083a3e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8083a42:	f7fc fb86 	bl	8080152 <cmd_error_copy>
 8083a46:	6962      	ldr	r2, [r4, #20]
 8083a48:	4601      	mov	r1, r0
 8083a4a:	4640      	mov	r0, r8
 8083a4c:	f7fc fbb8 	bl	80801c0 <cmd_error_push>
 8083a50:	60e0      	str	r0, [r4, #12]
                }

                errored = true;
 8083a52:	f04f 0801 	mov.w	r8, #1

            /*else (e->mode <= CMD_NOT_FOUND) {

               }*/

            cmd_error_destroy(e);
 8083a56:	4650      	mov	r0, sl
 8083a58:	f7fc fb9b 	bl	8080192 <cmd_error_destroy>

            cmd_reset(h);
 8083a5c:	4628      	mov	r0, r5
 8083a5e:	f7fc fc6f 	bl	8080340 <cmd_reset>

            h = h->next;
 8083a62:	69ad      	ldr	r5, [r5, #24]
    while (n) {
        cmd* h       = cmdList;
        bool success = false;
        bool errored = false;

        while (h && !success && !errored) {
 8083a64:	e7c6      	b.n	80839f4 <_ZN9SimpleCLI5parseEPKcj+0x1e>

            h = h->next;
        }

        // No error but no success either => Command could not be found
        if (!errored && !success) {
 8083a66:	f1b8 0f00 	cmp.w	r8, #0
 8083a6a:	d116      	bne.n	8083a9a <_ZN9SimpleCLI5parseEPKcj+0xc4>
 8083a6c:	b9af      	cbnz	r7, 8083a9a <_ZN9SimpleCLI5parseEPKcj+0xc4>
            cmd_error* e = cmd_error_create_not_found(NULL, n->words->first);
 8083a6e:	68b3      	ldr	r3, [r6, #8]
 8083a70:	4638      	mov	r0, r7
 8083a72:	6819      	ldr	r1, [r3, #0]
 8083a74:	f7fc fb55 	bl	8080122 <cmd_error_create_not_found>

            if (onError) {
 8083a78:	69a3      	ldr	r3, [r4, #24]
            h = h->next;
        }

        // No error but no success either => Command could not be found
        if (!errored && !success) {
            cmd_error* e = cmd_error_create_not_found(NULL, n->words->first);
 8083a7a:	4605      	mov	r5, r0

            if (onError) {
 8083a7c:	b10b      	cbz	r3, 8083a82 <_ZN9SimpleCLI5parseEPKcj+0xac>
                onError(e);
 8083a7e:	4798      	blx	r3
 8083a80:	e008      	b.n	8083a94 <_ZN9SimpleCLI5parseEPKcj+0xbe>
            } else {
                errorQueue = cmd_error_push(errorQueue, cmd_error_copy(e), errorQueueSize);
 8083a82:	68e7      	ldr	r7, [r4, #12]
 8083a84:	f7fc fb65 	bl	8080152 <cmd_error_copy>
 8083a88:	6962      	ldr	r2, [r4, #20]
 8083a8a:	4601      	mov	r1, r0
 8083a8c:	4638      	mov	r0, r7
 8083a8e:	f7fc fb97 	bl	80801c0 <cmd_error_push>
 8083a92:	60e0      	str	r0, [r4, #12]
            }

            cmd_error_destroy(e);
 8083a94:	4628      	mov	r0, r5
 8083a96:	f7fc fb7c 	bl	8080192 <cmd_error_destroy>

            errored = true;
        }

        n = n->next;
 8083a9a:	68f6      	ldr	r6, [r6, #12]
    line_list* l = parse_lines(str, len);

    // Go through all lines and try to find a matching command
    line_node* n = l->first;

    while (n) {
 8083a9c:	e7a4      	b.n	80839e8 <_ZN9SimpleCLI5parseEPKcj+0x12>
        }

        n = n->next;
    }

    line_list_destroy(l);
 8083a9e:	4648      	mov	r0, r9
}
 8083aa0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        }

        n = n->next;
    }

    line_list_destroy(l);
 8083aa4:	f7fc bd80 	b.w	80805a8 <line_list_destroy>

08083aa8 <_ZN9SimpleCLI5parseERK6String>:
    cmd_destroy_rec(cmdQueue);
    cmd_error_destroy_rec(errorQueue);
}

void SimpleCLI::parse(const String& input) {
    parse(input.c_str(), input.length());
 8083aa8:	688a      	ldr	r2, [r1, #8]
 8083aaa:	6809      	ldr	r1, [r1, #0]
 8083aac:	f7ff bf93 	b.w	80839d6 <_ZN9SimpleCLI5parseEPKcj>

08083ab0 <_ZNK9SimpleCLI7erroredEv>:
bool SimpleCLI::available() const {
    return cmdQueue;
}

bool SimpleCLI::errored() const {
    return errorQueue;
 8083ab0:	68c0      	ldr	r0, [r0, #12]
}
 8083ab2:	3000      	adds	r0, #0
 8083ab4:	bf18      	it	ne
 8083ab6:	2001      	movne	r0, #1
 8083ab8:	4770      	bx	lr

08083aba <_ZN9SimpleCLI8getErrorEv>:

Command SimpleCLI::getCommand(const char* name) {
    return getCmd(name);
}

CommandError SimpleCLI::getError() {
 8083aba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!errorQueue) return CommandError();
 8083abc:	68cc      	ldr	r4, [r1, #12]

Command SimpleCLI::getCommand(const char* name) {
    return getCmd(name);
}

CommandError SimpleCLI::getError() {
 8083abe:	4605      	mov	r5, r0
    if (!errorQueue) return CommandError();
 8083ac0:	b924      	cbnz	r4, 8083acc <_ZN9SimpleCLI8getErrorEv+0x12>
 8083ac2:	2201      	movs	r2, #1
 8083ac4:	4621      	mov	r1, r4
 8083ac6:	f7ff fd6b 	bl	80835a0 <_ZN12CommandErrorC1EP9cmd_errorb>
 8083aca:	e010      	b.n	8083aee <_ZN9SimpleCLI8getErrorEv+0x34>

    // "Pop" cmd_error pointer from queue
    cmd_error* ptr = errorQueue;
    errorQueue = errorQueue->next;
 8083acc:	6923      	ldr	r3, [r4, #16]

    // Create wrapper class and copy cmd_error
    CommandError e(ptr, COMMAND_ERROR_TEMPORARY);
 8083ace:	2200      	movs	r2, #0
CommandError SimpleCLI::getError() {
    if (!errorQueue) return CommandError();

    // "Pop" cmd_error pointer from queue
    cmd_error* ptr = errorQueue;
    errorQueue = errorQueue->next;
 8083ad0:	60cb      	str	r3, [r1, #12]

    // Create wrapper class and copy cmd_error
    CommandError e(ptr, COMMAND_ERROR_TEMPORARY);
 8083ad2:	4668      	mov	r0, sp
 8083ad4:	4621      	mov	r1, r4
 8083ad6:	f7ff fd63 	bl	80835a0 <_ZN12CommandErrorC1EP9cmd_errorb>

    // Destroy old cmd_error from queue
    cmd_error_destroy(ptr);
 8083ada:	4620      	mov	r0, r4
 8083adc:	f7fc fb59 	bl	8080192 <cmd_error_destroy>

    return e;
 8083ae0:	4669      	mov	r1, sp
 8083ae2:	4628      	mov	r0, r5
 8083ae4:	f7ff fd67 	bl	80835b6 <_ZN12CommandErrorC1EOS_>
    // "Pop" cmd_error pointer from queue
    cmd_error* ptr = errorQueue;
    errorQueue = errorQueue->next;

    // Create wrapper class and copy cmd_error
    CommandError e(ptr, COMMAND_ERROR_TEMPORARY);
 8083ae8:	4668      	mov	r0, sp
 8083aea:	f7ff fd6b 	bl	80835c4 <_ZN12CommandErrorD1Ev>

    // Destroy old cmd_error from queue
    cmd_error_destroy(ptr);

    return e;
}
 8083aee:	4628      	mov	r0, r5
 8083af0:	b003      	add	sp, #12
 8083af2:	bd30      	pop	{r4, r5, pc}

08083af4 <_ZN9SimpleCLI6addCmdER7Command>:

void SimpleCLI::addCmd(Command& c) {
 8083af4:	b510      	push	{r4, lr}
    if (!cmdList) {
 8083af6:	6843      	ldr	r3, [r0, #4]
    cmd_error_destroy(ptr);

    return e;
}

void SimpleCLI::addCmd(Command& c) {
 8083af8:	460c      	mov	r4, r1
    if (!cmdList) {
 8083afa:	b913      	cbnz	r3, 8083b02 <_ZN9SimpleCLI6addCmdER7Command+0xe>
        cmdList = c.cmdPointer;
 8083afc:	680b      	ldr	r3, [r1, #0]
 8083afe:	6043      	str	r3, [r0, #4]
 8083b00:	e005      	b.n	8083b0e <_ZN9SimpleCLI6addCmdER7Command+0x1a>
    } else {
        cmd* h = cmdList;

        while (h->next) h = h->next;
 8083b02:	699a      	ldr	r2, [r3, #24]
 8083b04:	b10a      	cbz	r2, 8083b0a <_ZN9SimpleCLI6addCmdER7Command+0x16>
 8083b06:	4613      	mov	r3, r2
 8083b08:	e7fb      	b.n	8083b02 <_ZN9SimpleCLI6addCmdER7Command+0xe>
        h->next = c.cmdPointer;
 8083b0a:	6822      	ldr	r2, [r4, #0]
 8083b0c:	619a      	str	r2, [r3, #24]
    }

    c.setCaseSensetive(caseSensetive);
 8083b0e:	7801      	ldrb	r1, [r0, #0]
 8083b10:	4620      	mov	r0, r4
 8083b12:	f000 f837 	bl	8083b84 <_ZN7Command16setCaseSensetiveEb>
    c.persistent = true;
 8083b16:	2301      	movs	r3, #1
 8083b18:	7123      	strb	r3, [r4, #4]
 8083b1a:	bd10      	pop	{r4, pc}

08083b1c <_ZN9SimpleCLI6addCmdEPKcPFvP3cmdE>:
}

Command SimpleCLI::addCmd(const char* name, void (* callback)(cmd* c)) {
 8083b1c:	b570      	push	{r4, r5, r6, lr}
 8083b1e:	4604      	mov	r4, r0
    Command c(cmd_create_default(name));
 8083b20:	4610      	mov	r0, r2

    c.setCaseSensetive(caseSensetive);
    c.persistent = true;
}

Command SimpleCLI::addCmd(const char* name, void (* callback)(cmd* c)) {
 8083b22:	461e      	mov	r6, r3
 8083b24:	460d      	mov	r5, r1
    Command c(cmd_create_default(name));
 8083b26:	f7fc fb86 	bl	8080236 <cmd_create_default>
 8083b2a:	2201      	movs	r2, #1
 8083b2c:	4601      	mov	r1, r0
 8083b2e:	4620      	mov	r0, r4
 8083b30:	f000 f814 	bl	8083b5c <_ZN7CommandC1EP3cmdb>

    c.setCallback(callback);
 8083b34:	4631      	mov	r1, r6
 8083b36:	4620      	mov	r0, r4
 8083b38:	f000 f82c 	bl	8083b94 <_ZN7Command11setCallbackEPFvP3cmdE>
    addCmd(c);
 8083b3c:	4628      	mov	r0, r5
 8083b3e:	4621      	mov	r1, r4
 8083b40:	f7ff ffd8 	bl	8083af4 <_ZN9SimpleCLI6addCmdER7Command>

    return c;
}
 8083b44:	4620      	mov	r0, r4
 8083b46:	bd70      	pop	{r4, r5, r6, pc}

08083b48 <_ZN9SimpleCLI10addCommandEPKcPFvP3cmdE>:
    addCmd(c);

    return c;
}

Command SimpleCLI::addCommand(const char* name, void (* callback)(cmd* c)) {
 8083b48:	b510      	push	{r4, lr}
 8083b4a:	4604      	mov	r4, r0
    return addCmd(name, callback);
 8083b4c:	f7ff ffe6 	bl	8083b1c <_ZN9SimpleCLI6addCmdEPKcPFvP3cmdE>
}
 8083b50:	4620      	mov	r0, r4
 8083b52:	bd10      	pop	{r4, pc}

08083b54 <_ZN9SimpleCLI10setOnErrorEPFvP9cmd_errorE>:
 8083b54:	6181      	str	r1, [r0, #24]
 8083b56:	4770      	bx	lr

08083b58 <_GLOBAL__sub_I__ZN9SimpleCLIC2Eii>:
 8083b58:	f000 b9ac 	b.w	8083eb4 <HAL_Pin_Map>

08083b5c <_ZN7CommandC1EP3cmdb>:
extern "C" {
#include "c/cmd.h"
#include "c/arg.h"
}

Command::Command(cmd* cmdPointer, bool persistent) : cmdPointer(cmdPointer), persistent(persistent) {
 8083b5c:	b510      	push	{r4, lr}
 8083b5e:	4604      	mov	r4, r0
 8083b60:	6001      	str	r1, [r0, #0]
 8083b62:	7102      	strb	r2, [r0, #4]
    if (!persistent) this->cmdPointer = cmd_copy(cmdPointer);
 8083b64:	b91a      	cbnz	r2, 8083b6e <_ZN7CommandC1EP3cmdb+0x12>
 8083b66:	4608      	mov	r0, r1
 8083b68:	f7fc fb68 	bl	808023c <cmd_copy>
 8083b6c:	6020      	str	r0, [r4, #0]
}
 8083b6e:	4620      	mov	r0, r4
 8083b70:	bd10      	pop	{r4, pc}

08083b72 <_ZN7CommandD1Ev>:
    persistent   = c.persistent;
    cmdPointer   = c.cmdPointer;
    c.cmdPointer = NULL;
}

Command::~Command() {
 8083b72:	b510      	push	{r4, lr}
    if (!persistent) cmd_destroy(cmdPointer);
 8083b74:	7903      	ldrb	r3, [r0, #4]
    persistent   = c.persistent;
    cmdPointer   = c.cmdPointer;
    c.cmdPointer = NULL;
}

Command::~Command() {
 8083b76:	4604      	mov	r4, r0
    if (!persistent) cmd_destroy(cmdPointer);
 8083b78:	b913      	cbnz	r3, 8083b80 <_ZN7CommandD1Ev+0xe>
 8083b7a:	6800      	ldr	r0, [r0, #0]
 8083b7c:	f7fc fb9e 	bl	80802bc <cmd_destroy>
}
 8083b80:	4620      	mov	r0, r4
 8083b82:	bd10      	pop	{r4, pc}

08083b84 <_ZN7Command16setCaseSensetiveEb>:
Command::operator bool() const {
    return cmdPointer;
}

bool Command::setCaseSensetive(bool caseSensetive) {
    if (cmdPointer) {
 8083b84:	6800      	ldr	r0, [r0, #0]
 8083b86:	b120      	cbz	r0, 8083b92 <_ZN7Command16setCaseSensetiveEb+0xe>
        cmdPointer->case_sensetive = caseSensetive;
 8083b88:	7b03      	ldrb	r3, [r0, #12]
 8083b8a:	f361 0300 	bfi	r3, r1, #0, #1
 8083b8e:	7303      	strb	r3, [r0, #12]
        return true;
 8083b90:	2001      	movs	r0, #1
    }
    return false;
}
 8083b92:	4770      	bx	lr

08083b94 <_ZN7Command11setCallbackEPFvP3cmdE>:

bool Command::setCallback(void (* callback)(cmd* c)) {
    if (cmdPointer && callback) {
 8083b94:	6800      	ldr	r0, [r0, #0]
 8083b96:	b120      	cbz	r0, 8083ba2 <_ZN7Command11setCallbackEPFvP3cmdE+0xe>
 8083b98:	b111      	cbz	r1, 8083ba0 <_ZN7Command11setCallbackEPFvP3cmdE+0xc>
        cmdPointer->callback = callback;
 8083b9a:	6101      	str	r1, [r0, #16]
        return true;
 8083b9c:	2001      	movs	r0, #1
 8083b9e:	4770      	bx	lr
    }
    return false;
 8083ba0:	4608      	mov	r0, r1
}
 8083ba2:	4770      	bx	lr

08083ba4 <_ZN7Command6addArgEPKc>:
        return Argument(a);
    }
    return Argument();
}

Argument Command::addArg(const char* name) {
 8083ba4:	b570      	push	{r4, r5, r6, lr}
    if (cmdPointer && (cmdPointer->mode == CMD_DEFAULT)) {
 8083ba6:	680b      	ldr	r3, [r1, #0]
        return Argument(a);
    }
    return Argument();
}

Argument Command::addArg(const char* name) {
 8083ba8:	4604      	mov	r4, r0
 8083baa:	460e      	mov	r6, r1
    if (cmdPointer && (cmdPointer->mode == CMD_DEFAULT)) {
 8083bac:	b16b      	cbz	r3, 8083bca <_ZN7Command6addArgEPKc+0x26>
 8083bae:	791b      	ldrb	r3, [r3, #4]
 8083bb0:	079b      	lsls	r3, r3, #30
 8083bb2:	d10a      	bne.n	8083bca <_ZN7Command6addArgEPKc+0x26>
        arg* a = arg_create_req(name);
 8083bb4:	4610      	mov	r0, r2
 8083bb6:	f7fc fe37 	bl	8080828 <arg_create_req>
 8083bba:	4605      	mov	r5, r0

        cmd_add_arg(cmdPointer, a);
 8083bbc:	4601      	mov	r1, r0
 8083bbe:	6830      	ldr	r0, [r6, #0]
 8083bc0:	f7fc fbb0 	bl	8080324 <cmd_add_arg>
        return Argument(a);
 8083bc4:	2201      	movs	r2, #1
 8083bc6:	4629      	mov	r1, r5
 8083bc8:	e001      	b.n	8083bce <_ZN7Command6addArgEPKc+0x2a>
    }
    return Argument();
 8083bca:	2201      	movs	r2, #1
 8083bcc:	2100      	movs	r1, #0
 8083bce:	4620      	mov	r0, r4
 8083bd0:	f7ff fe2e 	bl	8083830 <_ZN8ArgumentC1EP3argb>
}
 8083bd4:	4620      	mov	r0, r4
 8083bd6:	bd70      	pop	{r4, r5, r6, pc}

08083bd8 <_ZN7Command11addArgumentEPKc>:

Argument Command::addArgument(const char* name, const char* defaultValue) {
    return addArg(name, defaultValue);
}

Argument Command::addArgument(const char* name) {
 8083bd8:	b510      	push	{r4, lr}
 8083bda:	4604      	mov	r4, r0
    return addArg(name);
 8083bdc:	f7ff ffe2 	bl	8083ba4 <_ZN7Command6addArgEPKc>
}
 8083be0:	4620      	mov	r0, r4
 8083be2:	bd10      	pop	{r4, pc}

08083be4 <_ZNK7Command7getNameEv>:
bool Command::equals(const Command& c) const {
    if (cmdPointer && c.cmdPointer) return cmd_equals(cmdPointer, c.cmdPointer, cmdPointer->case_sensetive) == CMD_NAME_EQUALS;
    return false;
}

String Command::getName() const {
 8083be4:	b510      	push	{r4, lr}
    if (cmdPointer) {
 8083be6:	680b      	ldr	r3, [r1, #0]
bool Command::equals(const Command& c) const {
    if (cmdPointer && c.cmdPointer) return cmd_equals(cmdPointer, c.cmdPointer, cmdPointer->case_sensetive) == CMD_NAME_EQUALS;
    return false;
}

String Command::getName() const {
 8083be8:	4604      	mov	r4, r0
    if (cmdPointer) {
 8083bea:	b10b      	cbz	r3, 8083bf0 <_ZNK7Command7getNameEv+0xc>
        return String(cmdPointer->name);
 8083bec:	6819      	ldr	r1, [r3, #0]
 8083bee:	e000      	b.n	8083bf2 <_ZNK7Command7getNameEv+0xe>
    }
    return String();
 8083bf0:	4902      	ldr	r1, [pc, #8]	; (8083bfc <_ZNK7Command7getNameEv+0x18>)
 8083bf2:	f000 fdf4 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
}
 8083bf6:	4620      	mov	r0, r4
 8083bf8:	bd10      	pop	{r4, pc}
 8083bfa:	bf00      	nop
 8083bfc:	0808a71d 	.word	0x0808a71d

08083c00 <_ZNK7Command11getArgumentEPKc>:
    }

    return Argument(j == i ? h : NULL);
}

Argument Command::getArgument(const char* name) const {
 8083c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!cmdPointer || !name) return Argument();
 8083c02:	680b      	ldr	r3, [r1, #0]
    }

    return Argument(j == i ? h : NULL);
}

Argument Command::getArgument(const char* name) const {
 8083c04:	4605      	mov	r5, r0
 8083c06:	460f      	mov	r7, r1
 8083c08:	4616      	mov	r6, r2
    if (!cmdPointer || !name) return Argument();
 8083c0a:	b103      	cbz	r3, 8083c0e <_ZNK7Command11getArgumentEPKc+0xe>
 8083c0c:	b912      	cbnz	r2, 8083c14 <_ZNK7Command11getArgumentEPKc+0x14>
 8083c0e:	2201      	movs	r2, #1
 8083c10:	2100      	movs	r1, #0
 8083c12:	e012      	b.n	8083c3a <_ZNK7Command11getArgumentEPKc+0x3a>

    arg* h = cmdPointer->arg_list;
 8083c14:	689c      	ldr	r4, [r3, #8]
    int  j = 0;

    while (h) {
 8083c16:	2c00      	cmp	r4, #0
 8083c18:	d0f9      	beq.n	8083c0e <_ZNK7Command11getArgumentEPKc+0xe>
        if (arg_name_equals(h, name, strlen(name), cmdPointer->case_sensetive) == ARG_NAME_EQUALS) return h;
 8083c1a:	4630      	mov	r0, r6
 8083c1c:	f004 f9fa 	bl	8088014 <strlen>
 8083c20:	683b      	ldr	r3, [r7, #0]
 8083c22:	4602      	mov	r2, r0
 8083c24:	7b1b      	ldrb	r3, [r3, #12]
 8083c26:	4631      	mov	r1, r6
 8083c28:	f003 0301 	and.w	r3, r3, #1
 8083c2c:	4620      	mov	r0, r4
 8083c2e:	f7fc feab 	bl	8080988 <arg_name_equals>
 8083c32:	2801      	cmp	r0, #1
 8083c34:	4602      	mov	r2, r0
 8083c36:	d105      	bne.n	8083c44 <_ZNK7Command11getArgumentEPKc+0x44>
 8083c38:	4621      	mov	r1, r4
 8083c3a:	4628      	mov	r0, r5
 8083c3c:	f7ff fdf8 	bl	8083830 <_ZN8ArgumentC1EP3argb>
        h = h->next;
        ++j;
    }

    return Argument();
}
 8083c40:	4628      	mov	r0, r5
 8083c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    arg* h = cmdPointer->arg_list;
    int  j = 0;

    while (h) {
        if (arg_name_equals(h, name, strlen(name), cmdPointer->case_sensetive) == ARG_NAME_EQUALS) return h;
        h = h->next;
 8083c44:	6924      	ldr	r4, [r4, #16]
    if (!cmdPointer || !name) return Argument();

    arg* h = cmdPointer->arg_list;
    int  j = 0;

    while (h) {
 8083c46:	e7e6      	b.n	8083c16 <_ZNK7Command11getArgumentEPKc+0x16>

08083c48 <_ZNK7Command14hasDescriptionEv>:
    }
    return CommandType::NORMAL;
}

bool Command::hasDescription() const {
    return cmdPointer && cmdPointer->description;
 8083c48:	6800      	ldr	r0, [r0, #0]
 8083c4a:	b118      	cbz	r0, 8083c54 <_ZNK7Command14hasDescriptionEv+0xc>
 8083c4c:	6940      	ldr	r0, [r0, #20]
 8083c4e:	3000      	adds	r0, #0
 8083c50:	bf18      	it	ne
 8083c52:	2001      	movne	r0, #1
}
 8083c54:	4770      	bx	lr

08083c56 <_ZNK7Command14getDescriptionEv>:

String Command::getDescription() const {
 8083c56:	b510      	push	{r4, lr}
 8083c58:	4604      	mov	r4, r0
    return String(cmd_get_description(cmdPointer));
 8083c5a:	6808      	ldr	r0, [r1, #0]
 8083c5c:	f7fc fc3a 	bl	80804d4 <cmd_get_description>
 8083c60:	4601      	mov	r1, r0
 8083c62:	4620      	mov	r0, r4
 8083c64:	f000 fdbb 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
}
 8083c68:	4620      	mov	r0, r4
 8083c6a:	bd10      	pop	{r4, pc}

08083c6c <_ZNK7Command8toStringER6Stringb>:

void Command::toString(String& s, bool description) const {
 8083c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (cmdPointer) {
 8083c6e:	6803      	ldr	r3, [r0, #0]

String Command::getDescription() const {
    return String(cmd_get_description(cmdPointer));
}

void Command::toString(String& s, bool description) const {
 8083c70:	b089      	sub	sp, #36	; 0x24
 8083c72:	4605      	mov	r5, r0
 8083c74:	460c      	mov	r4, r1
 8083c76:	4617      	mov	r7, r2
    if (cmdPointer) {
 8083c78:	2b00      	cmp	r3, #0
 8083c7a:	d050      	beq.n	8083d1e <_ZNK7Command8toStringER6Stringb+0xb2>
        s += String(cmdPointer->name);
 8083c7c:	6819      	ldr	r1, [r3, #0]
 8083c7e:	a804      	add	r0, sp, #16
 8083c80:	f000 fdad 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083c84:	a904      	add	r1, sp, #16
 8083c86:	4620      	mov	r0, r4
 8083c88:	f000 fdfe 	bl	8084888 <_ZN6String6concatERKS_>
 8083c8c:	a804      	add	r0, sp, #16
 8083c8e:	f000 fd5f 	bl	8084750 <_ZN6StringD1Ev>

        if (cmdPointer->mode == CMD_BOUNDLESS) {
 8083c92:	682a      	ldr	r2, [r5, #0]
 8083c94:	7913      	ldrb	r3, [r2, #4]
 8083c96:	f003 0303 	and.w	r3, r3, #3
 8083c9a:	2b01      	cmp	r3, #1
 8083c9c:	d105      	bne.n	8083caa <_ZNK7Command8toStringER6Stringb+0x3e>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8083c9e:	2120      	movs	r1, #32
 8083ca0:	4620      	mov	r0, r4
 8083ca2:	f000 fe04 	bl	80848ae <_ZN6String6concatEc>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083ca6:	491f      	ldr	r1, [pc, #124]	; (8083d24 <_ZNK7Command8toStringER6Stringb+0xb8>)
 8083ca8:	e006      	b.n	8083cb8 <_ZNK7Command8toStringER6Stringb+0x4c>
            s += ' ';
            s += "<value> <value> ...";
        } else if (cmdPointer->mode == CMD_SINGLE) {
 8083caa:	2b02      	cmp	r3, #2
 8083cac:	d108      	bne.n	8083cc0 <_ZNK7Command8toStringER6Stringb+0x54>
	String & operator += (char c)			{concat(c); return (*this);}
 8083cae:	2120      	movs	r1, #32
 8083cb0:	4620      	mov	r0, r4
 8083cb2:	f000 fdfc 	bl	80848ae <_ZN6String6concatEc>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083cb6:	491c      	ldr	r1, [pc, #112]	; (8083d28 <_ZNK7Command8toStringER6Stringb+0xbc>)
 8083cb8:	4620      	mov	r0, r4
 8083cba:	f000 fde9 	bl	8084890 <_ZN6String6concatEPKc>
 8083cbe:	e013      	b.n	8083ce8 <_ZNK7Command8toStringER6Stringb+0x7c>
            s += ' ';
            s += "<...>";
        } else  {
            arg* h = cmdPointer->arg_list;
 8083cc0:	6896      	ldr	r6, [r2, #8]

            while (h) {
 8083cc2:	b18e      	cbz	r6, 8083ce8 <_ZNK7Command8toStringER6Stringb+0x7c>
	String & operator += (char c)			{concat(c); return (*this);}
 8083cc4:	2120      	movs	r1, #32
 8083cc6:	4620      	mov	r0, r4
 8083cc8:	f000 fdf1 	bl	80848ae <_ZN6String6concatEc>
                s += ' ';
                Argument(h).toString(s);
 8083ccc:	2201      	movs	r2, #1
 8083cce:	4631      	mov	r1, r6
 8083cd0:	a804      	add	r0, sp, #16
 8083cd2:	f7ff fdad 	bl	8083830 <_ZN8ArgumentC1EP3argb>
 8083cd6:	4621      	mov	r1, r4
 8083cd8:	a804      	add	r0, sp, #16
 8083cda:	f7ff fdf7 	bl	80838cc <_ZNK8Argument8toStringER6String>
 8083cde:	a804      	add	r0, sp, #16
 8083ce0:	f7ff fdb0 	bl	8083844 <_ZN8ArgumentD1Ev>

                h = h->next;
 8083ce4:	6936      	ldr	r6, [r6, #16]
            s += ' ';
            s += "<...>";
        } else  {
            arg* h = cmdPointer->arg_list;

            while (h) {
 8083ce6:	e7ec      	b.n	8083cc2 <_ZNK7Command8toStringER6Stringb+0x56>

                h = h->next;
            }
        }

        if (description && hasDescription()) {
 8083ce8:	b1cf      	cbz	r7, 8083d1e <_ZNK7Command8toStringER6Stringb+0xb2>
 8083cea:	4628      	mov	r0, r5
 8083cec:	f7ff ffac 	bl	8083c48 <_ZNK7Command14hasDescriptionEv>
 8083cf0:	b1a8      	cbz	r0, 8083d1e <_ZNK7Command8toStringER6Stringb+0xb2>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8083cf2:	490e      	ldr	r1, [pc, #56]	; (8083d2c <_ZNK7Command8toStringER6Stringb+0xc0>)
 8083cf4:	a804      	add	r0, sp, #16
 8083cf6:	f000 fd72 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
            s += "\r\n" + getDescription();
 8083cfa:	4629      	mov	r1, r5
 8083cfc:	4668      	mov	r0, sp
 8083cfe:	f7ff ffaa 	bl	8083c56 <_ZNK7Command14getDescriptionEv>
 8083d02:	4669      	mov	r1, sp
 8083d04:	a804      	add	r0, sp, #16
 8083d06:	f000 fddf 	bl	80848c8 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083d0a:	4601      	mov	r1, r0
 8083d0c:	4620      	mov	r0, r4
 8083d0e:	f000 fdbb 	bl	8084888 <_ZN6String6concatERKS_>
 8083d12:	4668      	mov	r0, sp
 8083d14:	f000 fd1c 	bl	8084750 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8083d18:	a804      	add	r0, sp, #16
 8083d1a:	f000 fd19 	bl	8084750 <_ZN6StringD1Ev>
        }
    }
}
 8083d1e:	b009      	add	sp, #36	; 0x24
 8083d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083d22:	bf00      	nop
 8083d24:	0808a7e9 	.word	0x0808a7e9
 8083d28:	0808a7fd 	.word	0x0808a7fd
 8083d2c:	0808a388 	.word	0x0808a388

08083d30 <_ZNK7Command8toStringEb>:

Argument Command::getArg(const Argument& a) const {
    return getArgument(a);
}

String Command::toString(bool description) const {
 8083d30:	b570      	push	{r4, r5, r6, lr}
 8083d32:	4604      	mov	r4, r0
 8083d34:	460d      	mov	r5, r1
 8083d36:	4616      	mov	r6, r2
    String s;
 8083d38:	4904      	ldr	r1, [pc, #16]	; (8083d4c <_ZNK7Command8toStringEb+0x1c>)
 8083d3a:	f000 fd50 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>

    toString(s, description);
 8083d3e:	4628      	mov	r0, r5
 8083d40:	4632      	mov	r2, r6
 8083d42:	4621      	mov	r1, r4
 8083d44:	f7ff ff92 	bl	8083c6c <_ZNK7Command8toStringER6Stringb>
    return s;
}
 8083d48:	4620      	mov	r0, r4
 8083d4a:	bd70      	pop	{r4, r5, r6, pc}
 8083d4c:	0808a71d 	.word	0x0808a71d

08083d50 <_GLOBAL__sub_I__ZN7CommandC2EP3cmdb>:
 8083d50:	f000 b8b0 	b.w	8083eb4 <HAL_Pin_Map>

08083d54 <Wiring_TIM3_Interrupt_Handler_override>:
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
void Wiring_TIM3_Interrupt_Handler_override()
{
 8083d54:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8083d56:	2101      	movs	r1, #1
 8083d58:	4806      	ldr	r0, [pc, #24]	; (8083d74 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8083d5a:	f001 fff5 	bl	8085d48 <TIM_GetITStatus>
 8083d5e:	b140      	cbz	r0, 8083d72 <Wiring_TIM3_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8083d60:	2101      	movs	r1, #1
 8083d62:	4804      	ldr	r0, [pc, #16]	; (8083d74 <Wiring_TIM3_Interrupt_Handler_override+0x20>)
 8083d64:	f001 fffb 	bl	8085d5e <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[0]();
	}
}
 8083d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM3_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[0]();
 8083d6c:	4b02      	ldr	r3, [pc, #8]	; (8083d78 <Wiring_TIM3_Interrupt_Handler_override+0x24>)
 8083d6e:	681b      	ldr	r3, [r3, #0]
 8083d70:	4718      	bx	r3
 8083d72:	bd10      	pop	{r4, pc}
 8083d74:	40000400 	.word	0x40000400
 8083d78:	20000324 	.word	0x20000324

08083d7c <Wiring_TIM4_Interrupt_Handler_override>:
	}
}

void Wiring_TIM4_Interrupt_Handler_override()
{
 8083d7c:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 8083d7e:	2101      	movs	r1, #1
 8083d80:	4806      	ldr	r0, [pc, #24]	; (8083d9c <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8083d82:	f001 ffe1 	bl	8085d48 <TIM_GetITStatus>
 8083d86:	b140      	cbz	r0, 8083d9a <Wiring_TIM4_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8083d88:	2101      	movs	r1, #1
 8083d8a:	4804      	ldr	r0, [pc, #16]	; (8083d9c <Wiring_TIM4_Interrupt_Handler_override+0x20>)
 8083d8c:	f001 ffe7 	bl	8085d5e <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[1]();
	}
}
 8083d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM4_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[1]();
 8083d94:	4b02      	ldr	r3, [pc, #8]	; (8083da0 <Wiring_TIM4_Interrupt_Handler_override+0x24>)
 8083d96:	685b      	ldr	r3, [r3, #4]
 8083d98:	4718      	bx	r3
 8083d9a:	bd10      	pop	{r4, pc}
 8083d9c:	40000800 	.word	0x40000800
 8083da0:	20000324 	.word	0x20000324

08083da4 <Wiring_TIM5_Interrupt_Handler_override>:
	}
}

void Wiring_TIM5_Interrupt_Handler_override()
{
 8083da4:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
 8083da6:	2101      	movs	r1, #1
 8083da8:	4806      	ldr	r0, [pc, #24]	; (8083dc4 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 8083daa:	f001 ffcd 	bl	8085d48 <TIM_GetITStatus>
 8083dae:	b140      	cbz	r0, 8083dc2 <Wiring_TIM5_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 8083db0:	2101      	movs	r1, #1
 8083db2:	4804      	ldr	r0, [pc, #16]	; (8083dc4 <Wiring_TIM5_Interrupt_Handler_override+0x20>)
 8083db4:	f001 ffd3 	bl	8085d5e <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[2]();
	}
}
 8083db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM5_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[2]();
 8083dbc:	4b02      	ldr	r3, [pc, #8]	; (8083dc8 <Wiring_TIM5_Interrupt_Handler_override+0x24>)
 8083dbe:	689b      	ldr	r3, [r3, #8]
 8083dc0:	4718      	bx	r3
 8083dc2:	bd10      	pop	{r4, pc}
 8083dc4:	40000c00 	.word	0x40000c00
 8083dc8:	20000324 	.word	0x20000324

08083dcc <Wiring_TIM6_Interrupt_Handler_override>:
	}
}

void Wiring_TIM6_Interrupt_Handler_override()
{
 8083dcc:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
 8083dce:	2101      	movs	r1, #1
 8083dd0:	4806      	ldr	r0, [pc, #24]	; (8083dec <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8083dd2:	f001 ffb9 	bl	8085d48 <TIM_GetITStatus>
 8083dd6:	b140      	cbz	r0, 8083dea <Wiring_TIM6_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
 8083dd8:	2101      	movs	r1, #1
 8083dda:	4804      	ldr	r0, [pc, #16]	; (8083dec <Wiring_TIM6_Interrupt_Handler_override+0x20>)
 8083ddc:	f001 ffbf 	bl	8085d5e <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[3]();
	}
}
 8083de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM6_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[3]();
 8083de4:	4b02      	ldr	r3, [pc, #8]	; (8083df0 <Wiring_TIM6_Interrupt_Handler_override+0x24>)
 8083de6:	68db      	ldr	r3, [r3, #12]
 8083de8:	4718      	bx	r3
 8083dea:	bd10      	pop	{r4, pc}
 8083dec:	40001000 	.word	0x40001000
 8083df0:	20000324 	.word	0x20000324

08083df4 <Wiring_TIM7_Interrupt_Handler_override>:
	}
}

void Wiring_TIM7_Interrupt_Handler_override()
{
 8083df4:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
 8083df6:	2101      	movs	r1, #1
 8083df8:	4806      	ldr	r0, [pc, #24]	; (8083e14 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8083dfa:	f001 ffa5 	bl	8085d48 <TIM_GetITStatus>
 8083dfe:	b140      	cbz	r0, 8083e12 <Wiring_TIM7_Interrupt_Handler_override+0x1e>
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8083e00:	2101      	movs	r1, #1
 8083e02:	4804      	ldr	r0, [pc, #16]	; (8083e14 <Wiring_TIM7_Interrupt_Handler_override+0x20>)
 8083e04:	f001 ffab 	bl	8085d5e <TIM_ClearITPendingBit>
		IntervalTimer::SIT_CALLBACK[4]();
	}
}
 8083e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Wiring_TIM7_Interrupt_Handler_override()
{
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET)
	{
		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
		IntervalTimer::SIT_CALLBACK[4]();
 8083e0c:	4b02      	ldr	r3, [pc, #8]	; (8083e18 <Wiring_TIM7_Interrupt_Handler_override+0x24>)
 8083e0e:	691b      	ldr	r3, [r3, #16]
 8083e10:	4718      	bx	r3
 8083e12:	bd10      	pop	{r4, pc}
 8083e14:	40001400 	.word	0x40001400
 8083e18:	20000324 	.word	0x20000324

08083e1c <_ZN13IntervalTimer8stop_SITEv>:

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 8083e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8083e1e:	7a43      	ldrb	r3, [r0, #9]

// ------------------------------------------------------------
// stops an active SIT by disabling its interrupt and TIMER
// and freeing up its state for future use.
// ------------------------------------------------------------
void IntervalTimer::stop_SIT() {
 8083e20:	4606      	mov	r6, r0
    NVIC_InitTypeDef nvicStructure;
	TIM_TypeDef* TIMx;


	//use SIT_id to identify TIM#
	switch (SIT_id) {
 8083e22:	2b04      	cmp	r3, #4
 8083e24:	d81c      	bhi.n	8083e60 <_ZN13IntervalTimer8stop_SITEv+0x44>
 8083e26:	e8df f003 	tbb	[pc, r3]
 8083e2a:	0803      	.short	0x0803
 8083e2c:	120d      	.short	0x120d
 8083e2e:	17          	.byte	0x17
 8083e2f:	00          	.byte	0x00
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
		TIMx = TIM4;
		break;
#elif defined(STM32F2XX) && defined(PLATFORM_ID)	//Photon
	case 0:		// TIM3
		nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8083e30:	231d      	movs	r3, #29
 8083e32:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM3;
 8083e36:	4c13      	ldr	r4, [pc, #76]	; (8083e84 <_ZN13IntervalTimer8stop_SITEv+0x68>)
		break;
 8083e38:	e012      	b.n	8083e60 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 1:		// TIM4
		nvicStructure.NVIC_IRQChannel = TIM4_IRQn;
 8083e3a:	231e      	movs	r3, #30
 8083e3c:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM4;
 8083e40:	4c11      	ldr	r4, [pc, #68]	; (8083e88 <_ZN13IntervalTimer8stop_SITEv+0x6c>)
		break;
 8083e42:	e00d      	b.n	8083e60 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 2:		// TIM5
		nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 8083e44:	2332      	movs	r3, #50	; 0x32
 8083e46:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM5;
 8083e4a:	4c10      	ldr	r4, [pc, #64]	; (8083e8c <_ZN13IntervalTimer8stop_SITEv+0x70>)
		break;
 8083e4c:	e008      	b.n	8083e60 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
 8083e4e:	2336      	movs	r3, #54	; 0x36
 8083e50:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM6;
 8083e54:	4c0e      	ldr	r4, [pc, #56]	; (8083e90 <_ZN13IntervalTimer8stop_SITEv+0x74>)
		break;
 8083e56:	e003      	b.n	8083e60 <_ZN13IntervalTimer8stop_SITEv+0x44>
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8083e58:	2337      	movs	r3, #55	; 0x37
		TIMx = TIM7;
 8083e5a:	4c0e      	ldr	r4, [pc, #56]	; (8083e94 <_ZN13IntervalTimer8stop_SITEv+0x78>)
	case 3:		// TIM6
		nvicStructure.NVIC_IRQChannel = TIM6_DAC_IRQn;
		TIMx = TIM6;
		break;
	case 4:		// TIM7
		nvicStructure.NVIC_IRQChannel = TIM7_IRQn;
 8083e5c:	f88d 3004 	strb.w	r3, [sp, #4]
		TIMx = TIM7;
		break;
#endif
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
 8083e60:	2100      	movs	r1, #0
 8083e62:	4620      	mov	r0, r4
 8083e64:	f001 ff64 	bl	8085d30 <TIM_Cmd>
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8083e68:	2500      	movs	r5, #0
    NVIC_Init(&nvicStructure);
 8083e6a:	a801      	add	r0, sp, #4
		}
	// disable counter
	TIM_Cmd(TIMx, DISABLE);
	
	// disable interrupt
    nvicStructure.NVIC_IRQChannelCmd = DISABLE;
 8083e6c:	f88d 5007 	strb.w	r5, [sp, #7]
    NVIC_Init(&nvicStructure);
 8083e70:	f001 fe58 	bl	8085b24 <NVIC_Init>
	
	// disable timer peripheral
	TIM_DeInit(TIMx);
 8083e74:	4620      	mov	r0, r4
 8083e76:	f001 fea5 	bl	8085bc4 <TIM_DeInit>
	
	// free SIT for future use
	SIT_used[SIT_id] = false;
 8083e7a:	7a73      	ldrb	r3, [r6, #9]
 8083e7c:	4a06      	ldr	r2, [pc, #24]	; (8083e98 <_ZN13IntervalTimer8stop_SITEv+0x7c>)
 8083e7e:	54d5      	strb	r5, [r2, r3]
}
 8083e80:	b002      	add	sp, #8
 8083e82:	bd70      	pop	{r4, r5, r6, pc}
 8083e84:	40000400 	.word	0x40000400
 8083e88:	40000800 	.word	0x40000800
 8083e8c:	40000c00 	.word	0x40000c00
 8083e90:	40001000 	.word	0x40001000
 8083e94:	40001400 	.word	0x40001400
 8083e98:	20000338 	.word	0x20000338

08083e9c <_ZN13IntervalTimer3endEv>:
// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
	if (status == TIMER_SIT) stop_SIT();
 8083e9c:	7a03      	ldrb	r3, [r0, #8]

// ------------------------------------------------------------
// stop the timer if it's currently running, using its status
// to determine what hardware resources the timer may be using
// ------------------------------------------------------------
void IntervalTimer::end() {
 8083e9e:	b510      	push	{r4, lr}
 8083ea0:	4604      	mov	r4, r0
	if (status == TIMER_SIT) stop_SIT();
 8083ea2:	b10b      	cbz	r3, 8083ea8 <_ZN13IntervalTimer3endEv+0xc>
 8083ea4:	f7ff ffba 	bl	8083e1c <_ZN13IntervalTimer8stop_SITEv>
	status = TIMER_OFF;
 8083ea8:	2300      	movs	r3, #0
 8083eaa:	7223      	strb	r3, [r4, #8]
 8083eac:	bd10      	pop	{r4, pc}

08083eae <_GLOBAL__sub_I__ZN13IntervalTimer8SIT_usedE>:
 8083eae:	f000 b801 	b.w	8083eb4 <HAL_Pin_Map>
	...

08083eb4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8083eb4:	b508      	push	{r3, lr}
 8083eb6:	4b02      	ldr	r3, [pc, #8]	; (8083ec0 <HAL_Pin_Map+0xc>)
 8083eb8:	681b      	ldr	r3, [r3, #0]
 8083eba:	681b      	ldr	r3, [r3, #0]
 8083ebc:	9301      	str	r3, [sp, #4]
 8083ebe:	bd08      	pop	{r3, pc}
 8083ec0:	080401b0 	.word	0x080401b0

08083ec4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8083ec4:	b508      	push	{r3, lr}
 8083ec6:	4b02      	ldr	r3, [pc, #8]	; (8083ed0 <HAL_Pin_Mode+0xc>)
 8083ec8:	681b      	ldr	r3, [r3, #0]
 8083eca:	689b      	ldr	r3, [r3, #8]
 8083ecc:	9301      	str	r3, [sp, #4]
 8083ece:	bd08      	pop	{r3, pc}
 8083ed0:	080401b0 	.word	0x080401b0

08083ed4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8083ed4:	b508      	push	{r3, lr}
 8083ed6:	4b02      	ldr	r3, [pc, #8]	; (8083ee0 <HAL_Get_Pin_Mode+0xc>)
 8083ed8:	681b      	ldr	r3, [r3, #0]
 8083eda:	68db      	ldr	r3, [r3, #12]
 8083edc:	9301      	str	r3, [sp, #4]
 8083ede:	bd08      	pop	{r3, pc}
 8083ee0:	080401b0 	.word	0x080401b0

08083ee4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8083ee4:	b508      	push	{r3, lr}
 8083ee6:	4b02      	ldr	r3, [pc, #8]	; (8083ef0 <HAL_GPIO_Write+0xc>)
 8083ee8:	681b      	ldr	r3, [r3, #0]
 8083eea:	691b      	ldr	r3, [r3, #16]
 8083eec:	9301      	str	r3, [sp, #4]
 8083eee:	bd08      	pop	{r3, pc}
 8083ef0:	080401b0 	.word	0x080401b0

08083ef4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8083ef4:	b508      	push	{r3, lr}
 8083ef6:	4b02      	ldr	r3, [pc, #8]	; (8083f00 <HAL_GPIO_Read+0xc>)
 8083ef8:	681b      	ldr	r3, [r3, #0]
 8083efa:	695b      	ldr	r3, [r3, #20]
 8083efc:	9301      	str	r3, [sp, #4]
 8083efe:	bd08      	pop	{r3, pc}
 8083f00:	080401b0 	.word	0x080401b0

08083f04 <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, HAL_PWM_Get_Frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, HAL_PWM_Get_AnalogValue, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 8083f04:	b508      	push	{r3, lr}
 8083f06:	4b02      	ldr	r3, [pc, #8]	; (8083f10 <HAL_Set_System_Interrupt_Handler+0xc>)
 8083f08:	681b      	ldr	r3, [r3, #0]
 8083f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083f0c:	9301      	str	r3, [sp, #4]
 8083f0e:	bd08      	pop	{r3, pc}
 8083f10:	080401b0 	.word	0x080401b0

08083f14 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8083f14:	b508      	push	{r3, lr}
 8083f16:	4b02      	ldr	r3, [pc, #8]	; (8083f20 <HAL_SPI_Begin+0xc>)
 8083f18:	681b      	ldr	r3, [r3, #0]
 8083f1a:	681b      	ldr	r3, [r3, #0]
 8083f1c:	9301      	str	r3, [sp, #4]
 8083f1e:	bd08      	pop	{r3, pc}
 8083f20:	080401b4 	.word	0x080401b4

08083f24 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8083f24:	b508      	push	{r3, lr}
 8083f26:	4b02      	ldr	r3, [pc, #8]	; (8083f30 <HAL_SPI_Send_Receive_Data+0xc>)
 8083f28:	681b      	ldr	r3, [r3, #0]
 8083f2a:	695b      	ldr	r3, [r3, #20]
 8083f2c:	9301      	str	r3, [sp, #4]
 8083f2e:	bd08      	pop	{r3, pc}
 8083f30:	080401b4 	.word	0x080401b4

08083f34 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8083f34:	b508      	push	{r3, lr}
 8083f36:	4b02      	ldr	r3, [pc, #8]	; (8083f40 <HAL_SPI_Init+0xc>)
 8083f38:	681b      	ldr	r3, [r3, #0]
 8083f3a:	69db      	ldr	r3, [r3, #28]
 8083f3c:	9301      	str	r3, [sp, #4]
 8083f3e:	bd08      	pop	{r3, pc}
 8083f40:	080401b4 	.word	0x080401b4

08083f44 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8083f44:	b508      	push	{r3, lr}
 8083f46:	4b02      	ldr	r3, [pc, #8]	; (8083f50 <HAL_SPI_Is_Enabled+0xc>)
 8083f48:	681b      	ldr	r3, [r3, #0]
 8083f4a:	6a1b      	ldr	r3, [r3, #32]
 8083f4c:	9301      	str	r3, [sp, #4]
 8083f4e:	bd08      	pop	{r3, pc}
 8083f50:	080401b4 	.word	0x080401b4

08083f54 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8083f54:	b508      	push	{r3, lr}
 8083f56:	4b02      	ldr	r3, [pc, #8]	; (8083f60 <HAL_SPI_Info+0xc>)
 8083f58:	681b      	ldr	r3, [r3, #0]
 8083f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083f5c:	9301      	str	r3, [sp, #4]
 8083f5e:	bd08      	pop	{r3, pc}
 8083f60:	080401b4 	.word	0x080401b4

08083f64 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8083f64:	b508      	push	{r3, lr}
 8083f66:	4b02      	ldr	r3, [pc, #8]	; (8083f70 <HAL_SPI_DMA_Transfer+0xc>)
 8083f68:	681b      	ldr	r3, [r3, #0]
 8083f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083f6c:	9301      	str	r3, [sp, #4]
 8083f6e:	bd08      	pop	{r3, pc}
 8083f70:	080401b4 	.word	0x080401b4

08083f74 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8083f74:	b508      	push	{r3, lr}
 8083f76:	4b02      	ldr	r3, [pc, #8]	; (8083f80 <HAL_SPI_DMA_Transfer_Status+0xc>)
 8083f78:	681b      	ldr	r3, [r3, #0]
 8083f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8083f7c:	9301      	str	r3, [sp, #4]
 8083f7e:	bd08      	pop	{r3, pc}
 8083f80:	080401b4 	.word	0x080401b4

08083f84 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 8083f84:	b508      	push	{r3, lr}
 8083f86:	4b02      	ldr	r3, [pc, #8]	; (8083f90 <HAL_SPI_Set_Settings+0xc>)
 8083f88:	681b      	ldr	r3, [r3, #0]
 8083f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8083f8c:	9301      	str	r3, [sp, #4]
 8083f8e:	bd08      	pop	{r3, pc}
 8083f90:	080401b4 	.word	0x080401b4

08083f94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8083f94:	b508      	push	{r3, lr}
 8083f96:	4b02      	ldr	r3, [pc, #8]	; (8083fa0 <HAL_RNG_GetRandomNumber+0xc>)
 8083f98:	681b      	ldr	r3, [r3, #0]
 8083f9a:	685b      	ldr	r3, [r3, #4]
 8083f9c:	9301      	str	r3, [sp, #4]
 8083f9e:	bd08      	pop	{r3, pc}
 8083fa0:	0804019c 	.word	0x0804019c

08083fa4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8083fa4:	b508      	push	{r3, lr}
 8083fa6:	4b02      	ldr	r3, [pc, #8]	; (8083fb0 <HAL_Delay_Milliseconds+0xc>)
 8083fa8:	681b      	ldr	r3, [r3, #0]
 8083faa:	689b      	ldr	r3, [r3, #8]
 8083fac:	9301      	str	r3, [sp, #4]
 8083fae:	bd08      	pop	{r3, pc}
 8083fb0:	0804019c 	.word	0x0804019c

08083fb4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 8083fb4:	b508      	push	{r3, lr}
 8083fb6:	4b02      	ldr	r3, [pc, #8]	; (8083fc0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 8083fb8:	681b      	ldr	r3, [r3, #0]
 8083fba:	691b      	ldr	r3, [r3, #16]
 8083fbc:	9301      	str	r3, [sp, #4]
 8083fbe:	bd08      	pop	{r3, pc}
 8083fc0:	0804019c 	.word	0x0804019c

08083fc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8083fc4:	b508      	push	{r3, lr}
 8083fc6:	4b02      	ldr	r3, [pc, #8]	; (8083fd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8083fc8:	681b      	ldr	r3, [r3, #0]
 8083fca:	695b      	ldr	r3, [r3, #20]
 8083fcc:	9301      	str	r3, [sp, #4]
 8083fce:	bd08      	pop	{r3, pc}
 8083fd0:	0804019c 	.word	0x0804019c

08083fd4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8083fd4:	b508      	push	{r3, lr}
 8083fd6:	4b02      	ldr	r3, [pc, #8]	; (8083fe0 <HAL_RTC_Get_UnixTime+0xc>)
 8083fd8:	681b      	ldr	r3, [r3, #0]
 8083fda:	69db      	ldr	r3, [r3, #28]
 8083fdc:	9301      	str	r3, [sp, #4]
 8083fde:	bd08      	pop	{r3, pc}
 8083fe0:	0804019c 	.word	0x0804019c

08083fe4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8083fe4:	b508      	push	{r3, lr}
 8083fe6:	4b02      	ldr	r3, [pc, #8]	; (8083ff0 <HAL_RTC_Time_Is_Valid+0xc>)
 8083fe8:	681b      	ldr	r3, [r3, #0]
 8083fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8083fec:	9301      	str	r3, [sp, #4]
 8083fee:	bd08      	pop	{r3, pc}
 8083ff0:	0804019c 	.word	0x0804019c

08083ff4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8083ff4:	b508      	push	{r3, lr}
 8083ff6:	4b02      	ldr	r3, [pc, #8]	; (8084000 <os_thread_create+0xc>)
 8083ff8:	681b      	ldr	r3, [r3, #0]
 8083ffa:	685b      	ldr	r3, [r3, #4]
 8083ffc:	9301      	str	r3, [sp, #4]
 8083ffe:	bd08      	pop	{r3, pc}
 8084000:	080401d0 	.word	0x080401d0

08084004 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 8084004:	b508      	push	{r3, lr}
 8084006:	4b02      	ldr	r3, [pc, #8]	; (8084010 <os_thread_is_current+0xc>)
 8084008:	681b      	ldr	r3, [r3, #0]
 808400a:	689b      	ldr	r3, [r3, #8]
 808400c:	9301      	str	r3, [sp, #4]
 808400e:	bd08      	pop	{r3, pc}
 8084010:	080401d0 	.word	0x080401d0

08084014 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 8084014:	b508      	push	{r3, lr}
 8084016:	4b02      	ldr	r3, [pc, #8]	; (8084020 <os_thread_join+0xc>)
 8084018:	681b      	ldr	r3, [r3, #0]
 808401a:	691b      	ldr	r3, [r3, #16]
 808401c:	9301      	str	r3, [sp, #4]
 808401e:	bd08      	pop	{r3, pc}
 8084020:	080401d0 	.word	0x080401d0

08084024 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8084024:	b508      	push	{r3, lr}
 8084026:	4b02      	ldr	r3, [pc, #8]	; (8084030 <os_thread_cleanup+0xc>)
 8084028:	681b      	ldr	r3, [r3, #0]
 808402a:	695b      	ldr	r3, [r3, #20]
 808402c:	9301      	str	r3, [sp, #4]
 808402e:	bd08      	pop	{r3, pc}
 8084030:	080401d0 	.word	0x080401d0

08084034 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8084034:	b508      	push	{r3, lr}
 8084036:	4b02      	ldr	r3, [pc, #8]	; (8084040 <os_mutex_recursive_create+0xc>)
 8084038:	681b      	ldr	r3, [r3, #0]
 808403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808403c:	9301      	str	r3, [sp, #4]
 808403e:	bd08      	pop	{r3, pc}
 8084040:	080401d0 	.word	0x080401d0

08084044 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8084044:	b508      	push	{r3, lr}
 8084046:	4b02      	ldr	r3, [pc, #8]	; (8084050 <os_mutex_recursive_destroy+0xc>)
 8084048:	681b      	ldr	r3, [r3, #0]
 808404a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808404c:	9301      	str	r3, [sp, #4]
 808404e:	bd08      	pop	{r3, pc}
 8084050:	080401d0 	.word	0x080401d0

08084054 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8084054:	b508      	push	{r3, lr}
 8084056:	4b02      	ldr	r3, [pc, #8]	; (8084060 <os_mutex_recursive_lock+0xc>)
 8084058:	681b      	ldr	r3, [r3, #0]
 808405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808405c:	9301      	str	r3, [sp, #4]
 808405e:	bd08      	pop	{r3, pc}
 8084060:	080401d0 	.word	0x080401d0

08084064 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8084064:	b508      	push	{r3, lr}
 8084066:	4b02      	ldr	r3, [pc, #8]	; (8084070 <os_mutex_recursive_unlock+0xc>)
 8084068:	681b      	ldr	r3, [r3, #0]
 808406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808406c:	9301      	str	r3, [sp, #4]
 808406e:	bd08      	pop	{r3, pc}
 8084070:	080401d0 	.word	0x080401d0

08084074 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8084074:	b508      	push	{r3, lr}
 8084076:	4b02      	ldr	r3, [pc, #8]	; (8084080 <os_thread_exit+0xc>)
 8084078:	681b      	ldr	r3, [r3, #0]
 808407a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808407c:	9301      	str	r3, [sp, #4]
 808407e:	bd08      	pop	{r3, pc}
 8084080:	080401d0 	.word	0x080401d0

08084084 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8084084:	b508      	push	{r3, lr}
 8084086:	4b02      	ldr	r3, [pc, #8]	; (8084090 <HAL_USART_Init+0xc>)
 8084088:	681b      	ldr	r3, [r3, #0]
 808408a:	699b      	ldr	r3, [r3, #24]
 808408c:	9301      	str	r3, [sp, #4]
 808408e:	bd08      	pop	{r3, pc}
 8084090:	080401c4 	.word	0x080401c4

08084094 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8084094:	b508      	push	{r3, lr}
 8084096:	4b02      	ldr	r3, [pc, #8]	; (80840a0 <HAL_USART_Write_Data+0xc>)
 8084098:	681b      	ldr	r3, [r3, #0]
 808409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808409c:	9301      	str	r3, [sp, #4]
 808409e:	bd08      	pop	{r3, pc}
 80840a0:	080401c4 	.word	0x080401c4

080840a4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80840a4:	b508      	push	{r3, lr}
 80840a6:	4b02      	ldr	r3, [pc, #8]	; (80840b0 <HAL_USART_Available_Data+0xc>)
 80840a8:	681b      	ldr	r3, [r3, #0]
 80840aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80840ac:	9301      	str	r3, [sp, #4]
 80840ae:	bd08      	pop	{r3, pc}
 80840b0:	080401c4 	.word	0x080401c4

080840b4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80840b4:	b508      	push	{r3, lr}
 80840b6:	4b02      	ldr	r3, [pc, #8]	; (80840c0 <HAL_USART_Read_Data+0xc>)
 80840b8:	681b      	ldr	r3, [r3, #0]
 80840ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80840bc:	9301      	str	r3, [sp, #4]
 80840be:	bd08      	pop	{r3, pc}
 80840c0:	080401c4 	.word	0x080401c4

080840c4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80840c4:	b508      	push	{r3, lr}
 80840c6:	4b02      	ldr	r3, [pc, #8]	; (80840d0 <HAL_USART_Peek_Data+0xc>)
 80840c8:	681b      	ldr	r3, [r3, #0]
 80840ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80840cc:	9301      	str	r3, [sp, #4]
 80840ce:	bd08      	pop	{r3, pc}
 80840d0:	080401c4 	.word	0x080401c4

080840d4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80840d4:	b508      	push	{r3, lr}
 80840d6:	4b02      	ldr	r3, [pc, #8]	; (80840e0 <HAL_USART_Flush_Data+0xc>)
 80840d8:	681b      	ldr	r3, [r3, #0]
 80840da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80840dc:	9301      	str	r3, [sp, #4]
 80840de:	bd08      	pop	{r3, pc}
 80840e0:	080401c4 	.word	0x080401c4

080840e4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80840e4:	b508      	push	{r3, lr}
 80840e6:	4b02      	ldr	r3, [pc, #8]	; (80840f0 <HAL_USART_Is_Enabled+0xc>)
 80840e8:	681b      	ldr	r3, [r3, #0]
 80840ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80840ec:	9301      	str	r3, [sp, #4]
 80840ee:	bd08      	pop	{r3, pc}
 80840f0:	080401c4 	.word	0x080401c4

080840f4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80840f4:	b508      	push	{r3, lr}
 80840f6:	4b02      	ldr	r3, [pc, #8]	; (8084100 <HAL_USART_Available_Data_For_Write+0xc>)
 80840f8:	681b      	ldr	r3, [r3, #0]
 80840fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80840fc:	9301      	str	r3, [sp, #4]
 80840fe:	bd08      	pop	{r3, pc}
 8084100:	080401c4 	.word	0x080401c4

08084104 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8084104:	b508      	push	{r3, lr}
 8084106:	4b02      	ldr	r3, [pc, #8]	; (8084110 <HAL_USART_BeginConfig+0xc>)
 8084108:	681b      	ldr	r3, [r3, #0]
 808410a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808410c:	9301      	str	r3, [sp, #4]
 808410e:	bd08      	pop	{r3, pc}
 8084110:	080401c4 	.word	0x080401c4

08084114 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8084114:	b508      	push	{r3, lr}
 8084116:	4b02      	ldr	r3, [pc, #8]	; (8084120 <HAL_I2C_Write_Data+0xc>)
 8084118:	681b      	ldr	r3, [r3, #0]
 808411a:	6a1b      	ldr	r3, [r3, #32]
 808411c:	9301      	str	r3, [sp, #4]
 808411e:	bd08      	pop	{r3, pc}
 8084120:	080401ac 	.word	0x080401ac

08084124 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8084124:	b508      	push	{r3, lr}
 8084126:	4b02      	ldr	r3, [pc, #8]	; (8084130 <HAL_I2C_Available_Data+0xc>)
 8084128:	681b      	ldr	r3, [r3, #0]
 808412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808412c:	9301      	str	r3, [sp, #4]
 808412e:	bd08      	pop	{r3, pc}
 8084130:	080401ac 	.word	0x080401ac

08084134 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8084134:	b508      	push	{r3, lr}
 8084136:	4b02      	ldr	r3, [pc, #8]	; (8084140 <HAL_I2C_Read_Data+0xc>)
 8084138:	681b      	ldr	r3, [r3, #0]
 808413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808413c:	9301      	str	r3, [sp, #4]
 808413e:	bd08      	pop	{r3, pc}
 8084140:	080401ac 	.word	0x080401ac

08084144 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8084144:	b508      	push	{r3, lr}
 8084146:	4b02      	ldr	r3, [pc, #8]	; (8084150 <HAL_I2C_Peek_Data+0xc>)
 8084148:	681b      	ldr	r3, [r3, #0]
 808414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808414c:	9301      	str	r3, [sp, #4]
 808414e:	bd08      	pop	{r3, pc}
 8084150:	080401ac 	.word	0x080401ac

08084154 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8084154:	b508      	push	{r3, lr}
 8084156:	4b02      	ldr	r3, [pc, #8]	; (8084160 <HAL_I2C_Flush_Data+0xc>)
 8084158:	681b      	ldr	r3, [r3, #0]
 808415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808415c:	9301      	str	r3, [sp, #4]
 808415e:	bd08      	pop	{r3, pc}
 8084160:	080401ac 	.word	0x080401ac

08084164 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8084164:	b508      	push	{r3, lr}
 8084166:	4b02      	ldr	r3, [pc, #8]	; (8084170 <HAL_I2C_Is_Enabled+0xc>)
 8084168:	681b      	ldr	r3, [r3, #0]
 808416a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808416c:	9301      	str	r3, [sp, #4]
 808416e:	bd08      	pop	{r3, pc}
 8084170:	080401ac 	.word	0x080401ac

08084174 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 8084174:	b508      	push	{r3, lr}
 8084176:	4b02      	ldr	r3, [pc, #8]	; (8084180 <HAL_I2C_Init+0xc>)
 8084178:	681b      	ldr	r3, [r3, #0]
 808417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808417c:	9301      	str	r3, [sp, #4]
 808417e:	bd08      	pop	{r3, pc}
 8084180:	080401ac 	.word	0x080401ac

08084184 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8084184:	b508      	push	{r3, lr}
 8084186:	4b02      	ldr	r3, [pc, #8]	; (8084190 <inet_gethostbyname+0xc>)
 8084188:	681b      	ldr	r3, [r3, #0]
 808418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808418c:	9301      	str	r3, [sp, #4]
 808418e:	bd08      	pop	{r3, pc}
 8084190:	08060020 	.word	0x08060020

08084194 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8084194:	b508      	push	{r3, lr}
 8084196:	4b02      	ldr	r3, [pc, #8]	; (80841a0 <HAL_USB_USART_Init+0xc>)
 8084198:	681b      	ldr	r3, [r3, #0]
 808419a:	681b      	ldr	r3, [r3, #0]
 808419c:	9301      	str	r3, [sp, #4]
 808419e:	bd08      	pop	{r3, pc}
 80841a0:	0806001c 	.word	0x0806001c

080841a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80841a4:	b508      	push	{r3, lr}
 80841a6:	4b02      	ldr	r3, [pc, #8]	; (80841b0 <HAL_USB_USART_Begin+0xc>)
 80841a8:	681b      	ldr	r3, [r3, #0]
 80841aa:	685b      	ldr	r3, [r3, #4]
 80841ac:	9301      	str	r3, [sp, #4]
 80841ae:	bd08      	pop	{r3, pc}
 80841b0:	0806001c 	.word	0x0806001c

080841b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80841b4:	b508      	push	{r3, lr}
 80841b6:	4b02      	ldr	r3, [pc, #8]	; (80841c0 <HAL_USB_USART_Available_Data+0xc>)
 80841b8:	681b      	ldr	r3, [r3, #0]
 80841ba:	691b      	ldr	r3, [r3, #16]
 80841bc:	9301      	str	r3, [sp, #4]
 80841be:	bd08      	pop	{r3, pc}
 80841c0:	0806001c 	.word	0x0806001c

080841c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80841c4:	b508      	push	{r3, lr}
 80841c6:	4b02      	ldr	r3, [pc, #8]	; (80841d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80841c8:	681b      	ldr	r3, [r3, #0]
 80841ca:	695b      	ldr	r3, [r3, #20]
 80841cc:	9301      	str	r3, [sp, #4]
 80841ce:	bd08      	pop	{r3, pc}
 80841d0:	0806001c 	.word	0x0806001c

080841d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80841d4:	b508      	push	{r3, lr}
 80841d6:	4b02      	ldr	r3, [pc, #8]	; (80841e0 <HAL_USB_USART_Receive_Data+0xc>)
 80841d8:	681b      	ldr	r3, [r3, #0]
 80841da:	699b      	ldr	r3, [r3, #24]
 80841dc:	9301      	str	r3, [sp, #4]
 80841de:	bd08      	pop	{r3, pc}
 80841e0:	0806001c 	.word	0x0806001c

080841e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80841e4:	b508      	push	{r3, lr}
 80841e6:	4b02      	ldr	r3, [pc, #8]	; (80841f0 <HAL_USB_USART_Send_Data+0xc>)
 80841e8:	681b      	ldr	r3, [r3, #0]
 80841ea:	69db      	ldr	r3, [r3, #28]
 80841ec:	9301      	str	r3, [sp, #4]
 80841ee:	bd08      	pop	{r3, pc}
 80841f0:	0806001c 	.word	0x0806001c

080841f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80841f4:	b508      	push	{r3, lr}
 80841f6:	4b02      	ldr	r3, [pc, #8]	; (8084200 <HAL_USB_USART_Flush_Data+0xc>)
 80841f8:	681b      	ldr	r3, [r3, #0]
 80841fa:	6a1b      	ldr	r3, [r3, #32]
 80841fc:	9301      	str	r3, [sp, #4]
 80841fe:	bd08      	pop	{r3, pc}
 8084200:	0806001c 	.word	0x0806001c

08084204 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8084204:	b508      	push	{r3, lr}
 8084206:	4b02      	ldr	r3, [pc, #8]	; (8084210 <system_mode+0xc>)
 8084208:	681b      	ldr	r3, [r3, #0]
 808420a:	681b      	ldr	r3, [r3, #0]
 808420c:	9301      	str	r3, [sp, #4]
 808420e:	bd08      	pop	{r3, pc}
 8084210:	080401a4 	.word	0x080401a4

08084214 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8084214:	b508      	push	{r3, lr}
 8084216:	4b02      	ldr	r3, [pc, #8]	; (8084220 <set_system_mode+0xc>)
 8084218:	681b      	ldr	r3, [r3, #0]
 808421a:	685b      	ldr	r3, [r3, #4]
 808421c:	9301      	str	r3, [sp, #4]
 808421e:	bd08      	pop	{r3, pc}
 8084220:	080401a4 	.word	0x080401a4

08084224 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8084224:	b508      	push	{r3, lr}
 8084226:	4b02      	ldr	r3, [pc, #8]	; (8084230 <system_delay_ms+0xc>)
 8084228:	681b      	ldr	r3, [r3, #0]
 808422a:	695b      	ldr	r3, [r3, #20]
 808422c:	9301      	str	r3, [sp, #4]
 808422e:	bd08      	pop	{r3, pc}
 8084230:	080401a4 	.word	0x080401a4

08084234 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8084234:	b508      	push	{r3, lr}
 8084236:	4b02      	ldr	r3, [pc, #8]	; (8084240 <system_sleep+0xc>)
 8084238:	681b      	ldr	r3, [r3, #0]
 808423a:	699b      	ldr	r3, [r3, #24]
 808423c:	9301      	str	r3, [sp, #4]
 808423e:	bd08      	pop	{r3, pc}
 8084240:	080401a4 	.word	0x080401a4

08084244 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8084244:	b508      	push	{r3, lr}
 8084246:	4b02      	ldr	r3, [pc, #8]	; (8084250 <system_thread_set_state+0xc>)
 8084248:	681b      	ldr	r3, [r3, #0]
 808424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808424c:	9301      	str	r3, [sp, #4]
 808424e:	bd08      	pop	{r3, pc}
 8084250:	080401a4 	.word	0x080401a4

08084254 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8084254:	b508      	push	{r3, lr}
 8084256:	4b02      	ldr	r3, [pc, #8]	; (8084260 <application_thread_current+0xc>)
 8084258:	681b      	ldr	r3, [r3, #0]
 808425a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808425c:	9301      	str	r3, [sp, #4]
 808425e:	bd08      	pop	{r3, pc}
 8084260:	080401a4 	.word	0x080401a4

08084264 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8084264:	b508      	push	{r3, lr}
 8084266:	4b02      	ldr	r3, [pc, #8]	; (8084270 <application_thread_invoke+0xc>)
 8084268:	681b      	ldr	r3, [r3, #0]
 808426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808426c:	9301      	str	r3, [sp, #4]
 808426e:	bd08      	pop	{r3, pc}
 8084270:	080401a4 	.word	0x080401a4

08084274 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8084274:	b508      	push	{r3, lr}
 8084276:	4b02      	ldr	r3, [pc, #8]	; (8084280 <system_thread_get_state+0xc>)
 8084278:	681b      	ldr	r3, [r3, #0]
 808427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808427c:	9301      	str	r3, [sp, #4]
 808427e:	bd08      	pop	{r3, pc}
 8084280:	080401a4 	.word	0x080401a4

08084284 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8084284:	b508      	push	{r3, lr}
 8084286:	4b03      	ldr	r3, [pc, #12]	; (8084294 <system_ctrl_set_app_request_handler+0x10>)
 8084288:	681b      	ldr	r3, [r3, #0]
 808428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808428e:	9301      	str	r3, [sp, #4]
 8084290:	bd08      	pop	{r3, pc}
 8084292:	0000      	.short	0x0000
 8084294:	080401a4 	.word	0x080401a4

08084298 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8084298:	b508      	push	{r3, lr}
 808429a:	4b03      	ldr	r3, [pc, #12]	; (80842a8 <system_ctrl_set_result+0x10>)
 808429c:	681b      	ldr	r3, [r3, #0]
 808429e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80842a2:	9301      	str	r3, [sp, #4]
 80842a4:	bd08      	pop	{r3, pc}
 80842a6:	0000      	.short	0x0000
 80842a8:	080401a4 	.word	0x080401a4

080842ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80842ac:	b508      	push	{r3, lr}
 80842ae:	4b02      	ldr	r3, [pc, #8]	; (80842b8 <network_connect+0xc>)
 80842b0:	681b      	ldr	r3, [r3, #0]
 80842b2:	685b      	ldr	r3, [r3, #4]
 80842b4:	9301      	str	r3, [sp, #4]
 80842b6:	bd08      	pop	{r3, pc}
 80842b8:	080401c8 	.word	0x080401c8

080842bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80842bc:	b508      	push	{r3, lr}
 80842be:	4b02      	ldr	r3, [pc, #8]	; (80842c8 <network_connecting+0xc>)
 80842c0:	681b      	ldr	r3, [r3, #0]
 80842c2:	689b      	ldr	r3, [r3, #8]
 80842c4:	9301      	str	r3, [sp, #4]
 80842c6:	bd08      	pop	{r3, pc}
 80842c8:	080401c8 	.word	0x080401c8

080842cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80842cc:	b508      	push	{r3, lr}
 80842ce:	4b02      	ldr	r3, [pc, #8]	; (80842d8 <network_disconnect+0xc>)
 80842d0:	681b      	ldr	r3, [r3, #0]
 80842d2:	68db      	ldr	r3, [r3, #12]
 80842d4:	9301      	str	r3, [sp, #4]
 80842d6:	bd08      	pop	{r3, pc}
 80842d8:	080401c8 	.word	0x080401c8

080842dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80842dc:	b508      	push	{r3, lr}
 80842de:	4b02      	ldr	r3, [pc, #8]	; (80842e8 <network_ready+0xc>)
 80842e0:	681b      	ldr	r3, [r3, #0]
 80842e2:	691b      	ldr	r3, [r3, #16]
 80842e4:	9301      	str	r3, [sp, #4]
 80842e6:	bd08      	pop	{r3, pc}
 80842e8:	080401c8 	.word	0x080401c8

080842ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80842ec:	b508      	push	{r3, lr}
 80842ee:	4b02      	ldr	r3, [pc, #8]	; (80842f8 <network_on+0xc>)
 80842f0:	681b      	ldr	r3, [r3, #0]
 80842f2:	695b      	ldr	r3, [r3, #20]
 80842f4:	9301      	str	r3, [sp, #4]
 80842f6:	bd08      	pop	{r3, pc}
 80842f8:	080401c8 	.word	0x080401c8

080842fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80842fc:	b508      	push	{r3, lr}
 80842fe:	4b02      	ldr	r3, [pc, #8]	; (8084308 <network_off+0xc>)
 8084300:	681b      	ldr	r3, [r3, #0]
 8084302:	699b      	ldr	r3, [r3, #24]
 8084304:	9301      	str	r3, [sp, #4]
 8084306:	bd08      	pop	{r3, pc}
 8084308:	080401c8 	.word	0x080401c8

0808430c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808430c:	b508      	push	{r3, lr}
 808430e:	4b02      	ldr	r3, [pc, #8]	; (8084318 <network_listen+0xc>)
 8084310:	681b      	ldr	r3, [r3, #0]
 8084312:	69db      	ldr	r3, [r3, #28]
 8084314:	9301      	str	r3, [sp, #4]
 8084316:	bd08      	pop	{r3, pc}
 8084318:	080401c8 	.word	0x080401c8

0808431c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808431c:	b508      	push	{r3, lr}
 808431e:	4b02      	ldr	r3, [pc, #8]	; (8084328 <network_listening+0xc>)
 8084320:	681b      	ldr	r3, [r3, #0]
 8084322:	6a1b      	ldr	r3, [r3, #32]
 8084324:	9301      	str	r3, [sp, #4]
 8084326:	bd08      	pop	{r3, pc}
 8084328:	080401c8 	.word	0x080401c8

0808432c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808432c:	b508      	push	{r3, lr}
 808432e:	4b02      	ldr	r3, [pc, #8]	; (8084338 <network_set_listen_timeout+0xc>)
 8084330:	681b      	ldr	r3, [r3, #0]
 8084332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084334:	9301      	str	r3, [sp, #4]
 8084336:	bd08      	pop	{r3, pc}
 8084338:	080401c8 	.word	0x080401c8

0808433c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808433c:	b508      	push	{r3, lr}
 808433e:	4b02      	ldr	r3, [pc, #8]	; (8084348 <network_get_listen_timeout+0xc>)
 8084340:	681b      	ldr	r3, [r3, #0]
 8084342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084344:	9301      	str	r3, [sp, #4]
 8084346:	bd08      	pop	{r3, pc}
 8084348:	080401c8 	.word	0x080401c8

0808434c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808434c:	b508      	push	{r3, lr}
 808434e:	4b02      	ldr	r3, [pc, #8]	; (8084358 <spark_process+0xc>)
 8084350:	681b      	ldr	r3, [r3, #0]
 8084352:	689b      	ldr	r3, [r3, #8]
 8084354:	9301      	str	r3, [sp, #4]
 8084356:	bd08      	pop	{r3, pc}
 8084358:	080401cc 	.word	0x080401cc

0808435c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808435c:	b508      	push	{r3, lr}
 808435e:	4b02      	ldr	r3, [pc, #8]	; (8084368 <spark_cloud_flag_connect+0xc>)
 8084360:	681b      	ldr	r3, [r3, #0]
 8084362:	68db      	ldr	r3, [r3, #12]
 8084364:	9301      	str	r3, [sp, #4]
 8084366:	bd08      	pop	{r3, pc}
 8084368:	080401cc 	.word	0x080401cc

0808436c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808436c:	b508      	push	{r3, lr}
 808436e:	4b02      	ldr	r3, [pc, #8]	; (8084378 <spark_cloud_flag_connected+0xc>)
 8084370:	681b      	ldr	r3, [r3, #0]
 8084372:	695b      	ldr	r3, [r3, #20]
 8084374:	9301      	str	r3, [sp, #4]
 8084376:	bd08      	pop	{r3, pc}
 8084378:	080401cc 	.word	0x080401cc

0808437c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808437c:	b508      	push	{r3, lr}
 808437e:	4b02      	ldr	r3, [pc, #8]	; (8084388 <spark_send_event+0xc>)
 8084380:	681b      	ldr	r3, [r3, #0]
 8084382:	6a1b      	ldr	r3, [r3, #32]
 8084384:	9301      	str	r3, [sp, #4]
 8084386:	bd08      	pop	{r3, pc}
 8084388:	080401cc 	.word	0x080401cc

0808438c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808438c:	b508      	push	{r3, lr}
 808438e:	4b02      	ldr	r3, [pc, #8]	; (8084398 <spark_sync_time_pending+0xc>)
 8084390:	681b      	ldr	r3, [r3, #0]
 8084392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084394:	9301      	str	r3, [sp, #4]
 8084396:	bd08      	pop	{r3, pc}
 8084398:	080401cc 	.word	0x080401cc

0808439c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808439c:	b508      	push	{r3, lr}
 808439e:	4b02      	ldr	r3, [pc, #8]	; (80843a8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80843a0:	681b      	ldr	r3, [r3, #0]
 80843a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80843a4:	9301      	str	r3, [sp, #4]
 80843a6:	bd08      	pop	{r3, pc}
 80843a8:	080401cc 	.word	0x080401cc

080843ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80843ac:	b508      	push	{r3, lr}
 80843ae:	4b02      	ldr	r3, [pc, #8]	; (80843b8 <malloc+0xc>)
 80843b0:	681b      	ldr	r3, [r3, #0]
 80843b2:	681b      	ldr	r3, [r3, #0]
 80843b4:	9301      	str	r3, [sp, #4]
 80843b6:	bd08      	pop	{r3, pc}
 80843b8:	080401a0 	.word	0x080401a0

080843bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80843bc:	b508      	push	{r3, lr}
 80843be:	4b02      	ldr	r3, [pc, #8]	; (80843c8 <free+0xc>)
 80843c0:	681b      	ldr	r3, [r3, #0]
 80843c2:	685b      	ldr	r3, [r3, #4]
 80843c4:	9301      	str	r3, [sp, #4]
 80843c6:	bd08      	pop	{r3, pc}
 80843c8:	080401a0 	.word	0x080401a0

080843cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80843cc:	b508      	push	{r3, lr}
 80843ce:	4b02      	ldr	r3, [pc, #8]	; (80843d8 <realloc+0xc>)
 80843d0:	681b      	ldr	r3, [r3, #0]
 80843d2:	689b      	ldr	r3, [r3, #8]
 80843d4:	9301      	str	r3, [sp, #4]
 80843d6:	bd08      	pop	{r3, pc}
 80843d8:	080401a0 	.word	0x080401a0

080843dc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80843dc:	b508      	push	{r3, lr}
 80843de:	4b02      	ldr	r3, [pc, #8]	; (80843e8 <siprintf+0xc>)
 80843e0:	681b      	ldr	r3, [r3, #0]
 80843e2:	691b      	ldr	r3, [r3, #16]
 80843e4:	9301      	str	r3, [sp, #4]
 80843e6:	bd08      	pop	{r3, pc}
 80843e8:	080401a0 	.word	0x080401a0

080843ec <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80843ec:	b508      	push	{r3, lr}
 80843ee:	4b02      	ldr	r3, [pc, #8]	; (80843f8 <siscanf+0xc>)
 80843f0:	681b      	ldr	r3, [r3, #0]
 80843f2:	699b      	ldr	r3, [r3, #24]
 80843f4:	9301      	str	r3, [sp, #4]
 80843f6:	bd08      	pop	{r3, pc}
 80843f8:	080401a0 	.word	0x080401a0

080843fc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80843fc:	b508      	push	{r3, lr}
 80843fe:	4b02      	ldr	r3, [pc, #8]	; (8084408 <snprintf+0xc>)
 8084400:	681b      	ldr	r3, [r3, #0]
 8084402:	69db      	ldr	r3, [r3, #28]
 8084404:	9301      	str	r3, [sp, #4]
 8084406:	bd08      	pop	{r3, pc}
 8084408:	080401a0 	.word	0x080401a0

0808440c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 808440c:	b508      	push	{r3, lr}
 808440e:	4b02      	ldr	r3, [pc, #8]	; (8084418 <sniprintf+0xc>)
 8084410:	681b      	ldr	r3, [r3, #0]
 8084412:	6a1b      	ldr	r3, [r3, #32]
 8084414:	9301      	str	r3, [sp, #4]
 8084416:	bd08      	pop	{r3, pc}
 8084418:	080401a0 	.word	0x080401a0

0808441c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808441c:	b508      	push	{r3, lr}
 808441e:	4b02      	ldr	r3, [pc, #8]	; (8084428 <vsnprintf+0xc>)
 8084420:	681b      	ldr	r3, [r3, #0]
 8084422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084424:	9301      	str	r3, [sp, #4]
 8084426:	bd08      	pop	{r3, pc}
 8084428:	080401a0 	.word	0x080401a0

0808442c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808442c:	b508      	push	{r3, lr}
 808442e:	4b02      	ldr	r3, [pc, #8]	; (8084438 <abort+0xc>)
 8084430:	681b      	ldr	r3, [r3, #0]
 8084432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8084434:	9301      	str	r3, [sp, #4]
 8084436:	bd08      	pop	{r3, pc}
 8084438:	080401a0 	.word	0x080401a0

0808443c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808443c:	b508      	push	{r3, lr}
 808443e:	4b02      	ldr	r3, [pc, #8]	; (8084448 <_malloc_r+0xc>)
 8084440:	681b      	ldr	r3, [r3, #0]
 8084442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084444:	9301      	str	r3, [sp, #4]
 8084446:	bd08      	pop	{r3, pc}
 8084448:	080401a0 	.word	0x080401a0

0808444c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 808444c:	b510      	push	{r4, lr}
 808444e:	4b04      	ldr	r3, [pc, #16]	; (8084460 <_ZN8SPIClassD1Ev+0x14>)
 8084450:	4604      	mov	r4, r0
 8084452:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8084454:	68c0      	ldr	r0, [r0, #12]
 8084456:	b108      	cbz	r0, 808445c <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 8084458:	f7ff fdf4 	bl	8084044 <os_mutex_recursive_destroy>
 808445c:	4620      	mov	r0, r4
 808445e:	bd10      	pop	{r4, pc}
 8084460:	0808a80c 	.word	0x0808a80c

08084464 <_ZN8SPIClassD0Ev>:
 8084464:	b510      	push	{r4, lr}
 8084466:	4604      	mov	r4, r0
 8084468:	f7ff fff0 	bl	808444c <_ZN8SPIClassD1Ev>
 808446c:	4620      	mov	r0, r4
 808446e:	2110      	movs	r1, #16
 8084470:	f001 fd64 	bl	8085f3c <_ZdlPvj>
 8084474:	4620      	mov	r0, r4
 8084476:	bd10      	pop	{r4, pc}

08084478 <_ZN14RecursiveMutex4lockEv>:
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 8084478:	6800      	ldr	r0, [r0, #0]
 808447a:	f7ff bdeb 	b.w	8084054 <os_mutex_recursive_lock>

0808447e <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808447e:	6800      	ldr	r0, [r0, #0]
 8084480:	f7ff bdf0 	b.w	8084064 <os_mutex_recursive_unlock>

08084484 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8084484:	b570      	push	{r4, r5, r6, lr}
 8084486:	4604      	mov	r4, r0
 8084488:	460e      	mov	r6, r1
 808448a:	4b07      	ldr	r3, [pc, #28]	; (80844a8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808448c:	2500      	movs	r5, #0
 808448e:	6003      	str	r3, [r0, #0]
 8084490:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 8084494:	f7ff fdce 	bl	8084034 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8084498:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 808449a:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 808449c:	f7ff fd4a 	bl	8083f34 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80844a0:	60a5      	str	r5, [r4, #8]
}
 80844a2:	4620      	mov	r0, r4
 80844a4:	bd70      	pop	{r4, r5, r6, pc}
 80844a6:	bf00      	nop
 80844a8:	0808a80c 	.word	0x0808a80c

080844ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80844ac:	b538      	push	{r3, r4, r5, lr}
 80844ae:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80844b0:	f100 040c 	add.w	r4, r0, #12
 80844b4:	4620      	mov	r0, r4
 80844b6:	f7ff ffdf 	bl	8084478 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80844ba:	7928      	ldrb	r0, [r5, #4]
 80844bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80844c0:	f7ff fd28 	bl	8083f14 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80844c4:	4620      	mov	r0, r4
 80844c6:	f7ff ffda 	bl	808447e <_ZN14RecursiveMutex6unlockEv>
 80844ca:	bd38      	pop	{r3, r4, r5, pc}

080844cc <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80844cc:	b508      	push	{r3, lr}
 80844ce:	300c      	adds	r0, #12
 80844d0:	f7ff ffd5 	bl	808447e <_ZN14RecursiveMutex6unlockEv>
 80844d4:	bd08      	pop	{r3, pc}
	...

080844d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80844d8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80844da:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80844dc:	6018      	str	r0, [r3, #0]
 80844de:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80844e0:	6818      	ldr	r0, [r3, #0]
 80844e2:	b2e5      	uxtb	r5, r4
 80844e4:	4288      	cmp	r0, r1
 80844e6:	d906      	bls.n	80844f6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80844e8:	3401      	adds	r4, #1
 80844ea:	2c08      	cmp	r4, #8
 80844ec:	d002      	beq.n	80844f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80844ee:	0840      	lsrs	r0, r0, #1
 80844f0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80844f2:	e7f5      	b.n	80844e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80844f4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80844f6:	4b02      	ldr	r3, [pc, #8]	; (8084500 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80844f8:	5d5b      	ldrb	r3, [r3, r5]
 80844fa:	7013      	strb	r3, [r2, #0]
 80844fc:	bd30      	pop	{r4, r5, pc}
 80844fe:	bf00      	nop
 8084500:	0808a814 	.word	0x0808a814

08084504 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 8084504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8084508:	4680      	mov	r8, r0
 808450a:	b08f      	sub	sp, #60	; 0x3c
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 808450c:	300c      	adds	r0, #12
 808450e:	460e      	mov	r6, r1
 8084510:	f7ff ffb2 	bl	8084478 <_ZN14RecursiveMutex4lockEv>
    // Lock peripheral
    CHECK(lock());

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
 8084514:	f898 4004 	ldrb.w	r4, [r8, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 8084518:	2214      	movs	r2, #20
 808451a:	2100      	movs	r1, #0
 808451c:	a809      	add	r0, sp, #36	; 0x24
 808451e:	f003 f807 	bl	8087530 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8084522:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 8084524:	4620      	mov	r0, r4
 8084526:	2200      	movs	r2, #0
 8084528:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 808452a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
 808452e:	f7ff fd11 	bl	8083f54 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
 8084532:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 8084536:	b14c      	cbz	r4, 808454c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 8084538:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 808453c:	b92d      	cbnz	r5, 808454a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 808453e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8084540:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8084544:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 8084548:	e003      	b.n	8084552 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 808454a:	2400      	movs	r4, #0
 808454c:	46a1      	mov	r9, r4
 808454e:	4627      	mov	r7, r4
 8084550:	2501      	movs	r5, #1
 8084552:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8084554:	b10d      	cbz	r5, 808455a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 8084556:	2b00      	cmp	r3, #0
 8084558:	d13f      	bne.n	80845da <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
      return true;

    if (default_ == other.default_ &&
 808455a:	429d      	cmp	r5, r3
 808455c:	d10b      	bne.n	8084576 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 808455e:	68b2      	ldr	r2, [r6, #8]
 8084560:	42ba      	cmp	r2, r7
 8084562:	d108      	bne.n	8084576 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8084564:	f88d 9020 	strb.w	r9, [sp, #32]
 8084568:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 808456c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8084570:	89b2      	ldrh	r2, [r6, #12]
 8084572:	4291      	cmp	r1, r2
 8084574:	d031      	beq.n	80845da <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
 8084576:	b13b      	cbz	r3, 8084588 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
 8084578:	2300      	movs	r3, #0
 808457a:	f898 0004 	ldrb.w	r0, [r8, #4]
 808457e:	9301      	str	r3, [sp, #4]
 8084580:	9300      	str	r3, [sp, #0]
 8084582:	461a      	mov	r2, r3
 8084584:	2101      	movs	r1, #1
 8084586:	e016      	b.n	80845b6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb2>
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
 8084588:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
 808458c:	68b1      	ldr	r1, [r6, #8]
 808458e:	ab04      	add	r3, sp, #16
 8084590:	f10d 020f 	add.w	r2, sp, #15
 8084594:	980a      	ldr	r0, [sp, #40]	; 0x28
 8084596:	f7ff ff9f 	bl	80844d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 808459a:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 808459c:	b105      	cbz	r5, 80845a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x9c>
 808459e:	b9c9      	cbnz	r1, 80845d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd0>
      return true;

    if (default_ == other.default_ &&
 80845a0:	42a9      	cmp	r1, r5
 80845a2:	d00b      	beq.n	80845bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb8>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
 80845a4:	2400      	movs	r4, #0
 80845a6:	9401      	str	r4, [sp, #4]
 80845a8:	7b74      	ldrb	r4, [r6, #13]
 80845aa:	7b33      	ldrb	r3, [r6, #12]
 80845ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80845b0:	f898 0004 	ldrb.w	r0, [r8, #4]
 80845b4:	9400      	str	r4, [sp, #0]
 80845b6:	f7ff fce5 	bl	8083f84 <HAL_SPI_Set_Settings>
 80845ba:	e00e      	b.n	80845da <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
 80845bc:	68b3      	ldr	r3, [r6, #8]
 80845be:	42bb      	cmp	r3, r7
 80845c0:	d3f0      	bcc.n	80845a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80845c2:	f88d 9020 	strb.w	r9, [sp, #32]
 80845c6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80845ca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80845ce:	89b3      	ldrh	r3, [r6, #12]
 80845d0:	429a      	cmp	r2, r3
 80845d2:	d1e7      	bne.n	80845a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80845d4:	9b04      	ldr	r3, [sp, #16]
 80845d6:	42bb      	cmp	r3, r7
 80845d8:	d1e4      	bne.n	80845a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            }
        }
    }

    return 0;
}
 80845da:	2000      	movs	r0, #0
 80845dc:	b00f      	add	sp, #60	; 0x3c
 80845de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080845e2 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80845e2:	b570      	push	{r4, r5, r6, lr}
 80845e4:	4605      	mov	r5, r0
 80845e6:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80845e8:	f100 040c 	add.w	r4, r0, #12
 80845ec:	4620      	mov	r0, r4
 80845ee:	f7ff ff43 	bl	8084478 <_ZN14RecursiveMutex4lockEv>
    uint16_t result = 0;
    if (!lock())
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
 80845f2:	4631      	mov	r1, r6
 80845f4:	7928      	ldrb	r0, [r5, #4]
 80845f6:	f7ff fc95 	bl	8083f24 <HAL_SPI_Send_Receive_Data>
 80845fa:	4605      	mov	r5, r0
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80845fc:	4620      	mov	r0, r4
 80845fe:	f7ff ff3e 	bl	808447e <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }
    return static_cast<byte>(result);
}
 8084602:	b2e8      	uxtb	r0, r5
 8084604:	bd70      	pop	{r4, r5, r6, pc}

08084606 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8084606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808460a:	4604      	mov	r4, r0
 808460c:	460f      	mov	r7, r1
 808460e:	4690      	mov	r8, r2
 8084610:	4699      	mov	r9, r3
 8084612:	b087      	sub	sp, #28
 8084614:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 8084616:	f100 050c 	add.w	r5, r0, #12
 808461a:	4628      	mov	r0, r5
 808461c:	f7ff ff2c 	bl	8084478 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8084620:	7920      	ldrb	r0, [r4, #4]
 8084622:	9600      	str	r6, [sp, #0]
 8084624:	464b      	mov	r3, r9
 8084626:	4642      	mov	r2, r8
 8084628:	4639      	mov	r1, r7
 808462a:	f7ff fc9b 	bl	8083f64 <HAL_SPI_DMA_Transfer>
        if (user_callback == NULL)
 808462e:	b93e      	cbnz	r6, 8084640 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x3a>
        {
            HAL_SPI_TransferStatus st;
            do
            {
                HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8084630:	a902      	add	r1, sp, #8
 8084632:	7920      	ldrb	r0, [r4, #4]
 8084634:	f7ff fc9e 	bl	8083f74 <HAL_SPI_DMA_Transfer_Status>
    {
        HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
        if (user_callback == NULL)
        {
            HAL_SPI_TransferStatus st;
            do
 8084638:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808463c:	07db      	lsls	r3, r3, #31
 808463e:	d4f7      	bmi.n	8084630 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x2a>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 8084640:	4628      	mov	r0, r5
 8084642:	f7ff ff1c 	bl	808447e <_ZN14RecursiveMutex6unlockEv>
                HAL_SPI_DMA_Transfer_Status(_spi, &st);
            } while (st.transfer_ongoing);
        }
        unlock();
    }
}
 8084646:	b007      	add	sp, #28
 8084648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808464c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 808464c:	7900      	ldrb	r0, [r0, #4]
 808464e:	f7ff bc79 	b.w	8083f44 <HAL_SPI_Is_Enabled>

08084652 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8084652:	b510      	push	{r4, lr}
 8084654:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8084656:	6800      	ldr	r0, [r0, #0]
 8084658:	b118      	cbz	r0, 8084662 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 808465a:	f7ff feaf 	bl	80843bc <free>
            wakeupSource_ = nullptr;
 808465e:	2300      	movs	r3, #0
 8084660:	6023      	str	r3, [r4, #0]
 8084662:	bd10      	pop	{r4, pc}

08084664 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084664:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8084666:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808466a:	460d      	mov	r5, r1
        error_ = result.error_;
 808466c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808466e:	460b      	mov	r3, r1
 8084670:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8084674:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8084676:	f8c0 2006 	str.w	r2, [r0, #6]
 808467a:	889b      	ldrh	r3, [r3, #4]
 808467c:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808467e:	f7ff ffe8 	bl	8084652 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 8084682:	682b      	ldr	r3, [r5, #0]
 8084684:	b113      	cbz	r3, 808468c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8084686:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8084688:	2300      	movs	r3, #0
 808468a:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 808468c:	4620      	mov	r0, r4
 808468e:	bd38      	pop	{r3, r4, r5, pc}

08084690 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8084690:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 8084694:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8084696:	b90b      	cbnz	r3, 808469c <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 8084698:	680a      	ldr	r2, [r1, #0]
 808469a:	b19a      	cbz	r2, 80846c4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 808469c:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 808469e:	b15c      	cbz	r4, 80846b8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 80846a0:	88a2      	ldrh	r2, [r4, #4]
 80846a2:	2a01      	cmp	r2, #1
 80846a4:	d003      	beq.n	80846ae <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 80846a6:	2a04      	cmp	r2, #4
 80846a8:	d106      	bne.n	80846b8 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 80846aa:	2202      	movs	r2, #2
 80846ac:	e005      	b.n	80846ba <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80846ae:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 80846b0:	718a      	strb	r2, [r1, #6]
 80846b2:	810b      	strh	r3, [r1, #8]
 80846b4:	814c      	strh	r4, [r1, #10]
                    break;
 80846b6:	e005      	b.n	80846c4 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 80846b8:	2204      	movs	r2, #4
 80846ba:	810b      	strh	r3, [r1, #8]
 80846bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80846c0:	718a      	strb	r2, [r1, #6]
 80846c2:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 80846c4:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80846c8:	6003      	str	r3, [r0, #0]
 80846ca:	888b      	ldrh	r3, [r1, #4]
 80846cc:	8083      	strh	r3, [r0, #4]
    }
 80846ce:	bd10      	pop	{r4, pc}

080846d0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80846d0:	b530      	push	{r4, r5, lr}
 80846d2:	4604      	mov	r4, r0
 80846d4:	b085      	sub	sp, #20
 80846d6:	4608      	mov	r0, r1
 80846d8:	4611      	mov	r1, r2
 80846da:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80846dc:	2300      	movs	r3, #0
 80846de:	f7ff fda9 	bl	8084234 <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 80846e2:	2300      	movs	r3, #0
 80846e4:	9301      	str	r3, [sp, #4]
 80846e6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80846ea:	f88d 300a 	strb.w	r3, [sp, #10]
 80846ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 80846f2:	4d09      	ldr	r5, [pc, #36]	; (8084718 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 80846f4:	a901      	add	r1, sp, #4
 80846f6:	f8ad 000c 	strh.w	r0, [sp, #12]
 80846fa:	4628      	mov	r0, r5
 80846fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8084700:	f7ff ffb0 	bl	8084664 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8084704:	a801      	add	r0, sp, #4
 8084706:	f7ff ffa4 	bl	8084652 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 808470a:	4620      	mov	r0, r4
 808470c:	4629      	mov	r1, r5
 808470e:	f7ff ffbf 	bl	8084690 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8084712:	4620      	mov	r0, r4
 8084714:	b005      	add	sp, #20
 8084716:	bd30      	pop	{r4, r5, pc}
 8084718:	20000340 	.word	0x20000340

0808471c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808471c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8084720:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8084722:	4c08      	ldr	r4, [pc, #32]	; (8084744 <_GLOBAL__sub_I_System+0x28>)
 8084724:	2000      	movs	r0, #0
 8084726:	6020      	str	r0, [r4, #0]
 8084728:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808472a:	71a0      	strb	r0, [r4, #6]
 808472c:	8120      	strh	r0, [r4, #8]
 808472e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084730:	f7ff fd70 	bl	8084214 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8084734:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8084736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 808473a:	4a03      	ldr	r2, [pc, #12]	; (8084748 <_GLOBAL__sub_I_System+0x2c>)
 808473c:	4903      	ldr	r1, [pc, #12]	; (808474c <_GLOBAL__sub_I_System+0x30>)
 808473e:	f001 bbef 	b.w	8085f20 <__aeabi_atexit>
 8084742:	bf00      	nop
 8084744:	20000340 	.word	0x20000340
 8084748:	20000140 	.word	0x20000140
 808474c:	08080a41 	.word	0x08080a41

08084750 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8084750:	b510      	push	{r4, lr}
 8084752:	4604      	mov	r4, r0
{
	free(buffer);
 8084754:	6800      	ldr	r0, [r0, #0]
 8084756:	f7ff fe31 	bl	80843bc <free>
}
 808475a:	4620      	mov	r0, r4
 808475c:	bd10      	pop	{r4, pc}

0808475e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808475e:	b510      	push	{r4, lr}
 8084760:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8084762:	6800      	ldr	r0, [r0, #0]
 8084764:	b108      	cbz	r0, 808476a <_ZN6String10invalidateEv+0xc>
 8084766:	f7ff fe29 	bl	80843bc <free>
	buffer = NULL;
 808476a:	2300      	movs	r3, #0
 808476c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 808476e:	60a3      	str	r3, [r4, #8]
 8084770:	6063      	str	r3, [r4, #4]
 8084772:	bd10      	pop	{r4, pc}

08084774 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8084774:	b538      	push	{r3, r4, r5, lr}
 8084776:	4604      	mov	r4, r0
 8084778:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808477a:	6800      	ldr	r0, [r0, #0]
 808477c:	3101      	adds	r1, #1
 808477e:	f7ff fe25 	bl	80843cc <realloc>
	if (newbuffer) {
 8084782:	b110      	cbz	r0, 808478a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8084784:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8084788:	2001      	movs	r0, #1
	}
	return 0;
}
 808478a:	bd38      	pop	{r3, r4, r5, pc}

0808478c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808478c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808478e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8084790:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8084792:	b113      	cbz	r3, 808479a <_ZN6String7reserveEj+0xe>
 8084794:	6843      	ldr	r3, [r0, #4]
 8084796:	428b      	cmp	r3, r1
 8084798:	d207      	bcs.n	80847aa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808479a:	4620      	mov	r0, r4
 808479c:	f7ff ffea 	bl	8084774 <_ZN6String12changeBufferEj>
 80847a0:	b120      	cbz	r0, 80847ac <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80847a2:	68a3      	ldr	r3, [r4, #8]
 80847a4:	b90b      	cbnz	r3, 80847aa <_ZN6String7reserveEj+0x1e>
 80847a6:	6822      	ldr	r2, [r4, #0]
 80847a8:	7013      	strb	r3, [r2, #0]
 80847aa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80847ac:	bd10      	pop	{r4, pc}

080847ae <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80847ae:	b570      	push	{r4, r5, r6, lr}
 80847b0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80847b2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80847b4:	4604      	mov	r4, r0
 80847b6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80847b8:	f7ff ffe8 	bl	808478c <_ZN6String7reserveEj>
 80847bc:	b918      	cbnz	r0, 80847c6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80847be:	4620      	mov	r0, r4
 80847c0:	f7ff ffcd 	bl	808475e <_ZN6String10invalidateEv>
		return *this;
 80847c4:	e009      	b.n	80847da <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80847c6:	462a      	mov	r2, r5
 80847c8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80847ca:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80847cc:	6820      	ldr	r0, [r4, #0]
 80847ce:	f002 fea4 	bl	808751a <memcpy>
	buffer[len] = 0;
 80847d2:	6822      	ldr	r2, [r4, #0]
 80847d4:	68a3      	ldr	r3, [r4, #8]
 80847d6:	2100      	movs	r1, #0
 80847d8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80847da:	4620      	mov	r0, r4
 80847dc:	bd70      	pop	{r4, r5, r6, pc}

080847de <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80847de:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80847e0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80847e2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80847e4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80847e6:	6043      	str	r3, [r0, #4]
	len = 0;
 80847e8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80847ea:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80847ec:	460d      	mov	r5, r1
 80847ee:	b139      	cbz	r1, 8084800 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80847f0:	4608      	mov	r0, r1
 80847f2:	f003 fc0f 	bl	8088014 <strlen>
 80847f6:	4629      	mov	r1, r5
 80847f8:	4602      	mov	r2, r0
 80847fa:	4620      	mov	r0, r4
 80847fc:	f7ff ffd7 	bl	80847ae <_ZN6String4copyEPKcj>
}
 8084800:	4620      	mov	r0, r4
 8084802:	bd38      	pop	{r3, r4, r5, pc}

08084804 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8084804:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8084806:	b510      	push	{r4, lr}
 8084808:	460b      	mov	r3, r1
 808480a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808480c:	d007      	beq.n	808481e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808480e:	6809      	ldr	r1, [r1, #0]
 8084810:	b119      	cbz	r1, 808481a <_ZN6StringaSERKS_+0x16>
 8084812:	689a      	ldr	r2, [r3, #8]
 8084814:	f7ff ffcb 	bl	80847ae <_ZN6String4copyEPKcj>
 8084818:	e001      	b.n	808481e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808481a:	f7ff ffa0 	bl	808475e <_ZN6String10invalidateEv>

	return *this;
}
 808481e:	4620      	mov	r0, r4
 8084820:	bd10      	pop	{r4, pc}

08084822 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8084822:	b510      	push	{r4, lr}
 8084824:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8084826:	2300      	movs	r3, #0
 8084828:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808482a:	6043      	str	r3, [r0, #4]
	len = 0;
 808482c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808482e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8084830:	f7ff ffe8 	bl	8084804 <_ZN6StringaSERKS_>
}
 8084834:	4620      	mov	r0, r4
 8084836:	bd10      	pop	{r4, pc}

08084838 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8084838:	b538      	push	{r3, r4, r5, lr}
 808483a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808483c:	460c      	mov	r4, r1
 808483e:	b141      	cbz	r1, 8084852 <_ZN6StringaSEPKc+0x1a>
 8084840:	4608      	mov	r0, r1
 8084842:	f003 fbe7 	bl	8088014 <strlen>
 8084846:	4621      	mov	r1, r4
 8084848:	4602      	mov	r2, r0
 808484a:	4628      	mov	r0, r5
 808484c:	f7ff ffaf 	bl	80847ae <_ZN6String4copyEPKcj>
 8084850:	e001      	b.n	8084856 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8084852:	f7ff ff84 	bl	808475e <_ZN6String10invalidateEv>

	return *this;
}
 8084856:	4628      	mov	r0, r5
 8084858:	bd38      	pop	{r3, r4, r5, pc}

0808485a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808485a:	b570      	push	{r4, r5, r6, lr}
 808485c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808485e:	460e      	mov	r6, r1
 8084860:	b909      	cbnz	r1, 8084866 <_ZN6String6concatEPKcj+0xc>
 8084862:	2000      	movs	r0, #0
 8084864:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8084866:	b16a      	cbz	r2, 8084884 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8084868:	6883      	ldr	r3, [r0, #8]
 808486a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 808486c:	4629      	mov	r1, r5
 808486e:	f7ff ff8d 	bl	808478c <_ZN6String7reserveEj>
 8084872:	2800      	cmp	r0, #0
 8084874:	d0f5      	beq.n	8084862 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8084876:	6820      	ldr	r0, [r4, #0]
 8084878:	68a3      	ldr	r3, [r4, #8]
 808487a:	4631      	mov	r1, r6
 808487c:	4418      	add	r0, r3
 808487e:	f002 fe91 	bl	80875a4 <strcpy>
	len = newlen;
 8084882:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8084884:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8084886:	bd70      	pop	{r4, r5, r6, pc}

08084888 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 8084888:	688a      	ldr	r2, [r1, #8]
 808488a:	6809      	ldr	r1, [r1, #0]
 808488c:	f7ff bfe5 	b.w	808485a <_ZN6String6concatEPKcj>

08084890 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 8084890:	b538      	push	{r3, r4, r5, lr}
 8084892:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8084894:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8084896:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 8084898:	b141      	cbz	r1, 80848ac <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808489a:	f003 fbbb 	bl	8088014 <strlen>
 808489e:	4621      	mov	r1, r4
 80848a0:	4602      	mov	r2, r0
 80848a2:	4628      	mov	r0, r5
}
 80848a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 80848a8:	f7ff bfd7 	b.w	808485a <_ZN6String6concatEPKcj>
}
 80848ac:	bd38      	pop	{r3, r4, r5, pc}

080848ae <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80848ae:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80848b0:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80848b2:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80848b6:	2201      	movs	r2, #1
 80848b8:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80848ba:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80848be:	f7ff ffcc 	bl	808485a <_ZN6String6concatEPKcj>
}
 80848c2:	b003      	add	sp, #12
 80848c4:	f85d fb04 	ldr.w	pc, [sp], #4

080848c8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80848c8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80848ca:	688a      	ldr	r2, [r1, #8]
 80848cc:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80848ce:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80848d0:	f7ff ffc3 	bl	808485a <_ZN6String6concatEPKcj>
 80848d4:	b910      	cbnz	r0, 80848dc <_ZplRK15StringSumHelperRK6String+0x14>
 80848d6:	4620      	mov	r0, r4
 80848d8:	f7ff ff41 	bl	808475e <_ZN6String10invalidateEv>
	return a;
}
 80848dc:	4620      	mov	r0, r4
 80848de:	bd10      	pop	{r4, pc}

080848e0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80848e0:	6800      	ldr	r0, [r0, #0]
 80848e2:	b108      	cbz	r0, 80848e8 <_ZNK6String5toIntEv+0x8>
 80848e4:	f002 bcfb 	b.w	80872de <atol>
	return 0;
}
 80848e8:	4770      	bx	lr

080848ea <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 80848ea:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80848ec:	6800      	ldr	r0, [r0, #0]
 80848ee:	b120      	cbz	r0, 80848fa <_ZNK6String7toFloatEv+0x10>
 80848f0:	f002 fcee 	bl	80872d0 <atof>
 80848f4:	f002 f930 	bl	8086b58 <__aeabi_d2f>
 80848f8:	bd08      	pop	{r3, pc}
	return 0;
 80848fa:	2000      	movs	r0, #0
}
 80848fc:	bd08      	pop	{r3, pc}

080848fe <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80848fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084900:	4606      	mov	r6, r0
 8084902:	460d      	mov	r5, r1
 8084904:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8084906:	2400      	movs	r4, #0
  while (size--) {
 8084908:	42bd      	cmp	r5, r7
 808490a:	d00c      	beq.n	8084926 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808490c:	6833      	ldr	r3, [r6, #0]
 808490e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8084912:	689b      	ldr	r3, [r3, #8]
 8084914:	4630      	mov	r0, r6
 8084916:	4798      	blx	r3
     if (chunk>=0)
 8084918:	2800      	cmp	r0, #0
 808491a:	db01      	blt.n	8084920 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808491c:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808491e:	e7f3      	b.n	8084908 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8084920:	2c00      	cmp	r4, #0
 8084922:	bf08      	it	eq
 8084924:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8084926:	4620      	mov	r0, r4
 8084928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808492a <_ZN5Print5printEPKc>:
 808492a:	b508      	push	{r3, lr}
 808492c:	f7fe f996 	bl	8082c5c <_ZN5Print5writeEPKc>
 8084930:	bd08      	pop	{r3, pc}

08084932 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8084932:	6803      	ldr	r3, [r0, #0]
 8084934:	689b      	ldr	r3, [r3, #8]
 8084936:	4718      	bx	r3

08084938 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
 8084938:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808493a:	f7fe f98f 	bl	8082c5c <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
 808493e:	bd08      	pop	{r3, pc}

08084940 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 8084940:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8084942:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8084944:	4605      	mov	r5, r0
  size_t n = print('\r');
 8084946:	f7ff fff4 	bl	8084932 <_ZN5Print5printEc>
  n += print('\n');
 808494a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808494c:	4604      	mov	r4, r0
  n += print('\n');
 808494e:	4628      	mov	r0, r5
 8084950:	f7ff ffef 	bl	8084932 <_ZN5Print5printEc>
  return n;
}
 8084954:	4420      	add	r0, r4
 8084956:	bd38      	pop	{r3, r4, r5, pc}

08084958 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8084958:	b538      	push	{r3, r4, r5, lr}
 808495a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808495c:	f7fe f97e 	bl	8082c5c <_ZN5Print5writeEPKc>
 8084960:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8084962:	4628      	mov	r0, r5
 8084964:	f7ff ffec 	bl	8084940 <_ZN5Print7printlnEv>
  return n;
}
 8084968:	4420      	add	r0, r4
 808496a:	bd38      	pop	{r3, r4, r5, pc}

0808496c <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808496c:	2a01      	cmp	r2, #1
 808496e:	bf98      	it	ls
 8084970:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8084972:	b530      	push	{r4, r5, lr}
 8084974:	460b      	mov	r3, r1
 8084976:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8084978:	2100      	movs	r1, #0
 808497a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808497e:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 8084982:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 8084986:	fb05 3312 	mls	r3, r5, r2, r3
 808498a:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808498c:	2b09      	cmp	r3, #9
 808498e:	bf94      	ite	ls
 8084990:	3330      	addls	r3, #48	; 0x30
 8084992:	3337      	addhi	r3, #55	; 0x37
 8084994:	b2db      	uxtb	r3, r3
 8084996:	4621      	mov	r1, r4
 8084998:	f804 3901 	strb.w	r3, [r4], #-1
 808499c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808499e:	2d00      	cmp	r5, #0
 80849a0:	d1ef      	bne.n	8084982 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80849a2:	f7fe f95b 	bl	8082c5c <_ZN5Print5writeEPKc>
}
 80849a6:	b00b      	add	sp, #44	; 0x2c
 80849a8:	bd30      	pop	{r4, r5, pc}
	...

080849ac <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80849ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80849b0:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80849b2:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80849b4:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80849b6:	4617      	mov	r7, r2
 80849b8:	461e      	mov	r6, r3
 80849ba:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80849be:	f002 f86d 	bl	8086a9c <__aeabi_dcmpun>
 80849c2:	b108      	cbz	r0, 80849c8 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80849c4:	494d      	ldr	r1, [pc, #308]	; (8084afc <_ZN5Print10printFloatEdh+0x150>)
 80849c6:	e012      	b.n	80849ee <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80849c8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80849cc:	f04f 32ff 	mov.w	r2, #4294967295
 80849d0:	4b4b      	ldr	r3, [pc, #300]	; (8084b00 <_ZN5Print10printFloatEdh+0x154>)
 80849d2:	4638      	mov	r0, r7
 80849d4:	4621      	mov	r1, r4
 80849d6:	f002 f861 	bl	8086a9c <__aeabi_dcmpun>
 80849da:	b968      	cbnz	r0, 80849f8 <_ZN5Print10printFloatEdh+0x4c>
 80849dc:	f04f 32ff 	mov.w	r2, #4294967295
 80849e0:	4b47      	ldr	r3, [pc, #284]	; (8084b00 <_ZN5Print10printFloatEdh+0x154>)
 80849e2:	4638      	mov	r0, r7
 80849e4:	4621      	mov	r1, r4
 80849e6:	f002 f83b 	bl	8086a60 <__aeabi_dcmple>
 80849ea:	b928      	cbnz	r0, 80849f8 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80849ec:	4945      	ldr	r1, [pc, #276]	; (8084b04 <_ZN5Print10printFloatEdh+0x158>)
 80849ee:	4640      	mov	r0, r8
 80849f0:	f7fe f934 	bl	8082c5c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80849f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80849f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80849fc:	4b42      	ldr	r3, [pc, #264]	; (8084b08 <_ZN5Print10printFloatEdh+0x15c>)
 80849fe:	4638      	mov	r0, r7
 8084a00:	4631      	mov	r1, r6
 8084a02:	f002 f841 	bl	8086a88 <__aeabi_dcmpgt>
 8084a06:	b108      	cbz	r0, 8084a0c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8084a08:	4940      	ldr	r1, [pc, #256]	; (8084b0c <_ZN5Print10printFloatEdh+0x160>)
 8084a0a:	e7f0      	b.n	80849ee <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8084a0c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8084a10:	4b3f      	ldr	r3, [pc, #252]	; (8084b10 <_ZN5Print10printFloatEdh+0x164>)
 8084a12:	4638      	mov	r0, r7
 8084a14:	4631      	mov	r1, r6
 8084a16:	f002 f819 	bl	8086a4c <__aeabi_dcmplt>
 8084a1a:	2800      	cmp	r0, #0
 8084a1c:	d1f4      	bne.n	8084a08 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8084a1e:	2200      	movs	r2, #0
 8084a20:	2300      	movs	r3, #0
 8084a22:	4638      	mov	r0, r7
 8084a24:	4631      	mov	r1, r6
 8084a26:	f002 f811 	bl	8086a4c <__aeabi_dcmplt>
 8084a2a:	b138      	cbz	r0, 8084a3c <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8084a2c:	212d      	movs	r1, #45	; 0x2d
 8084a2e:	4640      	mov	r0, r8
 8084a30:	f7ff ff7f 	bl	8084932 <_ZN5Print5printEc>
     number = -number;
 8084a34:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8084a38:	4604      	mov	r4, r0
 8084a3a:	e000      	b.n	8084a3e <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8084a3c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8084a3e:	4935      	ldr	r1, [pc, #212]	; (8084b14 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8084a40:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8084a44:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 8084a46:	fa5f f389 	uxtb.w	r3, r9
 8084a4a:	429d      	cmp	r5, r3
 8084a4c:	d906      	bls.n	8084a5c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8084a4e:	2200      	movs	r2, #0
 8084a50:	4b31      	ldr	r3, [pc, #196]	; (8084b18 <_ZN5Print10printFloatEdh+0x16c>)
 8084a52:	f001 feb3 	bl	80867bc <__aeabi_ddiv>
 8084a56:	f109 0901 	add.w	r9, r9, #1
 8084a5a:	e7f4      	b.n	8084a46 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8084a5c:	463a      	mov	r2, r7
 8084a5e:	4633      	mov	r3, r6
 8084a60:	f001 fbd0 	bl	8086204 <__adddf3>
 8084a64:	460f      	mov	r7, r1
 8084a66:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8084a68:	f002 f856 	bl	8086b18 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8084a6c:	220a      	movs	r2, #10
 8084a6e:	4601      	mov	r1, r0
 8084a70:	4681      	mov	r9, r0
 8084a72:	4640      	mov	r0, r8
 8084a74:	f7ff ff7a 	bl	808496c <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 8084a78:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8084a7a:	b3e5      	cbz	r5, 8084af6 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8084a7c:	4648      	mov	r0, r9
 8084a7e:	f001 fcfd 	bl	808647c <__aeabi_ui2d>
 8084a82:	4602      	mov	r2, r0
 8084a84:	460b      	mov	r3, r1
 8084a86:	4630      	mov	r0, r6
 8084a88:	4639      	mov	r1, r7
 8084a8a:	f001 fbb9 	bl	8086200 <__aeabi_dsub>
 8084a8e:	4606      	mov	r6, r0
 8084a90:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8084a92:	4640      	mov	r0, r8
 8084a94:	4921      	ldr	r1, [pc, #132]	; (8084b1c <_ZN5Print10printFloatEdh+0x170>)
 8084a96:	f7fe f8e1 	bl	8082c5c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8084a9a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8084a9c:	2200      	movs	r2, #0
 8084a9e:	4b1e      	ldr	r3, [pc, #120]	; (8084b18 <_ZN5Print10printFloatEdh+0x16c>)
 8084aa0:	4630      	mov	r0, r6
 8084aa2:	4639      	mov	r1, r7
 8084aa4:	f001 fd60 	bl	8086568 <__aeabi_dmul>
 8084aa8:	4606      	mov	r6, r0
 8084aaa:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 8084aac:	f002 f80c 	bl	8086ac8 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8084ab0:	f1b0 0a00 	subs.w	sl, r0, #0
 8084ab4:	da07      	bge.n	8084ac6 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 8084ab6:	212d      	movs	r1, #45	; 0x2d
 8084ab8:	4640      	mov	r0, r8
 8084aba:	f7ff ff3a 	bl	8084932 <_ZN5Print5printEc>
            val = -n;
 8084abe:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 8084ac2:	4681      	mov	r9, r0
 8084ac4:	e002      	b.n	8084acc <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 8084ac6:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 8084ac8:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8084acc:	220a      	movs	r2, #10
 8084ace:	4640      	mov	r0, r8
 8084ad0:	f7ff ff4c 	bl	808496c <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 8084ad4:	4448      	add	r0, r9
 8084ad6:	4404      	add	r4, r0
    remainder -= toPrint;
 8084ad8:	4650      	mov	r0, sl
 8084ada:	f001 fcdf 	bl	808649c <__aeabi_i2d>
 8084ade:	4602      	mov	r2, r0
 8084ae0:	460b      	mov	r3, r1
 8084ae2:	4630      	mov	r0, r6
 8084ae4:	4639      	mov	r1, r7
 8084ae6:	f001 fb8b 	bl	8086200 <__aeabi_dsub>
 8084aea:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8084aec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 8084af0:	4606      	mov	r6, r0
 8084af2:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8084af4:	d1d2      	bne.n	8084a9c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8084af6:	4620      	mov	r0, r4
 8084af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084afc:	0808a81c 	.word	0x0808a81c
 8084b00:	7fefffff 	.word	0x7fefffff
 8084b04:	0808a824 	.word	0x0808a824
 8084b08:	41efffff 	.word	0x41efffff
 8084b0c:	0808a820 	.word	0x0808a820
 8084b10:	c1efffff 	.word	0xc1efffff
 8084b14:	3fe00000 	.word	0x3fe00000
 8084b18:	40240000 	.word	0x40240000
 8084b1c:	0808a7fb 	.word	0x0808a7fb

08084b20 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 8084b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8084b22:	4605      	mov	r5, r0
 8084b24:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 8084b26:	4608      	mov	r0, r1
 8084b28:	f001 fcca 	bl	80864c0 <__aeabi_f2d>
 8084b2c:	b2e4      	uxtb	r4, r4
 8084b2e:	4602      	mov	r2, r0
 8084b30:	9400      	str	r4, [sp, #0]
 8084b32:	460b      	mov	r3, r1
 8084b34:	4628      	mov	r0, r5
 8084b36:	f7ff ff39 	bl	80849ac <_ZN5Print10printFloatEdh>
}
 8084b3a:	b003      	add	sp, #12
 8084b3c:	bd30      	pop	{r4, r5, pc}

08084b3e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8084b3e:	b40c      	push	{r2, r3}
 8084b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8084b44:	b087      	sub	sp, #28
 8084b46:	af00      	add	r7, sp, #0
 8084b48:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8084b4c:	f854 9b04 	ldr.w	r9, [r4], #4
 8084b50:	4605      	mov	r5, r0
 8084b52:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8084b54:	4623      	mov	r3, r4
 8084b56:	464a      	mov	r2, r9
 8084b58:	2114      	movs	r1, #20
 8084b5a:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8084b5c:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8084b5e:	f7ff fc5d 	bl	808441c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8084b62:	2813      	cmp	r0, #19
 8084b64:	d805      	bhi.n	8084b72 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8084b66:	1d39      	adds	r1, r7, #4
 8084b68:	4628      	mov	r0, r5
 8084b6a:	f7fe f877 	bl	8082c5c <_ZN5Print5writeEPKc>
 8084b6e:	4604      	mov	r4, r0
 8084b70:	e013      	b.n	8084b9a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8084b72:	f100 0308 	add.w	r3, r0, #8
 8084b76:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8084b7a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8084b7c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8084b80:	1c41      	adds	r1, r0, #1
 8084b82:	4623      	mov	r3, r4
 8084b84:	464a      	mov	r2, r9
 8084b86:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8084b88:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8084b8a:	f7ff fc47 	bl	808441c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8084b8e:	4669      	mov	r1, sp
 8084b90:	4628      	mov	r0, r5
 8084b92:	f7fe f863 	bl	8082c5c <_ZN5Print5writeEPKc>
 8084b96:	4604      	mov	r4, r0
 8084b98:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8084b9a:	b11e      	cbz	r6, 8084ba4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8084b9c:	4628      	mov	r0, r5
 8084b9e:	f7ff fecf 	bl	8084940 <_ZN5Print7printlnEv>
 8084ba2:	4404      	add	r4, r0
    return n;
}
 8084ba4:	4620      	mov	r0, r4
 8084ba6:	371c      	adds	r7, #28
 8084ba8:	46bd      	mov	sp, r7
 8084baa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8084bae:	b002      	add	sp, #8
 8084bb0:	4770      	bx	lr

08084bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084bb2:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8084bb4:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084bb6:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8084bb8:	b17c      	cbz	r4, 8084bda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8084bba:	6863      	ldr	r3, [r4, #4]
 8084bbc:	3b01      	subs	r3, #1
 8084bbe:	6063      	str	r3, [r4, #4]
 8084bc0:	b95b      	cbnz	r3, 8084bda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8084bc2:	6823      	ldr	r3, [r4, #0]
 8084bc4:	4620      	mov	r0, r4
 8084bc6:	689b      	ldr	r3, [r3, #8]
 8084bc8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8084bca:	68a3      	ldr	r3, [r4, #8]
 8084bcc:	3b01      	subs	r3, #1
 8084bce:	60a3      	str	r3, [r4, #8]
 8084bd0:	b91b      	cbnz	r3, 8084bda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8084bd2:	6823      	ldr	r3, [r4, #0]
 8084bd4:	4620      	mov	r0, r4
 8084bd6:	68db      	ldr	r3, [r3, #12]
 8084bd8:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8084bda:	4628      	mov	r0, r5
 8084bdc:	bd38      	pop	{r3, r4, r5, pc}

08084bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8084bde:	680b      	ldr	r3, [r1, #0]
 8084be0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8084be2:	b113      	cbz	r3, 8084bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8084be4:	685a      	ldr	r2, [r3, #4]
 8084be6:	3201      	adds	r2, #1
 8084be8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8084bea:	4770      	bx	lr

08084bec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8084bec:	4a01      	ldr	r2, [pc, #4]	; (8084bf4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8084bee:	4b02      	ldr	r3, [pc, #8]	; (8084bf8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8084bf0:	601a      	str	r2, [r3, #0]
 8084bf2:	4770      	bx	lr
 8084bf4:	0808a89e 	.word	0x0808a89e
 8084bf8:	2000034c 	.word	0x2000034c

08084bfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8084bfc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8084bfe:	2000      	movs	r0, #0
 8084c00:	f7ff fbc4 	bl	808438c <spark_sync_time_pending>
 8084c04:	b128      	cbz	r0, 8084c12 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8084c06:	f7ff fbb1 	bl	808436c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8084c0a:	f080 0001 	eor.w	r0, r0, #1
 8084c0e:	b2c0      	uxtb	r0, r0
 8084c10:	bd08      	pop	{r3, pc}
 8084c12:	2001      	movs	r0, #1
    }
 8084c14:	bd08      	pop	{r3, pc}
	...

08084c18 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8084c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8084c1a:	4b0e      	ldr	r3, [pc, #56]	; (8084c54 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8084c1c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8084c1e:	681b      	ldr	r3, [r3, #0]
 8084c20:	a802      	add	r0, sp, #8
 8084c22:	4419      	add	r1, r3
 8084c24:	4b0c      	ldr	r3, [pc, #48]	; (8084c58 <_ZN9TimeClass7timeStrEl+0x40>)
 8084c26:	681b      	ldr	r3, [r3, #0]
 8084c28:	4419      	add	r1, r3
 8084c2a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8084c2e:	f002 fb69 	bl	8087304 <localtime>
        char* ascstr = asctime(calendar_time);
 8084c32:	f002 fb11 	bl	8087258 <asctime>
 8084c36:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8084c38:	f003 f9ec 	bl	8088014 <strlen>
        ascstr[len-1] = 0; // remove final newline
 8084c3c:	2300      	movs	r3, #0
 8084c3e:	4428      	add	r0, r5
 8084c40:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8084c44:	4629      	mov	r1, r5
 8084c46:	4620      	mov	r0, r4
 8084c48:	f7ff fdc9 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
}
 8084c4c:	4620      	mov	r0, r4
 8084c4e:	b003      	add	sp, #12
 8084c50:	bd30      	pop	{r4, r5, pc}
 8084c52:	bf00      	nop
 8084c54:	20000358 	.word	0x20000358
 8084c58:	20000354 	.word	0x20000354

08084c5c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8084c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084c60:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8084c62:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8084c64:	4607      	mov	r7, r0
 8084c66:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8084c68:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8084c6a:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8084c6c:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8084c6e:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8084c70:	f003 f9ed 	bl	808804e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8084c74:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8084c76:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8084c78:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8084c7c:	f003 f9ca 	bl	8088014 <strlen>
 8084c80:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8084c82:	b925      	cbnz	r5, 8084c8e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 8084c84:	4924      	ldr	r1, [pc, #144]	; (8084d18 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 8084c86:	a803      	add	r0, sp, #12
 8084c88:	f002 fc8c 	bl	80875a4 <strcpy>
 8084c8c:	e013      	b.n	8084cb6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8084c8e:	213c      	movs	r1, #60	; 0x3c
 8084c90:	fb95 f2f1 	sdiv	r2, r5, r1
 8084c94:	2a00      	cmp	r2, #0
 8084c96:	bfb8      	it	lt
 8084c98:	4252      	neglt	r2, r2
 8084c9a:	fb92 f3f1 	sdiv	r3, r2, r1
 8084c9e:	fb01 2213 	mls	r2, r1, r3, r2
 8084ca2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8084ca6:	9200      	str	r2, [sp, #0]
 8084ca8:	fb95 f3f3 	sdiv	r3, r5, r3
 8084cac:	4a1b      	ldr	r2, [pc, #108]	; (8084d1c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 8084cae:	2110      	movs	r1, #16
 8084cb0:	a803      	add	r0, sp, #12
 8084cb2:	f7ff fba3 	bl	80843fc <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8084cb6:	4625      	mov	r5, r4
 8084cb8:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8084cba:	f108 3aff 	add.w	sl, r8, #4294967295
 8084cbe:	45b2      	cmp	sl, r6
 8084cc0:	d91b      	bls.n	8084cfa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8084cc2:	782b      	ldrb	r3, [r5, #0]
 8084cc4:	2b25      	cmp	r3, #37	; 0x25
 8084cc6:	d116      	bne.n	8084cf6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 8084cc8:	786b      	ldrb	r3, [r5, #1]
 8084cca:	2b7a      	cmp	r3, #122	; 0x7a
 8084ccc:	d113      	bne.n	8084cf6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 8084cce:	a803      	add	r0, sp, #12
 8084cd0:	f003 f9a0 	bl	8088014 <strlen>
 8084cd4:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8084cd6:	4430      	add	r0, r6
 8084cd8:	ebc6 020a 	rsb	r2, r6, sl
 8084cdc:	1ca9      	adds	r1, r5, #2
 8084cde:	4420      	add	r0, r4
 8084ce0:	f002 fc1b 	bl	808751a <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8084ce4:	4642      	mov	r2, r8
 8084ce6:	a903      	add	r1, sp, #12
 8084ce8:	4628      	mov	r0, r5
 8084cea:	f002 fc16 	bl	808751a <memcpy>
            len = strlen(format_str);
 8084cee:	4620      	mov	r0, r4
 8084cf0:	f003 f990 	bl	8088014 <strlen>
 8084cf4:	4680      	mov	r8, r0
 8084cf6:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8084cf8:	e7de      	b.n	8084cb8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 8084cfa:	464b      	mov	r3, r9
 8084cfc:	4622      	mov	r2, r4
 8084cfe:	2132      	movs	r1, #50	; 0x32
 8084d00:	a807      	add	r0, sp, #28
 8084d02:	f002 fcd3 	bl	80876ac <strftime>
    return String(buf);
 8084d06:	a907      	add	r1, sp, #28
 8084d08:	4638      	mov	r0, r7
 8084d0a:	f7ff fd68 	bl	80847de <_ZN6StringC1EPK19__FlashStringHelper>
}
 8084d0e:	4638      	mov	r0, r7
 8084d10:	b024      	add	sp, #144	; 0x90
 8084d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084d16:	bf00      	nop
 8084d18:	0808af41 	.word	0x0808af41
 8084d1c:	0808a8fe 	.word	0x0808a8fe

08084d20 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 8084d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8084d22:	4605      	mov	r5, r0
 8084d24:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 8084d26:	461c      	mov	r4, r3
 8084d28:	b913      	cbnz	r3, 8084d30 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 8084d2a:	4b12      	ldr	r3, [pc, #72]	; (8084d74 <_ZN9TimeClass6formatElPKc+0x54>)
 8084d2c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 8084d2e:	b12c      	cbz	r4, 8084d3c <_ZN9TimeClass6formatElPKc+0x1c>
 8084d30:	4b11      	ldr	r3, [pc, #68]	; (8084d78 <_ZN9TimeClass6formatElPKc+0x58>)
 8084d32:	4620      	mov	r0, r4
 8084d34:	6819      	ldr	r1, [r3, #0]
 8084d36:	f002 fc2b 	bl	8087590 <strcmp>
 8084d3a:	b920      	cbnz	r0, 8084d46 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 8084d3c:	9901      	ldr	r1, [sp, #4]
 8084d3e:	4628      	mov	r0, r5
 8084d40:	f7ff ff6a 	bl	8084c18 <_ZN9TimeClass7timeStrEl>
 8084d44:	e013      	b.n	8084d6e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 8084d46:	4f0d      	ldr	r7, [pc, #52]	; (8084d7c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8084d48:	9a01      	ldr	r2, [sp, #4]
 8084d4a:	683b      	ldr	r3, [r7, #0]
 8084d4c:	4e0c      	ldr	r6, [pc, #48]	; (8084d80 <_ZN9TimeClass6formatElPKc+0x60>)
 8084d4e:	441a      	add	r2, r3
 8084d50:	6833      	ldr	r3, [r6, #0]
 8084d52:	a802      	add	r0, sp, #8
 8084d54:	4413      	add	r3, r2
 8084d56:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 8084d5a:	f002 fad3 	bl	8087304 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8084d5e:	683a      	ldr	r2, [r7, #0]
 8084d60:	6833      	ldr	r3, [r6, #0]
 8084d62:	4601      	mov	r1, r0
 8084d64:	4413      	add	r3, r2
 8084d66:	4628      	mov	r0, r5
 8084d68:	4622      	mov	r2, r4
 8084d6a:	f7ff ff77 	bl	8084c5c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 8084d6e:	4628      	mov	r0, r5
 8084d70:	b003      	add	sp, #12
 8084d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084d74:	20000350 	.word	0x20000350
 8084d78:	2000004c 	.word	0x2000004c
 8084d7c:	20000358 	.word	0x20000358
 8084d80:	20000354 	.word	0x20000354

08084d84 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8084d84:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8084d86:	2000      	movs	r0, #0
 8084d88:	f7ff f92c 	bl	8083fe4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8084d8c:	4604      	mov	r4, r0
 8084d8e:	b968      	cbnz	r0, 8084dac <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8084d90:	f7ff fa38 	bl	8084204 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8084d94:	2801      	cmp	r0, #1
 8084d96:	d10b      	bne.n	8084db0 <_ZN9TimeClass7isValidEv+0x2c>
 8084d98:	4620      	mov	r0, r4
 8084d9a:	f7ff fa6b 	bl	8084274 <system_thread_get_state>
 8084d9e:	b938      	cbnz	r0, 8084db0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8084da0:	f7ff ff2c 	bl	8084bfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8084da4:	b930      	cbnz	r0, 8084db4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8084da6:	f7ff fad1 	bl	808434c <spark_process>
 8084daa:	e7f9      	b.n	8084da0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8084dac:	2001      	movs	r0, #1
 8084dae:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8084db0:	2000      	movs	r0, #0
 8084db2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8084db4:	f7ff ff22 	bl	8084bfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8084db8:	2000      	movs	r0, #0
 8084dba:	f7ff f913 	bl	8083fe4 <HAL_RTC_Time_Is_Valid>
 8084dbe:	3000      	adds	r0, #0
 8084dc0:	bf18      	it	ne
 8084dc2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8084dc4:	bd10      	pop	{r4, pc}

08084dc6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8084dc6:	b508      	push	{r3, lr}
    (void)isValid();
 8084dc8:	f7ff ffdc 	bl	8084d84 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8084dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8084dd0:	f7ff b900 	b.w	8083fd4 <HAL_RTC_Get_UnixTime>

08084dd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8084dd4:	4b02      	ldr	r3, [pc, #8]	; (8084de0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8084dd6:	681a      	ldr	r2, [r3, #0]
 8084dd8:	4b02      	ldr	r3, [pc, #8]	; (8084de4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8084dda:	601a      	str	r2, [r3, #0]
 8084ddc:	4770      	bx	lr
 8084dde:	bf00      	nop
 8084de0:	2000004c 	.word	0x2000004c
 8084de4:	20000350 	.word	0x20000350

08084de8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8084de8:	2100      	movs	r1, #0
 8084dea:	f7ff ba1b 	b.w	8084224 <system_delay_ms>

08084dee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8084dee:	b510      	push	{r4, lr}
 8084df0:	4604      	mov	r4, r0
 8084df2:	f7fb ff17 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
 8084df6:	4620      	mov	r0, r4
 8084df8:	bd10      	pop	{r4, pc}

08084dfa <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8084dfa:	b513      	push	{r0, r1, r4, lr}
 8084dfc:	460b      	mov	r3, r1
 8084dfe:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084e00:	c803      	ldmia	r0, {r0, r1}
 8084e02:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8084e06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8084e0a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8084e0e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8084e12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8084e16:	b002      	add	sp, #8
 8084e18:	bd10      	pop	{r4, pc}
	...

08084e1c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8084e1c:	4803      	ldr	r0, [pc, #12]	; (8084e2c <_GLOBAL__sub_I_RGB+0x10>)
 8084e1e:	2300      	movs	r3, #0
 8084e20:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8084e22:	4a03      	ldr	r2, [pc, #12]	; (8084e30 <_GLOBAL__sub_I_RGB+0x14>)
 8084e24:	4903      	ldr	r1, [pc, #12]	; (8084e34 <_GLOBAL__sub_I_RGB+0x18>)
 8084e26:	f001 b87b 	b.w	8085f20 <__aeabi_atexit>
 8084e2a:	bf00      	nop
 8084e2c:	20000360 	.word	0x20000360
 8084e30:	20000140 	.word	0x20000140
 8084e34:	08084def 	.word	0x08084def

08084e38 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8084e38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8084e3a:	4b18      	ldr	r3, [pc, #96]	; (8084e9c <serialEventRun+0x64>)
 8084e3c:	b133      	cbz	r3, 8084e4c <serialEventRun+0x14>
 8084e3e:	f000 fc27 	bl	8085690 <_Z16_fetch_usbserialv>
 8084e42:	6803      	ldr	r3, [r0, #0]
 8084e44:	691b      	ldr	r3, [r3, #16]
 8084e46:	4798      	blx	r3
 8084e48:	2800      	cmp	r0, #0
 8084e4a:	dc1e      	bgt.n	8084e8a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8084e4c:	4b14      	ldr	r3, [pc, #80]	; (8084ea0 <serialEventRun+0x68>)
 8084e4e:	b133      	cbz	r3, 8084e5e <serialEventRun+0x26>
 8084e50:	f000 fd88 	bl	8085964 <_Z22__fetch_global_Serial1v>
 8084e54:	6803      	ldr	r3, [r0, #0]
 8084e56:	691b      	ldr	r3, [r3, #16]
 8084e58:	4798      	blx	r3
 8084e5a:	2800      	cmp	r0, #0
 8084e5c:	dc18      	bgt.n	8084e90 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8084e5e:	4b11      	ldr	r3, [pc, #68]	; (8084ea4 <serialEventRun+0x6c>)
 8084e60:	b10b      	cbz	r3, 8084e66 <serialEventRun+0x2e>
 8084e62:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8084e66:	4b10      	ldr	r3, [pc, #64]	; (8084ea8 <serialEventRun+0x70>)
 8084e68:	b10b      	cbz	r3, 8084e6e <serialEventRun+0x36>
 8084e6a:	f7fc fbdd 	bl	8081628 <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8084e6e:	4b0f      	ldr	r3, [pc, #60]	; (8084eac <serialEventRun+0x74>)
 8084e70:	b10b      	cbz	r3, 8084e76 <serialEventRun+0x3e>
 8084e72:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8084e76:	4b0e      	ldr	r3, [pc, #56]	; (8084eb0 <serialEventRun+0x78>)
 8084e78:	b17b      	cbz	r3, 8084e9a <serialEventRun+0x62>
 8084e7a:	f000 fc45 	bl	8085708 <_Z17_fetch_usbserial1v>
 8084e7e:	6803      	ldr	r3, [r0, #0]
 8084e80:	691b      	ldr	r3, [r3, #16]
 8084e82:	4798      	blx	r3
 8084e84:	2800      	cmp	r0, #0
 8084e86:	dc06      	bgt.n	8084e96 <serialEventRun+0x5e>
 8084e88:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8084e8a:	f3af 8000 	nop.w
 8084e8e:	e7dd      	b.n	8084e4c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8084e90:	f3af 8000 	nop.w
 8084e94:	e7e3      	b.n	8084e5e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8084e96:	f3af 8000 	nop.w
 8084e9a:	bd08      	pop	{r3, pc}
	...
 8084ea8:	08081629 	.word	0x08081629
	...

08084eb4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8084eb4:	b508      	push	{r3, lr}
	serialEventRun();
 8084eb6:	f7ff ffbf 	bl	8084e38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8084eba:	f7ff f883 	bl	8083fc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084ebe:	4b01      	ldr	r3, [pc, #4]	; (8084ec4 <_post_loop+0x10>)
 8084ec0:	6018      	str	r0, [r3, #0]
 8084ec2:	bd08      	pop	{r3, pc}
 8084ec4:	20000820 	.word	0x20000820

08084ec8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8084ec8:	4802      	ldr	r0, [pc, #8]	; (8084ed4 <_Z33system_initialize_user_backup_ramv+0xc>)
 8084eca:	4a03      	ldr	r2, [pc, #12]	; (8084ed8 <_Z33system_initialize_user_backup_ramv+0x10>)
 8084ecc:	4903      	ldr	r1, [pc, #12]	; (8084edc <_Z33system_initialize_user_backup_ramv+0x14>)
 8084ece:	1a12      	subs	r2, r2, r0
 8084ed0:	f002 bb23 	b.w	808751a <memcpy>
 8084ed4:	40024000 	.word	0x40024000
 8084ed8:	40024004 	.word	0x40024004
 8084edc:	0808b130 	.word	0x0808b130

08084ee0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8084ee0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084ee2:	2300      	movs	r3, #0
 8084ee4:	9300      	str	r3, [sp, #0]
 8084ee6:	461a      	mov	r2, r3
 8084ee8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084eec:	f7ff f9d4 	bl	8084298 <system_ctrl_set_result>
}
 8084ef0:	b003      	add	sp, #12
 8084ef2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084ef8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8084ef8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8084efa:	8843      	ldrh	r3, [r0, #2]
 8084efc:	2b0a      	cmp	r3, #10
 8084efe:	d008      	beq.n	8084f12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8084f00:	2b50      	cmp	r3, #80	; 0x50
 8084f02:	d109      	bne.n	8084f18 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8084f04:	4b09      	ldr	r3, [pc, #36]	; (8084f2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8084f06:	681b      	ldr	r3, [r3, #0]
 8084f08:	b13b      	cbz	r3, 8084f1a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8084f0a:	b003      	add	sp, #12
 8084f0c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8084f10:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8084f12:	f7ff ffe5 	bl	8084ee0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8084f16:	e006      	b.n	8084f26 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8084f18:	2300      	movs	r3, #0
 8084f1a:	9300      	str	r3, [sp, #0]
 8084f1c:	461a      	mov	r2, r3
 8084f1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8084f22:	f7ff f9b9 	bl	8084298 <system_ctrl_set_result>
        break;
    }
}
 8084f26:	b003      	add	sp, #12
 8084f28:	f85d fb04 	ldr.w	pc, [sp], #4
 8084f2c:	20000370 	.word	0x20000370

08084f30 <module_user_init_hook>:

void module_user_init_hook()
{
 8084f30:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8084f32:	4c10      	ldr	r4, [pc, #64]	; (8084f74 <module_user_init_hook+0x44>)
 8084f34:	4d10      	ldr	r5, [pc, #64]	; (8084f78 <module_user_init_hook+0x48>)
 8084f36:	6823      	ldr	r3, [r4, #0]
 8084f38:	42ab      	cmp	r3, r5
 8084f3a:	4b10      	ldr	r3, [pc, #64]	; (8084f7c <module_user_init_hook+0x4c>)
 8084f3c:	bf0c      	ite	eq
 8084f3e:	2201      	moveq	r2, #1
 8084f40:	2200      	movne	r2, #0
 8084f42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8084f44:	d002      	beq.n	8084f4c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8084f46:	f7ff ffbf 	bl	8084ec8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8084f4a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8084f4c:	f7ff f822 	bl	8083f94 <HAL_RNG_GetRandomNumber>
 8084f50:	4604      	mov	r4, r0
    srand(seed);
 8084f52:	f002 faf5 	bl	8087540 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8084f56:	4b0a      	ldr	r3, [pc, #40]	; (8084f80 <module_user_init_hook+0x50>)
 8084f58:	b113      	cbz	r3, 8084f60 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8084f5a:	4620      	mov	r0, r4
 8084f5c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8084f60:	2100      	movs	r1, #0
 8084f62:	4807      	ldr	r0, [pc, #28]	; (8084f80 <module_user_init_hook+0x50>)
 8084f64:	f7ff fa1a 	bl	808439c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8084f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8084f6c:	2100      	movs	r1, #0
 8084f6e:	4805      	ldr	r0, [pc, #20]	; (8084f84 <module_user_init_hook+0x54>)
 8084f70:	f7ff b988 	b.w	8084284 <system_ctrl_set_app_request_handler>
 8084f74:	40024000 	.word	0x40024000
 8084f78:	9a271c1e 	.word	0x9a271c1e
 8084f7c:	20000374 	.word	0x20000374
 8084f80:	00000000 	.word	0x00000000
 8084f84:	08084ef9 	.word	0x08084ef9

08084f88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8084f88:	4770      	bx	lr

08084f8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8084f8a:	2000      	movs	r0, #0
 8084f8c:	4770      	bx	lr

08084f8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8084f8e:	b510      	push	{r4, lr}
 8084f90:	4604      	mov	r4, r0
 8084f92:	2110      	movs	r1, #16
 8084f94:	f000 ffd2 	bl	8085f3c <_ZdlPvj>
 8084f98:	4620      	mov	r0, r4
 8084f9a:	bd10      	pop	{r4, pc}

08084f9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8084f9c:	b508      	push	{r3, lr}
      { delete this; }
 8084f9e:	b108      	cbz	r0, 8084fa4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8084fa0:	f7ff fff5 	bl	8084f8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8084fa4:	bd08      	pop	{r3, pc}

08084fa6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8084fa6:	2200      	movs	r2, #0
 8084fa8:	6002      	str	r2, [r0, #0]
 8084faa:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8084fae:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8084fb0:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8084fb2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8084fb6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8084fb8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8084fba:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8084fbc:	680c      	ldr	r4, [r1, #0]
 8084fbe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8084fc0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8084fc2:	bd10      	pop	{r4, pc}

08084fc4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8084fc4:	b510      	push	{r4, lr}
 8084fc6:	4604      	mov	r4, r0
    free((void*)msg_);
 8084fc8:	6800      	ldr	r0, [r0, #0]
 8084fca:	f7ff f9f7 	bl	80843bc <free>
}
 8084fce:	4620      	mov	r0, r4
 8084fd0:	bd10      	pop	{r4, pc}

08084fd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8084fd2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8084fd4:	68c4      	ldr	r4, [r0, #12]
 8084fd6:	b1f4      	cbz	r4, 8085016 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8084fd8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8084fda:	2b02      	cmp	r3, #2
 8084fdc:	d103      	bne.n	8084fe6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8084fde:	f104 000c 	add.w	r0, r4, #12
 8084fe2:	f7ff ffef 	bl	8084fc4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8084fe6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8084fe8:	b135      	cbz	r5, 8084ff8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8084fea:	4628      	mov	r0, r5
 8084fec:	f7fb fe1a 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
 8084ff0:	2110      	movs	r1, #16
 8084ff2:	4628      	mov	r0, r5
 8084ff4:	f000 ffa2 	bl	8085f3c <_ZdlPvj>
 8084ff8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8084ffa:	b135      	cbz	r5, 808500a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8084ffc:	4628      	mov	r0, r5
 8084ffe:	f7fb fe11 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
 8085002:	2110      	movs	r1, #16
 8085004:	4628      	mov	r0, r5
 8085006:	f000 ff99 	bl	8085f3c <_ZdlPvj>
 808500a:	4620      	mov	r0, r4
 808500c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8085010:	2114      	movs	r1, #20
 8085012:	f000 bf93 	b.w	8085f3c <_ZdlPvj>
 8085016:	bd38      	pop	{r3, r4, r5, pc}

08085018 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8085018:	b513      	push	{r0, r1, r4, lr}
 808501a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808501c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8085020:	2300      	movs	r3, #0
 8085022:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8085024:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8085026:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8085028:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808502a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808502c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808502e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8085030:	f7ff fdbf 	bl	8084bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085034:	4620      	mov	r0, r4
 8085036:	b002      	add	sp, #8
 8085038:	bd10      	pop	{r4, pc}

0808503a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808503a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808503c:	460c      	mov	r4, r1
 808503e:	4606      	mov	r6, r0
 8085040:	460f      	mov	r7, r1
 8085042:	f854 3b04 	ldr.w	r3, [r4], #4
 8085046:	ad02      	add	r5, sp, #8
 8085048:	f845 3d08 	str.w	r3, [r5, #-8]!
 808504c:	4621      	mov	r1, r4
 808504e:	a801      	add	r0, sp, #4
 8085050:	f7ff fdc5 	bl	8084bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8085054:	4629      	mov	r1, r5
 8085056:	4630      	mov	r0, r6
 8085058:	f7ff ffde 	bl	8085018 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808505c:	a801      	add	r0, sp, #4
 808505e:	f7ff fda8 	bl	8084bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8085062:	4620      	mov	r0, r4
 8085064:	f7ff fda5 	bl	8084bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8085068:	4638      	mov	r0, r7
 808506a:	2108      	movs	r1, #8
 808506c:	f000 ff66 	bl	8085f3c <_ZdlPvj>
        return p;
    }
 8085070:	4630      	mov	r0, r6
 8085072:	b003      	add	sp, #12
 8085074:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08085078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8085078:	b538      	push	{r3, r4, r5, lr}
 808507a:	2300      	movs	r3, #0
 808507c:	4604      	mov	r4, r0
 808507e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8085080:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8085082:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8085084:	f7fb f80b 	bl	808009e <_Znwj>
 8085088:	b128      	cbz	r0, 8085096 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808508a:	2301      	movs	r3, #1
 808508c:	6043      	str	r3, [r0, #4]
 808508e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8085090:	4b02      	ldr	r3, [pc, #8]	; (808509c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8085092:	60c5      	str	r5, [r0, #12]
 8085094:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8085096:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8085098:	4620      	mov	r0, r4
 808509a:	bd38      	pop	{r3, r4, r5, pc}
 808509c:	0808a930 	.word	0x0808a930

080850a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80850a0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80850a2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80850a4:	b90a      	cbnz	r2, 80850aa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80850a6:	f000 ff5c 	bl	8085f62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80850aa:	68c3      	ldr	r3, [r0, #12]
    }
 80850ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80850b0:	4718      	bx	r3

080850b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80850b2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80850b4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80850b6:	f100 0110 	add.w	r1, r0, #16
 80850ba:	f7ff fff1 	bl	80850a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80850be:	bd08      	pop	{r3, pc}

080850c0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80850c0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80850c2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80850c4:	b90a      	cbnz	r2, 80850ca <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80850c6:	f000 ff4c 	bl	8085f62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80850ca:	68c3      	ldr	r3, [r0, #12]
    }
 80850cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80850d0:	4718      	bx	r3

080850d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80850d2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80850d4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80850d6:	f100 0110 	add.w	r1, r0, #16
 80850da:	f7ff fff1 	bl	80850c0 <_ZNKSt8functionIFvRKbEEclES1_>
 80850de:	bd08      	pop	{r3, pc}

080850e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80850e0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80850e2:	2300      	movs	r3, #0
 80850e4:	6083      	str	r3, [r0, #8]
 80850e6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80850e8:	4604      	mov	r4, r0
 80850ea:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80850ec:	b12b      	cbz	r3, 80850fa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80850ee:	2202      	movs	r2, #2
 80850f0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80850f2:	68eb      	ldr	r3, [r5, #12]
 80850f4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80850f6:	68ab      	ldr	r3, [r5, #8]
 80850f8:	60a3      	str	r3, [r4, #8]
	}
    }
 80850fa:	4620      	mov	r0, r4
 80850fc:	bd38      	pop	{r3, r4, r5, pc}
	...

08085100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8085100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085102:	b089      	sub	sp, #36	; 0x24
 8085104:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8085106:	4668      	mov	r0, sp
 8085108:	f7ff ff4d 	bl	8084fa6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808510c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8085110:	2300      	movs	r3, #0
 8085112:	f88d 3008 	strb.w	r3, [sp, #8]
 8085116:	e8d4 3f4f 	ldrexb	r3, [r4]
 808511a:	2b00      	cmp	r3, #0
 808511c:	d103      	bne.n	8085126 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808511e:	e8c4 2f41 	strexb	r1, r2, [r4]
 8085122:	2900      	cmp	r1, #0
 8085124:	d1f7      	bne.n	8085116 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8085126:	d002      	beq.n	808512e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8085128:	f88d 3008 	strb.w	r3, [sp, #8]
 808512c:	e063      	b.n	80851f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808512e:	f114 050c 	adds.w	r5, r4, #12
 8085132:	d003      	beq.n	808513c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8085134:	4669      	mov	r1, sp
 8085136:	4628      	mov	r0, r5
 8085138:	f7ff ff35 	bl	8084fa6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808513c:	f3bf 8f5f 	dmb	sy
 8085140:	2301      	movs	r3, #1
 8085142:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8085144:	f3bf 8f5f 	dmb	sy
 8085148:	f104 0308 	add.w	r3, r4, #8
 808514c:	2000      	movs	r0, #0
 808514e:	e853 6f00 	ldrex	r6, [r3]
 8085152:	e843 0200 	strex	r2, r0, [r3]
 8085156:	2a00      	cmp	r2, #0
 8085158:	d1f9      	bne.n	808514e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808515a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808515e:	2e00      	cmp	r6, #0
 8085160:	d049      	beq.n	80851f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8085162:	f7ff f877 	bl	8084254 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8085166:	b120      	cbz	r0, 8085172 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8085168:	4629      	mov	r1, r5
 808516a:	4630      	mov	r0, r6
 808516c:	f7ff ff98 	bl	80850a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8085170:	e03a      	b.n	80851e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8085172:	4631      	mov	r1, r6
 8085174:	a802      	add	r0, sp, #8
 8085176:	f7ff ffb3 	bl	80850e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808517a:	68e0      	ldr	r0, [r4, #12]
 808517c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8085180:	b108      	cbz	r0, 8085186 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8085182:	f002 fa17 	bl	80875b4 <strdup>
 8085186:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8085188:	2010      	movs	r0, #16
 808518a:	f8ad 501c 	strh.w	r5, [sp, #28]
 808518e:	f7fa ff86 	bl	808009e <_Znwj>
 8085192:	4605      	mov	r5, r0
 8085194:	b1e8      	cbz	r0, 80851d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085196:	2700      	movs	r7, #0
 8085198:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808519a:	2018      	movs	r0, #24
 808519c:	f7fa ff7f 	bl	808009e <_Znwj>
 80851a0:	4604      	mov	r4, r0
 80851a2:	b188      	cbz	r0, 80851c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80851a4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80851a6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80851a8:	a802      	add	r0, sp, #8
 80851aa:	f7ff fe26 	bl	8084dfa <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80851ae:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80851b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80851b2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80851b4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80851b6:	9204      	str	r2, [sp, #16]
 80851b8:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80851ba:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80851bc:	60e3      	str	r3, [r4, #12]
 80851be:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80851c2:	9205      	str	r2, [sp, #20]
 80851c4:	f7ff feef 	bl	8084fa6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80851c8:	4b0d      	ldr	r3, [pc, #52]	; (8085200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80851ca:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80851cc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80851ce:	4b0d      	ldr	r3, [pc, #52]	; (8085204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80851d0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80851d2:	a806      	add	r0, sp, #24
 80851d4:	f7ff fef6 	bl	8084fc4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80851d8:	a802      	add	r0, sp, #8
 80851da:	f7fb fd23 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80851de:	2200      	movs	r2, #0
 80851e0:	4629      	mov	r1, r5
 80851e2:	4809      	ldr	r0, [pc, #36]	; (8085208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80851e4:	f7ff f83e 	bl	8084264 <application_thread_invoke>
 80851e8:	4630      	mov	r0, r6
 80851ea:	f7fb fd1b 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80851ee:	2110      	movs	r1, #16
 80851f0:	4630      	mov	r0, r6
 80851f2:	f000 fea3 	bl	8085f3c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80851f6:	4668      	mov	r0, sp
 80851f8:	f7ff fee4 	bl	8084fc4 <_ZN8particle5ErrorD1Ev>
    }
 80851fc:	b009      	add	sp, #36	; 0x24
 80851fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085200:	080850b3 	.word	0x080850b3
 8085204:	08085329 	.word	0x08085329
 8085208:	080859b1 	.word	0x080859b1

0808520c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085210:	b08b      	sub	sp, #44	; 0x2c
 8085212:	4606      	mov	r6, r0
 8085214:	460f      	mov	r7, r1
 8085216:	4690      	mov	r8, r2
 8085218:	4699      	mov	r9, r3
 808521a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808521e:	f7ff f8a5 	bl	808436c <spark_cloud_flag_connected>
 8085222:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8085224:	4683      	mov	fp, r0
 8085226:	bb30      	cbnz	r0, 8085276 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8085228:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808522c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808522e:	a905      	add	r1, sp, #20
 8085230:	4628      	mov	r0, r5
 8085232:	f8ad 3018 	strh.w	r3, [sp, #24]
 8085236:	f7ff feb6 	bl	8084fa6 <_ZN8particle5ErrorC1EOS0_>
 808523a:	2014      	movs	r0, #20
 808523c:	f7fa ff2f 	bl	808009e <_Znwj>
 8085240:	4604      	mov	r4, r0
 8085242:	b158      	cbz	r0, 808525c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8085244:	2302      	movs	r3, #2
 8085246:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8085248:	2301      	movs	r3, #1
 808524a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808524c:	f8c0 b004 	str.w	fp, [r0, #4]
 8085250:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8085254:	4629      	mov	r1, r5
 8085256:	300c      	adds	r0, #12
 8085258:	f7ff fea5 	bl	8084fa6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808525c:	4630      	mov	r0, r6
 808525e:	4621      	mov	r1, r4
 8085260:	f840 4b04 	str.w	r4, [r0], #4
 8085264:	f7ff ff08 	bl	8085078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8085268:	4628      	mov	r0, r5
 808526a:	f7ff feab 	bl	8084fc4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808526e:	a805      	add	r0, sp, #20
 8085270:	f7ff fea8 	bl	8084fc4 <_ZN8particle5ErrorD1Ev>
 8085274:	e052      	b.n	808531c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8085276:	2400      	movs	r4, #0
 8085278:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808527a:	2014      	movs	r0, #20
 808527c:	606c      	str	r4, [r5, #4]
 808527e:	60ac      	str	r4, [r5, #8]
 8085280:	9307      	str	r3, [sp, #28]
 8085282:	f7fa ff0c 	bl	808009e <_Znwj>
 8085286:	4601      	mov	r1, r0
 8085288:	b118      	cbz	r0, 8085292 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808528a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808528c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808528e:	6044      	str	r4, [r0, #4]
 8085290:	6084      	str	r4, [r0, #8]
 8085292:	a804      	add	r0, sp, #16
 8085294:	9103      	str	r1, [sp, #12]
 8085296:	f7ff feef 	bl	8085078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808529a:	4b22      	ldr	r3, [pc, #136]	; (8085324 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808529c:	2008      	movs	r0, #8
 808529e:	9308      	str	r3, [sp, #32]
 80852a0:	f7fa fefd 	bl	808009e <_Znwj>
 80852a4:	4604      	mov	r4, r0
 80852a6:	b128      	cbz	r0, 80852b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80852a8:	9b03      	ldr	r3, [sp, #12]
 80852aa:	a904      	add	r1, sp, #16
 80852ac:	f840 3b04 	str.w	r3, [r0], #4
 80852b0:	f7ff fc95 	bl	8084bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80852b4:	9500      	str	r5, [sp, #0]
 80852b6:	fa5f f38a 	uxtb.w	r3, sl
 80852ba:	464a      	mov	r2, r9
 80852bc:	4641      	mov	r1, r8
 80852be:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80852c0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80852c2:	f7ff f85b 	bl	808437c <spark_send_event>
 80852c6:	b920      	cbnz	r0, 80852d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80852c8:	9b03      	ldr	r3, [sp, #12]
 80852ca:	785b      	ldrb	r3, [r3, #1]
 80852cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80852d0:	b183      	cbz	r3, 80852f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80852d2:	9b03      	ldr	r3, [sp, #12]
 80852d4:	a904      	add	r1, sp, #16
 80852d6:	a806      	add	r0, sp, #24
 80852d8:	9305      	str	r3, [sp, #20]
 80852da:	f7ff fc80 	bl	8084bde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80852de:	a905      	add	r1, sp, #20
 80852e0:	4630      	mov	r0, r6
 80852e2:	f7ff fe99 	bl	8085018 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80852e6:	a806      	add	r0, sp, #24
 80852e8:	f7ff fc63 	bl	8084bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80852ec:	a804      	add	r0, sp, #16
 80852ee:	f7ff fc60 	bl	8084bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80852f2:	e013      	b.n	808531c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80852f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80852f8:	a905      	add	r1, sp, #20
 80852fa:	a803      	add	r0, sp, #12
 80852fc:	9205      	str	r2, [sp, #20]
 80852fe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8085302:	f7ff fefd 	bl	8085100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8085306:	a805      	add	r0, sp, #20
 8085308:	f7ff fe5c 	bl	8084fc4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808530c:	a805      	add	r0, sp, #20
 808530e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8085310:	f7ff fe93 	bl	808503a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8085314:	a806      	add	r0, sp, #24
 8085316:	f7ff fc4c 	bl	8084bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808531a:	e7da      	b.n	80852d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 808531c:	4630      	mov	r0, r6
 808531e:	b00b      	add	sp, #44	; 0x2c
 8085320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085324:	08085499 	.word	0x08085499

08085328 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8085328:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808532a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808532c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808532e:	d006      	beq.n	808533e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8085330:	2a03      	cmp	r2, #3
 8085332:	d017      	beq.n	8085364 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8085334:	2a01      	cmp	r2, #1
 8085336:	d122      	bne.n	808537e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8085338:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808533a:	6003      	str	r3, [r0, #0]
	      break;
 808533c:	e01f      	b.n	808537e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808533e:	2018      	movs	r0, #24
 8085340:	680e      	ldr	r6, [r1, #0]
 8085342:	f7fa feac 	bl	808009e <_Znwj>
 8085346:	4605      	mov	r5, r0
 8085348:	b150      	cbz	r0, 8085360 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808534a:	4631      	mov	r1, r6
 808534c:	f7ff fec8 	bl	80850e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8085350:	6930      	ldr	r0, [r6, #16]
 8085352:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8085356:	b108      	cbz	r0, 808535c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8085358:	f002 f92c 	bl	80875b4 <strdup>
 808535c:	6128      	str	r0, [r5, #16]
 808535e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8085360:	6025      	str	r5, [r4, #0]
 8085362:	e00c      	b.n	808537e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8085364:	6804      	ldr	r4, [r0, #0]
 8085366:	b154      	cbz	r4, 808537e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8085368:	f104 0010 	add.w	r0, r4, #16
 808536c:	f7ff fe2a 	bl	8084fc4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8085370:	4620      	mov	r0, r4
 8085372:	f7fb fc57 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8085376:	2118      	movs	r1, #24
 8085378:	4620      	mov	r0, r4
 808537a:	f000 fddf 	bl	8085f3c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808537e:	2000      	movs	r0, #0
 8085380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085382 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8085382:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085384:	2300      	movs	r3, #0
 8085386:	6083      	str	r3, [r0, #8]
 8085388:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808538a:	4604      	mov	r4, r0
 808538c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808538e:	b12b      	cbz	r3, 808539c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8085390:	2202      	movs	r2, #2
 8085392:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8085394:	68eb      	ldr	r3, [r5, #12]
 8085396:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8085398:	68ab      	ldr	r3, [r5, #8]
 808539a:	60a3      	str	r3, [r4, #8]
	}
    }
 808539c:	4620      	mov	r0, r4
 808539e:	bd38      	pop	{r3, r4, r5, pc}

080853a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80853a0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80853a2:	b570      	push	{r4, r5, r6, lr}
 80853a4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80853a6:	d006      	beq.n	80853b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80853a8:	2a03      	cmp	r2, #3
 80853aa:	d011      	beq.n	80853d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80853ac:	2a01      	cmp	r2, #1
 80853ae:	d118      	bne.n	80853e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80853b0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80853b2:	6003      	str	r3, [r0, #0]
	      break;
 80853b4:	e015      	b.n	80853e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80853b6:	2014      	movs	r0, #20
 80853b8:	680e      	ldr	r6, [r1, #0]
 80853ba:	f7fa fe70 	bl	808009e <_Znwj>
 80853be:	4605      	mov	r5, r0
 80853c0:	b120      	cbz	r0, 80853cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80853c2:	4631      	mov	r1, r6
 80853c4:	f7ff ffdd 	bl	8085382 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80853c8:	7c33      	ldrb	r3, [r6, #16]
 80853ca:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80853cc:	6025      	str	r5, [r4, #0]
 80853ce:	e008      	b.n	80853e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80853d0:	6804      	ldr	r4, [r0, #0]
 80853d2:	b134      	cbz	r4, 80853e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80853d4:	4620      	mov	r0, r4
 80853d6:	f7fb fc25 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80853da:	2114      	movs	r1, #20
 80853dc:	4620      	mov	r0, r4
 80853de:	f000 fdad 	bl	8085f3c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80853e2:	2000      	movs	r0, #0
 80853e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080853e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80853e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80853ea:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80853ec:	f3bf 8f5f 	dmb	sy
 80853f0:	b087      	sub	sp, #28
 80853f2:	2300      	movs	r3, #0
 80853f4:	e850 6f00 	ldrex	r6, [r0]
 80853f8:	e840 3200 	strex	r2, r3, [r0]
 80853fc:	2a00      	cmp	r2, #0
 80853fe:	d1f9      	bne.n	80853f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8085400:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8085404:	2e00      	cmp	r6, #0
 8085406:	d03f      	beq.n	8085488 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8085408:	4618      	mov	r0, r3
 808540a:	f7fe ff23 	bl	8084254 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808540e:	4607      	mov	r7, r0
 8085410:	b120      	cbz	r0, 808541c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8085412:	4621      	mov	r1, r4
 8085414:	4630      	mov	r0, r6
 8085416:	f7ff fe53 	bl	80850c0 <_ZNKSt8functionIFvRKbEEclES1_>
 808541a:	e02e      	b.n	808547a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808541c:	4631      	mov	r1, r6
 808541e:	a801      	add	r0, sp, #4
 8085420:	f7ff ffaf 	bl	8085382 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8085424:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8085426:	2010      	movs	r0, #16
 8085428:	f88d 3014 	strb.w	r3, [sp, #20]
 808542c:	f7fa fe37 	bl	808009e <_Znwj>
 8085430:	4605      	mov	r5, r0
 8085432:	b1d0      	cbz	r0, 808546a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085434:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8085436:	2014      	movs	r0, #20
 8085438:	f7fa fe31 	bl	808009e <_Znwj>
 808543c:	4604      	mov	r4, r0
 808543e:	b178      	cbz	r0, 8085460 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085440:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8085442:	4601      	mov	r1, r0
 8085444:	a801      	add	r0, sp, #4
 8085446:	f7ff fcd8 	bl	8084dfa <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808544a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808544c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808544e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8085450:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8085452:	9203      	str	r2, [sp, #12]
 8085454:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8085456:	60e3      	str	r3, [r4, #12]
 8085458:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808545c:	9204      	str	r2, [sp, #16]
 808545e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8085460:	4b0a      	ldr	r3, [pc, #40]	; (808548c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8085462:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8085464:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8085466:	4b0a      	ldr	r3, [pc, #40]	; (8085490 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8085468:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808546a:	a801      	add	r0, sp, #4
 808546c:	f7fb fbda 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8085470:	2200      	movs	r2, #0
 8085472:	4629      	mov	r1, r5
 8085474:	4807      	ldr	r0, [pc, #28]	; (8085494 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8085476:	f7fe fef5 	bl	8084264 <application_thread_invoke>
 808547a:	4630      	mov	r0, r6
 808547c:	f7fb fbd2 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8085480:	2110      	movs	r1, #16
 8085482:	4630      	mov	r0, r6
 8085484:	f000 fd5a 	bl	8085f3c <_ZdlPvj>
        }
    }
 8085488:	b007      	add	sp, #28
 808548a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808548c:	080850d3 	.word	0x080850d3
 8085490:	080853a1 	.word	0x080853a1
 8085494:	080859b1 	.word	0x080859b1

08085498 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8085498:	b530      	push	{r4, r5, lr}
 808549a:	4604      	mov	r4, r0
 808549c:	b085      	sub	sp, #20
 808549e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80854a0:	4668      	mov	r0, sp
 80854a2:	4611      	mov	r1, r2
 80854a4:	f7ff fdc9 	bl	808503a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80854a8:	b17c      	cbz	r4, 80854ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80854aa:	b224      	sxth	r4, r4
 80854ac:	4628      	mov	r0, r5
 80854ae:	b10d      	cbz	r5, 80854b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80854b0:	f002 f880 	bl	80875b4 <strdup>
 80854b4:	9002      	str	r0, [sp, #8]
 80854b6:	a902      	add	r1, sp, #8
 80854b8:	4668      	mov	r0, sp
 80854ba:	f8ad 400c 	strh.w	r4, [sp, #12]
 80854be:	f7ff fe1f 	bl	8085100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80854c2:	a802      	add	r0, sp, #8
 80854c4:	f7ff fd7e 	bl	8084fc4 <_ZN8particle5ErrorD1Ev>
 80854c8:	e01d      	b.n	8085506 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80854ca:	f04f 0201 	mov.w	r2, #1
 80854ce:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80854d0:	f88d 4008 	strb.w	r4, [sp, #8]
 80854d4:	e8d0 3f4f 	ldrexb	r3, [r0]
 80854d8:	42a3      	cmp	r3, r4
 80854da:	d103      	bne.n	80854e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80854dc:	e8c0 2f41 	strexb	r1, r2, [r0]
 80854e0:	2900      	cmp	r1, #0
 80854e2:	d1f7      	bne.n	80854d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80854e4:	d002      	beq.n	80854ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80854e6:	f88d 3008 	strb.w	r3, [sp, #8]
 80854ea:	e00c      	b.n	8085506 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80854ec:	f110 010c 	adds.w	r1, r0, #12
 80854f0:	f04f 0301 	mov.w	r3, #1
 80854f4:	bf18      	it	ne
 80854f6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80854f8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80854fc:	3004      	adds	r0, #4
 80854fe:	f800 3c03 	strb.w	r3, [r0, #-3]
 8085502:	f7ff ff71 	bl	80853e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8085506:	a801      	add	r0, sp, #4
 8085508:	f7ff fb53 	bl	8084bb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808550c:	b005      	add	sp, #20
 808550e:	bd30      	pop	{r4, r5, pc}

08085510 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8085510:	4770      	bx	lr

08085512 <_ZN9IPAddressD0Ev>:
 8085512:	b510      	push	{r4, lr}
 8085514:	4604      	mov	r4, r0
 8085516:	2108      	movs	r1, #8
 8085518:	f000 fd10 	bl	8085f3c <_ZdlPvj>
 808551c:	4620      	mov	r0, r4
 808551e:	bd10      	pop	{r4, pc}

08085520 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8085520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085522:	460f      	mov	r7, r1
 8085524:	f100 0608 	add.w	r6, r0, #8
 8085528:	1d05      	adds	r5, r0, #4
 808552a:	2400      	movs	r4, #0
 808552c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8085530:	220a      	movs	r2, #10
 8085532:	4638      	mov	r0, r7
 8085534:	f7ff fa1a 	bl	808496c <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8085538:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808553a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808553c:	d007      	beq.n	808554e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808553e:	2c00      	cmp	r4, #0
 8085540:	d0f4      	beq.n	808552c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8085542:	212e      	movs	r1, #46	; 0x2e
 8085544:	4638      	mov	r0, r7
 8085546:	f7ff f9f4 	bl	8084932 <_ZN5Print5printEc>
 808554a:	4404      	add	r4, r0
 808554c:	e7ee      	b.n	808552c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808554e:	4620      	mov	r0, r4
 8085550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08085554 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8085554:	4a02      	ldr	r2, [pc, #8]	; (8085560 <_ZN9IPAddressC1Ev+0xc>)
 8085556:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8085558:	2200      	movs	r2, #0
 808555a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808555c:	4770      	bx	lr
 808555e:	bf00      	nop
 8085560:	0808a94c 	.word	0x0808a94c

08085564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8085564:	4a02      	ldr	r2, [pc, #8]	; (8085570 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8085566:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8085568:	680a      	ldr	r2, [r1, #0]
 808556a:	6042      	str	r2, [r0, #4]
}
 808556c:	4770      	bx	lr
 808556e:	bf00      	nop
 8085570:	0808a94c 	.word	0x0808a94c

08085574 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8085574:	4a01      	ldr	r2, [pc, #4]	; (808557c <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8085576:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8085578:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808557a:	4770      	bx	lr
 808557c:	0808a94c 	.word	0x0808a94c

08085580 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8085580:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8085582:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8085586:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808558a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808558e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8085592:	6041      	str	r1, [r0, #4]
 8085594:	bd10      	pop	{r4, pc}
	...

08085598 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8085598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808559a:	4d04      	ldr	r5, [pc, #16]	; (80855ac <_ZN9IPAddressC1Ehhhh+0x14>)
 808559c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808559e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80855a2:	9500      	str	r5, [sp, #0]
 80855a4:	f7ff ffec 	bl	8085580 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80855a8:	b003      	add	sp, #12
 80855aa:	bd30      	pop	{r4, r5, pc}
 80855ac:	0808a94c 	.word	0x0808a94c

080855b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80855b0:	7441      	strb	r1, [r0, #17]
 80855b2:	4770      	bx	lr

080855b4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80855b4:	4770      	bx	lr

080855b6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80855b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80855b8:	2100      	movs	r1, #0
 80855ba:	7c00      	ldrb	r0, [r0, #16]
 80855bc:	f7fe fe0a 	bl	80841d4 <HAL_USB_USART_Receive_Data>
}
 80855c0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80855c4:	bf28      	it	cs
 80855c6:	f04f 30ff 	movcs.w	r0, #4294967295
 80855ca:	bd08      	pop	{r3, pc}

080855cc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80855cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80855ce:	2101      	movs	r1, #1
 80855d0:	7c00      	ldrb	r0, [r0, #16]
 80855d2:	f7fe fdff 	bl	80841d4 <HAL_USB_USART_Receive_Data>
}
 80855d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80855da:	bf28      	it	cs
 80855dc:	f04f 30ff 	movcs.w	r0, #4294967295
 80855e0:	bd08      	pop	{r3, pc}

080855e2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80855e2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80855e4:	7c00      	ldrb	r0, [r0, #16]
 80855e6:	f7fe fded 	bl	80841c4 <HAL_USB_USART_Available_Data_For_Write>
}
 80855ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80855ee:	bd08      	pop	{r3, pc}

080855f0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80855f0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80855f2:	7c00      	ldrb	r0, [r0, #16]
 80855f4:	f7fe fdde 	bl	80841b4 <HAL_USB_USART_Available_Data>
}
 80855f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80855fc:	bd08      	pop	{r3, pc}

080855fe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80855fe:	7c00      	ldrb	r0, [r0, #16]
 8085600:	f7fe bdf8 	b.w	80841f4 <HAL_USB_USART_Flush_Data>

08085604 <_ZN9USBSerialD0Ev>:
 8085604:	b510      	push	{r4, lr}
 8085606:	4604      	mov	r4, r0
 8085608:	2114      	movs	r1, #20
 808560a:	f000 fc97 	bl	8085f3c <_ZdlPvj>
 808560e:	4620      	mov	r0, r4
 8085610:	bd10      	pop	{r4, pc}

08085612 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8085612:	b538      	push	{r3, r4, r5, lr}
 8085614:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8085616:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8085618:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808561a:	f7fe fdd3 	bl	80841c4 <HAL_USB_USART_Available_Data_For_Write>
 808561e:	2800      	cmp	r0, #0
 8085620:	dc01      	bgt.n	8085626 <_ZN9USBSerial5writeEh+0x14>
 8085622:	7c60      	ldrb	r0, [r4, #17]
 8085624:	b128      	cbz	r0, 8085632 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8085626:	4629      	mov	r1, r5
 8085628:	7c20      	ldrb	r0, [r4, #16]
 808562a:	f7fe fddb 	bl	80841e4 <HAL_USB_USART_Send_Data>
 808562e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8085632:	bd38      	pop	{r3, r4, r5, pc}

08085634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8085634:	b510      	push	{r4, lr}
 8085636:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8085638:	2300      	movs	r3, #0
 808563a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808563c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8085640:	60a3      	str	r3, [r4, #8]
 8085642:	4b05      	ldr	r3, [pc, #20]	; (8085658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8085644:	4608      	mov	r0, r1
 8085646:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8085648:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808564a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808564c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808564e:	4611      	mov	r1, r2
 8085650:	f7fe fda0 	bl	8084194 <HAL_USB_USART_Init>
}
 8085654:	4620      	mov	r0, r4
 8085656:	bd10      	pop	{r4, pc}
 8085658:	0808a960 	.word	0x0808a960

0808565c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808565c:	2200      	movs	r2, #0
 808565e:	7c00      	ldrb	r0, [r0, #16]
 8085660:	f7fe bda0 	b.w	80841a4 <HAL_USB_USART_Begin>

08085664 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8085664:	b510      	push	{r4, lr}
 8085666:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8085668:	2214      	movs	r2, #20
 808566a:	2100      	movs	r1, #0
 808566c:	f001 ff60 	bl	8087530 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8085670:	4b05      	ldr	r3, [pc, #20]	; (8085688 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8085672:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8085674:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8085676:	4b05      	ldr	r3, [pc, #20]	; (808568c <_Z19acquireSerialBufferv+0x28>)
 8085678:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808567a:	f240 1301 	movw	r3, #257	; 0x101
 808567e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8085680:	2381      	movs	r3, #129	; 0x81
 8085682:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8085684:	bd10      	pop	{r4, pc}
 8085686:	bf00      	nop
 8085688:	200003fd 	.word	0x200003fd
 808568c:	2000037c 	.word	0x2000037c

08085690 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8085690:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8085692:	4d0e      	ldr	r5, [pc, #56]	; (80856cc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8085694:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8085696:	a801      	add	r0, sp, #4
 8085698:	f7ff ffe4 	bl	8085664 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808569c:	6829      	ldr	r1, [r5, #0]
 808569e:	f011 0401 	ands.w	r4, r1, #1
 80856a2:	d110      	bne.n	80856c6 <_Z16_fetch_usbserialv+0x36>
 80856a4:	4628      	mov	r0, r5
 80856a6:	f7fa fcfe 	bl	80800a6 <__cxa_guard_acquire>
 80856aa:	b160      	cbz	r0, 80856c6 <_Z16_fetch_usbserialv+0x36>
 80856ac:	aa01      	add	r2, sp, #4
 80856ae:	4621      	mov	r1, r4
 80856b0:	4807      	ldr	r0, [pc, #28]	; (80856d0 <_Z16_fetch_usbserialv+0x40>)
 80856b2:	f7ff ffbf 	bl	8085634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80856b6:	4628      	mov	r0, r5
 80856b8:	f7fa fcfa 	bl	80800b0 <__cxa_guard_release>
 80856bc:	4a05      	ldr	r2, [pc, #20]	; (80856d4 <_Z16_fetch_usbserialv+0x44>)
 80856be:	4906      	ldr	r1, [pc, #24]	; (80856d8 <_Z16_fetch_usbserialv+0x48>)
 80856c0:	4803      	ldr	r0, [pc, #12]	; (80856d0 <_Z16_fetch_usbserialv+0x40>)
 80856c2:	f000 fc2d 	bl	8085f20 <__aeabi_atexit>
	return _usbserial;
}
 80856c6:	4802      	ldr	r0, [pc, #8]	; (80856d0 <_Z16_fetch_usbserialv+0x40>)
 80856c8:	b007      	add	sp, #28
 80856ca:	bd30      	pop	{r4, r5, pc}
 80856cc:	20000378 	.word	0x20000378
 80856d0:	20000500 	.word	0x20000500
 80856d4:	20000140 	.word	0x20000140
 80856d8:	080855b5 	.word	0x080855b5

080856dc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80856dc:	b510      	push	{r4, lr}
 80856de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80856e0:	2214      	movs	r2, #20
 80856e2:	2100      	movs	r1, #0
 80856e4:	f001 ff24 	bl	8087530 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80856e8:	4b05      	ldr	r3, [pc, #20]	; (8085700 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80856ea:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80856ec:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80856ee:	4b05      	ldr	r3, [pc, #20]	; (8085704 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80856f0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80856f2:	f240 1301 	movw	r3, #257	; 0x101
 80856f6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80856f8:	2381      	movs	r3, #129	; 0x81
 80856fa:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80856fc:	bd10      	pop	{r4, pc}
 80856fe:	bf00      	nop
 8085700:	200005b0 	.word	0x200005b0
 8085704:	20000518 	.word	0x20000518

08085708 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8085708:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808570a:	4c0e      	ldr	r4, [pc, #56]	; (8085744 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808570c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808570e:	a801      	add	r0, sp, #4
 8085710:	f7ff ffe4 	bl	80856dc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8085714:	6823      	ldr	r3, [r4, #0]
 8085716:	07db      	lsls	r3, r3, #31
 8085718:	d410      	bmi.n	808573c <_Z17_fetch_usbserial1v+0x34>
 808571a:	4620      	mov	r0, r4
 808571c:	f7fa fcc3 	bl	80800a6 <__cxa_guard_acquire>
 8085720:	b160      	cbz	r0, 808573c <_Z17_fetch_usbserial1v+0x34>
 8085722:	aa01      	add	r2, sp, #4
 8085724:	2101      	movs	r1, #1
 8085726:	4808      	ldr	r0, [pc, #32]	; (8085748 <_Z17_fetch_usbserial1v+0x40>)
 8085728:	f7ff ff84 	bl	8085634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808572c:	4620      	mov	r0, r4
 808572e:	f7fa fcbf 	bl	80800b0 <__cxa_guard_release>
 8085732:	4a06      	ldr	r2, [pc, #24]	; (808574c <_Z17_fetch_usbserial1v+0x44>)
 8085734:	4906      	ldr	r1, [pc, #24]	; (8085750 <_Z17_fetch_usbserial1v+0x48>)
 8085736:	4804      	ldr	r0, [pc, #16]	; (8085748 <_Z17_fetch_usbserial1v+0x40>)
 8085738:	f000 fbf2 	bl	8085f20 <__aeabi_atexit>
  return _usbserial1;
}
 808573c:	4802      	ldr	r0, [pc, #8]	; (8085748 <_Z17_fetch_usbserial1v+0x40>)
 808573e:	b006      	add	sp, #24
 8085740:	bd10      	pop	{r4, pc}
 8085742:	bf00      	nop
 8085744:	20000514 	.word	0x20000514
 8085748:	2000059c 	.word	0x2000059c
 808574c:	20000140 	.word	0x20000140
 8085750:	080855b5 	.word	0x080855b5

08085754 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8085754:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 8085756:	b510      	push	{r4, lr}
 8085758:	b90a      	cbnz	r2, 808575e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 808575a:	f000 fc02 	bl	8085f62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808575e:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 8085760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085764:	4718      	bx	r3

08085766 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8085766:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8085768:	2300      	movs	r3, #0
 808576a:	6083      	str	r3, [r0, #8]
 808576c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808576e:	4604      	mov	r4, r0
 8085770:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8085772:	b12b      	cbz	r3, 8085780 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8085774:	2202      	movs	r2, #2
 8085776:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8085778:	68eb      	ldr	r3, [r5, #12]
 808577a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808577c:	68ab      	ldr	r3, [r5, #8]
 808577e:	60a3      	str	r3, [r4, #8]
	}
    }
 8085780:	4620      	mov	r0, r4
 8085782:	bd38      	pop	{r3, r4, r5, pc}

08085784 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8085784:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 8085786:	4b12      	ldr	r3, [pc, #72]	; (80857d0 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 8085788:	4604      	mov	r4, r0
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 808578a:	2010      	movs	r0, #16

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 808578c:	460e      	mov	r6, r1
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 808578e:	9300      	str	r3, [sp, #0]
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 8085790:	f7fa fc85 	bl	808009e <_Znwj>
 8085794:	4605      	mov	r5, r0
 8085796:	b110      	cbz	r0, 808579e <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 8085798:	4631      	mov	r1, r6
 808579a:	f7ff ffe4 	bl	8085766 <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 808579e:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80857a0:	4620      	mov	r0, r4
 80857a2:	aa02      	add	r2, sp, #8
 80857a4:	4669      	mov	r1, sp
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80857a6:	9501      	str	r5, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 80857a8:	9302      	str	r3, [sp, #8]
 80857aa:	9303      	str	r3, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80857ac:	f7fe fbaa 	bl	8083f04 <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 80857b0:	9c03      	ldr	r4, [sp, #12]
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
    HAL_InterruptCallback prev = { 0 };
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80857b2:	1c05      	adds	r5, r0, #0
 80857b4:	bf18      	it	ne
 80857b6:	2501      	movne	r5, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 80857b8:	b134      	cbz	r4, 80857c8 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80857ba:	4620      	mov	r0, r4
 80857bc:	f7fb fa32 	bl	8080c24 <_ZNSt14_Function_baseD1Ev>
 80857c0:	2110      	movs	r1, #16
 80857c2:	4620      	mov	r0, r4
 80857c4:	f000 fbba 	bl	8085f3c <_ZdlPvj>
    return ok;
}
 80857c8:	4628      	mov	r0, r5
 80857ca:	b004      	add	sp, #16
 80857cc:	bd70      	pop	{r4, r5, r6, pc}
 80857ce:	bf00      	nop
 80857d0:	08085755 	.word	0x08085755

080857d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80857d4:	2200      	movs	r2, #0
 80857d6:	4611      	mov	r1, r2
 80857d8:	6840      	ldr	r0, [r0, #4]
 80857da:	f7fe bd7f 	b.w	80842dc <network_ready>

080857de <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80857de:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80857e2:	2600      	movs	r6, #0
 80857e4:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80857e6:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80857e8:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80857ea:	4688      	mov	r8, r1
 80857ec:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80857ee:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80857f2:	f002 fc0f 	bl	8088014 <strlen>
 80857f6:	9600      	str	r6, [sp, #0]
 80857f8:	b281      	uxth	r1, r0
 80857fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80857fe:	4622      	mov	r2, r4
 8085800:	4638      	mov	r0, r7
 8085802:	f7fe fcbf 	bl	8084184 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8085806:	b120      	cbz	r0, 8085812 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8085808:	4631      	mov	r1, r6
 808580a:	4628      	mov	r0, r5
 808580c:	f7ff feb2 	bl	8085574 <_ZN9IPAddressC1Em>
 8085810:	e003      	b.n	808581a <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8085812:	4621      	mov	r1, r4
 8085814:	4628      	mov	r0, r5
 8085816:	f7ff fea5 	bl	8085564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808581a:	4628      	mov	r0, r5
 808581c:	b004      	add	sp, #16
 808581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08085822 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8085822:	2200      	movs	r2, #0
 8085824:	4611      	mov	r1, r2
 8085826:	6840      	ldr	r0, [r0, #4]
 8085828:	f7fe bd78 	b.w	808431c <network_listening>

0808582c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808582c:	2200      	movs	r2, #0
 808582e:	4611      	mov	r1, r2
 8085830:	6840      	ldr	r0, [r0, #4]
 8085832:	f7fe bd83 	b.w	808433c <network_get_listen_timeout>

08085836 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8085836:	2200      	movs	r2, #0
 8085838:	6840      	ldr	r0, [r0, #4]
 808583a:	f7fe bd77 	b.w	808432c <network_set_listen_timeout>

0808583e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808583e:	2200      	movs	r2, #0
 8085840:	f081 0101 	eor.w	r1, r1, #1
 8085844:	6840      	ldr	r0, [r0, #4]
 8085846:	f7fe bd61 	b.w	808430c <network_listen>

0808584a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808584a:	2300      	movs	r3, #0
 808584c:	461a      	mov	r2, r3
 808584e:	4619      	mov	r1, r3
 8085850:	6840      	ldr	r0, [r0, #4]
 8085852:	f7fe bd53 	b.w	80842fc <network_off>

08085856 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8085856:	2300      	movs	r3, #0
 8085858:	461a      	mov	r2, r3
 808585a:	4619      	mov	r1, r3
 808585c:	6840      	ldr	r0, [r0, #4]
 808585e:	f7fe bd45 	b.w	80842ec <network_on>

08085862 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8085862:	2200      	movs	r2, #0
 8085864:	4611      	mov	r1, r2
 8085866:	6840      	ldr	r0, [r0, #4]
 8085868:	f7fe bd28 	b.w	80842bc <network_connecting>

0808586c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808586c:	2200      	movs	r2, #0
 808586e:	2102      	movs	r1, #2
 8085870:	6840      	ldr	r0, [r0, #4]
 8085872:	f7fe bd2b 	b.w	80842cc <network_disconnect>

08085876 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8085876:	2300      	movs	r3, #0
 8085878:	461a      	mov	r2, r3
 808587a:	6840      	ldr	r0, [r0, #4]
 808587c:	f7fe bd16 	b.w	80842ac <network_connect>

08085880 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8085880:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8085882:	4c08      	ldr	r4, [pc, #32]	; (80858a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8085884:	2528      	movs	r5, #40	; 0x28
 8085886:	462a      	mov	r2, r5
 8085888:	2100      	movs	r1, #0
 808588a:	4620      	mov	r0, r4
 808588c:	f001 fe50 	bl	8087530 <memset>
        cid = -1;
 8085890:	f04f 33ff 	mov.w	r3, #4294967295
 8085894:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8085896:	4b04      	ldr	r3, [pc, #16]	; (80858a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8085898:	2204      	movs	r2, #4
 808589a:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808589c:	4a03      	ldr	r2, [pc, #12]	; (80858ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808589e:	8025      	strh	r5, [r4, #0]
 80858a0:	601a      	str	r2, [r3, #0]
 80858a2:	bd38      	pop	{r3, r4, r5, pc}
 80858a4:	200006bc 	.word	0x200006bc
 80858a8:	200006b4 	.word	0x200006b4
 80858ac:	0808a990 	.word	0x0808a990

080858b0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80858b0:	7441      	strb	r1, [r0, #17]
 80858b2:	4770      	bx	lr

080858b4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80858b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80858b6:	7c00      	ldrb	r0, [r0, #16]
 80858b8:	f7fe fc1c 	bl	80840f4 <HAL_USART_Available_Data_For_Write>
}
 80858bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80858c0:	bd08      	pop	{r3, pc}

080858c2 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80858c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80858c4:	7c00      	ldrb	r0, [r0, #16]
 80858c6:	f7fe fbed 	bl	80840a4 <HAL_USART_Available_Data>
}
 80858ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80858ce:	bd08      	pop	{r3, pc}

080858d0 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80858d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80858d2:	7c00      	ldrb	r0, [r0, #16]
 80858d4:	f7fe fbf6 	bl	80840c4 <HAL_USART_Peek_Data>
}
 80858d8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80858dc:	bf28      	it	cs
 80858de:	f04f 30ff 	movcs.w	r0, #4294967295
 80858e2:	bd08      	pop	{r3, pc}

080858e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80858e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80858e6:	7c00      	ldrb	r0, [r0, #16]
 80858e8:	f7fe fbe4 	bl	80840b4 <HAL_USART_Read_Data>
}
 80858ec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80858f0:	bf28      	it	cs
 80858f2:	f04f 30ff 	movcs.w	r0, #4294967295
 80858f6:	bd08      	pop	{r3, pc}

080858f8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80858f8:	7c00      	ldrb	r0, [r0, #16]
 80858fa:	f7fe bbeb 	b.w	80840d4 <HAL_USART_Flush_Data>

080858fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80858fe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8085900:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8085902:	4604      	mov	r4, r0
 8085904:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8085906:	b925      	cbnz	r5, 8085912 <_ZN11USARTSerial5writeEh+0x14>
 8085908:	7c00      	ldrb	r0, [r0, #16]
 808590a:	f7fe fbf3 	bl	80840f4 <HAL_USART_Available_Data_For_Write>
 808590e:	2800      	cmp	r0, #0
 8085910:	dd05      	ble.n	808591e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8085912:	4631      	mov	r1, r6
 8085914:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8085916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808591a:	f7fe bbbb 	b.w	8084094 <HAL_USART_Write_Data>
  }
  return 0;
}
 808591e:	4628      	mov	r0, r5
 8085920:	bd70      	pop	{r4, r5, r6, pc}
	...

08085924 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8085924:	b510      	push	{r4, lr}
 8085926:	4604      	mov	r4, r0
 8085928:	4608      	mov	r0, r1
 808592a:	4611      	mov	r1, r2
 808592c:	2200      	movs	r2, #0
 808592e:	6062      	str	r2, [r4, #4]
 8085930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8085934:	60a2      	str	r2, [r4, #8]
 8085936:	4a05      	ldr	r2, [pc, #20]	; (808594c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8085938:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808593a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808593c:	2201      	movs	r2, #1
 808593e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8085940:	461a      	mov	r2, r3
 8085942:	f7fe fb9f 	bl	8084084 <HAL_USART_Init>
}
 8085946:	4620      	mov	r0, r4
 8085948:	bd10      	pop	{r4, pc}
 808594a:	bf00      	nop
 808594c:	0808a9c4 	.word	0x0808a9c4

08085950 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8085950:	2300      	movs	r3, #0
 8085952:	7c00      	ldrb	r0, [r0, #16]
 8085954:	f7fe bbd6 	b.w	8084104 <HAL_USART_BeginConfig>

08085958 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8085958:	2200      	movs	r2, #0
 808595a:	f7ff bff9 	b.w	8085950 <_ZN11USARTSerial5beginEmm>

0808595e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808595e:	7c00      	ldrb	r0, [r0, #16]
 8085960:	f7fe bbc0 	b.w	80840e4 <HAL_USART_Is_Enabled>

08085964 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8085964:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8085966:	4d0c      	ldr	r5, [pc, #48]	; (8085998 <_Z22__fetch_global_Serial1v+0x34>)
 8085968:	6829      	ldr	r1, [r5, #0]
 808596a:	f011 0401 	ands.w	r4, r1, #1
 808596e:	d111      	bne.n	8085994 <_Z22__fetch_global_Serial1v+0x30>
 8085970:	4628      	mov	r0, r5
 8085972:	f7fa fb98 	bl	80800a6 <__cxa_guard_acquire>
 8085976:	b168      	cbz	r0, 8085994 <_Z22__fetch_global_Serial1v+0x30>
 8085978:	4a08      	ldr	r2, [pc, #32]	; (808599c <_Z22__fetch_global_Serial1v+0x38>)
 808597a:	4621      	mov	r1, r4
 808597c:	4b08      	ldr	r3, [pc, #32]	; (80859a0 <_Z22__fetch_global_Serial1v+0x3c>)
 808597e:	4809      	ldr	r0, [pc, #36]	; (80859a4 <_Z22__fetch_global_Serial1v+0x40>)
 8085980:	f7ff ffd0 	bl	8085924 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8085984:	4628      	mov	r0, r5
 8085986:	f7fa fb93 	bl	80800b0 <__cxa_guard_release>
 808598a:	4a07      	ldr	r2, [pc, #28]	; (80859a8 <_Z22__fetch_global_Serial1v+0x44>)
 808598c:	4907      	ldr	r1, [pc, #28]	; (80859ac <_Z22__fetch_global_Serial1v+0x48>)
 808598e:	4805      	ldr	r0, [pc, #20]	; (80859a4 <_Z22__fetch_global_Serial1v+0x40>)
 8085990:	f000 fac6 	bl	8085f20 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8085994:	4803      	ldr	r0, [pc, #12]	; (80859a4 <_Z22__fetch_global_Serial1v+0x40>)
 8085996:	bd38      	pop	{r3, r4, r5, pc}
 8085998:	2000077c 	.word	0x2000077c
 808599c:	20000780 	.word	0x20000780
 80859a0:	200006f8 	.word	0x200006f8
 80859a4:	200006e4 	.word	0x200006e4
 80859a8:	20000140 	.word	0x20000140
 80859ac:	08081029 	.word	0x08081029

080859b0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80859b0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80859b2:	6883      	ldr	r3, [r0, #8]
 80859b4:	4604      	mov	r4, r0
 80859b6:	b90b      	cbnz	r3, 80859bc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80859b8:	f000 fad3 	bl	8085f62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80859bc:	68c3      	ldr	r3, [r0, #12]
 80859be:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80859c0:	68a3      	ldr	r3, [r4, #8]
 80859c2:	b11b      	cbz	r3, 80859cc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80859c4:	2203      	movs	r2, #3
 80859c6:	4621      	mov	r1, r4
 80859c8:	4620      	mov	r0, r4
 80859ca:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80859cc:	4620      	mov	r0, r4
}
 80859ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80859d2:	2110      	movs	r1, #16
 80859d4:	f000 bab2 	b.w	8085f3c <_ZdlPvj>

080859d8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80859d8:	4770      	bx	lr

080859da <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80859da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80859dc:	4606      	mov	r6, r0
 80859de:	4615      	mov	r5, r2
 80859e0:	460c      	mov	r4, r1
 80859e2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80859e4:	42bc      	cmp	r4, r7
 80859e6:	d006      	beq.n	80859f6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80859e8:	6833      	ldr	r3, [r6, #0]
 80859ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80859ee:	689b      	ldr	r3, [r3, #8]
 80859f0:	4630      	mov	r0, r6
 80859f2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80859f4:	e7f6      	b.n	80859e4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80859f6:	4628      	mov	r0, r5
 80859f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080859fa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80859fa:	2200      	movs	r2, #0
 80859fc:	7c00      	ldrb	r0, [r0, #16]
 80859fe:	f7fe bb89 	b.w	8084114 <HAL_I2C_Write_Data>

08085a02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8085a02:	2100      	movs	r1, #0
 8085a04:	7c00      	ldrb	r0, [r0, #16]
 8085a06:	f7fe bb8d 	b.w	8084124 <HAL_I2C_Available_Data>

08085a0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8085a0a:	2100      	movs	r1, #0
 8085a0c:	7c00      	ldrb	r0, [r0, #16]
 8085a0e:	f7fe bb91 	b.w	8084134 <HAL_I2C_Read_Data>

08085a12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8085a12:	2100      	movs	r1, #0
 8085a14:	7c00      	ldrb	r0, [r0, #16]
 8085a16:	f7fe bb95 	b.w	8084144 <HAL_I2C_Peek_Data>

08085a1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8085a1a:	2100      	movs	r1, #0
 8085a1c:	7c00      	ldrb	r0, [r0, #16]
 8085a1e:	f7fe bb99 	b.w	8084154 <HAL_I2C_Flush_Data>

08085a22 <_ZN7TwoWireD0Ev>:
 8085a22:	b510      	push	{r4, lr}
 8085a24:	4604      	mov	r4, r0
 8085a26:	2114      	movs	r1, #20
 8085a28:	f000 fa88 	bl	8085f3c <_ZdlPvj>
 8085a2c:	4620      	mov	r0, r4
 8085a2e:	bd10      	pop	{r4, pc}

08085a30 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8085a30:	b510      	push	{r4, lr}
 8085a32:	4604      	mov	r4, r0
 8085a34:	2300      	movs	r3, #0
 8085a36:	6063      	str	r3, [r4, #4]
 8085a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8085a3c:	60a3      	str	r3, [r4, #8]
 8085a3e:	4b04      	ldr	r3, [pc, #16]	; (8085a50 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8085a40:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8085a42:	4608      	mov	r0, r1
 8085a44:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 8085a46:	4611      	mov	r1, r2
 8085a48:	f7fe fb94 	bl	8084174 <HAL_I2C_Init>
}
 8085a4c:	4620      	mov	r0, r4
 8085a4e:	bd10      	pop	{r4, pc}
 8085a50:	0808a9f4 	.word	0x0808a9f4

08085a54 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8085a54:	2100      	movs	r1, #0
 8085a56:	7c00      	ldrb	r0, [r0, #16]
 8085a58:	f7fe bb84 	b.w	8084164 <HAL_I2C_Is_Enabled>

08085a5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8085a5c:	2300      	movs	r3, #0
 8085a5e:	461a      	mov	r2, r3
 8085a60:	6840      	ldr	r0, [r0, #4]
 8085a62:	f7fe bc23 	b.w	80842ac <network_connect>

08085a66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8085a66:	2200      	movs	r2, #0
 8085a68:	2102      	movs	r1, #2
 8085a6a:	6840      	ldr	r0, [r0, #4]
 8085a6c:	f7fe bc2e 	b.w	80842cc <network_disconnect>

08085a70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8085a70:	2200      	movs	r2, #0
 8085a72:	4611      	mov	r1, r2
 8085a74:	6840      	ldr	r0, [r0, #4]
 8085a76:	f7fe bc21 	b.w	80842bc <network_connecting>

08085a7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8085a7a:	2200      	movs	r2, #0
 8085a7c:	4611      	mov	r1, r2
 8085a7e:	6840      	ldr	r0, [r0, #4]
 8085a80:	f7fe bc2c 	b.w	80842dc <network_ready>

08085a84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8085a84:	2300      	movs	r3, #0
 8085a86:	461a      	mov	r2, r3
 8085a88:	4619      	mov	r1, r3
 8085a8a:	6840      	ldr	r0, [r0, #4]
 8085a8c:	f7fe bc2e 	b.w	80842ec <network_on>

08085a90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8085a90:	2300      	movs	r3, #0
 8085a92:	461a      	mov	r2, r3
 8085a94:	4619      	mov	r1, r3
 8085a96:	6840      	ldr	r0, [r0, #4]
 8085a98:	f7fe bc30 	b.w	80842fc <network_off>

08085a9c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8085a9c:	2200      	movs	r2, #0
 8085a9e:	f081 0101 	eor.w	r1, r1, #1
 8085aa2:	6840      	ldr	r0, [r0, #4]
 8085aa4:	f7fe bc32 	b.w	808430c <network_listen>

08085aa8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8085aa8:	2200      	movs	r2, #0
 8085aaa:	6840      	ldr	r0, [r0, #4]
 8085aac:	f7fe bc3e 	b.w	808432c <network_set_listen_timeout>

08085ab0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8085ab0:	2200      	movs	r2, #0
 8085ab2:	4611      	mov	r1, r2
 8085ab4:	6840      	ldr	r0, [r0, #4]
 8085ab6:	f7fe bc41 	b.w	808433c <network_get_listen_timeout>

08085aba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8085aba:	2200      	movs	r2, #0
 8085abc:	4611      	mov	r1, r2
 8085abe:	6840      	ldr	r0, [r0, #4]
 8085ac0:	f7fe bc2c 	b.w	808431c <network_listening>

08085ac4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8085ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085ac6:	4617      	mov	r7, r2
 8085ac8:	b087      	sub	sp, #28
 8085aca:	4605      	mov	r5, r0
    IPAddress addr;
 8085acc:	a804      	add	r0, sp, #16
 8085ace:	f7ff fd41 	bl	8085554 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8085ad2:	2600      	movs	r6, #0
 8085ad4:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8085ad6:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8085ad8:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8085adc:	f002 fa9a 	bl	8088014 <strlen>
 8085ae0:	4b0a      	ldr	r3, [pc, #40]	; (8085b0c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8085ae2:	9600      	str	r6, [sp, #0]
 8085ae4:	b281      	uxth	r1, r0
 8085ae6:	685b      	ldr	r3, [r3, #4]
 8085ae8:	4622      	mov	r2, r4
 8085aea:	4638      	mov	r0, r7
 8085aec:	f7fe fb4a 	bl	8084184 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8085af0:	b120      	cbz	r0, 8085afc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8085af2:	4631      	mov	r1, r6
 8085af4:	4628      	mov	r0, r5
 8085af6:	f7ff fd3d 	bl	8085574 <_ZN9IPAddressC1Em>
 8085afa:	e003      	b.n	8085b04 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8085afc:	4621      	mov	r1, r4
 8085afe:	4628      	mov	r0, r5
 8085b00:	f7ff fd30 	bl	8085564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8085b04:	4628      	mov	r0, r5
 8085b06:	b007      	add	sp, #28
 8085b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085b0a:	bf00      	nop
 8085b0c:	200006b4 	.word	0x200006b4

08085b10 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8085b10:	4b02      	ldr	r3, [pc, #8]	; (8085b1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8085b12:	4a03      	ldr	r2, [pc, #12]	; (8085b20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8085b14:	601a      	str	r2, [r3, #0]
 8085b16:	2200      	movs	r2, #0
 8085b18:	605a      	str	r2, [r3, #4]
 8085b1a:	4770      	bx	lr
 8085b1c:	20000804 	.word	0x20000804
 8085b20:	0808aa1c 	.word	0x0808aa1c

08085b24 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8085b24:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8085b26:	b530      	push	{r4, r5, lr}
 8085b28:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8085b2a:	b31a      	cbz	r2, 8085b74 <NVIC_Init+0x50>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8085b2c:	4a17      	ldr	r2, [pc, #92]	; (8085b8c <NVIC_Init+0x68>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8085b2e:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8085b30:	68d1      	ldr	r1, [r2, #12]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8085b32:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8085b36:	43c9      	mvns	r1, r1
 8085b38:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8085b3c:	f1c1 0204 	rsb	r2, r1, #4
 8085b40:	b2d2      	uxtb	r2, r2
 8085b42:	fa05 f202 	lsl.w	r2, r5, r2
 8085b46:	b2d4      	uxtb	r4, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8085b48:	220f      	movs	r2, #15
 8085b4a:	410a      	asrs	r2, r1
 8085b4c:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8085b4e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8085b52:	400a      	ands	r2, r1
 8085b54:	4322      	orrs	r2, r4

    tmppriority = tmppriority << 0x04;
 8085b56:	0112      	lsls	r2, r2, #4
 8085b58:	b2d2      	uxtb	r2, r2

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8085b5a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8085b5e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8085b60:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8085b62:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8085b64:	f003 031f 	and.w	r3, r3, #31
 8085b68:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8085b6c:	4a08      	ldr	r2, [pc, #32]	; (8085b90 <NVIC_Init+0x6c>)
 8085b6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8085b72:	bd30      	pop	{r4, r5, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8085b74:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8085b76:	2101      	movs	r1, #1
 8085b78:	f003 031f 	and.w	r3, r3, #31
 8085b7c:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8085b80:	4903      	ldr	r1, [pc, #12]	; (8085b90 <NVIC_Init+0x6c>)
 8085b82:	3220      	adds	r2, #32
 8085b84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8085b88:	bd30      	pop	{r4, r5, pc}
 8085b8a:	bf00      	nop
 8085b8c:	e000ed00 	.word	0xe000ed00
 8085b90:	e000e100 	.word	0xe000e100

08085b94 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8085b94:	4b04      	ldr	r3, [pc, #16]	; (8085ba8 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8085b96:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8085b98:	b109      	cbz	r1, 8085b9e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8085b9a:	4310      	orrs	r0, r2
 8085b9c:	e001      	b.n	8085ba2 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8085b9e:	ea22 0000 	bic.w	r0, r2, r0
 8085ba2:	6218      	str	r0, [r3, #32]
 8085ba4:	4770      	bx	lr
 8085ba6:	bf00      	nop
 8085ba8:	40023800 	.word	0x40023800

08085bac <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8085bac:	4b04      	ldr	r3, [pc, #16]	; (8085bc0 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8085bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8085bb0:	b109      	cbz	r1, 8085bb6 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8085bb2:	4310      	orrs	r0, r2
 8085bb4:	e001      	b.n	8085bba <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8085bb6:	ea22 0000 	bic.w	r0, r2, r0
 8085bba:	6258      	str	r0, [r3, #36]	; 0x24
 8085bbc:	4770      	bx	lr
 8085bbe:	bf00      	nop
 8085bc0:	40023800 	.word	0x40023800

08085bc4 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8085bc4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  if (TIMx == TIM1)
 8085bc6:	4b4d      	ldr	r3, [pc, #308]	; (8085cfc <TIM_DeInit+0x138>)
 8085bc8:	4298      	cmp	r0, r3
 8085bca:	d106      	bne.n	8085bda <TIM_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8085bcc:	2101      	movs	r1, #1
 8085bce:	4608      	mov	r0, r1
 8085bd0:	f7ff ffec 	bl	8085bac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);
 8085bd4:	2100      	movs	r1, #0
 8085bd6:	2001      	movs	r0, #1
 8085bd8:	e044      	b.n	8085c64 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM2)
 8085bda:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8085bde:	d106      	bne.n	8085bee <TIM_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8085be0:	2101      	movs	r1, #1
 8085be2:	4608      	mov	r0, r1
 8085be4:	f7ff ffd6 	bl	8085b94 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8085be8:	2100      	movs	r1, #0
 8085bea:	2001      	movs	r0, #1
 8085bec:	e081      	b.n	8085cf2 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM3)
 8085bee:	4b44      	ldr	r3, [pc, #272]	; (8085d00 <TIM_DeInit+0x13c>)
 8085bf0:	4298      	cmp	r0, r3
 8085bf2:	d106      	bne.n	8085c02 <TIM_DeInit+0x3e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8085bf4:	2101      	movs	r1, #1
 8085bf6:	2002      	movs	r0, #2
 8085bf8:	f7ff ffcc 	bl	8085b94 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8085bfc:	2100      	movs	r1, #0
 8085bfe:	2002      	movs	r0, #2
 8085c00:	e077      	b.n	8085cf2 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM4)
 8085c02:	4b40      	ldr	r3, [pc, #256]	; (8085d04 <TIM_DeInit+0x140>)
 8085c04:	4298      	cmp	r0, r3
 8085c06:	d106      	bne.n	8085c16 <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8085c08:	2101      	movs	r1, #1
 8085c0a:	2004      	movs	r0, #4
 8085c0c:	f7ff ffc2 	bl	8085b94 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8085c10:	2100      	movs	r1, #0
 8085c12:	2004      	movs	r0, #4
 8085c14:	e06d      	b.n	8085cf2 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM5)
 8085c16:	4b3c      	ldr	r3, [pc, #240]	; (8085d08 <TIM_DeInit+0x144>)
 8085c18:	4298      	cmp	r0, r3
 8085c1a:	d106      	bne.n	8085c2a <TIM_DeInit+0x66>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8085c1c:	2101      	movs	r1, #1
 8085c1e:	2008      	movs	r0, #8
 8085c20:	f7ff ffb8 	bl	8085b94 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8085c24:	2100      	movs	r1, #0
 8085c26:	2008      	movs	r0, #8
 8085c28:	e063      	b.n	8085cf2 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM6)
 8085c2a:	4b38      	ldr	r3, [pc, #224]	; (8085d0c <TIM_DeInit+0x148>)
 8085c2c:	4298      	cmp	r0, r3
 8085c2e:	d106      	bne.n	8085c3e <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8085c30:	2101      	movs	r1, #1
 8085c32:	2010      	movs	r0, #16
 8085c34:	f7ff ffae 	bl	8085b94 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8085c38:	2100      	movs	r1, #0
 8085c3a:	2010      	movs	r0, #16
 8085c3c:	e059      	b.n	8085cf2 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM7)
 8085c3e:	4b34      	ldr	r3, [pc, #208]	; (8085d10 <TIM_DeInit+0x14c>)
 8085c40:	4298      	cmp	r0, r3
 8085c42:	d106      	bne.n	8085c52 <TIM_DeInit+0x8e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8085c44:	2101      	movs	r1, #1
 8085c46:	2020      	movs	r0, #32
 8085c48:	f7ff ffa4 	bl	8085b94 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8085c4c:	2100      	movs	r1, #0
 8085c4e:	2020      	movs	r0, #32
 8085c50:	e04f      	b.n	8085cf2 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM8)
 8085c52:	4b30      	ldr	r3, [pc, #192]	; (8085d14 <TIM_DeInit+0x150>)
 8085c54:	4298      	cmp	r0, r3
 8085c56:	d109      	bne.n	8085c6c <TIM_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8085c58:	2101      	movs	r1, #1
 8085c5a:	2002      	movs	r0, #2
 8085c5c:	f7ff ffa6 	bl	8085bac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8085c60:	2100      	movs	r1, #0
 8085c62:	2002      	movs	r0, #2
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
    }
  }
}
 8085c64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }
  else if (TIMx == TIM8)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8085c68:	f7ff bfa0 	b.w	8085bac <RCC_APB2PeriphResetCmd>
  }
  else if (TIMx == TIM9)
 8085c6c:	4b2a      	ldr	r3, [pc, #168]	; (8085d18 <TIM_DeInit+0x154>)
 8085c6e:	4298      	cmp	r0, r3
 8085c70:	d108      	bne.n	8085c84 <TIM_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8085c72:	2101      	movs	r1, #1
 8085c74:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8085c78:	f7ff ff98 	bl	8085bac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);
 8085c7c:	2100      	movs	r1, #0
 8085c7e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8085c82:	e7ef      	b.n	8085c64 <TIM_DeInit+0xa0>
   }
  else if (TIMx == TIM10)
 8085c84:	4b25      	ldr	r3, [pc, #148]	; (8085d1c <TIM_DeInit+0x158>)
 8085c86:	4298      	cmp	r0, r3
 8085c88:	d108      	bne.n	8085c9c <TIM_DeInit+0xd8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8085c8a:	2101      	movs	r1, #1
 8085c8c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8085c90:	f7ff ff8c 	bl	8085bac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);
 8085c94:	2100      	movs	r1, #0
 8085c96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8085c9a:	e7e3      	b.n	8085c64 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM11)
 8085c9c:	4b20      	ldr	r3, [pc, #128]	; (8085d20 <TIM_DeInit+0x15c>)
 8085c9e:	4298      	cmp	r0, r3
 8085ca0:	d108      	bne.n	8085cb4 <TIM_DeInit+0xf0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8085ca2:	2101      	movs	r1, #1
 8085ca4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8085ca8:	f7ff ff80 	bl	8085bac <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);
 8085cac:	2100      	movs	r1, #0
 8085cae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8085cb2:	e7d7      	b.n	8085c64 <TIM_DeInit+0xa0>
  }
  else if (TIMx == TIM12)
 8085cb4:	4b1b      	ldr	r3, [pc, #108]	; (8085d24 <TIM_DeInit+0x160>)
 8085cb6:	4298      	cmp	r0, r3
 8085cb8:	d106      	bne.n	8085cc8 <TIM_DeInit+0x104>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8085cba:	2101      	movs	r1, #1
 8085cbc:	2040      	movs	r0, #64	; 0x40
 8085cbe:	f7ff ff69 	bl	8085b94 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);
 8085cc2:	2100      	movs	r1, #0
 8085cc4:	2040      	movs	r0, #64	; 0x40
 8085cc6:	e014      	b.n	8085cf2 <TIM_DeInit+0x12e>
  }
  else if (TIMx == TIM13)
 8085cc8:	4b17      	ldr	r3, [pc, #92]	; (8085d28 <TIM_DeInit+0x164>)
 8085cca:	4298      	cmp	r0, r3
 8085ccc:	d106      	bne.n	8085cdc <TIM_DeInit+0x118>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8085cce:	2101      	movs	r1, #1
 8085cd0:	2080      	movs	r0, #128	; 0x80
 8085cd2:	f7ff ff5f 	bl	8085b94 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);
 8085cd6:	2100      	movs	r1, #0
 8085cd8:	2080      	movs	r0, #128	; 0x80
 8085cda:	e00a      	b.n	8085cf2 <TIM_DeInit+0x12e>
  }
  else
  {
    if (TIMx == TIM14)
 8085cdc:	4b13      	ldr	r3, [pc, #76]	; (8085d2c <TIM_DeInit+0x168>)
 8085cde:	4298      	cmp	r0, r3
 8085ce0:	d10b      	bne.n	8085cfa <TIM_DeInit+0x136>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8085ce2:	2101      	movs	r1, #1
 8085ce4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8085ce8:	f7ff ff54 	bl	8085b94 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8085cec:	2100      	movs	r1, #0
 8085cee:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 8085cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM14)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);
 8085cf6:	f7ff bf4d 	b.w	8085b94 <RCC_APB1PeriphResetCmd>
 8085cfa:	bd08      	pop	{r3, pc}
 8085cfc:	40010000 	.word	0x40010000
 8085d00:	40000400 	.word	0x40000400
 8085d04:	40000800 	.word	0x40000800
 8085d08:	40000c00 	.word	0x40000c00
 8085d0c:	40001000 	.word	0x40001000
 8085d10:	40001400 	.word	0x40001400
 8085d14:	40010400 	.word	0x40010400
 8085d18:	40014000 	.word	0x40014000
 8085d1c:	40014400 	.word	0x40014400
 8085d20:	40014800 	.word	0x40014800
 8085d24:	40001800 	.word	0x40001800
 8085d28:	40001c00 	.word	0x40001c00
 8085d2c:	40002000 	.word	0x40002000

08085d30 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8085d30:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8085d32:	b119      	cbz	r1, 8085d3c <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8085d34:	b29b      	uxth	r3, r3
 8085d36:	f043 0301 	orr.w	r3, r3, #1
 8085d3a:	e003      	b.n	8085d44 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8085d3c:	f023 0301 	bic.w	r3, r3, #1
 8085d40:	041b      	lsls	r3, r3, #16
 8085d42:	0c1b      	lsrs	r3, r3, #16
 8085d44:	8003      	strh	r3, [r0, #0]
 8085d46:	4770      	bx	lr

08085d48 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 8085d48:	8a03      	ldrh	r3, [r0, #16]

  itenable = TIMx->DIER & TIM_IT;
 8085d4a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8085d4c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;

  itenable = TIMx->DIER & TIM_IT;
 8085d50:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8085d52:	d003      	beq.n	8085d5c <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8085d54:	4211      	tst	r1, r2
 8085d56:	bf14      	ite	ne
 8085d58:	2001      	movne	r0, #1
 8085d5a:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8085d5c:	4770      	bx	lr

08085d5e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8085d5e:	43c9      	mvns	r1, r1
 8085d60:	b289      	uxth	r1, r1
 8085d62:	8201      	strh	r1, [r0, #16]
 8085d64:	4770      	bx	lr

08085d66 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8085d66:	b510      	push	{r4, lr}
 8085d68:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8085d6a:	f000 f85b 	bl	8085e24 <_ZN8particle7globals11instanceSpiEv>
 8085d6e:	f7fe fc6d 	bl	808464c <_ZN8SPIClass9isEnabledEv>
 8085d72:	b128      	cbz	r0, 8085d80 <pinAvailable+0x1a>
 8085d74:	f1a4 030d 	sub.w	r3, r4, #13
 8085d78:	2b02      	cmp	r3, #2
 8085d7a:	d801      	bhi.n	8085d80 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 8085d7c:	2000      	movs	r0, #0
 8085d7e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8085d80:	f000 f8a8 	bl	8085ed4 <_Z19__fetch_global_Wirev>
 8085d84:	f7ff fe66 	bl	8085a54 <_ZN7TwoWire9isEnabledEv>
 8085d88:	b108      	cbz	r0, 8085d8e <pinAvailable+0x28>
 8085d8a:	2c01      	cmp	r4, #1
 8085d8c:	d9f6      	bls.n	8085d7c <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8085d8e:	f7ff fde9 	bl	8085964 <_Z22__fetch_global_Serial1v>
 8085d92:	f7ff fde4 	bl	808595e <_ZN11USARTSerial9isEnabledEv>
 8085d96:	b118      	cbz	r0, 8085da0 <pinAvailable+0x3a>
 8085d98:	f1a4 0312 	sub.w	r3, r4, #18
 8085d9c:	2b01      	cmp	r3, #1
 8085d9e:	d9ed      	bls.n	8085d7c <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8085da0:	2c2e      	cmp	r4, #46	; 0x2e
 8085da2:	bf8c      	ite	hi
 8085da4:	2000      	movhi	r0, #0
 8085da6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8085da8:	bd10      	pop	{r4, pc}

08085daa <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8085daa:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8085dac:	b538      	push	{r3, r4, r5, lr}
 8085dae:	4604      	mov	r4, r0
 8085db0:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8085db2:	d80a      	bhi.n	8085dca <pinMode+0x20>
 8085db4:	29ff      	cmp	r1, #255	; 0xff
 8085db6:	d008      	beq.n	8085dca <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8085db8:	f7ff ffd5 	bl	8085d66 <pinAvailable>
 8085dbc:	b128      	cbz	r0, 8085dca <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8085dbe:	4629      	mov	r1, r5
 8085dc0:	4620      	mov	r0, r4
}
 8085dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8085dc6:	f7fe b87d 	b.w	8083ec4 <HAL_Pin_Mode>
 8085dca:	bd38      	pop	{r3, r4, r5, pc}

08085dcc <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8085dcc:	b538      	push	{r3, r4, r5, lr}
 8085dce:	4604      	mov	r4, r0
 8085dd0:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8085dd2:	f7fe f87f 	bl	8083ed4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8085dd6:	28ff      	cmp	r0, #255	; 0xff
 8085dd8:	d010      	beq.n	8085dfc <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8085dda:	2806      	cmp	r0, #6
 8085ddc:	d804      	bhi.n	8085de8 <digitalWrite+0x1c>
 8085dde:	234d      	movs	r3, #77	; 0x4d
 8085de0:	fa23 f000 	lsr.w	r0, r3, r0
 8085de4:	07c3      	lsls	r3, r0, #31
 8085de6:	d409      	bmi.n	8085dfc <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8085de8:	4620      	mov	r0, r4
 8085dea:	f7ff ffbc 	bl	8085d66 <pinAvailable>
 8085dee:	b128      	cbz	r0, 8085dfc <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8085df0:	4629      	mov	r1, r5
 8085df2:	4620      	mov	r0, r4
}
 8085df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8085df8:	f7fe b874 	b.w	8083ee4 <HAL_GPIO_Write>
 8085dfc:	bd38      	pop	{r3, r4, r5, pc}

08085dfe <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8085dfe:	b510      	push	{r4, lr}
 8085e00:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8085e02:	f7fe f867 	bl	8083ed4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8085e06:	3804      	subs	r0, #4
 8085e08:	b2c0      	uxtb	r0, r0
 8085e0a:	2801      	cmp	r0, #1
 8085e0c:	d908      	bls.n	8085e20 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8085e0e:	4620      	mov	r0, r4
 8085e10:	f7ff ffa9 	bl	8085d66 <pinAvailable>
 8085e14:	b120      	cbz	r0, 8085e20 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8085e16:	4620      	mov	r0, r4
}
 8085e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8085e1c:	f7fe b86a 	b.w	8083ef4 <HAL_GPIO_Read>
}
 8085e20:	2000      	movs	r0, #0
 8085e22:	bd10      	pop	{r4, pc}

08085e24 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 8085e24:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 8085e26:	4d0b      	ldr	r5, [pc, #44]	; (8085e54 <_ZN8particle7globals11instanceSpiEv+0x30>)
 8085e28:	6829      	ldr	r1, [r5, #0]
 8085e2a:	f011 0401 	ands.w	r4, r1, #1
 8085e2e:	d10f      	bne.n	8085e50 <_ZN8particle7globals11instanceSpiEv+0x2c>
 8085e30:	4628      	mov	r0, r5
 8085e32:	f7fa f938 	bl	80800a6 <__cxa_guard_acquire>
 8085e36:	b158      	cbz	r0, 8085e50 <_ZN8particle7globals11instanceSpiEv+0x2c>
 8085e38:	4621      	mov	r1, r4
 8085e3a:	4807      	ldr	r0, [pc, #28]	; (8085e58 <_ZN8particle7globals11instanceSpiEv+0x34>)
 8085e3c:	f7fe fb22 	bl	8084484 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8085e40:	4628      	mov	r0, r5
 8085e42:	f7fa f935 	bl	80800b0 <__cxa_guard_release>
 8085e46:	4a05      	ldr	r2, [pc, #20]	; (8085e5c <_ZN8particle7globals11instanceSpiEv+0x38>)
 8085e48:	4905      	ldr	r1, [pc, #20]	; (8085e60 <_ZN8particle7globals11instanceSpiEv+0x3c>)
 8085e4a:	4803      	ldr	r0, [pc, #12]	; (8085e58 <_ZN8particle7globals11instanceSpiEv+0x34>)
 8085e4c:	f000 f868 	bl	8085f20 <__aeabi_atexit>
    return instance;
}
 8085e50:	4801      	ldr	r0, [pc, #4]	; (8085e58 <_ZN8particle7globals11instanceSpiEv+0x34>)
 8085e52:	bd38      	pop	{r3, r4, r5, pc}
 8085e54:	2000081c 	.word	0x2000081c
 8085e58:	2000080c 	.word	0x2000080c
 8085e5c:	20000140 	.word	0x20000140
 8085e60:	0808444d 	.word	0x0808444d

08085e64 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8085e64:	b513      	push	{r0, r1, r4, lr}
 8085e66:	4c08      	ldr	r4, [pc, #32]	; (8085e88 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8085e68:	2300      	movs	r3, #0
 8085e6a:	461a      	mov	r2, r3
 8085e6c:	4619      	mov	r1, r3
 8085e6e:	9300      	str	r3, [sp, #0]
 8085e70:	4620      	mov	r0, r4
 8085e72:	f7ff fb91 	bl	8085598 <_ZN9IPAddressC1Ehhhh>
 8085e76:	4620      	mov	r0, r4
 8085e78:	4a04      	ldr	r2, [pc, #16]	; (8085e8c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8085e7a:	4905      	ldr	r1, [pc, #20]	; (8085e90 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8085e7c:	b002      	add	sp, #8
 8085e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8085e82:	f000 b84d 	b.w	8085f20 <__aeabi_atexit>
 8085e86:	bf00      	nop
 8085e88:	20000824 	.word	0x20000824
 8085e8c:	20000140 	.word	0x20000140
 8085e90:	08085511 	.word	0x08085511

08085e94 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 8085e94:	b570      	push	{r4, r5, r6, lr}
 8085e96:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8085e98:	2514      	movs	r5, #20
 8085e9a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085e9c:	4e09      	ldr	r6, [pc, #36]	; (8085ec4 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8085e9e:	2100      	movs	r1, #0
 8085ea0:	f001 fb46 	bl	8087530 <memset>
 8085ea4:	8025      	strh	r5, [r4, #0]
 8085ea6:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085ea8:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8085eaa:	60a5      	str	r5, [r4, #8]
 8085eac:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085eae:	4628      	mov	r0, r5
 8085eb0:	f000 f846 	bl	8085f40 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085eb4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8085eb6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8085eb8:	4628      	mov	r0, r5
 8085eba:	f000 f841 	bl	8085f40 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8085ebe:	60e0      	str	r0, [r4, #12]

	return config;
}
 8085ec0:	4620      	mov	r0, r4
 8085ec2:	bd70      	pop	{r4, r5, r6, pc}
 8085ec4:	0808aa48 	.word	0x0808aa48

08085ec8 <_Z17acquireWireBufferv>:
 8085ec8:	b510      	push	{r4, lr}
 8085eca:	4604      	mov	r4, r0
 8085ecc:	f7ff ffe2 	bl	8085e94 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8085ed0:	4620      	mov	r0, r4
 8085ed2:	bd10      	pop	{r4, pc}

08085ed4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8085ed4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8085ed6:	4d0e      	ldr	r5, [pc, #56]	; (8085f10 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8085ed8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8085eda:	6829      	ldr	r1, [r5, #0]
 8085edc:	f011 0401 	ands.w	r4, r1, #1
 8085ee0:	d113      	bne.n	8085f0a <_Z19__fetch_global_Wirev+0x36>
 8085ee2:	4628      	mov	r0, r5
 8085ee4:	f7fa f8df 	bl	80800a6 <__cxa_guard_acquire>
 8085ee8:	b178      	cbz	r0, 8085f0a <_Z19__fetch_global_Wirev+0x36>
 8085eea:	a801      	add	r0, sp, #4
 8085eec:	f7ff ffec 	bl	8085ec8 <_Z17acquireWireBufferv>
 8085ef0:	aa01      	add	r2, sp, #4
 8085ef2:	4621      	mov	r1, r4
 8085ef4:	4807      	ldr	r0, [pc, #28]	; (8085f14 <_Z19__fetch_global_Wirev+0x40>)
 8085ef6:	f7ff fd9b 	bl	8085a30 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8085efa:	4628      	mov	r0, r5
 8085efc:	f7fa f8d8 	bl	80800b0 <__cxa_guard_release>
 8085f00:	4a05      	ldr	r2, [pc, #20]	; (8085f18 <_Z19__fetch_global_Wirev+0x44>)
 8085f02:	4906      	ldr	r1, [pc, #24]	; (8085f1c <_Z19__fetch_global_Wirev+0x48>)
 8085f04:	4803      	ldr	r0, [pc, #12]	; (8085f14 <_Z19__fetch_global_Wirev+0x40>)
 8085f06:	f000 f80b 	bl	8085f20 <__aeabi_atexit>
	return wire;
}
 8085f0a:	4802      	ldr	r0, [pc, #8]	; (8085f14 <_Z19__fetch_global_Wirev+0x40>)
 8085f0c:	b007      	add	sp, #28
 8085f0e:	bd30      	pop	{r4, r5, pc}
 8085f10:	2000082c 	.word	0x2000082c
 8085f14:	20000830 	.word	0x20000830
 8085f18:	20000140 	.word	0x20000140
 8085f1c:	080859d9 	.word	0x080859d9

08085f20 <__aeabi_atexit>:
 8085f20:	460b      	mov	r3, r1
 8085f22:	4601      	mov	r1, r0
 8085f24:	4618      	mov	r0, r3
 8085f26:	f001 b9df 	b.w	80872e8 <__cxa_atexit>
	...

08085f2c <_ZSt15get_new_handlerv>:
 8085f2c:	4b02      	ldr	r3, [pc, #8]	; (8085f38 <_ZSt15get_new_handlerv+0xc>)
 8085f2e:	6818      	ldr	r0, [r3, #0]
 8085f30:	f3bf 8f5f 	dmb	sy
 8085f34:	4770      	bx	lr
 8085f36:	bf00      	nop
 8085f38:	20000844 	.word	0x20000844

08085f3c <_ZdlPvj>:
 8085f3c:	f7fa b8b1 	b.w	80800a2 <_ZdlPv>

08085f40 <_ZnajRKSt9nothrow_t>:
 8085f40:	f000 b800 	b.w	8085f44 <_ZnwjRKSt9nothrow_t>

08085f44 <_ZnwjRKSt9nothrow_t>:
 8085f44:	b510      	push	{r4, lr}
 8085f46:	2800      	cmp	r0, #0
 8085f48:	bf14      	ite	ne
 8085f4a:	4604      	movne	r4, r0
 8085f4c:	2401      	moveq	r4, #1
 8085f4e:	4620      	mov	r0, r4
 8085f50:	f7fe fa2c 	bl	80843ac <malloc>
 8085f54:	b920      	cbnz	r0, 8085f60 <_ZnwjRKSt9nothrow_t+0x1c>
 8085f56:	f7ff ffe9 	bl	8085f2c <_ZSt15get_new_handlerv>
 8085f5a:	b108      	cbz	r0, 8085f60 <_ZnwjRKSt9nothrow_t+0x1c>
 8085f5c:	4780      	blx	r0
 8085f5e:	e7f6      	b.n	8085f4e <_ZnwjRKSt9nothrow_t+0xa>
 8085f60:	bd10      	pop	{r4, pc}

08085f62 <_ZSt25__throw_bad_function_callv>:
 8085f62:	b508      	push	{r3, lr}
 8085f64:	f7fe fa62 	bl	808442c <abort>

08085f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8085f68:	4b18      	ldr	r3, [pc, #96]	; (8085fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8085f6a:	681a      	ldr	r2, [r3, #0]
 8085f6c:	07d1      	lsls	r1, r2, #31
 8085f6e:	bf5c      	itt	pl
 8085f70:	2201      	movpl	r2, #1
 8085f72:	601a      	strpl	r2, [r3, #0]
 8085f74:	4b16      	ldr	r3, [pc, #88]	; (8085fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8085f76:	681a      	ldr	r2, [r3, #0]
 8085f78:	07d2      	lsls	r2, r2, #31
 8085f7a:	bf5c      	itt	pl
 8085f7c:	2201      	movpl	r2, #1
 8085f7e:	601a      	strpl	r2, [r3, #0]
 8085f80:	4b14      	ldr	r3, [pc, #80]	; (8085fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8085f82:	681a      	ldr	r2, [r3, #0]
 8085f84:	07d0      	lsls	r0, r2, #31
 8085f86:	bf5c      	itt	pl
 8085f88:	2201      	movpl	r2, #1
 8085f8a:	601a      	strpl	r2, [r3, #0]
 8085f8c:	4b12      	ldr	r3, [pc, #72]	; (8085fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8085f8e:	681a      	ldr	r2, [r3, #0]
 8085f90:	07d1      	lsls	r1, r2, #31
 8085f92:	bf5c      	itt	pl
 8085f94:	2201      	movpl	r2, #1
 8085f96:	601a      	strpl	r2, [r3, #0]
 8085f98:	4b10      	ldr	r3, [pc, #64]	; (8085fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8085f9a:	681a      	ldr	r2, [r3, #0]
 8085f9c:	07d2      	lsls	r2, r2, #31
 8085f9e:	bf5c      	itt	pl
 8085fa0:	2201      	movpl	r2, #1
 8085fa2:	601a      	strpl	r2, [r3, #0]
 8085fa4:	4b0e      	ldr	r3, [pc, #56]	; (8085fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8085fa6:	681a      	ldr	r2, [r3, #0]
 8085fa8:	07d0      	lsls	r0, r2, #31
 8085faa:	bf5c      	itt	pl
 8085fac:	2201      	movpl	r2, #1
 8085fae:	601a      	strpl	r2, [r3, #0]
 8085fb0:	4b0c      	ldr	r3, [pc, #48]	; (8085fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8085fb2:	681a      	ldr	r2, [r3, #0]
 8085fb4:	07d1      	lsls	r1, r2, #31
 8085fb6:	bf5c      	itt	pl
 8085fb8:	2201      	movpl	r2, #1
 8085fba:	601a      	strpl	r2, [r3, #0]
 8085fbc:	4b0a      	ldr	r3, [pc, #40]	; (8085fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8085fbe:	681a      	ldr	r2, [r3, #0]
 8085fc0:	07d2      	lsls	r2, r2, #31
 8085fc2:	bf5c      	itt	pl
 8085fc4:	2201      	movpl	r2, #1
 8085fc6:	601a      	strpl	r2, [r3, #0]
 8085fc8:	4770      	bx	lr
 8085fca:	bf00      	nop
 8085fcc:	20000864 	.word	0x20000864
 8085fd0:	20000860 	.word	0x20000860
 8085fd4:	2000085c 	.word	0x2000085c
 8085fd8:	20000858 	.word	0x20000858
 8085fdc:	20000854 	.word	0x20000854
 8085fe0:	20000850 	.word	0x20000850
 8085fe4:	2000084c 	.word	0x2000084c
 8085fe8:	20000848 	.word	0x20000848

08085fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8085fec:	4b24      	ldr	r3, [pc, #144]	; (8086080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8085fee:	681a      	ldr	r2, [r3, #0]
 8085ff0:	07d0      	lsls	r0, r2, #31
 8085ff2:	bf5c      	itt	pl
 8085ff4:	2201      	movpl	r2, #1
 8085ff6:	601a      	strpl	r2, [r3, #0]
 8085ff8:	4b22      	ldr	r3, [pc, #136]	; (8086084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8085ffa:	681a      	ldr	r2, [r3, #0]
 8085ffc:	07d1      	lsls	r1, r2, #31
 8085ffe:	bf5c      	itt	pl
 8086000:	2201      	movpl	r2, #1
 8086002:	601a      	strpl	r2, [r3, #0]
 8086004:	4b20      	ldr	r3, [pc, #128]	; (8086088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8086006:	681a      	ldr	r2, [r3, #0]
 8086008:	07d2      	lsls	r2, r2, #31
 808600a:	bf5c      	itt	pl
 808600c:	2201      	movpl	r2, #1
 808600e:	601a      	strpl	r2, [r3, #0]
 8086010:	4b1e      	ldr	r3, [pc, #120]	; (808608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8086012:	681a      	ldr	r2, [r3, #0]
 8086014:	07d0      	lsls	r0, r2, #31
 8086016:	bf5c      	itt	pl
 8086018:	2201      	movpl	r2, #1
 808601a:	601a      	strpl	r2, [r3, #0]
 808601c:	4b1c      	ldr	r3, [pc, #112]	; (8086090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808601e:	681a      	ldr	r2, [r3, #0]
 8086020:	07d1      	lsls	r1, r2, #31
 8086022:	bf5c      	itt	pl
 8086024:	2201      	movpl	r2, #1
 8086026:	601a      	strpl	r2, [r3, #0]
 8086028:	4b1a      	ldr	r3, [pc, #104]	; (8086094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808602a:	681a      	ldr	r2, [r3, #0]
 808602c:	07d2      	lsls	r2, r2, #31
 808602e:	bf5c      	itt	pl
 8086030:	2201      	movpl	r2, #1
 8086032:	601a      	strpl	r2, [r3, #0]
 8086034:	4b18      	ldr	r3, [pc, #96]	; (8086098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8086036:	681a      	ldr	r2, [r3, #0]
 8086038:	07d0      	lsls	r0, r2, #31
 808603a:	bf5c      	itt	pl
 808603c:	2201      	movpl	r2, #1
 808603e:	601a      	strpl	r2, [r3, #0]
 8086040:	4b16      	ldr	r3, [pc, #88]	; (808609c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8086042:	681a      	ldr	r2, [r3, #0]
 8086044:	07d1      	lsls	r1, r2, #31
 8086046:	bf5c      	itt	pl
 8086048:	2201      	movpl	r2, #1
 808604a:	601a      	strpl	r2, [r3, #0]
 808604c:	4b14      	ldr	r3, [pc, #80]	; (80860a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808604e:	681a      	ldr	r2, [r3, #0]
 8086050:	07d2      	lsls	r2, r2, #31
 8086052:	bf5c      	itt	pl
 8086054:	2201      	movpl	r2, #1
 8086056:	601a      	strpl	r2, [r3, #0]
 8086058:	4b12      	ldr	r3, [pc, #72]	; (80860a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808605a:	681a      	ldr	r2, [r3, #0]
 808605c:	07d0      	lsls	r0, r2, #31
 808605e:	bf5c      	itt	pl
 8086060:	2201      	movpl	r2, #1
 8086062:	601a      	strpl	r2, [r3, #0]
 8086064:	4b10      	ldr	r3, [pc, #64]	; (80860a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8086066:	681a      	ldr	r2, [r3, #0]
 8086068:	07d1      	lsls	r1, r2, #31
 808606a:	bf5c      	itt	pl
 808606c:	2201      	movpl	r2, #1
 808606e:	601a      	strpl	r2, [r3, #0]
 8086070:	4b0e      	ldr	r3, [pc, #56]	; (80860ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8086072:	681a      	ldr	r2, [r3, #0]
 8086074:	07d2      	lsls	r2, r2, #31
 8086076:	bf5c      	itt	pl
 8086078:	2201      	movpl	r2, #1
 808607a:	601a      	strpl	r2, [r3, #0]
 808607c:	4770      	bx	lr
 808607e:	bf00      	nop
 8086080:	20000894 	.word	0x20000894
 8086084:	20000890 	.word	0x20000890
 8086088:	2000088c 	.word	0x2000088c
 808608c:	20000888 	.word	0x20000888
 8086090:	20000884 	.word	0x20000884
 8086094:	20000880 	.word	0x20000880
 8086098:	2000087c 	.word	0x2000087c
 808609c:	20000878 	.word	0x20000878
 80860a0:	20000874 	.word	0x20000874
 80860a4:	20000870 	.word	0x20000870
 80860a8:	2000086c 	.word	0x2000086c
 80860ac:	20000868 	.word	0x20000868

080860b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80860b0:	4b24      	ldr	r3, [pc, #144]	; (8086144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80860b2:	681a      	ldr	r2, [r3, #0]
 80860b4:	07d0      	lsls	r0, r2, #31
 80860b6:	bf5c      	itt	pl
 80860b8:	2201      	movpl	r2, #1
 80860ba:	601a      	strpl	r2, [r3, #0]
 80860bc:	4b22      	ldr	r3, [pc, #136]	; (8086148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80860be:	681a      	ldr	r2, [r3, #0]
 80860c0:	07d1      	lsls	r1, r2, #31
 80860c2:	bf5c      	itt	pl
 80860c4:	2201      	movpl	r2, #1
 80860c6:	601a      	strpl	r2, [r3, #0]
 80860c8:	4b20      	ldr	r3, [pc, #128]	; (808614c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80860ca:	681a      	ldr	r2, [r3, #0]
 80860cc:	07d2      	lsls	r2, r2, #31
 80860ce:	bf5c      	itt	pl
 80860d0:	2201      	movpl	r2, #1
 80860d2:	601a      	strpl	r2, [r3, #0]
 80860d4:	4b1e      	ldr	r3, [pc, #120]	; (8086150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80860d6:	681a      	ldr	r2, [r3, #0]
 80860d8:	07d0      	lsls	r0, r2, #31
 80860da:	bf5c      	itt	pl
 80860dc:	2201      	movpl	r2, #1
 80860de:	601a      	strpl	r2, [r3, #0]
 80860e0:	4b1c      	ldr	r3, [pc, #112]	; (8086154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80860e2:	681a      	ldr	r2, [r3, #0]
 80860e4:	07d1      	lsls	r1, r2, #31
 80860e6:	bf5c      	itt	pl
 80860e8:	2201      	movpl	r2, #1
 80860ea:	601a      	strpl	r2, [r3, #0]
 80860ec:	4b1a      	ldr	r3, [pc, #104]	; (8086158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80860ee:	681a      	ldr	r2, [r3, #0]
 80860f0:	07d2      	lsls	r2, r2, #31
 80860f2:	bf5c      	itt	pl
 80860f4:	2201      	movpl	r2, #1
 80860f6:	601a      	strpl	r2, [r3, #0]
 80860f8:	4b18      	ldr	r3, [pc, #96]	; (808615c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80860fa:	681a      	ldr	r2, [r3, #0]
 80860fc:	07d0      	lsls	r0, r2, #31
 80860fe:	bf5c      	itt	pl
 8086100:	2201      	movpl	r2, #1
 8086102:	601a      	strpl	r2, [r3, #0]
 8086104:	4b16      	ldr	r3, [pc, #88]	; (8086160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8086106:	681a      	ldr	r2, [r3, #0]
 8086108:	07d1      	lsls	r1, r2, #31
 808610a:	bf5c      	itt	pl
 808610c:	2201      	movpl	r2, #1
 808610e:	601a      	strpl	r2, [r3, #0]
 8086110:	4b14      	ldr	r3, [pc, #80]	; (8086164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8086112:	681a      	ldr	r2, [r3, #0]
 8086114:	07d2      	lsls	r2, r2, #31
 8086116:	bf5c      	itt	pl
 8086118:	2201      	movpl	r2, #1
 808611a:	601a      	strpl	r2, [r3, #0]
 808611c:	4b12      	ldr	r3, [pc, #72]	; (8086168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808611e:	681a      	ldr	r2, [r3, #0]
 8086120:	07d0      	lsls	r0, r2, #31
 8086122:	bf5c      	itt	pl
 8086124:	2201      	movpl	r2, #1
 8086126:	601a      	strpl	r2, [r3, #0]
 8086128:	4b10      	ldr	r3, [pc, #64]	; (808616c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808612a:	681a      	ldr	r2, [r3, #0]
 808612c:	07d1      	lsls	r1, r2, #31
 808612e:	bf5c      	itt	pl
 8086130:	2201      	movpl	r2, #1
 8086132:	601a      	strpl	r2, [r3, #0]
 8086134:	4b0e      	ldr	r3, [pc, #56]	; (8086170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8086136:	681a      	ldr	r2, [r3, #0]
 8086138:	07d2      	lsls	r2, r2, #31
 808613a:	bf5c      	itt	pl
 808613c:	2201      	movpl	r2, #1
 808613e:	601a      	strpl	r2, [r3, #0]
 8086140:	4770      	bx	lr
 8086142:	bf00      	nop
 8086144:	200008c4 	.word	0x200008c4
 8086148:	200008c0 	.word	0x200008c0
 808614c:	200008bc 	.word	0x200008bc
 8086150:	200008b8 	.word	0x200008b8
 8086154:	200008b4 	.word	0x200008b4
 8086158:	200008b0 	.word	0x200008b0
 808615c:	200008ac 	.word	0x200008ac
 8086160:	200008a8 	.word	0x200008a8
 8086164:	200008a4 	.word	0x200008a4
 8086168:	200008a0 	.word	0x200008a0
 808616c:	2000089c 	.word	0x2000089c
 8086170:	20000898 	.word	0x20000898

08086174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8086174:	4b18      	ldr	r3, [pc, #96]	; (80861d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8086176:	681a      	ldr	r2, [r3, #0]
 8086178:	07d1      	lsls	r1, r2, #31
 808617a:	bf5c      	itt	pl
 808617c:	2201      	movpl	r2, #1
 808617e:	601a      	strpl	r2, [r3, #0]
 8086180:	4b16      	ldr	r3, [pc, #88]	; (80861dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8086182:	681a      	ldr	r2, [r3, #0]
 8086184:	07d2      	lsls	r2, r2, #31
 8086186:	bf5c      	itt	pl
 8086188:	2201      	movpl	r2, #1
 808618a:	601a      	strpl	r2, [r3, #0]
 808618c:	4b14      	ldr	r3, [pc, #80]	; (80861e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808618e:	681a      	ldr	r2, [r3, #0]
 8086190:	07d0      	lsls	r0, r2, #31
 8086192:	bf5c      	itt	pl
 8086194:	2201      	movpl	r2, #1
 8086196:	601a      	strpl	r2, [r3, #0]
 8086198:	4b12      	ldr	r3, [pc, #72]	; (80861e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808619a:	681a      	ldr	r2, [r3, #0]
 808619c:	07d1      	lsls	r1, r2, #31
 808619e:	bf5c      	itt	pl
 80861a0:	2201      	movpl	r2, #1
 80861a2:	601a      	strpl	r2, [r3, #0]
 80861a4:	4b10      	ldr	r3, [pc, #64]	; (80861e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80861a6:	681a      	ldr	r2, [r3, #0]
 80861a8:	07d2      	lsls	r2, r2, #31
 80861aa:	bf5c      	itt	pl
 80861ac:	2201      	movpl	r2, #1
 80861ae:	601a      	strpl	r2, [r3, #0]
 80861b0:	4b0e      	ldr	r3, [pc, #56]	; (80861ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80861b2:	681a      	ldr	r2, [r3, #0]
 80861b4:	07d0      	lsls	r0, r2, #31
 80861b6:	bf5c      	itt	pl
 80861b8:	2201      	movpl	r2, #1
 80861ba:	601a      	strpl	r2, [r3, #0]
 80861bc:	4b0c      	ldr	r3, [pc, #48]	; (80861f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80861be:	681a      	ldr	r2, [r3, #0]
 80861c0:	07d1      	lsls	r1, r2, #31
 80861c2:	bf5c      	itt	pl
 80861c4:	2201      	movpl	r2, #1
 80861c6:	601a      	strpl	r2, [r3, #0]
 80861c8:	4b0a      	ldr	r3, [pc, #40]	; (80861f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80861ca:	681a      	ldr	r2, [r3, #0]
 80861cc:	07d2      	lsls	r2, r2, #31
 80861ce:	bf5c      	itt	pl
 80861d0:	2201      	movpl	r2, #1
 80861d2:	601a      	strpl	r2, [r3, #0]
 80861d4:	4770      	bx	lr
 80861d6:	bf00      	nop
 80861d8:	200008e4 	.word	0x200008e4
 80861dc:	200008e0 	.word	0x200008e0
 80861e0:	200008dc 	.word	0x200008dc
 80861e4:	200008d8 	.word	0x200008d8
 80861e8:	200008d4 	.word	0x200008d4
 80861ec:	200008d0 	.word	0x200008d0
 80861f0:	200008cc 	.word	0x200008cc
 80861f4:	200008c8 	.word	0x200008c8

080861f8 <__aeabi_drsub>:
 80861f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80861fc:	e002      	b.n	8086204 <__adddf3>
 80861fe:	bf00      	nop

08086200 <__aeabi_dsub>:
 8086200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08086204 <__adddf3>:
 8086204:	b530      	push	{r4, r5, lr}
 8086206:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808620a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808620e:	ea94 0f05 	teq	r4, r5
 8086212:	bf08      	it	eq
 8086214:	ea90 0f02 	teqeq	r0, r2
 8086218:	bf1f      	itttt	ne
 808621a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808621e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8086222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8086226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808622a:	f000 80e2 	beq.w	80863f2 <__adddf3+0x1ee>
 808622e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8086232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8086236:	bfb8      	it	lt
 8086238:	426d      	neglt	r5, r5
 808623a:	dd0c      	ble.n	8086256 <__adddf3+0x52>
 808623c:	442c      	add	r4, r5
 808623e:	ea80 0202 	eor.w	r2, r0, r2
 8086242:	ea81 0303 	eor.w	r3, r1, r3
 8086246:	ea82 0000 	eor.w	r0, r2, r0
 808624a:	ea83 0101 	eor.w	r1, r3, r1
 808624e:	ea80 0202 	eor.w	r2, r0, r2
 8086252:	ea81 0303 	eor.w	r3, r1, r3
 8086256:	2d36      	cmp	r5, #54	; 0x36
 8086258:	bf88      	it	hi
 808625a:	bd30      	pophi	{r4, r5, pc}
 808625c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8086260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8086264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8086268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808626c:	d002      	beq.n	8086274 <__adddf3+0x70>
 808626e:	4240      	negs	r0, r0
 8086270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8086278:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808627c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8086280:	d002      	beq.n	8086288 <__adddf3+0x84>
 8086282:	4252      	negs	r2, r2
 8086284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8086288:	ea94 0f05 	teq	r4, r5
 808628c:	f000 80a7 	beq.w	80863de <__adddf3+0x1da>
 8086290:	f1a4 0401 	sub.w	r4, r4, #1
 8086294:	f1d5 0e20 	rsbs	lr, r5, #32
 8086298:	db0d      	blt.n	80862b6 <__adddf3+0xb2>
 808629a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808629e:	fa22 f205 	lsr.w	r2, r2, r5
 80862a2:	1880      	adds	r0, r0, r2
 80862a4:	f141 0100 	adc.w	r1, r1, #0
 80862a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80862ac:	1880      	adds	r0, r0, r2
 80862ae:	fa43 f305 	asr.w	r3, r3, r5
 80862b2:	4159      	adcs	r1, r3
 80862b4:	e00e      	b.n	80862d4 <__adddf3+0xd0>
 80862b6:	f1a5 0520 	sub.w	r5, r5, #32
 80862ba:	f10e 0e20 	add.w	lr, lr, #32
 80862be:	2a01      	cmp	r2, #1
 80862c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80862c4:	bf28      	it	cs
 80862c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80862ca:	fa43 f305 	asr.w	r3, r3, r5
 80862ce:	18c0      	adds	r0, r0, r3
 80862d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80862d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80862d8:	d507      	bpl.n	80862ea <__adddf3+0xe6>
 80862da:	f04f 0e00 	mov.w	lr, #0
 80862de:	f1dc 0c00 	rsbs	ip, ip, #0
 80862e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80862e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80862ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80862ee:	d31b      	bcc.n	8086328 <__adddf3+0x124>
 80862f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80862f4:	d30c      	bcc.n	8086310 <__adddf3+0x10c>
 80862f6:	0849      	lsrs	r1, r1, #1
 80862f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80862fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8086300:	f104 0401 	add.w	r4, r4, #1
 8086304:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8086308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808630c:	f080 809a 	bcs.w	8086444 <__adddf3+0x240>
 8086310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8086314:	bf08      	it	eq
 8086316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808631a:	f150 0000 	adcs.w	r0, r0, #0
 808631e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8086322:	ea41 0105 	orr.w	r1, r1, r5
 8086326:	bd30      	pop	{r4, r5, pc}
 8086328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808632c:	4140      	adcs	r0, r0
 808632e:	eb41 0101 	adc.w	r1, r1, r1
 8086332:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8086336:	f1a4 0401 	sub.w	r4, r4, #1
 808633a:	d1e9      	bne.n	8086310 <__adddf3+0x10c>
 808633c:	f091 0f00 	teq	r1, #0
 8086340:	bf04      	itt	eq
 8086342:	4601      	moveq	r1, r0
 8086344:	2000      	moveq	r0, #0
 8086346:	fab1 f381 	clz	r3, r1
 808634a:	bf08      	it	eq
 808634c:	3320      	addeq	r3, #32
 808634e:	f1a3 030b 	sub.w	r3, r3, #11
 8086352:	f1b3 0220 	subs.w	r2, r3, #32
 8086356:	da0c      	bge.n	8086372 <__adddf3+0x16e>
 8086358:	320c      	adds	r2, #12
 808635a:	dd08      	ble.n	808636e <__adddf3+0x16a>
 808635c:	f102 0c14 	add.w	ip, r2, #20
 8086360:	f1c2 020c 	rsb	r2, r2, #12
 8086364:	fa01 f00c 	lsl.w	r0, r1, ip
 8086368:	fa21 f102 	lsr.w	r1, r1, r2
 808636c:	e00c      	b.n	8086388 <__adddf3+0x184>
 808636e:	f102 0214 	add.w	r2, r2, #20
 8086372:	bfd8      	it	le
 8086374:	f1c2 0c20 	rsble	ip, r2, #32
 8086378:	fa01 f102 	lsl.w	r1, r1, r2
 808637c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8086380:	bfdc      	itt	le
 8086382:	ea41 010c 	orrle.w	r1, r1, ip
 8086386:	4090      	lslle	r0, r2
 8086388:	1ae4      	subs	r4, r4, r3
 808638a:	bfa2      	ittt	ge
 808638c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8086390:	4329      	orrge	r1, r5
 8086392:	bd30      	popge	{r4, r5, pc}
 8086394:	ea6f 0404 	mvn.w	r4, r4
 8086398:	3c1f      	subs	r4, #31
 808639a:	da1c      	bge.n	80863d6 <__adddf3+0x1d2>
 808639c:	340c      	adds	r4, #12
 808639e:	dc0e      	bgt.n	80863be <__adddf3+0x1ba>
 80863a0:	f104 0414 	add.w	r4, r4, #20
 80863a4:	f1c4 0220 	rsb	r2, r4, #32
 80863a8:	fa20 f004 	lsr.w	r0, r0, r4
 80863ac:	fa01 f302 	lsl.w	r3, r1, r2
 80863b0:	ea40 0003 	orr.w	r0, r0, r3
 80863b4:	fa21 f304 	lsr.w	r3, r1, r4
 80863b8:	ea45 0103 	orr.w	r1, r5, r3
 80863bc:	bd30      	pop	{r4, r5, pc}
 80863be:	f1c4 040c 	rsb	r4, r4, #12
 80863c2:	f1c4 0220 	rsb	r2, r4, #32
 80863c6:	fa20 f002 	lsr.w	r0, r0, r2
 80863ca:	fa01 f304 	lsl.w	r3, r1, r4
 80863ce:	ea40 0003 	orr.w	r0, r0, r3
 80863d2:	4629      	mov	r1, r5
 80863d4:	bd30      	pop	{r4, r5, pc}
 80863d6:	fa21 f004 	lsr.w	r0, r1, r4
 80863da:	4629      	mov	r1, r5
 80863dc:	bd30      	pop	{r4, r5, pc}
 80863de:	f094 0f00 	teq	r4, #0
 80863e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80863e6:	bf06      	itte	eq
 80863e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80863ec:	3401      	addeq	r4, #1
 80863ee:	3d01      	subne	r5, #1
 80863f0:	e74e      	b.n	8086290 <__adddf3+0x8c>
 80863f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80863f6:	bf18      	it	ne
 80863f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80863fc:	d029      	beq.n	8086452 <__adddf3+0x24e>
 80863fe:	ea94 0f05 	teq	r4, r5
 8086402:	bf08      	it	eq
 8086404:	ea90 0f02 	teqeq	r0, r2
 8086408:	d005      	beq.n	8086416 <__adddf3+0x212>
 808640a:	ea54 0c00 	orrs.w	ip, r4, r0
 808640e:	bf04      	itt	eq
 8086410:	4619      	moveq	r1, r3
 8086412:	4610      	moveq	r0, r2
 8086414:	bd30      	pop	{r4, r5, pc}
 8086416:	ea91 0f03 	teq	r1, r3
 808641a:	bf1e      	ittt	ne
 808641c:	2100      	movne	r1, #0
 808641e:	2000      	movne	r0, #0
 8086420:	bd30      	popne	{r4, r5, pc}
 8086422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8086426:	d105      	bne.n	8086434 <__adddf3+0x230>
 8086428:	0040      	lsls	r0, r0, #1
 808642a:	4149      	adcs	r1, r1
 808642c:	bf28      	it	cs
 808642e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8086432:	bd30      	pop	{r4, r5, pc}
 8086434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8086438:	bf3c      	itt	cc
 808643a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808643e:	bd30      	popcc	{r4, r5, pc}
 8086440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8086444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8086448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808644c:	f04f 0000 	mov.w	r0, #0
 8086450:	bd30      	pop	{r4, r5, pc}
 8086452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8086456:	bf1a      	itte	ne
 8086458:	4619      	movne	r1, r3
 808645a:	4610      	movne	r0, r2
 808645c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8086460:	bf1c      	itt	ne
 8086462:	460b      	movne	r3, r1
 8086464:	4602      	movne	r2, r0
 8086466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808646a:	bf06      	itte	eq
 808646c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8086470:	ea91 0f03 	teqeq	r1, r3
 8086474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8086478:	bd30      	pop	{r4, r5, pc}
 808647a:	bf00      	nop

0808647c <__aeabi_ui2d>:
 808647c:	f090 0f00 	teq	r0, #0
 8086480:	bf04      	itt	eq
 8086482:	2100      	moveq	r1, #0
 8086484:	4770      	bxeq	lr
 8086486:	b530      	push	{r4, r5, lr}
 8086488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808648c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8086490:	f04f 0500 	mov.w	r5, #0
 8086494:	f04f 0100 	mov.w	r1, #0
 8086498:	e750      	b.n	808633c <__adddf3+0x138>
 808649a:	bf00      	nop

0808649c <__aeabi_i2d>:
 808649c:	f090 0f00 	teq	r0, #0
 80864a0:	bf04      	itt	eq
 80864a2:	2100      	moveq	r1, #0
 80864a4:	4770      	bxeq	lr
 80864a6:	b530      	push	{r4, r5, lr}
 80864a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80864ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80864b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80864b4:	bf48      	it	mi
 80864b6:	4240      	negmi	r0, r0
 80864b8:	f04f 0100 	mov.w	r1, #0
 80864bc:	e73e      	b.n	808633c <__adddf3+0x138>
 80864be:	bf00      	nop

080864c0 <__aeabi_f2d>:
 80864c0:	0042      	lsls	r2, r0, #1
 80864c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80864c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80864ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80864ce:	bf1f      	itttt	ne
 80864d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80864d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80864d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80864dc:	4770      	bxne	lr
 80864de:	f092 0f00 	teq	r2, #0
 80864e2:	bf14      	ite	ne
 80864e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80864e8:	4770      	bxeq	lr
 80864ea:	b530      	push	{r4, r5, lr}
 80864ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80864f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80864f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80864f8:	e720      	b.n	808633c <__adddf3+0x138>
 80864fa:	bf00      	nop

080864fc <__aeabi_ul2d>:
 80864fc:	ea50 0201 	orrs.w	r2, r0, r1
 8086500:	bf08      	it	eq
 8086502:	4770      	bxeq	lr
 8086504:	b530      	push	{r4, r5, lr}
 8086506:	f04f 0500 	mov.w	r5, #0
 808650a:	e00a      	b.n	8086522 <__aeabi_l2d+0x16>

0808650c <__aeabi_l2d>:
 808650c:	ea50 0201 	orrs.w	r2, r0, r1
 8086510:	bf08      	it	eq
 8086512:	4770      	bxeq	lr
 8086514:	b530      	push	{r4, r5, lr}
 8086516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808651a:	d502      	bpl.n	8086522 <__aeabi_l2d+0x16>
 808651c:	4240      	negs	r0, r0
 808651e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8086526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808652a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808652e:	f43f aedc 	beq.w	80862ea <__adddf3+0xe6>
 8086532:	f04f 0203 	mov.w	r2, #3
 8086536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808653a:	bf18      	it	ne
 808653c:	3203      	addne	r2, #3
 808653e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8086542:	bf18      	it	ne
 8086544:	3203      	addne	r2, #3
 8086546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808654a:	f1c2 0320 	rsb	r3, r2, #32
 808654e:	fa00 fc03 	lsl.w	ip, r0, r3
 8086552:	fa20 f002 	lsr.w	r0, r0, r2
 8086556:	fa01 fe03 	lsl.w	lr, r1, r3
 808655a:	ea40 000e 	orr.w	r0, r0, lr
 808655e:	fa21 f102 	lsr.w	r1, r1, r2
 8086562:	4414      	add	r4, r2
 8086564:	e6c1      	b.n	80862ea <__adddf3+0xe6>
 8086566:	bf00      	nop

08086568 <__aeabi_dmul>:
 8086568:	b570      	push	{r4, r5, r6, lr}
 808656a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808656e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8086572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8086576:	bf1d      	ittte	ne
 8086578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808657c:	ea94 0f0c 	teqne	r4, ip
 8086580:	ea95 0f0c 	teqne	r5, ip
 8086584:	f000 f8de 	bleq	8086744 <__aeabi_dmul+0x1dc>
 8086588:	442c      	add	r4, r5
 808658a:	ea81 0603 	eor.w	r6, r1, r3
 808658e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8086592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8086596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808659a:	bf18      	it	ne
 808659c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80865a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80865a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80865a8:	d038      	beq.n	808661c <__aeabi_dmul+0xb4>
 80865aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80865ae:	f04f 0500 	mov.w	r5, #0
 80865b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80865b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80865ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80865be:	f04f 0600 	mov.w	r6, #0
 80865c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80865c6:	f09c 0f00 	teq	ip, #0
 80865ca:	bf18      	it	ne
 80865cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80865d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80865d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80865d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80865dc:	d204      	bcs.n	80865e8 <__aeabi_dmul+0x80>
 80865de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80865e2:	416d      	adcs	r5, r5
 80865e4:	eb46 0606 	adc.w	r6, r6, r6
 80865e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80865ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80865f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80865f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80865f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80865fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8086600:	bf88      	it	hi
 8086602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8086606:	d81e      	bhi.n	8086646 <__aeabi_dmul+0xde>
 8086608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808660c:	bf08      	it	eq
 808660e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8086612:	f150 0000 	adcs.w	r0, r0, #0
 8086616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808661a:	bd70      	pop	{r4, r5, r6, pc}
 808661c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8086620:	ea46 0101 	orr.w	r1, r6, r1
 8086624:	ea40 0002 	orr.w	r0, r0, r2
 8086628:	ea81 0103 	eor.w	r1, r1, r3
 808662c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8086630:	bfc2      	ittt	gt
 8086632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8086636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808663a:	bd70      	popgt	{r4, r5, r6, pc}
 808663c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8086640:	f04f 0e00 	mov.w	lr, #0
 8086644:	3c01      	subs	r4, #1
 8086646:	f300 80ab 	bgt.w	80867a0 <__aeabi_dmul+0x238>
 808664a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808664e:	bfde      	ittt	le
 8086650:	2000      	movle	r0, #0
 8086652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8086656:	bd70      	pople	{r4, r5, r6, pc}
 8086658:	f1c4 0400 	rsb	r4, r4, #0
 808665c:	3c20      	subs	r4, #32
 808665e:	da35      	bge.n	80866cc <__aeabi_dmul+0x164>
 8086660:	340c      	adds	r4, #12
 8086662:	dc1b      	bgt.n	808669c <__aeabi_dmul+0x134>
 8086664:	f104 0414 	add.w	r4, r4, #20
 8086668:	f1c4 0520 	rsb	r5, r4, #32
 808666c:	fa00 f305 	lsl.w	r3, r0, r5
 8086670:	fa20 f004 	lsr.w	r0, r0, r4
 8086674:	fa01 f205 	lsl.w	r2, r1, r5
 8086678:	ea40 0002 	orr.w	r0, r0, r2
 808667c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8086680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8086684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8086688:	fa21 f604 	lsr.w	r6, r1, r4
 808668c:	eb42 0106 	adc.w	r1, r2, r6
 8086690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8086694:	bf08      	it	eq
 8086696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808669a:	bd70      	pop	{r4, r5, r6, pc}
 808669c:	f1c4 040c 	rsb	r4, r4, #12
 80866a0:	f1c4 0520 	rsb	r5, r4, #32
 80866a4:	fa00 f304 	lsl.w	r3, r0, r4
 80866a8:	fa20 f005 	lsr.w	r0, r0, r5
 80866ac:	fa01 f204 	lsl.w	r2, r1, r4
 80866b0:	ea40 0002 	orr.w	r0, r0, r2
 80866b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80866b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80866bc:	f141 0100 	adc.w	r1, r1, #0
 80866c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80866c4:	bf08      	it	eq
 80866c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80866ca:	bd70      	pop	{r4, r5, r6, pc}
 80866cc:	f1c4 0520 	rsb	r5, r4, #32
 80866d0:	fa00 f205 	lsl.w	r2, r0, r5
 80866d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80866d8:	fa20 f304 	lsr.w	r3, r0, r4
 80866dc:	fa01 f205 	lsl.w	r2, r1, r5
 80866e0:	ea43 0302 	orr.w	r3, r3, r2
 80866e4:	fa21 f004 	lsr.w	r0, r1, r4
 80866e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80866ec:	fa21 f204 	lsr.w	r2, r1, r4
 80866f0:	ea20 0002 	bic.w	r0, r0, r2
 80866f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80866f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80866fc:	bf08      	it	eq
 80866fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8086702:	bd70      	pop	{r4, r5, r6, pc}
 8086704:	f094 0f00 	teq	r4, #0
 8086708:	d10f      	bne.n	808672a <__aeabi_dmul+0x1c2>
 808670a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808670e:	0040      	lsls	r0, r0, #1
 8086710:	eb41 0101 	adc.w	r1, r1, r1
 8086714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8086718:	bf08      	it	eq
 808671a:	3c01      	subeq	r4, #1
 808671c:	d0f7      	beq.n	808670e <__aeabi_dmul+0x1a6>
 808671e:	ea41 0106 	orr.w	r1, r1, r6
 8086722:	f095 0f00 	teq	r5, #0
 8086726:	bf18      	it	ne
 8086728:	4770      	bxne	lr
 808672a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808672e:	0052      	lsls	r2, r2, #1
 8086730:	eb43 0303 	adc.w	r3, r3, r3
 8086734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8086738:	bf08      	it	eq
 808673a:	3d01      	subeq	r5, #1
 808673c:	d0f7      	beq.n	808672e <__aeabi_dmul+0x1c6>
 808673e:	ea43 0306 	orr.w	r3, r3, r6
 8086742:	4770      	bx	lr
 8086744:	ea94 0f0c 	teq	r4, ip
 8086748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808674c:	bf18      	it	ne
 808674e:	ea95 0f0c 	teqne	r5, ip
 8086752:	d00c      	beq.n	808676e <__aeabi_dmul+0x206>
 8086754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8086758:	bf18      	it	ne
 808675a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808675e:	d1d1      	bne.n	8086704 <__aeabi_dmul+0x19c>
 8086760:	ea81 0103 	eor.w	r1, r1, r3
 8086764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8086768:	f04f 0000 	mov.w	r0, #0
 808676c:	bd70      	pop	{r4, r5, r6, pc}
 808676e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8086772:	bf06      	itte	eq
 8086774:	4610      	moveq	r0, r2
 8086776:	4619      	moveq	r1, r3
 8086778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808677c:	d019      	beq.n	80867b2 <__aeabi_dmul+0x24a>
 808677e:	ea94 0f0c 	teq	r4, ip
 8086782:	d102      	bne.n	808678a <__aeabi_dmul+0x222>
 8086784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8086788:	d113      	bne.n	80867b2 <__aeabi_dmul+0x24a>
 808678a:	ea95 0f0c 	teq	r5, ip
 808678e:	d105      	bne.n	808679c <__aeabi_dmul+0x234>
 8086790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8086794:	bf1c      	itt	ne
 8086796:	4610      	movne	r0, r2
 8086798:	4619      	movne	r1, r3
 808679a:	d10a      	bne.n	80867b2 <__aeabi_dmul+0x24a>
 808679c:	ea81 0103 	eor.w	r1, r1, r3
 80867a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80867a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80867a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80867ac:	f04f 0000 	mov.w	r0, #0
 80867b0:	bd70      	pop	{r4, r5, r6, pc}
 80867b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80867b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80867ba:	bd70      	pop	{r4, r5, r6, pc}

080867bc <__aeabi_ddiv>:
 80867bc:	b570      	push	{r4, r5, r6, lr}
 80867be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80867c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80867c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80867ca:	bf1d      	ittte	ne
 80867cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80867d0:	ea94 0f0c 	teqne	r4, ip
 80867d4:	ea95 0f0c 	teqne	r5, ip
 80867d8:	f000 f8a7 	bleq	808692a <__aeabi_ddiv+0x16e>
 80867dc:	eba4 0405 	sub.w	r4, r4, r5
 80867e0:	ea81 0e03 	eor.w	lr, r1, r3
 80867e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80867e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80867ec:	f000 8088 	beq.w	8086900 <__aeabi_ddiv+0x144>
 80867f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80867f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80867f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80867fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8086800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8086804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8086808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808680c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8086810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8086814:	429d      	cmp	r5, r3
 8086816:	bf08      	it	eq
 8086818:	4296      	cmpeq	r6, r2
 808681a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808681e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8086822:	d202      	bcs.n	808682a <__aeabi_ddiv+0x6e>
 8086824:	085b      	lsrs	r3, r3, #1
 8086826:	ea4f 0232 	mov.w	r2, r2, rrx
 808682a:	1ab6      	subs	r6, r6, r2
 808682c:	eb65 0503 	sbc.w	r5, r5, r3
 8086830:	085b      	lsrs	r3, r3, #1
 8086832:	ea4f 0232 	mov.w	r2, r2, rrx
 8086836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808683a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808683e:	ebb6 0e02 	subs.w	lr, r6, r2
 8086842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8086846:	bf22      	ittt	cs
 8086848:	1ab6      	subcs	r6, r6, r2
 808684a:	4675      	movcs	r5, lr
 808684c:	ea40 000c 	orrcs.w	r0, r0, ip
 8086850:	085b      	lsrs	r3, r3, #1
 8086852:	ea4f 0232 	mov.w	r2, r2, rrx
 8086856:	ebb6 0e02 	subs.w	lr, r6, r2
 808685a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808685e:	bf22      	ittt	cs
 8086860:	1ab6      	subcs	r6, r6, r2
 8086862:	4675      	movcs	r5, lr
 8086864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8086868:	085b      	lsrs	r3, r3, #1
 808686a:	ea4f 0232 	mov.w	r2, r2, rrx
 808686e:	ebb6 0e02 	subs.w	lr, r6, r2
 8086872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8086876:	bf22      	ittt	cs
 8086878:	1ab6      	subcs	r6, r6, r2
 808687a:	4675      	movcs	r5, lr
 808687c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8086880:	085b      	lsrs	r3, r3, #1
 8086882:	ea4f 0232 	mov.w	r2, r2, rrx
 8086886:	ebb6 0e02 	subs.w	lr, r6, r2
 808688a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808688e:	bf22      	ittt	cs
 8086890:	1ab6      	subcs	r6, r6, r2
 8086892:	4675      	movcs	r5, lr
 8086894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8086898:	ea55 0e06 	orrs.w	lr, r5, r6
 808689c:	d018      	beq.n	80868d0 <__aeabi_ddiv+0x114>
 808689e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80868a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80868a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80868aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80868ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80868b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80868b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80868ba:	d1c0      	bne.n	808683e <__aeabi_ddiv+0x82>
 80868bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80868c0:	d10b      	bne.n	80868da <__aeabi_ddiv+0x11e>
 80868c2:	ea41 0100 	orr.w	r1, r1, r0
 80868c6:	f04f 0000 	mov.w	r0, #0
 80868ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80868ce:	e7b6      	b.n	808683e <__aeabi_ddiv+0x82>
 80868d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80868d4:	bf04      	itt	eq
 80868d6:	4301      	orreq	r1, r0
 80868d8:	2000      	moveq	r0, #0
 80868da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80868de:	bf88      	it	hi
 80868e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80868e4:	f63f aeaf 	bhi.w	8086646 <__aeabi_dmul+0xde>
 80868e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80868ec:	bf04      	itt	eq
 80868ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80868f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80868f6:	f150 0000 	adcs.w	r0, r0, #0
 80868fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80868fe:	bd70      	pop	{r4, r5, r6, pc}
 8086900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8086904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8086908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808690c:	bfc2      	ittt	gt
 808690e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8086912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8086916:	bd70      	popgt	{r4, r5, r6, pc}
 8086918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808691c:	f04f 0e00 	mov.w	lr, #0
 8086920:	3c01      	subs	r4, #1
 8086922:	e690      	b.n	8086646 <__aeabi_dmul+0xde>
 8086924:	ea45 0e06 	orr.w	lr, r5, r6
 8086928:	e68d      	b.n	8086646 <__aeabi_dmul+0xde>
 808692a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808692e:	ea94 0f0c 	teq	r4, ip
 8086932:	bf08      	it	eq
 8086934:	ea95 0f0c 	teqeq	r5, ip
 8086938:	f43f af3b 	beq.w	80867b2 <__aeabi_dmul+0x24a>
 808693c:	ea94 0f0c 	teq	r4, ip
 8086940:	d10a      	bne.n	8086958 <__aeabi_ddiv+0x19c>
 8086942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8086946:	f47f af34 	bne.w	80867b2 <__aeabi_dmul+0x24a>
 808694a:	ea95 0f0c 	teq	r5, ip
 808694e:	f47f af25 	bne.w	808679c <__aeabi_dmul+0x234>
 8086952:	4610      	mov	r0, r2
 8086954:	4619      	mov	r1, r3
 8086956:	e72c      	b.n	80867b2 <__aeabi_dmul+0x24a>
 8086958:	ea95 0f0c 	teq	r5, ip
 808695c:	d106      	bne.n	808696c <__aeabi_ddiv+0x1b0>
 808695e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8086962:	f43f aefd 	beq.w	8086760 <__aeabi_dmul+0x1f8>
 8086966:	4610      	mov	r0, r2
 8086968:	4619      	mov	r1, r3
 808696a:	e722      	b.n	80867b2 <__aeabi_dmul+0x24a>
 808696c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8086970:	bf18      	it	ne
 8086972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8086976:	f47f aec5 	bne.w	8086704 <__aeabi_dmul+0x19c>
 808697a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808697e:	f47f af0d 	bne.w	808679c <__aeabi_dmul+0x234>
 8086982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8086986:	f47f aeeb 	bne.w	8086760 <__aeabi_dmul+0x1f8>
 808698a:	e712      	b.n	80867b2 <__aeabi_dmul+0x24a>

0808698c <__gedf2>:
 808698c:	f04f 3cff 	mov.w	ip, #4294967295
 8086990:	e006      	b.n	80869a0 <__cmpdf2+0x4>
 8086992:	bf00      	nop

08086994 <__ledf2>:
 8086994:	f04f 0c01 	mov.w	ip, #1
 8086998:	e002      	b.n	80869a0 <__cmpdf2+0x4>
 808699a:	bf00      	nop

0808699c <__cmpdf2>:
 808699c:	f04f 0c01 	mov.w	ip, #1
 80869a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80869a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80869a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80869ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80869b0:	bf18      	it	ne
 80869b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80869b6:	d01b      	beq.n	80869f0 <__cmpdf2+0x54>
 80869b8:	b001      	add	sp, #4
 80869ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80869be:	bf0c      	ite	eq
 80869c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80869c4:	ea91 0f03 	teqne	r1, r3
 80869c8:	bf02      	ittt	eq
 80869ca:	ea90 0f02 	teqeq	r0, r2
 80869ce:	2000      	moveq	r0, #0
 80869d0:	4770      	bxeq	lr
 80869d2:	f110 0f00 	cmn.w	r0, #0
 80869d6:	ea91 0f03 	teq	r1, r3
 80869da:	bf58      	it	pl
 80869dc:	4299      	cmppl	r1, r3
 80869de:	bf08      	it	eq
 80869e0:	4290      	cmpeq	r0, r2
 80869e2:	bf2c      	ite	cs
 80869e4:	17d8      	asrcs	r0, r3, #31
 80869e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80869ea:	f040 0001 	orr.w	r0, r0, #1
 80869ee:	4770      	bx	lr
 80869f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80869f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80869f8:	d102      	bne.n	8086a00 <__cmpdf2+0x64>
 80869fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80869fe:	d107      	bne.n	8086a10 <__cmpdf2+0x74>
 8086a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8086a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086a08:	d1d6      	bne.n	80869b8 <__cmpdf2+0x1c>
 8086a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8086a0e:	d0d3      	beq.n	80869b8 <__cmpdf2+0x1c>
 8086a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8086a14:	4770      	bx	lr
 8086a16:	bf00      	nop

08086a18 <__aeabi_cdrcmple>:
 8086a18:	4684      	mov	ip, r0
 8086a1a:	4610      	mov	r0, r2
 8086a1c:	4662      	mov	r2, ip
 8086a1e:	468c      	mov	ip, r1
 8086a20:	4619      	mov	r1, r3
 8086a22:	4663      	mov	r3, ip
 8086a24:	e000      	b.n	8086a28 <__aeabi_cdcmpeq>
 8086a26:	bf00      	nop

08086a28 <__aeabi_cdcmpeq>:
 8086a28:	b501      	push	{r0, lr}
 8086a2a:	f7ff ffb7 	bl	808699c <__cmpdf2>
 8086a2e:	2800      	cmp	r0, #0
 8086a30:	bf48      	it	mi
 8086a32:	f110 0f00 	cmnmi.w	r0, #0
 8086a36:	bd01      	pop	{r0, pc}

08086a38 <__aeabi_dcmpeq>:
 8086a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086a3c:	f7ff fff4 	bl	8086a28 <__aeabi_cdcmpeq>
 8086a40:	bf0c      	ite	eq
 8086a42:	2001      	moveq	r0, #1
 8086a44:	2000      	movne	r0, #0
 8086a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8086a4a:	bf00      	nop

08086a4c <__aeabi_dcmplt>:
 8086a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086a50:	f7ff ffea 	bl	8086a28 <__aeabi_cdcmpeq>
 8086a54:	bf34      	ite	cc
 8086a56:	2001      	movcc	r0, #1
 8086a58:	2000      	movcs	r0, #0
 8086a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8086a5e:	bf00      	nop

08086a60 <__aeabi_dcmple>:
 8086a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086a64:	f7ff ffe0 	bl	8086a28 <__aeabi_cdcmpeq>
 8086a68:	bf94      	ite	ls
 8086a6a:	2001      	movls	r0, #1
 8086a6c:	2000      	movhi	r0, #0
 8086a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8086a72:	bf00      	nop

08086a74 <__aeabi_dcmpge>:
 8086a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086a78:	f7ff ffce 	bl	8086a18 <__aeabi_cdrcmple>
 8086a7c:	bf94      	ite	ls
 8086a7e:	2001      	movls	r0, #1
 8086a80:	2000      	movhi	r0, #0
 8086a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8086a86:	bf00      	nop

08086a88 <__aeabi_dcmpgt>:
 8086a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8086a8c:	f7ff ffc4 	bl	8086a18 <__aeabi_cdrcmple>
 8086a90:	bf34      	ite	cc
 8086a92:	2001      	movcc	r0, #1
 8086a94:	2000      	movcs	r0, #0
 8086a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8086a9a:	bf00      	nop

08086a9c <__aeabi_dcmpun>:
 8086a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8086aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086aa4:	d102      	bne.n	8086aac <__aeabi_dcmpun+0x10>
 8086aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8086aaa:	d10a      	bne.n	8086ac2 <__aeabi_dcmpun+0x26>
 8086aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8086ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8086ab4:	d102      	bne.n	8086abc <__aeabi_dcmpun+0x20>
 8086ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8086aba:	d102      	bne.n	8086ac2 <__aeabi_dcmpun+0x26>
 8086abc:	f04f 0000 	mov.w	r0, #0
 8086ac0:	4770      	bx	lr
 8086ac2:	f04f 0001 	mov.w	r0, #1
 8086ac6:	4770      	bx	lr

08086ac8 <__aeabi_d2iz>:
 8086ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8086acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8086ad0:	d215      	bcs.n	8086afe <__aeabi_d2iz+0x36>
 8086ad2:	d511      	bpl.n	8086af8 <__aeabi_d2iz+0x30>
 8086ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8086ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8086adc:	d912      	bls.n	8086b04 <__aeabi_d2iz+0x3c>
 8086ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8086ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8086ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8086aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8086aee:	fa23 f002 	lsr.w	r0, r3, r2
 8086af2:	bf18      	it	ne
 8086af4:	4240      	negne	r0, r0
 8086af6:	4770      	bx	lr
 8086af8:	f04f 0000 	mov.w	r0, #0
 8086afc:	4770      	bx	lr
 8086afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8086b02:	d105      	bne.n	8086b10 <__aeabi_d2iz+0x48>
 8086b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8086b08:	bf08      	it	eq
 8086b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8086b0e:	4770      	bx	lr
 8086b10:	f04f 0000 	mov.w	r0, #0
 8086b14:	4770      	bx	lr
 8086b16:	bf00      	nop

08086b18 <__aeabi_d2uiz>:
 8086b18:	004a      	lsls	r2, r1, #1
 8086b1a:	d211      	bcs.n	8086b40 <__aeabi_d2uiz+0x28>
 8086b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8086b20:	d211      	bcs.n	8086b46 <__aeabi_d2uiz+0x2e>
 8086b22:	d50d      	bpl.n	8086b40 <__aeabi_d2uiz+0x28>
 8086b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8086b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8086b2c:	d40e      	bmi.n	8086b4c <__aeabi_d2uiz+0x34>
 8086b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8086b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8086b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8086b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8086b3e:	4770      	bx	lr
 8086b40:	f04f 0000 	mov.w	r0, #0
 8086b44:	4770      	bx	lr
 8086b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8086b4a:	d102      	bne.n	8086b52 <__aeabi_d2uiz+0x3a>
 8086b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8086b50:	4770      	bx	lr
 8086b52:	f04f 0000 	mov.w	r0, #0
 8086b56:	4770      	bx	lr

08086b58 <__aeabi_d2f>:
 8086b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8086b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8086b60:	bf24      	itt	cs
 8086b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8086b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8086b6a:	d90d      	bls.n	8086b88 <__aeabi_d2f+0x30>
 8086b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8086b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8086b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8086b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8086b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8086b80:	bf08      	it	eq
 8086b82:	f020 0001 	biceq.w	r0, r0, #1
 8086b86:	4770      	bx	lr
 8086b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8086b8c:	d121      	bne.n	8086bd2 <__aeabi_d2f+0x7a>
 8086b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8086b92:	bfbc      	itt	lt
 8086b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8086b98:	4770      	bxlt	lr
 8086b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8086b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8086ba2:	f1c2 0218 	rsb	r2, r2, #24
 8086ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8086baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8086bae:	fa20 f002 	lsr.w	r0, r0, r2
 8086bb2:	bf18      	it	ne
 8086bb4:	f040 0001 	orrne.w	r0, r0, #1
 8086bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8086bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8086bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8086bc4:	ea40 000c 	orr.w	r0, r0, ip
 8086bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8086bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8086bd0:	e7cc      	b.n	8086b6c <__aeabi_d2f+0x14>
 8086bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8086bd6:	d107      	bne.n	8086be8 <__aeabi_d2f+0x90>
 8086bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8086bdc:	bf1e      	ittt	ne
 8086bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8086be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8086be6:	4770      	bxne	lr
 8086be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8086bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8086bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086bf4:	4770      	bx	lr
 8086bf6:	bf00      	nop

08086bf8 <__aeabi_frsub>:
 8086bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8086bfc:	e002      	b.n	8086c04 <__addsf3>
 8086bfe:	bf00      	nop

08086c00 <__aeabi_fsub>:
 8086c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08086c04 <__addsf3>:
 8086c04:	0042      	lsls	r2, r0, #1
 8086c06:	bf1f      	itttt	ne
 8086c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8086c0c:	ea92 0f03 	teqne	r2, r3
 8086c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8086c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8086c18:	d06a      	beq.n	8086cf0 <__addsf3+0xec>
 8086c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8086c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8086c22:	bfc1      	itttt	gt
 8086c24:	18d2      	addgt	r2, r2, r3
 8086c26:	4041      	eorgt	r1, r0
 8086c28:	4048      	eorgt	r0, r1
 8086c2a:	4041      	eorgt	r1, r0
 8086c2c:	bfb8      	it	lt
 8086c2e:	425b      	neglt	r3, r3
 8086c30:	2b19      	cmp	r3, #25
 8086c32:	bf88      	it	hi
 8086c34:	4770      	bxhi	lr
 8086c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8086c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8086c42:	bf18      	it	ne
 8086c44:	4240      	negne	r0, r0
 8086c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8086c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8086c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8086c52:	bf18      	it	ne
 8086c54:	4249      	negne	r1, r1
 8086c56:	ea92 0f03 	teq	r2, r3
 8086c5a:	d03f      	beq.n	8086cdc <__addsf3+0xd8>
 8086c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8086c60:	fa41 fc03 	asr.w	ip, r1, r3
 8086c64:	eb10 000c 	adds.w	r0, r0, ip
 8086c68:	f1c3 0320 	rsb	r3, r3, #32
 8086c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8086c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8086c74:	d502      	bpl.n	8086c7c <__addsf3+0x78>
 8086c76:	4249      	negs	r1, r1
 8086c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8086c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8086c80:	d313      	bcc.n	8086caa <__addsf3+0xa6>
 8086c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8086c86:	d306      	bcc.n	8086c96 <__addsf3+0x92>
 8086c88:	0840      	lsrs	r0, r0, #1
 8086c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8086c8e:	f102 0201 	add.w	r2, r2, #1
 8086c92:	2afe      	cmp	r2, #254	; 0xfe
 8086c94:	d251      	bcs.n	8086d3a <__addsf3+0x136>
 8086c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8086c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8086c9e:	bf08      	it	eq
 8086ca0:	f020 0001 	biceq.w	r0, r0, #1
 8086ca4:	ea40 0003 	orr.w	r0, r0, r3
 8086ca8:	4770      	bx	lr
 8086caa:	0049      	lsls	r1, r1, #1
 8086cac:	eb40 0000 	adc.w	r0, r0, r0
 8086cb0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8086cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8086cb8:	d1ed      	bne.n	8086c96 <__addsf3+0x92>
 8086cba:	fab0 fc80 	clz	ip, r0
 8086cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8086cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8086cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8086cca:	bfaa      	itet	ge
 8086ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8086cd0:	4252      	neglt	r2, r2
 8086cd2:	4318      	orrge	r0, r3
 8086cd4:	bfbc      	itt	lt
 8086cd6:	40d0      	lsrlt	r0, r2
 8086cd8:	4318      	orrlt	r0, r3
 8086cda:	4770      	bx	lr
 8086cdc:	f092 0f00 	teq	r2, #0
 8086ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8086ce4:	bf06      	itte	eq
 8086ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8086cea:	3201      	addeq	r2, #1
 8086cec:	3b01      	subne	r3, #1
 8086cee:	e7b5      	b.n	8086c5c <__addsf3+0x58>
 8086cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8086cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8086cf8:	bf18      	it	ne
 8086cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8086cfe:	d021      	beq.n	8086d44 <__addsf3+0x140>
 8086d00:	ea92 0f03 	teq	r2, r3
 8086d04:	d004      	beq.n	8086d10 <__addsf3+0x10c>
 8086d06:	f092 0f00 	teq	r2, #0
 8086d0a:	bf08      	it	eq
 8086d0c:	4608      	moveq	r0, r1
 8086d0e:	4770      	bx	lr
 8086d10:	ea90 0f01 	teq	r0, r1
 8086d14:	bf1c      	itt	ne
 8086d16:	2000      	movne	r0, #0
 8086d18:	4770      	bxne	lr
 8086d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8086d1e:	d104      	bne.n	8086d2a <__addsf3+0x126>
 8086d20:	0040      	lsls	r0, r0, #1
 8086d22:	bf28      	it	cs
 8086d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8086d28:	4770      	bx	lr
 8086d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8086d2e:	bf3c      	itt	cc
 8086d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8086d34:	4770      	bxcc	lr
 8086d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8086d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8086d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086d42:	4770      	bx	lr
 8086d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8086d48:	bf16      	itet	ne
 8086d4a:	4608      	movne	r0, r1
 8086d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8086d50:	4601      	movne	r1, r0
 8086d52:	0242      	lsls	r2, r0, #9
 8086d54:	bf06      	itte	eq
 8086d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8086d5a:	ea90 0f01 	teqeq	r0, r1
 8086d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8086d62:	4770      	bx	lr

08086d64 <__aeabi_ui2f>:
 8086d64:	f04f 0300 	mov.w	r3, #0
 8086d68:	e004      	b.n	8086d74 <__aeabi_i2f+0x8>
 8086d6a:	bf00      	nop

08086d6c <__aeabi_i2f>:
 8086d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8086d70:	bf48      	it	mi
 8086d72:	4240      	negmi	r0, r0
 8086d74:	ea5f 0c00 	movs.w	ip, r0
 8086d78:	bf08      	it	eq
 8086d7a:	4770      	bxeq	lr
 8086d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8086d80:	4601      	mov	r1, r0
 8086d82:	f04f 0000 	mov.w	r0, #0
 8086d86:	e01c      	b.n	8086dc2 <__aeabi_l2f+0x2a>

08086d88 <__aeabi_ul2f>:
 8086d88:	ea50 0201 	orrs.w	r2, r0, r1
 8086d8c:	bf08      	it	eq
 8086d8e:	4770      	bxeq	lr
 8086d90:	f04f 0300 	mov.w	r3, #0
 8086d94:	e00a      	b.n	8086dac <__aeabi_l2f+0x14>
 8086d96:	bf00      	nop

08086d98 <__aeabi_l2f>:
 8086d98:	ea50 0201 	orrs.w	r2, r0, r1
 8086d9c:	bf08      	it	eq
 8086d9e:	4770      	bxeq	lr
 8086da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8086da4:	d502      	bpl.n	8086dac <__aeabi_l2f+0x14>
 8086da6:	4240      	negs	r0, r0
 8086da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8086dac:	ea5f 0c01 	movs.w	ip, r1
 8086db0:	bf02      	ittt	eq
 8086db2:	4684      	moveq	ip, r0
 8086db4:	4601      	moveq	r1, r0
 8086db6:	2000      	moveq	r0, #0
 8086db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8086dbc:	bf08      	it	eq
 8086dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8086dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8086dc6:	fabc f28c 	clz	r2, ip
 8086dca:	3a08      	subs	r2, #8
 8086dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8086dd0:	db10      	blt.n	8086df4 <__aeabi_l2f+0x5c>
 8086dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8086dd6:	4463      	add	r3, ip
 8086dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8086ddc:	f1c2 0220 	rsb	r2, r2, #32
 8086de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8086de4:	fa20 f202 	lsr.w	r2, r0, r2
 8086de8:	eb43 0002 	adc.w	r0, r3, r2
 8086dec:	bf08      	it	eq
 8086dee:	f020 0001 	biceq.w	r0, r0, #1
 8086df2:	4770      	bx	lr
 8086df4:	f102 0220 	add.w	r2, r2, #32
 8086df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8086dfc:	f1c2 0220 	rsb	r2, r2, #32
 8086e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8086e04:	fa21 f202 	lsr.w	r2, r1, r2
 8086e08:	eb43 0002 	adc.w	r0, r3, r2
 8086e0c:	bf08      	it	eq
 8086e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8086e12:	4770      	bx	lr

08086e14 <__aeabi_fmul>:
 8086e14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8086e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8086e1c:	bf1e      	ittt	ne
 8086e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8086e22:	ea92 0f0c 	teqne	r2, ip
 8086e26:	ea93 0f0c 	teqne	r3, ip
 8086e2a:	d06f      	beq.n	8086f0c <__aeabi_fmul+0xf8>
 8086e2c:	441a      	add	r2, r3
 8086e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8086e32:	0240      	lsls	r0, r0, #9
 8086e34:	bf18      	it	ne
 8086e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8086e3a:	d01e      	beq.n	8086e7a <__aeabi_fmul+0x66>
 8086e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8086e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8086e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8086e48:	fba0 3101 	umull	r3, r1, r0, r1
 8086e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8086e50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8086e54:	bf3e      	ittt	cc
 8086e56:	0049      	lslcc	r1, r1, #1
 8086e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8086e5c:	005b      	lslcc	r3, r3, #1
 8086e5e:	ea40 0001 	orr.w	r0, r0, r1
 8086e62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8086e66:	2afd      	cmp	r2, #253	; 0xfd
 8086e68:	d81d      	bhi.n	8086ea6 <__aeabi_fmul+0x92>
 8086e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8086e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8086e72:	bf08      	it	eq
 8086e74:	f020 0001 	biceq.w	r0, r0, #1
 8086e78:	4770      	bx	lr
 8086e7a:	f090 0f00 	teq	r0, #0
 8086e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8086e82:	bf08      	it	eq
 8086e84:	0249      	lsleq	r1, r1, #9
 8086e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8086e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8086e8e:	3a7f      	subs	r2, #127	; 0x7f
 8086e90:	bfc2      	ittt	gt
 8086e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8086e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8086e9a:	4770      	bxgt	lr
 8086e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086ea0:	f04f 0300 	mov.w	r3, #0
 8086ea4:	3a01      	subs	r2, #1
 8086ea6:	dc5d      	bgt.n	8086f64 <__aeabi_fmul+0x150>
 8086ea8:	f112 0f19 	cmn.w	r2, #25
 8086eac:	bfdc      	itt	le
 8086eae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8086eb2:	4770      	bxle	lr
 8086eb4:	f1c2 0200 	rsb	r2, r2, #0
 8086eb8:	0041      	lsls	r1, r0, #1
 8086eba:	fa21 f102 	lsr.w	r1, r1, r2
 8086ebe:	f1c2 0220 	rsb	r2, r2, #32
 8086ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8086ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8086eca:	f140 0000 	adc.w	r0, r0, #0
 8086ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8086ed2:	bf08      	it	eq
 8086ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8086ed8:	4770      	bx	lr
 8086eda:	f092 0f00 	teq	r2, #0
 8086ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8086ee2:	bf02      	ittt	eq
 8086ee4:	0040      	lsleq	r0, r0, #1
 8086ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8086eea:	3a01      	subeq	r2, #1
 8086eec:	d0f9      	beq.n	8086ee2 <__aeabi_fmul+0xce>
 8086eee:	ea40 000c 	orr.w	r0, r0, ip
 8086ef2:	f093 0f00 	teq	r3, #0
 8086ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8086efa:	bf02      	ittt	eq
 8086efc:	0049      	lsleq	r1, r1, #1
 8086efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8086f02:	3b01      	subeq	r3, #1
 8086f04:	d0f9      	beq.n	8086efa <__aeabi_fmul+0xe6>
 8086f06:	ea41 010c 	orr.w	r1, r1, ip
 8086f0a:	e78f      	b.n	8086e2c <__aeabi_fmul+0x18>
 8086f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8086f10:	ea92 0f0c 	teq	r2, ip
 8086f14:	bf18      	it	ne
 8086f16:	ea93 0f0c 	teqne	r3, ip
 8086f1a:	d00a      	beq.n	8086f32 <__aeabi_fmul+0x11e>
 8086f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8086f20:	bf18      	it	ne
 8086f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8086f26:	d1d8      	bne.n	8086eda <__aeabi_fmul+0xc6>
 8086f28:	ea80 0001 	eor.w	r0, r0, r1
 8086f2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8086f30:	4770      	bx	lr
 8086f32:	f090 0f00 	teq	r0, #0
 8086f36:	bf17      	itett	ne
 8086f38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8086f3c:	4608      	moveq	r0, r1
 8086f3e:	f091 0f00 	teqne	r1, #0
 8086f42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8086f46:	d014      	beq.n	8086f72 <__aeabi_fmul+0x15e>
 8086f48:	ea92 0f0c 	teq	r2, ip
 8086f4c:	d101      	bne.n	8086f52 <__aeabi_fmul+0x13e>
 8086f4e:	0242      	lsls	r2, r0, #9
 8086f50:	d10f      	bne.n	8086f72 <__aeabi_fmul+0x15e>
 8086f52:	ea93 0f0c 	teq	r3, ip
 8086f56:	d103      	bne.n	8086f60 <__aeabi_fmul+0x14c>
 8086f58:	024b      	lsls	r3, r1, #9
 8086f5a:	bf18      	it	ne
 8086f5c:	4608      	movne	r0, r1
 8086f5e:	d108      	bne.n	8086f72 <__aeabi_fmul+0x15e>
 8086f60:	ea80 0001 	eor.w	r0, r0, r1
 8086f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8086f68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8086f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8086f70:	4770      	bx	lr
 8086f72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8086f76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8086f7a:	4770      	bx	lr

08086f7c <__aeabi_fdiv>:
 8086f7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8086f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8086f84:	bf1e      	ittt	ne
 8086f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8086f8a:	ea92 0f0c 	teqne	r2, ip
 8086f8e:	ea93 0f0c 	teqne	r3, ip
 8086f92:	d069      	beq.n	8087068 <__aeabi_fdiv+0xec>
 8086f94:	eba2 0203 	sub.w	r2, r2, r3
 8086f98:	ea80 0c01 	eor.w	ip, r0, r1
 8086f9c:	0249      	lsls	r1, r1, #9
 8086f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8086fa2:	d037      	beq.n	8087014 <__aeabi_fdiv+0x98>
 8086fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8086fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8086fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8086fb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8086fb4:	428b      	cmp	r3, r1
 8086fb6:	bf38      	it	cc
 8086fb8:	005b      	lslcc	r3, r3, #1
 8086fba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8086fbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8086fc2:	428b      	cmp	r3, r1
 8086fc4:	bf24      	itt	cs
 8086fc6:	1a5b      	subcs	r3, r3, r1
 8086fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8086fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8086fd0:	bf24      	itt	cs
 8086fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8086fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8086fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8086fde:	bf24      	itt	cs
 8086fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8086fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8086fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8086fec:	bf24      	itt	cs
 8086fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8086ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8086ff6:	011b      	lsls	r3, r3, #4
 8086ff8:	bf18      	it	ne
 8086ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8086ffe:	d1e0      	bne.n	8086fc2 <__aeabi_fdiv+0x46>
 8087000:	2afd      	cmp	r2, #253	; 0xfd
 8087002:	f63f af50 	bhi.w	8086ea6 <__aeabi_fmul+0x92>
 8087006:	428b      	cmp	r3, r1
 8087008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808700c:	bf08      	it	eq
 808700e:	f020 0001 	biceq.w	r0, r0, #1
 8087012:	4770      	bx	lr
 8087014:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8087018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808701c:	327f      	adds	r2, #127	; 0x7f
 808701e:	bfc2      	ittt	gt
 8087020:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8087024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8087028:	4770      	bxgt	lr
 808702a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808702e:	f04f 0300 	mov.w	r3, #0
 8087032:	3a01      	subs	r2, #1
 8087034:	e737      	b.n	8086ea6 <__aeabi_fmul+0x92>
 8087036:	f092 0f00 	teq	r2, #0
 808703a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808703e:	bf02      	ittt	eq
 8087040:	0040      	lsleq	r0, r0, #1
 8087042:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8087046:	3a01      	subeq	r2, #1
 8087048:	d0f9      	beq.n	808703e <__aeabi_fdiv+0xc2>
 808704a:	ea40 000c 	orr.w	r0, r0, ip
 808704e:	f093 0f00 	teq	r3, #0
 8087052:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8087056:	bf02      	ittt	eq
 8087058:	0049      	lsleq	r1, r1, #1
 808705a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808705e:	3b01      	subeq	r3, #1
 8087060:	d0f9      	beq.n	8087056 <__aeabi_fdiv+0xda>
 8087062:	ea41 010c 	orr.w	r1, r1, ip
 8087066:	e795      	b.n	8086f94 <__aeabi_fdiv+0x18>
 8087068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808706c:	ea92 0f0c 	teq	r2, ip
 8087070:	d108      	bne.n	8087084 <__aeabi_fdiv+0x108>
 8087072:	0242      	lsls	r2, r0, #9
 8087074:	f47f af7d 	bne.w	8086f72 <__aeabi_fmul+0x15e>
 8087078:	ea93 0f0c 	teq	r3, ip
 808707c:	f47f af70 	bne.w	8086f60 <__aeabi_fmul+0x14c>
 8087080:	4608      	mov	r0, r1
 8087082:	e776      	b.n	8086f72 <__aeabi_fmul+0x15e>
 8087084:	ea93 0f0c 	teq	r3, ip
 8087088:	d104      	bne.n	8087094 <__aeabi_fdiv+0x118>
 808708a:	024b      	lsls	r3, r1, #9
 808708c:	f43f af4c 	beq.w	8086f28 <__aeabi_fmul+0x114>
 8087090:	4608      	mov	r0, r1
 8087092:	e76e      	b.n	8086f72 <__aeabi_fmul+0x15e>
 8087094:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8087098:	bf18      	it	ne
 808709a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808709e:	d1ca      	bne.n	8087036 <__aeabi_fdiv+0xba>
 80870a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80870a4:	f47f af5c 	bne.w	8086f60 <__aeabi_fmul+0x14c>
 80870a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80870ac:	f47f af3c 	bne.w	8086f28 <__aeabi_fmul+0x114>
 80870b0:	e75f      	b.n	8086f72 <__aeabi_fmul+0x15e>
 80870b2:	bf00      	nop

080870b4 <__gesf2>:
 80870b4:	f04f 3cff 	mov.w	ip, #4294967295
 80870b8:	e006      	b.n	80870c8 <__cmpsf2+0x4>
 80870ba:	bf00      	nop

080870bc <__lesf2>:
 80870bc:	f04f 0c01 	mov.w	ip, #1
 80870c0:	e002      	b.n	80870c8 <__cmpsf2+0x4>
 80870c2:	bf00      	nop

080870c4 <__cmpsf2>:
 80870c4:	f04f 0c01 	mov.w	ip, #1
 80870c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80870cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80870d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80870d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80870d8:	bf18      	it	ne
 80870da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80870de:	d011      	beq.n	8087104 <__cmpsf2+0x40>
 80870e0:	b001      	add	sp, #4
 80870e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80870e6:	bf18      	it	ne
 80870e8:	ea90 0f01 	teqne	r0, r1
 80870ec:	bf58      	it	pl
 80870ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80870f2:	bf88      	it	hi
 80870f4:	17c8      	asrhi	r0, r1, #31
 80870f6:	bf38      	it	cc
 80870f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80870fc:	bf18      	it	ne
 80870fe:	f040 0001 	orrne.w	r0, r0, #1
 8087102:	4770      	bx	lr
 8087104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8087108:	d102      	bne.n	8087110 <__cmpsf2+0x4c>
 808710a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808710e:	d105      	bne.n	808711c <__cmpsf2+0x58>
 8087110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8087114:	d1e4      	bne.n	80870e0 <__cmpsf2+0x1c>
 8087116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808711a:	d0e1      	beq.n	80870e0 <__cmpsf2+0x1c>
 808711c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8087120:	4770      	bx	lr
 8087122:	bf00      	nop

08087124 <__aeabi_cfrcmple>:
 8087124:	4684      	mov	ip, r0
 8087126:	4608      	mov	r0, r1
 8087128:	4661      	mov	r1, ip
 808712a:	e7ff      	b.n	808712c <__aeabi_cfcmpeq>

0808712c <__aeabi_cfcmpeq>:
 808712c:	b50f      	push	{r0, r1, r2, r3, lr}
 808712e:	f7ff ffc9 	bl	80870c4 <__cmpsf2>
 8087132:	2800      	cmp	r0, #0
 8087134:	bf48      	it	mi
 8087136:	f110 0f00 	cmnmi.w	r0, #0
 808713a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808713c <__aeabi_fcmpeq>:
 808713c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8087140:	f7ff fff4 	bl	808712c <__aeabi_cfcmpeq>
 8087144:	bf0c      	ite	eq
 8087146:	2001      	moveq	r0, #1
 8087148:	2000      	movne	r0, #0
 808714a:	f85d fb08 	ldr.w	pc, [sp], #8
 808714e:	bf00      	nop

08087150 <__aeabi_fcmplt>:
 8087150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8087154:	f7ff ffea 	bl	808712c <__aeabi_cfcmpeq>
 8087158:	bf34      	ite	cc
 808715a:	2001      	movcc	r0, #1
 808715c:	2000      	movcs	r0, #0
 808715e:	f85d fb08 	ldr.w	pc, [sp], #8
 8087162:	bf00      	nop

08087164 <__aeabi_fcmple>:
 8087164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8087168:	f7ff ffe0 	bl	808712c <__aeabi_cfcmpeq>
 808716c:	bf94      	ite	ls
 808716e:	2001      	movls	r0, #1
 8087170:	2000      	movhi	r0, #0
 8087172:	f85d fb08 	ldr.w	pc, [sp], #8
 8087176:	bf00      	nop

08087178 <__aeabi_fcmpge>:
 8087178:	f84d ed08 	str.w	lr, [sp, #-8]!
 808717c:	f7ff ffd2 	bl	8087124 <__aeabi_cfrcmple>
 8087180:	bf94      	ite	ls
 8087182:	2001      	movls	r0, #1
 8087184:	2000      	movhi	r0, #0
 8087186:	f85d fb08 	ldr.w	pc, [sp], #8
 808718a:	bf00      	nop

0808718c <__aeabi_fcmpgt>:
 808718c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8087190:	f7ff ffc8 	bl	8087124 <__aeabi_cfrcmple>
 8087194:	bf34      	ite	cc
 8087196:	2001      	movcc	r0, #1
 8087198:	2000      	movcs	r0, #0
 808719a:	f85d fb08 	ldr.w	pc, [sp], #8
 808719e:	bf00      	nop

080871a0 <__aeabi_fcmpun>:
 80871a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80871a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80871a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80871ac:	d102      	bne.n	80871b4 <__aeabi_fcmpun+0x14>
 80871ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80871b2:	d108      	bne.n	80871c6 <__aeabi_fcmpun+0x26>
 80871b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80871b8:	d102      	bne.n	80871c0 <__aeabi_fcmpun+0x20>
 80871ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80871be:	d102      	bne.n	80871c6 <__aeabi_fcmpun+0x26>
 80871c0:	f04f 0000 	mov.w	r0, #0
 80871c4:	4770      	bx	lr
 80871c6:	f04f 0001 	mov.w	r0, #1
 80871ca:	4770      	bx	lr

080871cc <__aeabi_f2iz>:
 80871cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80871d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80871d4:	d30f      	bcc.n	80871f6 <__aeabi_f2iz+0x2a>
 80871d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80871da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80871de:	d90d      	bls.n	80871fc <__aeabi_f2iz+0x30>
 80871e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80871e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80871e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80871ec:	fa23 f002 	lsr.w	r0, r3, r2
 80871f0:	bf18      	it	ne
 80871f2:	4240      	negne	r0, r0
 80871f4:	4770      	bx	lr
 80871f6:	f04f 0000 	mov.w	r0, #0
 80871fa:	4770      	bx	lr
 80871fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8087200:	d101      	bne.n	8087206 <__aeabi_f2iz+0x3a>
 8087202:	0242      	lsls	r2, r0, #9
 8087204:	d105      	bne.n	8087212 <__aeabi_f2iz+0x46>
 8087206:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808720a:	bf08      	it	eq
 808720c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8087210:	4770      	bx	lr
 8087212:	f04f 0000 	mov.w	r0, #0
 8087216:	4770      	bx	lr

08087218 <__aeabi_f2uiz>:
 8087218:	0042      	lsls	r2, r0, #1
 808721a:	d20e      	bcs.n	808723a <__aeabi_f2uiz+0x22>
 808721c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8087220:	d30b      	bcc.n	808723a <__aeabi_f2uiz+0x22>
 8087222:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8087226:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808722a:	d409      	bmi.n	8087240 <__aeabi_f2uiz+0x28>
 808722c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8087230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8087234:	fa23 f002 	lsr.w	r0, r3, r2
 8087238:	4770      	bx	lr
 808723a:	f04f 0000 	mov.w	r0, #0
 808723e:	4770      	bx	lr
 8087240:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8087244:	d101      	bne.n	808724a <__aeabi_f2uiz+0x32>
 8087246:	0242      	lsls	r2, r0, #9
 8087248:	d102      	bne.n	8087250 <__aeabi_f2uiz+0x38>
 808724a:	f04f 30ff 	mov.w	r0, #4294967295
 808724e:	4770      	bx	lr
 8087250:	f04f 0000 	mov.w	r0, #0
 8087254:	4770      	bx	lr
 8087256:	bf00      	nop

08087258 <asctime>:
 8087258:	4b09      	ldr	r3, [pc, #36]	; (8087280 <asctime+0x28>)
 808725a:	b570      	push	{r4, r5, r6, lr}
 808725c:	681c      	ldr	r4, [r3, #0]
 808725e:	4606      	mov	r6, r0
 8087260:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8087262:	b93d      	cbnz	r5, 8087274 <asctime+0x1c>
 8087264:	201a      	movs	r0, #26
 8087266:	f7fd f8a1 	bl	80843ac <malloc>
 808726a:	221a      	movs	r2, #26
 808726c:	6420      	str	r0, [r4, #64]	; 0x40
 808726e:	4629      	mov	r1, r5
 8087270:	f000 f95e 	bl	8087530 <memset>
 8087274:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8087276:	4630      	mov	r0, r6
 8087278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808727c:	f000 b802 	b.w	8087284 <asctime_r>
 8087280:	200000b4 	.word	0x200000b4

08087284 <asctime_r>:
 8087284:	b510      	push	{r4, lr}
 8087286:	460c      	mov	r4, r1
 8087288:	6941      	ldr	r1, [r0, #20]
 808728a:	b086      	sub	sp, #24
 808728c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8087290:	6903      	ldr	r3, [r0, #16]
 8087292:	6982      	ldr	r2, [r0, #24]
 8087294:	9104      	str	r1, [sp, #16]
 8087296:	6801      	ldr	r1, [r0, #0]
 8087298:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808729c:	9103      	str	r1, [sp, #12]
 808729e:	6841      	ldr	r1, [r0, #4]
 80872a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80872a4:	9102      	str	r1, [sp, #8]
 80872a6:	6881      	ldr	r1, [r0, #8]
 80872a8:	9101      	str	r1, [sp, #4]
 80872aa:	68c1      	ldr	r1, [r0, #12]
 80872ac:	4620      	mov	r0, r4
 80872ae:	9100      	str	r1, [sp, #0]
 80872b0:	4904      	ldr	r1, [pc, #16]	; (80872c4 <asctime_r+0x40>)
 80872b2:	440b      	add	r3, r1
 80872b4:	4904      	ldr	r1, [pc, #16]	; (80872c8 <asctime_r+0x44>)
 80872b6:	440a      	add	r2, r1
 80872b8:	4904      	ldr	r1, [pc, #16]	; (80872cc <asctime_r+0x48>)
 80872ba:	f7fd f88f 	bl	80843dc <siprintf>
 80872be:	4620      	mov	r0, r4
 80872c0:	b006      	add	sp, #24
 80872c2:	bd10      	pop	{r4, pc}
 80872c4:	0808aa5e 	.word	0x0808aa5e
 80872c8:	0808aa49 	.word	0x0808aa49
 80872cc:	0808aa82 	.word	0x0808aa82

080872d0 <atof>:
 80872d0:	2100      	movs	r1, #0
 80872d2:	f001 bcf1 	b.w	8088cb8 <strtod>

080872d6 <atoi>:
 80872d6:	220a      	movs	r2, #10
 80872d8:	2100      	movs	r1, #0
 80872da:	f001 bd7b 	b.w	8088dd4 <strtol>

080872de <atol>:
 80872de:	220a      	movs	r2, #10
 80872e0:	2100      	movs	r1, #0
 80872e2:	f001 bd77 	b.w	8088dd4 <strtol>
	...

080872e8 <__cxa_atexit>:
 80872e8:	b510      	push	{r4, lr}
 80872ea:	4c05      	ldr	r4, [pc, #20]	; (8087300 <__cxa_atexit+0x18>)
 80872ec:	4613      	mov	r3, r2
 80872ee:	b12c      	cbz	r4, 80872fc <__cxa_atexit+0x14>
 80872f0:	460a      	mov	r2, r1
 80872f2:	4601      	mov	r1, r0
 80872f4:	2002      	movs	r0, #2
 80872f6:	f3af 8000 	nop.w
 80872fa:	bd10      	pop	{r4, pc}
 80872fc:	4620      	mov	r0, r4
 80872fe:	bd10      	pop	{r4, pc}
 8087300:	00000000 	.word	0x00000000

08087304 <localtime>:
 8087304:	b538      	push	{r3, r4, r5, lr}
 8087306:	4b07      	ldr	r3, [pc, #28]	; (8087324 <localtime+0x20>)
 8087308:	4605      	mov	r5, r0
 808730a:	681c      	ldr	r4, [r3, #0]
 808730c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808730e:	b91b      	cbnz	r3, 8087318 <localtime+0x14>
 8087310:	2024      	movs	r0, #36	; 0x24
 8087312:	f7fd f84b 	bl	80843ac <malloc>
 8087316:	63e0      	str	r0, [r4, #60]	; 0x3c
 8087318:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808731a:	4628      	mov	r0, r5
 808731c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8087320:	f000 b802 	b.w	8087328 <localtime_r>
 8087324:	200000b4 	.word	0x200000b4

08087328 <localtime_r>:
 8087328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808732c:	460c      	mov	r4, r1
 808732e:	4680      	mov	r8, r0
 8087330:	f002 fb88 	bl	8089a44 <__gettzinfo>
 8087334:	4621      	mov	r1, r4
 8087336:	4607      	mov	r7, r0
 8087338:	4640      	mov	r0, r8
 808733a:	f002 fb87 	bl	8089a4c <gmtime_r>
 808733e:	6946      	ldr	r6, [r0, #20]
 8087340:	4604      	mov	r4, r0
 8087342:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8087346:	07b3      	lsls	r3, r6, #30
 8087348:	d105      	bne.n	8087356 <localtime_r+0x2e>
 808734a:	2264      	movs	r2, #100	; 0x64
 808734c:	fb96 f3f2 	sdiv	r3, r6, r2
 8087350:	fb02 6313 	mls	r3, r2, r3, r6
 8087354:	b94b      	cbnz	r3, 808736a <localtime_r+0x42>
 8087356:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808735a:	fb96 f3f5 	sdiv	r3, r6, r5
 808735e:	fb05 6513 	mls	r5, r5, r3, r6
 8087362:	fab5 f385 	clz	r3, r5
 8087366:	095b      	lsrs	r3, r3, #5
 8087368:	e000      	b.n	808736c <localtime_r+0x44>
 808736a:	2301      	movs	r3, #1
 808736c:	4a5f      	ldr	r2, [pc, #380]	; (80874ec <localtime_r+0x1c4>)
 808736e:	2530      	movs	r5, #48	; 0x30
 8087370:	fb05 2503 	mla	r5, r5, r3, r2
 8087374:	f001 fe78 	bl	8089068 <__tz_lock>
 8087378:	f001 fe78 	bl	808906c <_tzset_unlocked>
 808737c:	4b5c      	ldr	r3, [pc, #368]	; (80874f0 <localtime_r+0x1c8>)
 808737e:	681b      	ldr	r3, [r3, #0]
 8087380:	b1f3      	cbz	r3, 80873c0 <localtime_r+0x98>
 8087382:	687b      	ldr	r3, [r7, #4]
 8087384:	429e      	cmp	r6, r3
 8087386:	d105      	bne.n	8087394 <localtime_r+0x6c>
 8087388:	6839      	ldr	r1, [r7, #0]
 808738a:	f8d8 3000 	ldr.w	r3, [r8]
 808738e:	69fa      	ldr	r2, [r7, #28]
 8087390:	b941      	cbnz	r1, 80873a4 <localtime_r+0x7c>
 8087392:	e00a      	b.n	80873aa <localtime_r+0x82>
 8087394:	4630      	mov	r0, r6
 8087396:	f001 fdbf 	bl	8088f18 <__tzcalc_limits>
 808739a:	2800      	cmp	r0, #0
 808739c:	d1f4      	bne.n	8087388 <localtime_r+0x60>
 808739e:	f04f 33ff 	mov.w	r3, #4294967295
 80873a2:	e00d      	b.n	80873c0 <localtime_r+0x98>
 80873a4:	4293      	cmp	r3, r2
 80873a6:	db08      	blt.n	80873ba <localtime_r+0x92>
 80873a8:	e001      	b.n	80873ae <localtime_r+0x86>
 80873aa:	4293      	cmp	r3, r2
 80873ac:	da07      	bge.n	80873be <localtime_r+0x96>
 80873ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80873b0:	4293      	cmp	r3, r2
 80873b2:	bfac      	ite	ge
 80873b4:	2300      	movge	r3, #0
 80873b6:	2301      	movlt	r3, #1
 80873b8:	e002      	b.n	80873c0 <localtime_r+0x98>
 80873ba:	2300      	movs	r3, #0
 80873bc:	e000      	b.n	80873c0 <localtime_r+0x98>
 80873be:	2301      	movs	r3, #1
 80873c0:	6223      	str	r3, [r4, #32]
 80873c2:	6a23      	ldr	r3, [r4, #32]
 80873c4:	203c      	movs	r0, #60	; 0x3c
 80873c6:	2b01      	cmp	r3, #1
 80873c8:	bf0c      	ite	eq
 80873ca:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80873cc:	6a39      	ldrne	r1, [r7, #32]
 80873ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80873d2:	fb91 f6f3 	sdiv	r6, r1, r3
 80873d6:	fb03 1316 	mls	r3, r3, r6, r1
 80873da:	fb93 f2f0 	sdiv	r2, r3, r0
 80873de:	fb00 3012 	mls	r0, r0, r2, r3
 80873e2:	6861      	ldr	r1, [r4, #4]
 80873e4:	6823      	ldr	r3, [r4, #0]
 80873e6:	1a89      	subs	r1, r1, r2
 80873e8:	68a2      	ldr	r2, [r4, #8]
 80873ea:	1a1b      	subs	r3, r3, r0
 80873ec:	1b92      	subs	r2, r2, r6
 80873ee:	2b3b      	cmp	r3, #59	; 0x3b
 80873f0:	6023      	str	r3, [r4, #0]
 80873f2:	6061      	str	r1, [r4, #4]
 80873f4:	60a2      	str	r2, [r4, #8]
 80873f6:	dd03      	ble.n	8087400 <localtime_r+0xd8>
 80873f8:	3101      	adds	r1, #1
 80873fa:	6061      	str	r1, [r4, #4]
 80873fc:	3b3c      	subs	r3, #60	; 0x3c
 80873fe:	e004      	b.n	808740a <localtime_r+0xe2>
 8087400:	2b00      	cmp	r3, #0
 8087402:	da03      	bge.n	808740c <localtime_r+0xe4>
 8087404:	3901      	subs	r1, #1
 8087406:	6061      	str	r1, [r4, #4]
 8087408:	333c      	adds	r3, #60	; 0x3c
 808740a:	6023      	str	r3, [r4, #0]
 808740c:	6863      	ldr	r3, [r4, #4]
 808740e:	2b3b      	cmp	r3, #59	; 0x3b
 8087410:	dd03      	ble.n	808741a <localtime_r+0xf2>
 8087412:	3201      	adds	r2, #1
 8087414:	60a2      	str	r2, [r4, #8]
 8087416:	3b3c      	subs	r3, #60	; 0x3c
 8087418:	e004      	b.n	8087424 <localtime_r+0xfc>
 808741a:	2b00      	cmp	r3, #0
 808741c:	da03      	bge.n	8087426 <localtime_r+0xfe>
 808741e:	3a01      	subs	r2, #1
 8087420:	60a2      	str	r2, [r4, #8]
 8087422:	333c      	adds	r3, #60	; 0x3c
 8087424:	6063      	str	r3, [r4, #4]
 8087426:	68a3      	ldr	r3, [r4, #8]
 8087428:	2b17      	cmp	r3, #23
 808742a:	dd22      	ble.n	8087472 <localtime_r+0x14a>
 808742c:	69e2      	ldr	r2, [r4, #28]
 808742e:	3b18      	subs	r3, #24
 8087430:	3201      	adds	r2, #1
 8087432:	61e2      	str	r2, [r4, #28]
 8087434:	69a2      	ldr	r2, [r4, #24]
 8087436:	60a3      	str	r3, [r4, #8]
 8087438:	3201      	adds	r2, #1
 808743a:	2a06      	cmp	r2, #6
 808743c:	bfc8      	it	gt
 808743e:	2200      	movgt	r2, #0
 8087440:	61a2      	str	r2, [r4, #24]
 8087442:	68e2      	ldr	r2, [r4, #12]
 8087444:	6923      	ldr	r3, [r4, #16]
 8087446:	3201      	adds	r2, #1
 8087448:	60e2      	str	r2, [r4, #12]
 808744a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808744e:	428a      	cmp	r2, r1
 8087450:	dd46      	ble.n	80874e0 <localtime_r+0x1b8>
 8087452:	3301      	adds	r3, #1
 8087454:	2b0c      	cmp	r3, #12
 8087456:	bf08      	it	eq
 8087458:	6963      	ldreq	r3, [r4, #20]
 808745a:	eba2 0201 	sub.w	r2, r2, r1
 808745e:	60e2      	str	r2, [r4, #12]
 8087460:	bf05      	ittet	eq
 8087462:	3301      	addeq	r3, #1
 8087464:	2200      	moveq	r2, #0
 8087466:	6123      	strne	r3, [r4, #16]
 8087468:	6122      	streq	r2, [r4, #16]
 808746a:	bf04      	itt	eq
 808746c:	6163      	streq	r3, [r4, #20]
 808746e:	61e2      	streq	r2, [r4, #28]
 8087470:	e036      	b.n	80874e0 <localtime_r+0x1b8>
 8087472:	2b00      	cmp	r3, #0
 8087474:	da34      	bge.n	80874e0 <localtime_r+0x1b8>
 8087476:	69e2      	ldr	r2, [r4, #28]
 8087478:	3318      	adds	r3, #24
 808747a:	3a01      	subs	r2, #1
 808747c:	61e2      	str	r2, [r4, #28]
 808747e:	69a2      	ldr	r2, [r4, #24]
 8087480:	60a3      	str	r3, [r4, #8]
 8087482:	3a01      	subs	r2, #1
 8087484:	bf48      	it	mi
 8087486:	2206      	movmi	r2, #6
 8087488:	61a2      	str	r2, [r4, #24]
 808748a:	68e2      	ldr	r2, [r4, #12]
 808748c:	3a01      	subs	r2, #1
 808748e:	60e2      	str	r2, [r4, #12]
 8087490:	bb32      	cbnz	r2, 80874e0 <localtime_r+0x1b8>
 8087492:	6923      	ldr	r3, [r4, #16]
 8087494:	3b01      	subs	r3, #1
 8087496:	d401      	bmi.n	808749c <localtime_r+0x174>
 8087498:	6123      	str	r3, [r4, #16]
 808749a:	e01d      	b.n	80874d8 <localtime_r+0x1b0>
 808749c:	230b      	movs	r3, #11
 808749e:	6123      	str	r3, [r4, #16]
 80874a0:	6963      	ldr	r3, [r4, #20]
 80874a2:	1e5a      	subs	r2, r3, #1
 80874a4:	f012 0f03 	tst.w	r2, #3
 80874a8:	6162      	str	r2, [r4, #20]
 80874aa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80874ae:	d105      	bne.n	80874bc <localtime_r+0x194>
 80874b0:	2164      	movs	r1, #100	; 0x64
 80874b2:	fb93 f2f1 	sdiv	r2, r3, r1
 80874b6:	fb01 3212 	mls	r2, r1, r2, r3
 80874ba:	b94a      	cbnz	r2, 80874d0 <localtime_r+0x1a8>
 80874bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80874c0:	fb93 f2f1 	sdiv	r2, r3, r1
 80874c4:	fb01 3312 	mls	r3, r1, r2, r3
 80874c8:	fab3 f383 	clz	r3, r3
 80874cc:	095b      	lsrs	r3, r3, #5
 80874ce:	e000      	b.n	80874d2 <localtime_r+0x1aa>
 80874d0:	2301      	movs	r3, #1
 80874d2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80874d6:	61e3      	str	r3, [r4, #28]
 80874d8:	6923      	ldr	r3, [r4, #16]
 80874da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80874de:	60e3      	str	r3, [r4, #12]
 80874e0:	f001 fdc3 	bl	808906a <__tz_unlock>
 80874e4:	4620      	mov	r0, r4
 80874e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80874ea:	bf00      	nop
 80874ec:	0808ac0c 	.word	0x0808ac0c
 80874f0:	20000a04 	.word	0x20000a04

080874f4 <_localeconv_r>:
 80874f4:	4800      	ldr	r0, [pc, #0]	; (80874f8 <_localeconv_r+0x4>)
 80874f6:	4770      	bx	lr
 80874f8:	200000b8 	.word	0x200000b8

080874fc <memcmp>:
 80874fc:	b510      	push	{r4, lr}
 80874fe:	3901      	subs	r1, #1
 8087500:	4402      	add	r2, r0
 8087502:	4290      	cmp	r0, r2
 8087504:	d007      	beq.n	8087516 <memcmp+0x1a>
 8087506:	f810 3b01 	ldrb.w	r3, [r0], #1
 808750a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808750e:	42a3      	cmp	r3, r4
 8087510:	d0f7      	beq.n	8087502 <memcmp+0x6>
 8087512:	1b18      	subs	r0, r3, r4
 8087514:	bd10      	pop	{r4, pc}
 8087516:	2000      	movs	r0, #0
 8087518:	bd10      	pop	{r4, pc}

0808751a <memcpy>:
 808751a:	b510      	push	{r4, lr}
 808751c:	1e43      	subs	r3, r0, #1
 808751e:	440a      	add	r2, r1
 8087520:	4291      	cmp	r1, r2
 8087522:	d004      	beq.n	808752e <memcpy+0x14>
 8087524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8087528:	f803 4f01 	strb.w	r4, [r3, #1]!
 808752c:	e7f8      	b.n	8087520 <memcpy+0x6>
 808752e:	bd10      	pop	{r4, pc}

08087530 <memset>:
 8087530:	4603      	mov	r3, r0
 8087532:	4402      	add	r2, r0
 8087534:	4293      	cmp	r3, r2
 8087536:	d002      	beq.n	808753e <memset+0xe>
 8087538:	f803 1b01 	strb.w	r1, [r3], #1
 808753c:	e7fa      	b.n	8087534 <memset+0x4>
 808753e:	4770      	bx	lr

08087540 <srand>:
 8087540:	b538      	push	{r3, r4, r5, lr}
 8087542:	4b12      	ldr	r3, [pc, #72]	; (808758c <srand+0x4c>)
 8087544:	4605      	mov	r5, r0
 8087546:	681c      	ldr	r4, [r3, #0]
 8087548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808754a:	b9d3      	cbnz	r3, 8087582 <srand+0x42>
 808754c:	2018      	movs	r0, #24
 808754e:	f7fc ff2d 	bl	80843ac <malloc>
 8087552:	f243 330e 	movw	r3, #13070	; 0x330e
 8087556:	63a0      	str	r0, [r4, #56]	; 0x38
 8087558:	8003      	strh	r3, [r0, #0]
 808755a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808755e:	8043      	strh	r3, [r0, #2]
 8087560:	f241 2334 	movw	r3, #4660	; 0x1234
 8087564:	8083      	strh	r3, [r0, #4]
 8087566:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808756a:	80c3      	strh	r3, [r0, #6]
 808756c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8087570:	8103      	strh	r3, [r0, #8]
 8087572:	2305      	movs	r3, #5
 8087574:	8143      	strh	r3, [r0, #10]
 8087576:	230b      	movs	r3, #11
 8087578:	8183      	strh	r3, [r0, #12]
 808757a:	2201      	movs	r2, #1
 808757c:	2300      	movs	r3, #0
 808757e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8087582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8087584:	2200      	movs	r2, #0
 8087586:	611d      	str	r5, [r3, #16]
 8087588:	615a      	str	r2, [r3, #20]
 808758a:	bd38      	pop	{r3, r4, r5, pc}
 808758c:	200000b4 	.word	0x200000b4

08087590 <strcmp>:
 8087590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8087594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8087598:	2a01      	cmp	r2, #1
 808759a:	bf28      	it	cs
 808759c:	429a      	cmpcs	r2, r3
 808759e:	d0f7      	beq.n	8087590 <strcmp>
 80875a0:	1ad0      	subs	r0, r2, r3
 80875a2:	4770      	bx	lr

080875a4 <strcpy>:
 80875a4:	4603      	mov	r3, r0
 80875a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80875aa:	f803 2b01 	strb.w	r2, [r3], #1
 80875ae:	2a00      	cmp	r2, #0
 80875b0:	d1f9      	bne.n	80875a6 <strcpy+0x2>
 80875b2:	4770      	bx	lr

080875b4 <strdup>:
 80875b4:	4b02      	ldr	r3, [pc, #8]	; (80875c0 <strdup+0xc>)
 80875b6:	4601      	mov	r1, r0
 80875b8:	6818      	ldr	r0, [r3, #0]
 80875ba:	f000 b803 	b.w	80875c4 <_strdup_r>
 80875be:	bf00      	nop
 80875c0:	200000b4 	.word	0x200000b4

080875c4 <_strdup_r>:
 80875c4:	b570      	push	{r4, r5, r6, lr}
 80875c6:	4606      	mov	r6, r0
 80875c8:	4608      	mov	r0, r1
 80875ca:	460c      	mov	r4, r1
 80875cc:	f000 fd22 	bl	8088014 <strlen>
 80875d0:	1c45      	adds	r5, r0, #1
 80875d2:	4629      	mov	r1, r5
 80875d4:	4630      	mov	r0, r6
 80875d6:	f7fc ff31 	bl	808443c <_malloc_r>
 80875da:	4606      	mov	r6, r0
 80875dc:	b118      	cbz	r0, 80875e6 <_strdup_r+0x22>
 80875de:	462a      	mov	r2, r5
 80875e0:	4621      	mov	r1, r4
 80875e2:	f7ff ff9a 	bl	808751a <memcpy>
 80875e6:	4630      	mov	r0, r6
 80875e8:	bd70      	pop	{r4, r5, r6, pc}

080875ea <iso_year_adjust>:
 80875ea:	6941      	ldr	r1, [r0, #20]
 80875ec:	b510      	push	{r4, lr}
 80875ee:	078b      	lsls	r3, r1, #30
 80875f0:	d10c      	bne.n	808760c <iso_year_adjust+0x22>
 80875f2:	f240 736c 	movw	r3, #1900	; 0x76c
 80875f6:	2900      	cmp	r1, #0
 80875f8:	bfa8      	it	ge
 80875fa:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80875fe:	440b      	add	r3, r1
 8087600:	2464      	movs	r4, #100	; 0x64
 8087602:	fb93 f2f4 	sdiv	r2, r3, r4
 8087606:	fb04 3312 	mls	r3, r4, r2, r3
 808760a:	b983      	cbnz	r3, 808762e <iso_year_adjust+0x44>
 808760c:	f240 736c 	movw	r3, #1900	; 0x76c
 8087610:	2900      	cmp	r1, #0
 8087612:	bfa8      	it	ge
 8087614:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8087618:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808761c:	440b      	add	r3, r1
 808761e:	fb93 f1f2 	sdiv	r1, r3, r2
 8087622:	fb02 3311 	mls	r3, r2, r1, r3
 8087626:	fab3 f283 	clz	r2, r3
 808762a:	0952      	lsrs	r2, r2, #5
 808762c:	e000      	b.n	8087630 <iso_year_adjust+0x46>
 808762e:	2201      	movs	r2, #1
 8087630:	6983      	ldr	r3, [r0, #24]
 8087632:	69c1      	ldr	r1, [r0, #28]
 8087634:	005b      	lsls	r3, r3, #1
 8087636:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808763a:	4413      	add	r3, r2
 808763c:	2b21      	cmp	r3, #33	; 0x21
 808763e:	dc0e      	bgt.n	808765e <iso_year_adjust+0x74>
 8087640:	2b20      	cmp	r3, #32
 8087642:	da2f      	bge.n	80876a4 <iso_year_adjust+0xba>
 8087644:	2b0d      	cmp	r3, #13
 8087646:	dc02      	bgt.n	808764e <iso_year_adjust+0x64>
 8087648:	2b0a      	cmp	r3, #10
 808764a:	db05      	blt.n	8087658 <iso_year_adjust+0x6e>
 808764c:	e02a      	b.n	80876a4 <iso_year_adjust+0xba>
 808764e:	2b10      	cmp	r3, #16
 8087650:	db26      	blt.n	80876a0 <iso_year_adjust+0xb6>
 8087652:	2b11      	cmp	r3, #17
 8087654:	dd26      	ble.n	80876a4 <iso_year_adjust+0xba>
 8087656:	3b1c      	subs	r3, #28
 8087658:	2b01      	cmp	r3, #1
 808765a:	d923      	bls.n	80876a4 <iso_year_adjust+0xba>
 808765c:	e020      	b.n	80876a0 <iso_year_adjust+0xb6>
 808765e:	f241 62c6 	movw	r2, #5830	; 0x16c6
 8087662:	4293      	cmp	r3, r2
 8087664:	dc0e      	bgt.n	8087684 <iso_year_adjust+0x9a>
 8087666:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808766a:	4293      	cmp	r3, r2
 808766c:	da16      	bge.n	808769c <iso_year_adjust+0xb2>
 808766e:	f241 62a2 	movw	r2, #5794	; 0x16a2
 8087672:	4293      	cmp	r3, r2
 8087674:	d012      	beq.n	808769c <iso_year_adjust+0xb2>
 8087676:	db13      	blt.n	80876a0 <iso_year_adjust+0xb6>
 8087678:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808767c:	3b12      	subs	r3, #18
 808767e:	2b02      	cmp	r3, #2
 8087680:	d90c      	bls.n	808769c <iso_year_adjust+0xb2>
 8087682:	e00d      	b.n	80876a0 <iso_year_adjust+0xb6>
 8087684:	f241 62d5 	movw	r2, #5845	; 0x16d5
 8087688:	4293      	cmp	r3, r2
 808768a:	d007      	beq.n	808769c <iso_year_adjust+0xb2>
 808768c:	f241 62d7 	movw	r2, #5847	; 0x16d7
 8087690:	4293      	cmp	r3, r2
 8087692:	d003      	beq.n	808769c <iso_year_adjust+0xb2>
 8087694:	f241 62d3 	movw	r2, #5843	; 0x16d3
 8087698:	4293      	cmp	r3, r2
 808769a:	d101      	bne.n	80876a0 <iso_year_adjust+0xb6>
 808769c:	2001      	movs	r0, #1
 808769e:	bd10      	pop	{r4, pc}
 80876a0:	2000      	movs	r0, #0
 80876a2:	bd10      	pop	{r4, pc}
 80876a4:	f04f 30ff 	mov.w	r0, #4294967295
 80876a8:	bd10      	pop	{r4, pc}
	...

080876ac <strftime>:
 80876ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80876b0:	460e      	mov	r6, r1
 80876b2:	b093      	sub	sp, #76	; 0x4c
 80876b4:	461d      	mov	r5, r3
 80876b6:	4607      	mov	r7, r0
 80876b8:	4691      	mov	r9, r2
 80876ba:	f001 fc1d 	bl	8088ef8 <__get_current_time_locale>
 80876be:	2300      	movs	r3, #0
 80876c0:	9306      	str	r3, [sp, #24]
 80876c2:	461c      	mov	r4, r3
 80876c4:	1e73      	subs	r3, r6, #1
 80876c6:	9003      	str	r0, [sp, #12]
 80876c8:	9302      	str	r3, [sp, #8]
 80876ca:	f899 3000 	ldrb.w	r3, [r9]
 80876ce:	2b00      	cmp	r3, #0
 80876d0:	f000 8492 	beq.w	8087ff8 <strftime+0x94c>
 80876d4:	2b25      	cmp	r3, #37	; 0x25
 80876d6:	d008      	beq.n	80876ea <strftime+0x3e>
 80876d8:	9a02      	ldr	r2, [sp, #8]
 80876da:	4294      	cmp	r4, r2
 80876dc:	f080 8490 	bcs.w	8088000 <strftime+0x954>
 80876e0:	553b      	strb	r3, [r7, r4]
 80876e2:	f109 0901 	add.w	r9, r9, #1
 80876e6:	3401      	adds	r4, #1
 80876e8:	e7ef      	b.n	80876ca <strftime+0x1e>
 80876ea:	f899 a001 	ldrb.w	sl, [r9, #1]
 80876ee:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80876f2:	d007      	beq.n	8087704 <strftime+0x58>
 80876f4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80876f8:	d004      	beq.n	8087704 <strftime+0x58>
 80876fa:	f109 0901 	add.w	r9, r9, #1
 80876fe:	f04f 0a00 	mov.w	sl, #0
 8087702:	e001      	b.n	8087708 <strftime+0x5c>
 8087704:	f109 0902 	add.w	r9, r9, #2
 8087708:	f899 3000 	ldrb.w	r3, [r9]
 808770c:	3b31      	subs	r3, #49	; 0x31
 808770e:	2b08      	cmp	r3, #8
 8087710:	d808      	bhi.n	8087724 <strftime+0x78>
 8087712:	4648      	mov	r0, r9
 8087714:	220a      	movs	r2, #10
 8087716:	a90a      	add	r1, sp, #40	; 0x28
 8087718:	f001 fbe4 	bl	8088ee4 <strtoul>
 808771c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8087720:	4680      	mov	r8, r0
 8087722:	e001      	b.n	8087728 <strftime+0x7c>
 8087724:	f04f 0800 	mov.w	r8, #0
 8087728:	f899 3000 	ldrb.w	r3, [r9]
 808772c:	2b45      	cmp	r3, #69	; 0x45
 808772e:	d001      	beq.n	8087734 <strftime+0x88>
 8087730:	2b4f      	cmp	r3, #79	; 0x4f
 8087732:	d101      	bne.n	8087738 <strftime+0x8c>
 8087734:	f109 0901 	add.w	r9, r9, #1
 8087738:	f899 0000 	ldrb.w	r0, [r9]
 808773c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8087740:	2b55      	cmp	r3, #85	; 0x55
 8087742:	f200 845d 	bhi.w	8088000 <strftime+0x954>
 8087746:	e8df f013 	tbh	[pc, r3, lsl #1]
 808774a:	044a      	.short	0x044a
 808774c:	045b045b 	.word	0x045b045b
 8087750:	045b045b 	.word	0x045b045b
 8087754:	045b045b 	.word	0x045b045b
 8087758:	045b045b 	.word	0x045b045b
 808775c:	045b045b 	.word	0x045b045b
 8087760:	045b045b 	.word	0x045b045b
 8087764:	045b045b 	.word	0x045b045b
 8087768:	045b045b 	.word	0x045b045b
 808776c:	045b045b 	.word	0x045b045b
 8087770:	045b045b 	.word	0x045b045b
 8087774:	045b045b 	.word	0x045b045b
 8087778:	045b045b 	.word	0x045b045b
 808777c:	045b045b 	.word	0x045b045b
 8087780:	006f045b 	.word	0x006f045b
 8087784:	00d400a1 	.word	0x00d400a1
 8087788:	045b011a 	.word	0x045b011a
 808778c:	01a0013f 	.word	0x01a0013f
 8087790:	022d0226 	.word	0x022d0226
 8087794:	045b045b 	.word	0x045b045b
 8087798:	0260045b 	.word	0x0260045b
 808779c:	045b045b 	.word	0x045b045b
 80877a0:	045b0268 	.word	0x045b0268
 80877a4:	031c0296 	.word	0x031c0296
 80877a8:	033a0324 	.word	0x033a0324
 80877ac:	03850342 	.word	0x03850342
 80877b0:	039f00c6 	.word	0x039f00c6
 80877b4:	045b041f 	.word	0x045b041f
 80877b8:	045b045b 	.word	0x045b045b
 80877bc:	045b045b 	.word	0x045b045b
 80877c0:	0056045b 	.word	0x0056045b
 80877c4:	00ba0089 	.word	0x00ba0089
 80877c8:	010c010c 	.word	0x010c010c
 80877cc:	0171045b 	.word	0x0171045b
 80877d0:	045b0089 	.word	0x045b0089
 80877d4:	0226023d 	.word	0x0226023d
 80877d8:	025d022d 	.word	0x025d022d
 80877dc:	045b0262 	.word	0x045b0262
 80877e0:	045b0268 	.word	0x045b0268
 80877e4:	029b00be 	.word	0x029b00be
 80877e8:	032d031e 	.word	0x032d031e
 80877ec:	037e045b 	.word	0x037e045b
 80877f0:	039100c2 	.word	0x039100c2
 80877f4:	03e7      	.short	0x03e7
 80877f6:	69ab      	ldr	r3, [r5, #24]
 80877f8:	9a03      	ldr	r2, [sp, #12]
 80877fa:	3318      	adds	r3, #24
 80877fc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8087800:	4640      	mov	r0, r8
 8087802:	f000 fc07 	bl	8088014 <strlen>
 8087806:	f108 38ff 	add.w	r8, r8, #4294967295
 808780a:	193b      	adds	r3, r7, r4
 808780c:	4420      	add	r0, r4
 808780e:	4284      	cmp	r4, r0
 8087810:	f000 83eb 	beq.w	8087fea <strftime+0x93e>
 8087814:	9a02      	ldr	r2, [sp, #8]
 8087816:	4294      	cmp	r4, r2
 8087818:	f080 83f2 	bcs.w	8088000 <strftime+0x954>
 808781c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8087820:	3401      	adds	r4, #1
 8087822:	f803 2b01 	strb.w	r2, [r3], #1
 8087826:	e7f2      	b.n	808780e <strftime+0x162>
 8087828:	69ab      	ldr	r3, [r5, #24]
 808782a:	9a03      	ldr	r2, [sp, #12]
 808782c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8087830:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 8087834:	4640      	mov	r0, r8
 8087836:	f000 fbed 	bl	8088014 <strlen>
 808783a:	f108 38ff 	add.w	r8, r8, #4294967295
 808783e:	193b      	adds	r3, r7, r4
 8087840:	4420      	add	r0, r4
 8087842:	4284      	cmp	r4, r0
 8087844:	f000 83d1 	beq.w	8087fea <strftime+0x93e>
 8087848:	9a02      	ldr	r2, [sp, #8]
 808784a:	4294      	cmp	r4, r2
 808784c:	f080 83d8 	bcs.w	8088000 <strftime+0x954>
 8087850:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8087854:	3401      	adds	r4, #1
 8087856:	f803 2b01 	strb.w	r2, [r3], #1
 808785a:	e7f2      	b.n	8087842 <strftime+0x196>
 808785c:	692b      	ldr	r3, [r5, #16]
 808785e:	9a03      	ldr	r2, [sp, #12]
 8087860:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8087864:	4640      	mov	r0, r8
 8087866:	f000 fbd5 	bl	8088014 <strlen>
 808786a:	f108 38ff 	add.w	r8, r8, #4294967295
 808786e:	193b      	adds	r3, r7, r4
 8087870:	4420      	add	r0, r4
 8087872:	4284      	cmp	r4, r0
 8087874:	f000 83b9 	beq.w	8087fea <strftime+0x93e>
 8087878:	9a02      	ldr	r2, [sp, #8]
 808787a:	4294      	cmp	r4, r2
 808787c:	f080 83c0 	bcs.w	8088000 <strftime+0x954>
 8087880:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8087884:	3401      	adds	r4, #1
 8087886:	f803 2b01 	strb.w	r2, [r3], #1
 808788a:	e7f2      	b.n	8087872 <strftime+0x1c6>
 808788c:	692b      	ldr	r3, [r5, #16]
 808788e:	9a03      	ldr	r2, [sp, #12]
 8087890:	330c      	adds	r3, #12
 8087892:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8087896:	4640      	mov	r0, r8
 8087898:	f000 fbbc 	bl	8088014 <strlen>
 808789c:	f108 38ff 	add.w	r8, r8, #4294967295
 80878a0:	193b      	adds	r3, r7, r4
 80878a2:	4420      	add	r0, r4
 80878a4:	4284      	cmp	r4, r0
 80878a6:	f000 83a0 	beq.w	8087fea <strftime+0x93e>
 80878aa:	9a02      	ldr	r2, [sp, #8]
 80878ac:	4294      	cmp	r4, r2
 80878ae:	f080 83a7 	bcs.w	8088000 <strftime+0x954>
 80878b2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80878b6:	3401      	adds	r4, #1
 80878b8:	f803 2b01 	strb.w	r2, [r3], #1
 80878bc:	e7f2      	b.n	80878a4 <strftime+0x1f8>
 80878be:	9b03      	ldr	r3, [sp, #12]
 80878c0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80878c4:	e00a      	b.n	80878dc <strftime+0x230>
 80878c6:	9b03      	ldr	r3, [sp, #12]
 80878c8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80878cc:	e006      	b.n	80878dc <strftime+0x230>
 80878ce:	9b03      	ldr	r3, [sp, #12]
 80878d0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80878d4:	e002      	b.n	80878dc <strftime+0x230>
 80878d6:	9b03      	ldr	r3, [sp, #12]
 80878d8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80878dc:	4640      	mov	r0, r8
 80878de:	f000 fb99 	bl	8088014 <strlen>
 80878e2:	f898 3000 	ldrb.w	r3, [r8]
 80878e6:	2b00      	cmp	r3, #0
 80878e8:	f000 837f 	beq.w	8087fea <strftime+0x93e>
 80878ec:	462b      	mov	r3, r5
 80878ee:	4642      	mov	r2, r8
 80878f0:	e093      	b.n	8087a1a <strftime+0x36e>
 80878f2:	49b6      	ldr	r1, [pc, #728]	; (8087bcc <strftime+0x520>)
 80878f4:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80878f8:	458b      	cmp	fp, r1
 80878fa:	bfac      	ite	ge
 80878fc:	2100      	movge	r1, #0
 80878fe:	2101      	movlt	r1, #1
 8087900:	f1bb 0f00 	cmp.w	fp, #0
 8087904:	db04      	blt.n	8087910 <strftime+0x264>
 8087906:	2064      	movs	r0, #100	; 0x64
 8087908:	fb9b f0f0 	sdiv	r0, fp, r0
 808790c:	3013      	adds	r0, #19
 808790e:	e008      	b.n	8087922 <strftime+0x276>
 8087910:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 8087914:	9107      	str	r1, [sp, #28]
 8087916:	f001 fd2f 	bl	8089378 <abs>
 808791a:	2364      	movs	r3, #100	; 0x64
 808791c:	fb90 f0f3 	sdiv	r0, r0, r3
 8087920:	9907      	ldr	r1, [sp, #28]
 8087922:	f1ba 0f00 	cmp.w	sl, #0
 8087926:	d008      	beq.n	808793a <strftime+0x28e>
 8087928:	2863      	cmp	r0, #99	; 0x63
 808792a:	dd09      	ble.n	8087940 <strftime+0x294>
 808792c:	4ba8      	ldr	r3, [pc, #672]	; (8087bd0 <strftime+0x524>)
 808792e:	4aa9      	ldr	r2, [pc, #676]	; (8087bd4 <strftime+0x528>)
 8087930:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8087934:	bf18      	it	ne
 8087936:	4613      	movne	r3, r2
 8087938:	e003      	b.n	8087942 <strftime+0x296>
 808793a:	4ba6      	ldr	r3, [pc, #664]	; (8087bd4 <strftime+0x528>)
 808793c:	4aa6      	ldr	r2, [pc, #664]	; (8087bd8 <strftime+0x52c>)
 808793e:	e001      	b.n	8087944 <strftime+0x298>
 8087940:	4ba4      	ldr	r3, [pc, #656]	; (8087bd4 <strftime+0x528>)
 8087942:	4aa6      	ldr	r2, [pc, #664]	; (8087bdc <strftime+0x530>)
 8087944:	f1b8 0f01 	cmp.w	r8, #1
 8087948:	bf98      	it	ls
 808794a:	f04f 0802 	movls.w	r8, #2
 808794e:	ebc1 0108 	rsb	r1, r1, r8
 8087952:	9001      	str	r0, [sp, #4]
 8087954:	9100      	str	r1, [sp, #0]
 8087956:	489d      	ldr	r0, [pc, #628]	; (8087bcc <strftime+0x520>)
 8087958:	49a1      	ldr	r1, [pc, #644]	; (8087be0 <strftime+0x534>)
 808795a:	4583      	cmp	fp, r0
 808795c:	bfb8      	it	lt
 808795e:	460b      	movlt	r3, r1
 8087960:	e21d      	b.n	8087d9e <strftime+0x6f2>
 8087962:	4aa0      	ldr	r2, [pc, #640]	; (8087be4 <strftime+0x538>)
 8087964:	49a0      	ldr	r1, [pc, #640]	; (8087be8 <strftime+0x53c>)
 8087966:	68eb      	ldr	r3, [r5, #12]
 8087968:	2864      	cmp	r0, #100	; 0x64
 808796a:	bf08      	it	eq
 808796c:	460a      	moveq	r2, r1
 808796e:	1b31      	subs	r1, r6, r4
 8087970:	1938      	adds	r0, r7, r4
 8087972:	f7fc fd4b 	bl	808440c <sniprintf>
 8087976:	2800      	cmp	r0, #0
 8087978:	f280 8302 	bge.w	8087f80 <strftime+0x8d4>
 808797c:	e340      	b.n	8088000 <strftime+0x954>
 808797e:	6968      	ldr	r0, [r5, #20]
 8087980:	692b      	ldr	r3, [r5, #16]
 8087982:	2800      	cmp	r0, #0
 8087984:	f103 0b01 	add.w	fp, r3, #1
 8087988:	eb07 0804 	add.w	r8, r7, r4
 808798c:	ebc4 0a06 	rsb	sl, r4, r6
 8087990:	68eb      	ldr	r3, [r5, #12]
 8087992:	db05      	blt.n	80879a0 <strftime+0x2f4>
 8087994:	2264      	movs	r2, #100	; 0x64
 8087996:	fb90 f1f2 	sdiv	r1, r0, r2
 808799a:	fb02 0011 	mls	r0, r2, r1, r0
 808799e:	e00a      	b.n	80879b6 <strftime+0x30a>
 80879a0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80879a4:	9307      	str	r3, [sp, #28]
 80879a6:	f001 fce7 	bl	8089378 <abs>
 80879aa:	2264      	movs	r2, #100	; 0x64
 80879ac:	fb90 f1f2 	sdiv	r1, r0, r2
 80879b0:	fb01 0012 	mls	r0, r1, r2, r0
 80879b4:	9b07      	ldr	r3, [sp, #28]
 80879b6:	9001      	str	r0, [sp, #4]
 80879b8:	9300      	str	r3, [sp, #0]
 80879ba:	4651      	mov	r1, sl
 80879bc:	465b      	mov	r3, fp
 80879be:	4640      	mov	r0, r8
 80879c0:	4a8a      	ldr	r2, [pc, #552]	; (8087bec <strftime+0x540>)
 80879c2:	f7fc fd23 	bl	808440c <sniprintf>
 80879c6:	e7d6      	b.n	8087976 <strftime+0x2ca>
 80879c8:	2325      	movs	r3, #37	; 0x25
 80879ca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80879ce:	f1ba 0f00 	cmp.w	sl, #0
 80879d2:	d007      	beq.n	80879e4 <strftime+0x338>
 80879d4:	f1b8 0f05 	cmp.w	r8, #5
 80879d8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80879dc:	bf98      	it	ls
 80879de:	f04f 0806 	movls.w	r8, #6
 80879e2:	e004      	b.n	80879ee <strftime+0x342>
 80879e4:	232b      	movs	r3, #43	; 0x2b
 80879e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80879ea:	f04f 080a 	mov.w	r8, #10
 80879ee:	f1b8 0306 	subs.w	r3, r8, #6
 80879f2:	d102      	bne.n	80879fa <strftime+0x34e>
 80879f4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80879f8:	e00a      	b.n	8087a10 <strftime+0x364>
 80879fa:	4a7d      	ldr	r2, [pc, #500]	; (8087bf0 <strftime+0x544>)
 80879fc:	211e      	movs	r1, #30
 80879fe:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8087a02:	f7fc fd03 	bl	808440c <sniprintf>
 8087a06:	2800      	cmp	r0, #0
 8087a08:	ddf4      	ble.n	80879f4 <strftime+0x348>
 8087a0a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8087a0e:	4418      	add	r0, r3
 8087a10:	4978      	ldr	r1, [pc, #480]	; (8087bf4 <strftime+0x548>)
 8087a12:	f7ff fdc7 	bl	80875a4 <strcpy>
 8087a16:	462b      	mov	r3, r5
 8087a18:	aa0a      	add	r2, sp, #40	; 0x28
 8087a1a:	1b31      	subs	r1, r6, r4
 8087a1c:	1938      	adds	r0, r7, r4
 8087a1e:	f7ff fe45 	bl	80876ac <strftime>
 8087a22:	2800      	cmp	r0, #0
 8087a24:	f340 82ec 	ble.w	8088000 <strftime+0x954>
 8087a28:	4404      	add	r4, r0
 8087a2a:	e2de      	b.n	8087fea <strftime+0x93e>
 8087a2c:	4628      	mov	r0, r5
 8087a2e:	f7ff fddc 	bl	80875ea <iso_year_adjust>
 8087a32:	4680      	mov	r8, r0
 8087a34:	6968      	ldr	r0, [r5, #20]
 8087a36:	2800      	cmp	r0, #0
 8087a38:	db05      	blt.n	8087a46 <strftime+0x39a>
 8087a3a:	2264      	movs	r2, #100	; 0x64
 8087a3c:	fb90 f1f2 	sdiv	r1, r0, r2
 8087a40:	fb02 0011 	mls	r0, r2, r1, r0
 8087a44:	e008      	b.n	8087a58 <strftime+0x3ac>
 8087a46:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8087a4a:	f001 fc95 	bl	8089378 <abs>
 8087a4e:	2264      	movs	r2, #100	; 0x64
 8087a50:	fb90 f3f2 	sdiv	r3, r0, r2
 8087a54:	fb03 0012 	mls	r0, r3, r2, r0
 8087a58:	f1b8 0f00 	cmp.w	r8, #0
 8087a5c:	da06      	bge.n	8087a6c <strftime+0x3c0>
 8087a5e:	696a      	ldr	r2, [r5, #20]
 8087a60:	4b65      	ldr	r3, [pc, #404]	; (8087bf8 <strftime+0x54c>)
 8087a62:	429a      	cmp	r2, r3
 8087a64:	bfb8      	it	lt
 8087a66:	f04f 0801 	movlt.w	r8, #1
 8087a6a:	e006      	b.n	8087a7a <strftime+0x3ce>
 8087a6c:	d005      	beq.n	8087a7a <strftime+0x3ce>
 8087a6e:	696a      	ldr	r2, [r5, #20]
 8087a70:	4b56      	ldr	r3, [pc, #344]	; (8087bcc <strftime+0x520>)
 8087a72:	429a      	cmp	r2, r3
 8087a74:	bfb8      	it	lt
 8087a76:	f04f 38ff 	movlt.w	r8, #4294967295
 8087a7a:	2364      	movs	r3, #100	; 0x64
 8087a7c:	4440      	add	r0, r8
 8087a7e:	fb90 f2f3 	sdiv	r2, r0, r3
 8087a82:	fb03 0012 	mls	r0, r3, r2, r0
 8087a86:	4418      	add	r0, r3
 8087a88:	e1f8      	b.n	8087e7c <strftime+0x7d0>
 8087a8a:	4b50      	ldr	r3, [pc, #320]	; (8087bcc <strftime+0x520>)
 8087a8c:	6969      	ldr	r1, [r5, #20]
 8087a8e:	4628      	mov	r0, r5
 8087a90:	4299      	cmp	r1, r3
 8087a92:	bfac      	ite	ge
 8087a94:	2300      	movge	r3, #0
 8087a96:	2301      	movlt	r3, #1
 8087a98:	9108      	str	r1, [sp, #32]
 8087a9a:	9307      	str	r3, [sp, #28]
 8087a9c:	f7ff fda5 	bl	80875ea <iso_year_adjust>
 8087aa0:	9908      	ldr	r1, [sp, #32]
 8087aa2:	4683      	mov	fp, r0
 8087aa4:	2900      	cmp	r1, #0
 8087aa6:	db04      	blt.n	8087ab2 <strftime+0x406>
 8087aa8:	2364      	movs	r3, #100	; 0x64
 8087aaa:	fb91 f3f3 	sdiv	r3, r1, r3
 8087aae:	3313      	adds	r3, #19
 8087ab0:	e008      	b.n	8087ac4 <strftime+0x418>
 8087ab2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8087ab6:	9108      	str	r1, [sp, #32]
 8087ab8:	f001 fc5e 	bl	8089378 <abs>
 8087abc:	2364      	movs	r3, #100	; 0x64
 8087abe:	fb90 f3f3 	sdiv	r3, r0, r3
 8087ac2:	9908      	ldr	r1, [sp, #32]
 8087ac4:	6968      	ldr	r0, [r5, #20]
 8087ac6:	2800      	cmp	r0, #0
 8087ac8:	db06      	blt.n	8087ad8 <strftime+0x42c>
 8087aca:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8087ace:	fb90 fcfe 	sdiv	ip, r0, lr
 8087ad2:	fb0e 001c 	mls	r0, lr, ip, r0
 8087ad6:	e00d      	b.n	8087af4 <strftime+0x448>
 8087ad8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8087adc:	9109      	str	r1, [sp, #36]	; 0x24
 8087ade:	9308      	str	r3, [sp, #32]
 8087ae0:	f001 fc4a 	bl	8089378 <abs>
 8087ae4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8087ae8:	fb90 fcfe 	sdiv	ip, r0, lr
 8087aec:	fb0c 001e 	mls	r0, ip, lr, r0
 8087af0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8087af2:	9b08      	ldr	r3, [sp, #32]
 8087af4:	f1bb 0f00 	cmp.w	fp, #0
 8087af8:	da08      	bge.n	8087b0c <strftime+0x460>
 8087afa:	6969      	ldr	r1, [r5, #20]
 8087afc:	4a3e      	ldr	r2, [pc, #248]	; (8087bf8 <strftime+0x54c>)
 8087afe:	4291      	cmp	r1, r2
 8087b00:	da0a      	bge.n	8087b18 <strftime+0x46c>
 8087b02:	f04f 0b01 	mov.w	fp, #1
 8087b06:	f8cd b01c 	str.w	fp, [sp, #28]
 8087b0a:	e005      	b.n	8087b18 <strftime+0x46c>
 8087b0c:	d004      	beq.n	8087b18 <strftime+0x46c>
 8087b0e:	4a2f      	ldr	r2, [pc, #188]	; (8087bcc <strftime+0x520>)
 8087b10:	4291      	cmp	r1, r2
 8087b12:	bfb8      	it	lt
 8087b14:	f04f 3bff 	movlt.w	fp, #4294967295
 8087b18:	eb0b 0200 	add.w	r2, fp, r0
 8087b1c:	1c50      	adds	r0, r2, #1
 8087b1e:	d102      	bne.n	8087b26 <strftime+0x47a>
 8087b20:	3b01      	subs	r3, #1
 8087b22:	2263      	movs	r2, #99	; 0x63
 8087b24:	e003      	b.n	8087b2e <strftime+0x482>
 8087b26:	2a64      	cmp	r2, #100	; 0x64
 8087b28:	bf04      	itt	eq
 8087b2a:	3301      	addeq	r3, #1
 8087b2c:	2200      	moveq	r2, #0
 8087b2e:	2064      	movs	r0, #100	; 0x64
 8087b30:	fb00 2303 	mla	r3, r0, r3, r2
 8087b34:	9a07      	ldr	r2, [sp, #28]
 8087b36:	b142      	cbz	r2, 8087b4a <strftime+0x49e>
 8087b38:	222d      	movs	r2, #45	; 0x2d
 8087b3a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 8087b3e:	f1b8 0f00 	cmp.w	r8, #0
 8087b42:	d013      	beq.n	8087b6c <strftime+0x4c0>
 8087b44:	f108 38ff 	add.w	r8, r8, #4294967295
 8087b48:	e010      	b.n	8087b6c <strftime+0x4c0>
 8087b4a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8087b4e:	d110      	bne.n	8087b72 <strftime+0x4c6>
 8087b50:	f242 720f 	movw	r2, #9999	; 0x270f
 8087b54:	4293      	cmp	r3, r2
 8087b56:	d90c      	bls.n	8087b72 <strftime+0x4c6>
 8087b58:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8087b5c:	f1b8 0f00 	cmp.w	r8, #0
 8087b60:	d1f0      	bne.n	8087b44 <strftime+0x498>
 8087b62:	aa12      	add	r2, sp, #72	; 0x48
 8087b64:	2125      	movs	r1, #37	; 0x25
 8087b66:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 8087b6a:	e00a      	b.n	8087b82 <strftime+0x4d6>
 8087b6c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8087b70:	e000      	b.n	8087b74 <strftime+0x4c8>
 8087b72:	aa0a      	add	r2, sp, #40	; 0x28
 8087b74:	2125      	movs	r1, #37	; 0x25
 8087b76:	7011      	strb	r1, [r2, #0]
 8087b78:	f1ba 0f00 	cmp.w	sl, #0
 8087b7c:	d101      	bne.n	8087b82 <strftime+0x4d6>
 8087b7e:	1c50      	adds	r0, r2, #1
 8087b80:	e002      	b.n	8087b88 <strftime+0x4dc>
 8087b82:	2130      	movs	r1, #48	; 0x30
 8087b84:	1c90      	adds	r0, r2, #2
 8087b86:	7051      	strb	r1, [r2, #1]
 8087b88:	491c      	ldr	r1, [pc, #112]	; (8087bfc <strftime+0x550>)
 8087b8a:	9307      	str	r3, [sp, #28]
 8087b8c:	f7ff fd0a 	bl	80875a4 <strcpy>
 8087b90:	9b07      	ldr	r3, [sp, #28]
 8087b92:	9300      	str	r3, [sp, #0]
 8087b94:	e1ac      	b.n	8087ef0 <strftime+0x844>
 8087b96:	4a14      	ldr	r2, [pc, #80]	; (8087be8 <strftime+0x53c>)
 8087b98:	4912      	ldr	r1, [pc, #72]	; (8087be4 <strftime+0x538>)
 8087b9a:	68ab      	ldr	r3, [r5, #8]
 8087b9c:	286b      	cmp	r0, #107	; 0x6b
 8087b9e:	bf08      	it	eq
 8087ba0:	460a      	moveq	r2, r1
 8087ba2:	e6e4      	b.n	808796e <strftime+0x2c2>
 8087ba4:	68a9      	ldr	r1, [r5, #8]
 8087ba6:	230c      	movs	r3, #12
 8087ba8:	b131      	cbz	r1, 8087bb8 <strftime+0x50c>
 8087baa:	4299      	cmp	r1, r3
 8087bac:	bf16      	itet	ne
 8087bae:	fb91 f2f3 	sdivne	r2, r1, r3
 8087bb2:	460b      	moveq	r3, r1
 8087bb4:	fb03 1312 	mlsne	r3, r3, r2, r1
 8087bb8:	4a0a      	ldr	r2, [pc, #40]	; (8087be4 <strftime+0x538>)
 8087bba:	490b      	ldr	r1, [pc, #44]	; (8087be8 <strftime+0x53c>)
 8087bbc:	2849      	cmp	r0, #73	; 0x49
 8087bbe:	bf08      	it	eq
 8087bc0:	460a      	moveq	r2, r1
 8087bc2:	e6d4      	b.n	808796e <strftime+0x2c2>
 8087bc4:	69eb      	ldr	r3, [r5, #28]
 8087bc6:	4a0e      	ldr	r2, [pc, #56]	; (8087c00 <strftime+0x554>)
 8087bc8:	3301      	adds	r3, #1
 8087bca:	e6d0      	b.n	808796e <strftime+0x2c2>
 8087bcc:	fffff894 	.word	0xfffff894
 8087bd0:	0808ac7b 	.word	0x0808ac7b
 8087bd4:	0808a71d 	.word	0x0808a71d
 8087bd8:	0808ac6c 	.word	0x0808ac6c
 8087bdc:	0808ac73 	.word	0x0808ac73
 8087be0:	0808a724 	.word	0x0808a724
 8087be4:	0808ac7d 	.word	0x0808ac7d
 8087be8:	0808ac8b 	.word	0x0808ac8b
 8087bec:	0808ac81 	.word	0x0808ac81
 8087bf0:	0808ac90 	.word	0x0808ac90
 8087bf4:	0808ac94 	.word	0x0808ac94
 8087bf8:	fffff895 	.word	0xfffff895
 8087bfc:	0808ac9c 	.word	0x0808ac9c
 8087c00:	0808aca0 	.word	0x0808aca0
 8087c04:	692b      	ldr	r3, [r5, #16]
 8087c06:	3301      	adds	r3, #1
 8087c08:	e13c      	b.n	8087e84 <strftime+0x7d8>
 8087c0a:	686b      	ldr	r3, [r5, #4]
 8087c0c:	e13a      	b.n	8087e84 <strftime+0x7d8>
 8087c0e:	9b02      	ldr	r3, [sp, #8]
 8087c10:	429c      	cmp	r4, r3
 8087c12:	f080 81f5 	bcs.w	8088000 <strftime+0x954>
 8087c16:	230a      	movs	r3, #10
 8087c18:	e1e5      	b.n	8087fe6 <strftime+0x93a>
 8087c1a:	68ab      	ldr	r3, [r5, #8]
 8087c1c:	9a03      	ldr	r2, [sp, #12]
 8087c1e:	2b0b      	cmp	r3, #11
 8087c20:	bfcc      	ite	gt
 8087c22:	23a4      	movgt	r3, #164	; 0xa4
 8087c24:	23a0      	movle	r3, #160	; 0xa0
 8087c26:	4413      	add	r3, r2
 8087c28:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8087c2c:	4640      	mov	r0, r8
 8087c2e:	f000 f9f1 	bl	8088014 <strlen>
 8087c32:	4642      	mov	r2, r8
 8087c34:	4bb1      	ldr	r3, [pc, #708]	; (8087efc <strftime+0x850>)
 8087c36:	1939      	adds	r1, r7, r4
 8087c38:	f8d3 e000 	ldr.w	lr, [r3]
 8087c3c:	4420      	add	r0, r4
 8087c3e:	4284      	cmp	r4, r0
 8087c40:	f000 81d3 	beq.w	8087fea <strftime+0x93e>
 8087c44:	9b02      	ldr	r3, [sp, #8]
 8087c46:	429c      	cmp	r4, r3
 8087c48:	f080 81da 	bcs.w	8088000 <strftime+0x954>
 8087c4c:	f899 3000 	ldrb.w	r3, [r9]
 8087c50:	3401      	adds	r4, #1
 8087c52:	2b50      	cmp	r3, #80	; 0x50
 8087c54:	7813      	ldrb	r3, [r2, #0]
 8087c56:	d10a      	bne.n	8087c6e <strftime+0x5c2>
 8087c58:	eb0e 0c03 	add.w	ip, lr, r3
 8087c5c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8087c60:	f00c 0c03 	and.w	ip, ip, #3
 8087c64:	f1bc 0f01 	cmp.w	ip, #1
 8087c68:	bf08      	it	eq
 8087c6a:	3320      	addeq	r3, #32
 8087c6c:	b2db      	uxtb	r3, r3
 8087c6e:	f801 3b01 	strb.w	r3, [r1], #1
 8087c72:	3201      	adds	r2, #1
 8087c74:	e7e3      	b.n	8087c3e <strftime+0x592>
 8087c76:	686b      	ldr	r3, [r5, #4]
 8087c78:	4aa1      	ldr	r2, [pc, #644]	; (8087f00 <strftime+0x854>)
 8087c7a:	9300      	str	r3, [sp, #0]
 8087c7c:	68ab      	ldr	r3, [r5, #8]
 8087c7e:	e139      	b.n	8087ef4 <strftime+0x848>
 8087c80:	6a2b      	ldr	r3, [r5, #32]
 8087c82:	2b00      	cmp	r3, #0
 8087c84:	db17      	blt.n	8087cb6 <strftime+0x60a>
 8087c86:	f001 f9ef 	bl	8089068 <__tz_lock>
 8087c8a:	9b06      	ldr	r3, [sp, #24]
 8087c8c:	b91b      	cbnz	r3, 8087c96 <strftime+0x5ea>
 8087c8e:	f001 f9ed 	bl	808906c <_tzset_unlocked>
 8087c92:	2301      	movs	r3, #1
 8087c94:	9306      	str	r3, [sp, #24]
 8087c96:	f001 fed5 	bl	8089a44 <__gettzinfo>
 8087c9a:	6a2b      	ldr	r3, [r5, #32]
 8087c9c:	221c      	movs	r2, #28
 8087c9e:	2b00      	cmp	r3, #0
 8087ca0:	bfd4      	ite	le
 8087ca2:	2300      	movle	r3, #0
 8087ca4:	2301      	movgt	r3, #1
 8087ca6:	fb02 0003 	mla	r0, r2, r3, r0
 8087caa:	6a03      	ldr	r3, [r0, #32]
 8087cac:	f1c3 0800 	rsb	r8, r3, #0
 8087cb0:	f001 f9db 	bl	808906a <__tz_unlock>
 8087cb4:	e001      	b.n	8087cba <strftime+0x60e>
 8087cb6:	f04f 0800 	mov.w	r8, #0
 8087cba:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8087cbe:	ebc4 0c06 	rsb	ip, r4, r6
 8087cc2:	4670      	mov	r0, lr
 8087cc4:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 8087cc8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8087ccc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8087cd0:	2a00      	cmp	r2, #0
 8087cd2:	f173 0b00 	sbcs.w	fp, r3, #0
 8087cd6:	eb07 0a04 	add.w	sl, r7, r4
 8087cda:	da03      	bge.n	8087ce4 <strftime+0x638>
 8087cdc:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 8087ce0:	f141 33ff 	adc.w	r3, r1, #4294967295
 8087ce4:	0891      	lsrs	r1, r2, #2
 8087ce6:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 8087cea:	109b      	asrs	r3, r3, #2
 8087cec:	9104      	str	r1, [sp, #16]
 8087cee:	9305      	str	r3, [sp, #20]
 8087cf0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8087cf4:	2364      	movs	r3, #100	; 0x64
 8087cf6:	fb91 f1f3 	sdiv	r1, r1, r3
 8087cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8087cfe:	1a52      	subs	r2, r2, r1
 8087d00:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 8087d04:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 8087d08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8087d0c:	fb90 f1f1 	sdiv	r1, r0, r1
 8087d10:	1852      	adds	r2, r2, r1
 8087d12:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8087d16:	f240 116d 	movw	r1, #365	; 0x16d
 8087d1a:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 8087d1e:	fb01 fe0e 	mul.w	lr, r1, lr
 8087d22:	69e9      	ldr	r1, [r5, #28]
 8087d24:	eb12 020e 	adds.w	r2, r2, lr
 8087d28:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 8087d2c:	1852      	adds	r2, r2, r1
 8087d2e:	f04f 0e18 	mov.w	lr, #24
 8087d32:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8087d36:	fba2 010e 	umull	r0, r1, r2, lr
 8087d3a:	fb0e 1103 	mla	r1, lr, r3, r1
 8087d3e:	68ab      	ldr	r3, [r5, #8]
 8087d40:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 8087d44:	18c0      	adds	r0, r0, r3
 8087d46:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8087d4a:	fba0 230e 	umull	r2, r3, r0, lr
 8087d4e:	fb0e 3301 	mla	r3, lr, r1, r3
 8087d52:	6869      	ldr	r1, [r5, #4]
 8087d54:	1852      	adds	r2, r2, r1
 8087d56:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8087d5a:	fba2 010e 	umull	r0, r1, r2, lr
 8087d5e:	fb0e 1103 	mla	r1, lr, r3, r1
 8087d62:	682b      	ldr	r3, [r5, #0]
 8087d64:	4a67      	ldr	r2, [pc, #412]	; (8087f04 <strftime+0x858>)
 8087d66:	18c0      	adds	r0, r0, r3
 8087d68:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8087d6c:	ebb0 0008 	subs.w	r0, r0, r8
 8087d70:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 8087d74:	e9cd 0100 	strd	r0, r1, [sp]
 8087d78:	4661      	mov	r1, ip
 8087d7a:	4650      	mov	r0, sl
 8087d7c:	f7fc fb46 	bl	808440c <sniprintf>
 8087d80:	e5f9      	b.n	8087976 <strftime+0x2ca>
 8087d82:	682b      	ldr	r3, [r5, #0]
 8087d84:	e07e      	b.n	8087e84 <strftime+0x7d8>
 8087d86:	9b02      	ldr	r3, [sp, #8]
 8087d88:	429c      	cmp	r4, r3
 8087d8a:	f080 8139 	bcs.w	8088000 <strftime+0x954>
 8087d8e:	2309      	movs	r3, #9
 8087d90:	e129      	b.n	8087fe6 <strftime+0x93a>
 8087d92:	682b      	ldr	r3, [r5, #0]
 8087d94:	4a5c      	ldr	r2, [pc, #368]	; (8087f08 <strftime+0x85c>)
 8087d96:	9301      	str	r3, [sp, #4]
 8087d98:	686b      	ldr	r3, [r5, #4]
 8087d9a:	9300      	str	r3, [sp, #0]
 8087d9c:	68ab      	ldr	r3, [r5, #8]
 8087d9e:	1b31      	subs	r1, r6, r4
 8087da0:	1938      	adds	r0, r7, r4
 8087da2:	e60e      	b.n	80879c2 <strftime+0x316>
 8087da4:	9b02      	ldr	r3, [sp, #8]
 8087da6:	429c      	cmp	r4, r3
 8087da8:	f080 812a 	bcs.w	8088000 <strftime+0x954>
 8087dac:	69ab      	ldr	r3, [r5, #24]
 8087dae:	1c62      	adds	r2, r4, #1
 8087db0:	b90b      	cbnz	r3, 8087db6 <strftime+0x70a>
 8087db2:	2337      	movs	r3, #55	; 0x37
 8087db4:	e000      	b.n	8087db8 <strftime+0x70c>
 8087db6:	3330      	adds	r3, #48	; 0x30
 8087db8:	553b      	strb	r3, [r7, r4]
 8087dba:	4614      	mov	r4, r2
 8087dbc:	e115      	b.n	8087fea <strftime+0x93e>
 8087dbe:	69eb      	ldr	r3, [r5, #28]
 8087dc0:	69aa      	ldr	r2, [r5, #24]
 8087dc2:	3307      	adds	r3, #7
 8087dc4:	1a9b      	subs	r3, r3, r2
 8087dc6:	2207      	movs	r2, #7
 8087dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8087dcc:	e05a      	b.n	8087e84 <strftime+0x7d8>
 8087dce:	4628      	mov	r0, r5
 8087dd0:	f7ff fc0b 	bl	80875ea <iso_year_adjust>
 8087dd4:	69aa      	ldr	r2, [r5, #24]
 8087dd6:	b10a      	cbz	r2, 8087ddc <strftime+0x730>
 8087dd8:	1e53      	subs	r3, r2, #1
 8087dda:	e000      	b.n	8087dde <strftime+0x732>
 8087ddc:	2306      	movs	r3, #6
 8087dde:	2800      	cmp	r0, #0
 8087de0:	dc2f      	bgt.n	8087e42 <strftime+0x796>
 8087de2:	69ea      	ldr	r2, [r5, #28]
 8087de4:	d101      	bne.n	8087dea <strftime+0x73e>
 8087de6:	320a      	adds	r2, #10
 8087de8:	e03b      	b.n	8087e62 <strftime+0x7b6>
 8087dea:	f240 716b 	movw	r1, #1899	; 0x76b
 8087dee:	1a9a      	subs	r2, r3, r2
 8087df0:	696b      	ldr	r3, [r5, #20]
 8087df2:	2b00      	cmp	r3, #0
 8087df4:	bfb4      	ite	lt
 8087df6:	4608      	movlt	r0, r1
 8087df8:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 8087dfc:	4418      	add	r0, r3
 8087dfe:	0781      	lsls	r1, r0, #30
 8087e00:	d107      	bne.n	8087e12 <strftime+0x766>
 8087e02:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8087e06:	4601      	mov	r1, r0
 8087e08:	fb90 f0fe 	sdiv	r0, r0, lr
 8087e0c:	fb0e 1110 	mls	r1, lr, r0, r1
 8087e10:	b981      	cbnz	r1, 8087e34 <strftime+0x788>
 8087e12:	f240 716b 	movw	r1, #1899	; 0x76b
 8087e16:	2b00      	cmp	r3, #0
 8087e18:	bfa8      	it	ge
 8087e1a:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 8087e1e:	4419      	add	r1, r3
 8087e20:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8087e24:	fb91 f0f3 	sdiv	r0, r1, r3
 8087e28:	fb03 1110 	mls	r1, r3, r0, r1
 8087e2c:	fab1 f181 	clz	r1, r1
 8087e30:	0949      	lsrs	r1, r1, #5
 8087e32:	e000      	b.n	8087e36 <strftime+0x78a>
 8087e34:	2101      	movs	r1, #1
 8087e36:	1a52      	subs	r2, r2, r1
 8087e38:	2a05      	cmp	r2, #5
 8087e3a:	bfb4      	ite	lt
 8087e3c:	2335      	movlt	r3, #53	; 0x35
 8087e3e:	2334      	movge	r3, #52	; 0x34
 8087e40:	e020      	b.n	8087e84 <strftime+0x7d8>
 8087e42:	2301      	movs	r3, #1
 8087e44:	e01e      	b.n	8087e84 <strftime+0x7d8>
 8087e46:	9b02      	ldr	r3, [sp, #8]
 8087e48:	429c      	cmp	r4, r3
 8087e4a:	f080 80d9 	bcs.w	8088000 <strftime+0x954>
 8087e4e:	69ab      	ldr	r3, [r5, #24]
 8087e50:	3330      	adds	r3, #48	; 0x30
 8087e52:	e0c8      	b.n	8087fe6 <strftime+0x93a>
 8087e54:	69aa      	ldr	r2, [r5, #24]
 8087e56:	b10a      	cbz	r2, 8087e5c <strftime+0x7b0>
 8087e58:	1e53      	subs	r3, r2, #1
 8087e5a:	e000      	b.n	8087e5e <strftime+0x7b2>
 8087e5c:	2306      	movs	r3, #6
 8087e5e:	69ea      	ldr	r2, [r5, #28]
 8087e60:	3207      	adds	r2, #7
 8087e62:	1ad2      	subs	r2, r2, r3
 8087e64:	2307      	movs	r3, #7
 8087e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8087e6a:	e00b      	b.n	8087e84 <strftime+0x7d8>
 8087e6c:	6968      	ldr	r0, [r5, #20]
 8087e6e:	2800      	cmp	r0, #0
 8087e70:	da03      	bge.n	8087e7a <strftime+0x7ce>
 8087e72:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8087e76:	f001 fa7f 	bl	8089378 <abs>
 8087e7a:	2364      	movs	r3, #100	; 0x64
 8087e7c:	fb90 f2f3 	sdiv	r2, r0, r3
 8087e80:	fb02 0313 	mls	r3, r2, r3, r0
 8087e84:	4a21      	ldr	r2, [pc, #132]	; (8087f0c <strftime+0x860>)
 8087e86:	e572      	b.n	808796e <strftime+0x2c2>
 8087e88:	696b      	ldr	r3, [r5, #20]
 8087e8a:	4a21      	ldr	r2, [pc, #132]	; (8087f10 <strftime+0x864>)
 8087e8c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 8087e90:	4293      	cmp	r3, r2
 8087e92:	da05      	bge.n	8087ea0 <strftime+0x7f4>
 8087e94:	232d      	movs	r3, #45	; 0x2d
 8087e96:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8087e9a:	f1cb 0b00 	rsb	fp, fp, #0
 8087e9e:	e008      	b.n	8087eb2 <strftime+0x806>
 8087ea0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 8087ea4:	d10d      	bne.n	8087ec2 <strftime+0x816>
 8087ea6:	f242 730f 	movw	r3, #9999	; 0x270f
 8087eaa:	459b      	cmp	fp, r3
 8087eac:	d911      	bls.n	8087ed2 <strftime+0x826>
 8087eae:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8087eb2:	f1b8 0f00 	cmp.w	r8, #0
 8087eb6:	d001      	beq.n	8087ebc <strftime+0x810>
 8087eb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8087ebc:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8087ec0:	e000      	b.n	8087ec4 <strftime+0x818>
 8087ec2:	ab0a      	add	r3, sp, #40	; 0x28
 8087ec4:	2225      	movs	r2, #37	; 0x25
 8087ec6:	701a      	strb	r2, [r3, #0]
 8087ec8:	f1ba 0f00 	cmp.w	sl, #0
 8087ecc:	d108      	bne.n	8087ee0 <strftime+0x834>
 8087ece:	1c58      	adds	r0, r3, #1
 8087ed0:	e009      	b.n	8087ee6 <strftime+0x83a>
 8087ed2:	f1b8 0f00 	cmp.w	r8, #0
 8087ed6:	d1f4      	bne.n	8087ec2 <strftime+0x816>
 8087ed8:	2325      	movs	r3, #37	; 0x25
 8087eda:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8087ede:	ab0a      	add	r3, sp, #40	; 0x28
 8087ee0:	2230      	movs	r2, #48	; 0x30
 8087ee2:	1c98      	adds	r0, r3, #2
 8087ee4:	705a      	strb	r2, [r3, #1]
 8087ee6:	490b      	ldr	r1, [pc, #44]	; (8087f14 <strftime+0x868>)
 8087ee8:	f7ff fb5c 	bl	80875a4 <strcpy>
 8087eec:	f8cd b000 	str.w	fp, [sp]
 8087ef0:	4643      	mov	r3, r8
 8087ef2:	aa0a      	add	r2, sp, #40	; 0x28
 8087ef4:	1b31      	subs	r1, r6, r4
 8087ef6:	1938      	adds	r0, r7, r4
 8087ef8:	e03f      	b.n	8087f7a <strftime+0x8ce>
 8087efa:	bf00      	nop
 8087efc:	20000050 	.word	0x20000050
 8087f00:	0808acaf 	.word	0x0808acaf
 8087f04:	0808aca5 	.word	0x0808aca5
 8087f08:	0808acaa 	.word	0x0808acaa
 8087f0c:	0808ac8b 	.word	0x0808ac8b
 8087f10:	fffff894 	.word	0xfffff894
 8087f14:	0808ac9c 	.word	0x0808ac9c
 8087f18:	6a2b      	ldr	r3, [r5, #32]
 8087f1a:	2b00      	cmp	r3, #0
 8087f1c:	db65      	blt.n	8087fea <strftime+0x93e>
 8087f1e:	f001 f8a3 	bl	8089068 <__tz_lock>
 8087f22:	9b06      	ldr	r3, [sp, #24]
 8087f24:	b91b      	cbnz	r3, 8087f2e <strftime+0x882>
 8087f26:	f001 f8a1 	bl	808906c <_tzset_unlocked>
 8087f2a:	2301      	movs	r3, #1
 8087f2c:	9306      	str	r3, [sp, #24]
 8087f2e:	f001 fd89 	bl	8089a44 <__gettzinfo>
 8087f32:	6a2b      	ldr	r3, [r5, #32]
 8087f34:	221c      	movs	r2, #28
 8087f36:	2b00      	cmp	r3, #0
 8087f38:	bfd4      	ite	le
 8087f3a:	2300      	movle	r3, #0
 8087f3c:	2301      	movgt	r3, #1
 8087f3e:	fb02 0003 	mla	r0, r2, r3, r0
 8087f42:	6a03      	ldr	r3, [r0, #32]
 8087f44:	eb07 0a04 	add.w	sl, r7, r4
 8087f48:	f1c3 0800 	rsb	r8, r3, #0
 8087f4c:	f001 f88d 	bl	808906a <__tz_unlock>
 8087f50:	233c      	movs	r3, #60	; 0x3c
 8087f52:	fb98 f0f3 	sdiv	r0, r8, r3
 8087f56:	9307      	str	r3, [sp, #28]
 8087f58:	f001 fe0e 	bl	8089b78 <labs>
 8087f5c:	9b07      	ldr	r3, [sp, #28]
 8087f5e:	ebc4 0b06 	rsb	fp, r4, r6
 8087f62:	fb90 f2f3 	sdiv	r2, r0, r3
 8087f66:	fb02 0013 	mls	r0, r2, r3, r0
 8087f6a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8087f6e:	9000      	str	r0, [sp, #0]
 8087f70:	fb98 f3f3 	sdiv	r3, r8, r3
 8087f74:	4659      	mov	r1, fp
 8087f76:	4650      	mov	r0, sl
 8087f78:	4a24      	ldr	r2, [pc, #144]	; (808800c <strftime+0x960>)
 8087f7a:	f7fc fa47 	bl	808440c <sniprintf>
 8087f7e:	e4fa      	b.n	8087976 <strftime+0x2ca>
 8087f80:	4404      	add	r4, r0
 8087f82:	42a6      	cmp	r6, r4
 8087f84:	d831      	bhi.n	8087fea <strftime+0x93e>
 8087f86:	e03b      	b.n	8088000 <strftime+0x954>
 8087f88:	6a2b      	ldr	r3, [r5, #32]
 8087f8a:	2b00      	cmp	r3, #0
 8087f8c:	db2d      	blt.n	8087fea <strftime+0x93e>
 8087f8e:	f001 f86b 	bl	8089068 <__tz_lock>
 8087f92:	9b06      	ldr	r3, [sp, #24]
 8087f94:	b91b      	cbnz	r3, 8087f9e <strftime+0x8f2>
 8087f96:	f001 f869 	bl	808906c <_tzset_unlocked>
 8087f9a:	2301      	movs	r3, #1
 8087f9c:	9306      	str	r3, [sp, #24]
 8087f9e:	6a2b      	ldr	r3, [r5, #32]
 8087fa0:	4a1b      	ldr	r2, [pc, #108]	; (8088010 <strftime+0x964>)
 8087fa2:	2b00      	cmp	r3, #0
 8087fa4:	bfd4      	ite	le
 8087fa6:	2300      	movle	r3, #0
 8087fa8:	2301      	movgt	r3, #1
 8087faa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8087fae:	4640      	mov	r0, r8
 8087fb0:	f000 f830 	bl	8088014 <strlen>
 8087fb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8087fb8:	193b      	adds	r3, r7, r4
 8087fba:	4420      	add	r0, r4
 8087fbc:	4284      	cmp	r4, r0
 8087fbe:	d00b      	beq.n	8087fd8 <strftime+0x92c>
 8087fc0:	9a02      	ldr	r2, [sp, #8]
 8087fc2:	4294      	cmp	r4, r2
 8087fc4:	d205      	bcs.n	8087fd2 <strftime+0x926>
 8087fc6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8087fca:	3401      	adds	r4, #1
 8087fcc:	f803 2b01 	strb.w	r2, [r3], #1
 8087fd0:	e7f4      	b.n	8087fbc <strftime+0x910>
 8087fd2:	f001 f84a 	bl	808906a <__tz_unlock>
 8087fd6:	e013      	b.n	8088000 <strftime+0x954>
 8087fd8:	f001 f847 	bl	808906a <__tz_unlock>
 8087fdc:	e005      	b.n	8087fea <strftime+0x93e>
 8087fde:	9b02      	ldr	r3, [sp, #8]
 8087fe0:	429c      	cmp	r4, r3
 8087fe2:	d20d      	bcs.n	8088000 <strftime+0x954>
 8087fe4:	2325      	movs	r3, #37	; 0x25
 8087fe6:	553b      	strb	r3, [r7, r4]
 8087fe8:	3401      	adds	r4, #1
 8087fea:	f899 3000 	ldrb.w	r3, [r9]
 8087fee:	b11b      	cbz	r3, 8087ff8 <strftime+0x94c>
 8087ff0:	f109 0901 	add.w	r9, r9, #1
 8087ff4:	f7ff bb69 	b.w	80876ca <strftime+0x1e>
 8087ff8:	b126      	cbz	r6, 8088004 <strftime+0x958>
 8087ffa:	2300      	movs	r3, #0
 8087ffc:	553b      	strb	r3, [r7, r4]
 8087ffe:	e001      	b.n	8088004 <strftime+0x958>
 8088000:	2000      	movs	r0, #0
 8088002:	e000      	b.n	8088006 <strftime+0x95a>
 8088004:	4620      	mov	r0, r4
 8088006:	b013      	add	sp, #76	; 0x4c
 8088008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808800c:	0808acb9 	.word	0x0808acb9
 8088010:	200000f0 	.word	0x200000f0

08088014 <strlen>:
 8088014:	4603      	mov	r3, r0
 8088016:	f813 2b01 	ldrb.w	r2, [r3], #1
 808801a:	2a00      	cmp	r2, #0
 808801c:	d1fb      	bne.n	8088016 <strlen+0x2>
 808801e:	1a18      	subs	r0, r3, r0
 8088020:	3801      	subs	r0, #1
 8088022:	4770      	bx	lr

08088024 <strncmp>:
 8088024:	b530      	push	{r4, r5, lr}
 8088026:	b182      	cbz	r2, 808804a <strncmp+0x26>
 8088028:	1e45      	subs	r5, r0, #1
 808802a:	3901      	subs	r1, #1
 808802c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8088030:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8088034:	42a3      	cmp	r3, r4
 8088036:	d106      	bne.n	8088046 <strncmp+0x22>
 8088038:	43ec      	mvns	r4, r5
 808803a:	4414      	add	r4, r2
 808803c:	42e0      	cmn	r0, r4
 808803e:	d001      	beq.n	8088044 <strncmp+0x20>
 8088040:	2b00      	cmp	r3, #0
 8088042:	d1f3      	bne.n	808802c <strncmp+0x8>
 8088044:	461c      	mov	r4, r3
 8088046:	1b18      	subs	r0, r3, r4
 8088048:	bd30      	pop	{r4, r5, pc}
 808804a:	4610      	mov	r0, r2
 808804c:	bd30      	pop	{r4, r5, pc}

0808804e <strncpy>:
 808804e:	4603      	mov	r3, r0
 8088050:	b510      	push	{r4, lr}
 8088052:	b142      	cbz	r2, 8088066 <strncpy+0x18>
 8088054:	f811 4b01 	ldrb.w	r4, [r1], #1
 8088058:	3a01      	subs	r2, #1
 808805a:	f803 4b01 	strb.w	r4, [r3], #1
 808805e:	2c00      	cmp	r4, #0
 8088060:	d1f7      	bne.n	8088052 <strncpy+0x4>
 8088062:	441a      	add	r2, r3
 8088064:	e000      	b.n	8088068 <strncpy+0x1a>
 8088066:	bd10      	pop	{r4, pc}
 8088068:	4293      	cmp	r3, r2
 808806a:	d002      	beq.n	8088072 <strncpy+0x24>
 808806c:	f803 4b01 	strb.w	r4, [r3], #1
 8088070:	e7fa      	b.n	8088068 <strncpy+0x1a>
 8088072:	bd10      	pop	{r4, pc}

08088074 <sulp>:
 8088074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088078:	460f      	mov	r7, r1
 808807a:	4690      	mov	r8, r2
 808807c:	f002 f846 	bl	808a10c <__ulp>
 8088080:	4604      	mov	r4, r0
 8088082:	460d      	mov	r5, r1
 8088084:	f1b8 0f00 	cmp.w	r8, #0
 8088088:	d011      	beq.n	80880ae <sulp+0x3a>
 808808a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808808e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8088092:	2b00      	cmp	r3, #0
 8088094:	dd0b      	ble.n	80880ae <sulp+0x3a>
 8088096:	051b      	lsls	r3, r3, #20
 8088098:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808809c:	2400      	movs	r4, #0
 808809e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80880a2:	4622      	mov	r2, r4
 80880a4:	462b      	mov	r3, r5
 80880a6:	f7fe fa5f 	bl	8086568 <__aeabi_dmul>
 80880aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80880ae:	4620      	mov	r0, r4
 80880b0:	4629      	mov	r1, r5
 80880b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080880b8 <_strtod_r>:
 80880b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80880bc:	4682      	mov	sl, r0
 80880be:	460c      	mov	r4, r1
 80880c0:	b09d      	sub	sp, #116	; 0x74
 80880c2:	2300      	movs	r3, #0
 80880c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80880c6:	9318      	str	r3, [sp, #96]	; 0x60
 80880c8:	f04f 0800 	mov.w	r8, #0
 80880cc:	f04f 0900 	mov.w	r9, #0
 80880d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80880d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80880d4:	781a      	ldrb	r2, [r3, #0]
 80880d6:	2a0d      	cmp	r2, #13
 80880d8:	d805      	bhi.n	80880e6 <_strtod_r+0x2e>
 80880da:	2a09      	cmp	r2, #9
 80880dc:	d213      	bcs.n	8088106 <_strtod_r+0x4e>
 80880de:	2a00      	cmp	r2, #0
 80880e0:	f000 81ad 	beq.w	808843e <_strtod_r+0x386>
 80880e4:	e012      	b.n	808810c <_strtod_r+0x54>
 80880e6:	2a2b      	cmp	r2, #43	; 0x2b
 80880e8:	d004      	beq.n	80880f4 <_strtod_r+0x3c>
 80880ea:	2a2d      	cmp	r2, #45	; 0x2d
 80880ec:	d004      	beq.n	80880f8 <_strtod_r+0x40>
 80880ee:	2a20      	cmp	r2, #32
 80880f0:	d10c      	bne.n	808810c <_strtod_r+0x54>
 80880f2:	e008      	b.n	8088106 <_strtod_r+0x4e>
 80880f4:	2200      	movs	r2, #0
 80880f6:	e000      	b.n	80880fa <_strtod_r+0x42>
 80880f8:	2201      	movs	r2, #1
 80880fa:	920c      	str	r2, [sp, #48]	; 0x30
 80880fc:	1c5a      	adds	r2, r3, #1
 80880fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8088100:	785b      	ldrb	r3, [r3, #1]
 8088102:	b92b      	cbnz	r3, 8088110 <_strtod_r+0x58>
 8088104:	e19b      	b.n	808843e <_strtod_r+0x386>
 8088106:	3301      	adds	r3, #1
 8088108:	9317      	str	r3, [sp, #92]	; 0x5c
 808810a:	e7e2      	b.n	80880d2 <_strtod_r+0x1a>
 808810c:	2300      	movs	r3, #0
 808810e:	930c      	str	r3, [sp, #48]	; 0x30
 8088110:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8088112:	782b      	ldrb	r3, [r5, #0]
 8088114:	2b30      	cmp	r3, #48	; 0x30
 8088116:	d15c      	bne.n	80881d2 <_strtod_r+0x11a>
 8088118:	786b      	ldrb	r3, [r5, #1]
 808811a:	2b58      	cmp	r3, #88	; 0x58
 808811c:	d001      	beq.n	8088122 <_strtod_r+0x6a>
 808811e:	2b78      	cmp	r3, #120	; 0x78
 8088120:	d14c      	bne.n	80881bc <_strtod_r+0x104>
 8088122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8088124:	4aa8      	ldr	r2, [pc, #672]	; (80883c8 <_strtod_r+0x310>)
 8088126:	9301      	str	r3, [sp, #4]
 8088128:	ab18      	add	r3, sp, #96	; 0x60
 808812a:	9300      	str	r3, [sp, #0]
 808812c:	a917      	add	r1, sp, #92	; 0x5c
 808812e:	ab19      	add	r3, sp, #100	; 0x64
 8088130:	4650      	mov	r0, sl
 8088132:	f001 f970 	bl	8089416 <__gethex>
 8088136:	f010 0607 	ands.w	r6, r0, #7
 808813a:	4604      	mov	r4, r0
 808813c:	f000 8585 	beq.w	8088c4a <_strtod_r+0xb92>
 8088140:	2e06      	cmp	r6, #6
 8088142:	d105      	bne.n	8088150 <_strtod_r+0x98>
 8088144:	3501      	adds	r5, #1
 8088146:	2300      	movs	r3, #0
 8088148:	9517      	str	r5, [sp, #92]	; 0x5c
 808814a:	930c      	str	r3, [sp, #48]	; 0x30
 808814c:	f000 bd7d 	b.w	8088c4a <_strtod_r+0xb92>
 8088150:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8088152:	b13a      	cbz	r2, 8088164 <_strtod_r+0xac>
 8088154:	2135      	movs	r1, #53	; 0x35
 8088156:	a81a      	add	r0, sp, #104	; 0x68
 8088158:	f002 f8bf 	bl	808a2da <__copybits>
 808815c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808815e:	4650      	mov	r0, sl
 8088160:	f001 fd43 	bl	8089bea <_Bfree>
 8088164:	2e06      	cmp	r6, #6
 8088166:	d822      	bhi.n	80881ae <_strtod_r+0xf6>
 8088168:	e8df f006 	tbb	[pc, r6]
 808816c:	18080d04 	.word	0x18080d04
 8088170:	0d1d      	.short	0x0d1d
 8088172:	04          	.byte	0x04
 8088173:	00          	.byte	0x00
 8088174:	f04f 0900 	mov.w	r9, #0
 8088178:	46c8      	mov	r8, r9
 808817a:	e018      	b.n	80881ae <_strtod_r+0xf6>
 808817c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8088180:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8088184:	e013      	b.n	80881ae <_strtod_r+0xf6>
 8088186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8088188:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808818a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808818e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8088192:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8088196:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808819a:	e008      	b.n	80881ae <_strtod_r+0xf6>
 808819c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80883cc <_strtod_r+0x314>
 80881a0:	f04f 0800 	mov.w	r8, #0
 80881a4:	e003      	b.n	80881ae <_strtod_r+0xf6>
 80881a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80881aa:	f04f 38ff 	mov.w	r8, #4294967295
 80881ae:	0721      	lsls	r1, r4, #28
 80881b0:	f140 854b 	bpl.w	8088c4a <_strtod_r+0xb92>
 80881b4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80881b8:	f000 bd47 	b.w	8088c4a <_strtod_r+0xb92>
 80881bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80881be:	1c5a      	adds	r2, r3, #1
 80881c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80881c2:	785b      	ldrb	r3, [r3, #1]
 80881c4:	2b30      	cmp	r3, #48	; 0x30
 80881c6:	d0f9      	beq.n	80881bc <_strtod_r+0x104>
 80881c8:	2b00      	cmp	r3, #0
 80881ca:	f000 853e 	beq.w	8088c4a <_strtod_r+0xb92>
 80881ce:	2301      	movs	r3, #1
 80881d0:	e000      	b.n	80881d4 <_strtod_r+0x11c>
 80881d2:	2300      	movs	r3, #0
 80881d4:	9305      	str	r3, [sp, #20]
 80881d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80881d8:	220a      	movs	r2, #10
 80881da:	9306      	str	r3, [sp, #24]
 80881dc:	2300      	movs	r3, #0
 80881de:	469b      	mov	fp, r3
 80881e0:	9302      	str	r3, [sp, #8]
 80881e2:	9304      	str	r3, [sp, #16]
 80881e4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80881e6:	782e      	ldrb	r6, [r5, #0]
 80881e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80881ec:	b2d9      	uxtb	r1, r3
 80881ee:	2909      	cmp	r1, #9
 80881f0:	d811      	bhi.n	8088216 <_strtod_r+0x15e>
 80881f2:	f1bb 0f08 	cmp.w	fp, #8
 80881f6:	bfd5      	itete	le
 80881f8:	9904      	ldrle	r1, [sp, #16]
 80881fa:	9902      	ldrgt	r1, [sp, #8]
 80881fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8088200:	fb02 3301 	mlagt	r3, r2, r1, r3
 8088204:	f105 0501 	add.w	r5, r5, #1
 8088208:	bfd4      	ite	le
 808820a:	9304      	strle	r3, [sp, #16]
 808820c:	9302      	strgt	r3, [sp, #8]
 808820e:	f10b 0b01 	add.w	fp, fp, #1
 8088212:	9517      	str	r5, [sp, #92]	; 0x5c
 8088214:	e7e6      	b.n	80881e4 <_strtod_r+0x12c>
 8088216:	4650      	mov	r0, sl
 8088218:	f7ff f96c 	bl	80874f4 <_localeconv_r>
 808821c:	6807      	ldr	r7, [r0, #0]
 808821e:	4650      	mov	r0, sl
 8088220:	f7ff f968 	bl	80874f4 <_localeconv_r>
 8088224:	6800      	ldr	r0, [r0, #0]
 8088226:	f7ff fef5 	bl	8088014 <strlen>
 808822a:	4639      	mov	r1, r7
 808822c:	4602      	mov	r2, r0
 808822e:	4628      	mov	r0, r5
 8088230:	f7ff fef8 	bl	8088024 <strncmp>
 8088234:	4607      	mov	r7, r0
 8088236:	b128      	cbz	r0, 8088244 <_strtod_r+0x18c>
 8088238:	2000      	movs	r0, #0
 808823a:	4633      	mov	r3, r6
 808823c:	465d      	mov	r5, fp
 808823e:	4602      	mov	r2, r0
 8088240:	4601      	mov	r1, r0
 8088242:	e05a      	b.n	80882fa <_strtod_r+0x242>
 8088244:	4650      	mov	r0, sl
 8088246:	f7ff f955 	bl	80874f4 <_localeconv_r>
 808824a:	6800      	ldr	r0, [r0, #0]
 808824c:	f7ff fee2 	bl	8088014 <strlen>
 8088250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088252:	181a      	adds	r2, r3, r0
 8088254:	9217      	str	r2, [sp, #92]	; 0x5c
 8088256:	5c1b      	ldrb	r3, [r3, r0]
 8088258:	f1bb 0f00 	cmp.w	fp, #0
 808825c:	d145      	bne.n	80882ea <_strtod_r+0x232>
 808825e:	4658      	mov	r0, fp
 8088260:	2b30      	cmp	r3, #48	; 0x30
 8088262:	d105      	bne.n	8088270 <_strtod_r+0x1b8>
 8088264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088266:	3001      	adds	r0, #1
 8088268:	1c5a      	adds	r2, r3, #1
 808826a:	9217      	str	r2, [sp, #92]	; 0x5c
 808826c:	785b      	ldrb	r3, [r3, #1]
 808826e:	e7f7      	b.n	8088260 <_strtod_r+0x1a8>
 8088270:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8088274:	2a08      	cmp	r2, #8
 8088276:	d846      	bhi.n	8088306 <_strtod_r+0x24e>
 8088278:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808827a:	9206      	str	r2, [sp, #24]
 808827c:	4602      	mov	r2, r0
 808827e:	2000      	movs	r0, #0
 8088280:	4605      	mov	r5, r0
 8088282:	3b30      	subs	r3, #48	; 0x30
 8088284:	f100 0101 	add.w	r1, r0, #1
 8088288:	d029      	beq.n	80882de <_strtod_r+0x226>
 808828a:	440a      	add	r2, r1
 808828c:	4629      	mov	r1, r5
 808828e:	eb05 0c00 	add.w	ip, r5, r0
 8088292:	260a      	movs	r6, #10
 8088294:	4561      	cmp	r1, ip
 8088296:	d00f      	beq.n	80882b8 <_strtod_r+0x200>
 8088298:	3101      	adds	r1, #1
 808829a:	f101 3eff 	add.w	lr, r1, #4294967295
 808829e:	f1be 0f08 	cmp.w	lr, #8
 80882a2:	dc03      	bgt.n	80882ac <_strtod_r+0x1f4>
 80882a4:	9f04      	ldr	r7, [sp, #16]
 80882a6:	4377      	muls	r7, r6
 80882a8:	9704      	str	r7, [sp, #16]
 80882aa:	e7f3      	b.n	8088294 <_strtod_r+0x1dc>
 80882ac:	2910      	cmp	r1, #16
 80882ae:	bfde      	ittt	le
 80882b0:	9f02      	ldrle	r7, [sp, #8]
 80882b2:	4377      	mulle	r7, r6
 80882b4:	9702      	strle	r7, [sp, #8]
 80882b6:	e7ed      	b.n	8088294 <_strtod_r+0x1dc>
 80882b8:	4428      	add	r0, r5
 80882ba:	2808      	cmp	r0, #8
 80882bc:	f100 0501 	add.w	r5, r0, #1
 80882c0:	dc05      	bgt.n	80882ce <_strtod_r+0x216>
 80882c2:	9804      	ldr	r0, [sp, #16]
 80882c4:	210a      	movs	r1, #10
 80882c6:	fb01 3300 	mla	r3, r1, r0, r3
 80882ca:	9304      	str	r3, [sp, #16]
 80882cc:	e006      	b.n	80882dc <_strtod_r+0x224>
 80882ce:	2d10      	cmp	r5, #16
 80882d0:	bfdf      	itttt	le
 80882d2:	9802      	ldrle	r0, [sp, #8]
 80882d4:	210a      	movle	r1, #10
 80882d6:	fb01 3300 	mlale	r3, r1, r0, r3
 80882da:	9302      	strle	r3, [sp, #8]
 80882dc:	2100      	movs	r1, #0
 80882de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80882e0:	1c58      	adds	r0, r3, #1
 80882e2:	9017      	str	r0, [sp, #92]	; 0x5c
 80882e4:	785b      	ldrb	r3, [r3, #1]
 80882e6:	4608      	mov	r0, r1
 80882e8:	e002      	b.n	80882f0 <_strtod_r+0x238>
 80882ea:	465d      	mov	r5, fp
 80882ec:	4638      	mov	r0, r7
 80882ee:	463a      	mov	r2, r7
 80882f0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80882f4:	2909      	cmp	r1, #9
 80882f6:	d9c4      	bls.n	8088282 <_strtod_r+0x1ca>
 80882f8:	2101      	movs	r1, #1
 80882fa:	2b65      	cmp	r3, #101	; 0x65
 80882fc:	d001      	beq.n	8088302 <_strtod_r+0x24a>
 80882fe:	2b45      	cmp	r3, #69	; 0x45
 8088300:	d14f      	bne.n	80883a2 <_strtod_r+0x2ea>
 8088302:	b96d      	cbnz	r5, 8088320 <_strtod_r+0x268>
 8088304:	e004      	b.n	8088310 <_strtod_r+0x258>
 8088306:	2b65      	cmp	r3, #101	; 0x65
 8088308:	f040 84ad 	bne.w	8088c66 <_strtod_r+0xbae>
 808830c:	2200      	movs	r2, #0
 808830e:	2101      	movs	r1, #1
 8088310:	b928      	cbnz	r0, 808831e <_strtod_r+0x266>
 8088312:	9b05      	ldr	r3, [sp, #20]
 8088314:	2b00      	cmp	r3, #0
 8088316:	f000 8092 	beq.w	808843e <_strtod_r+0x386>
 808831a:	4605      	mov	r5, r0
 808831c:	e000      	b.n	8088320 <_strtod_r+0x268>
 808831e:	2500      	movs	r5, #0
 8088320:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8088322:	1c63      	adds	r3, r4, #1
 8088324:	9317      	str	r3, [sp, #92]	; 0x5c
 8088326:	7863      	ldrb	r3, [r4, #1]
 8088328:	2b2b      	cmp	r3, #43	; 0x2b
 808832a:	d006      	beq.n	808833a <_strtod_r+0x282>
 808832c:	2b2d      	cmp	r3, #45	; 0x2d
 808832e:	d002      	beq.n	8088336 <_strtod_r+0x27e>
 8088330:	2600      	movs	r6, #0
 8088332:	9603      	str	r6, [sp, #12]
 8088334:	e006      	b.n	8088344 <_strtod_r+0x28c>
 8088336:	2301      	movs	r3, #1
 8088338:	e000      	b.n	808833c <_strtod_r+0x284>
 808833a:	2300      	movs	r3, #0
 808833c:	9303      	str	r3, [sp, #12]
 808833e:	1ca3      	adds	r3, r4, #2
 8088340:	9317      	str	r3, [sp, #92]	; 0x5c
 8088342:	78a3      	ldrb	r3, [r4, #2]
 8088344:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8088348:	2e09      	cmp	r6, #9
 808834a:	d829      	bhi.n	80883a0 <_strtod_r+0x2e8>
 808834c:	2b30      	cmp	r3, #48	; 0x30
 808834e:	d104      	bne.n	808835a <_strtod_r+0x2a2>
 8088350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088352:	1c5e      	adds	r6, r3, #1
 8088354:	9617      	str	r6, [sp, #92]	; 0x5c
 8088356:	785b      	ldrb	r3, [r3, #1]
 8088358:	e7f8      	b.n	808834c <_strtod_r+0x294>
 808835a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808835e:	2e08      	cmp	r6, #8
 8088360:	d81f      	bhi.n	80883a2 <_strtod_r+0x2ea>
 8088362:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8088366:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088368:	461f      	mov	r7, r3
 808836a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808836c:	1c5e      	adds	r6, r3, #1
 808836e:	9617      	str	r6, [sp, #92]	; 0x5c
 8088370:	785b      	ldrb	r3, [r3, #1]
 8088372:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8088376:	f1bc 0f09 	cmp.w	ip, #9
 808837a:	d805      	bhi.n	8088388 <_strtod_r+0x2d0>
 808837c:	260a      	movs	r6, #10
 808837e:	fb06 3e0e 	mla	lr, r6, lr, r3
 8088382:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8088386:	e7f0      	b.n	808836a <_strtod_r+0x2b2>
 8088388:	1bf6      	subs	r6, r6, r7
 808838a:	2e08      	cmp	r6, #8
 808838c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8088390:	dc02      	bgt.n	8088398 <_strtod_r+0x2e0>
 8088392:	4576      	cmp	r6, lr
 8088394:	bfa8      	it	ge
 8088396:	4676      	movge	r6, lr
 8088398:	9f03      	ldr	r7, [sp, #12]
 808839a:	b11f      	cbz	r7, 80883a4 <_strtod_r+0x2ec>
 808839c:	4276      	negs	r6, r6
 808839e:	e001      	b.n	80883a4 <_strtod_r+0x2ec>
 80883a0:	9417      	str	r4, [sp, #92]	; 0x5c
 80883a2:	2600      	movs	r6, #0
 80883a4:	2d00      	cmp	r5, #0
 80883a6:	d152      	bne.n	808844e <_strtod_r+0x396>
 80883a8:	2800      	cmp	r0, #0
 80883aa:	f040 844e 	bne.w	8088c4a <_strtod_r+0xb92>
 80883ae:	9a05      	ldr	r2, [sp, #20]
 80883b0:	2a00      	cmp	r2, #0
 80883b2:	f040 844a 	bne.w	8088c4a <_strtod_r+0xb92>
 80883b6:	2900      	cmp	r1, #0
 80883b8:	d141      	bne.n	808843e <_strtod_r+0x386>
 80883ba:	2b4e      	cmp	r3, #78	; 0x4e
 80883bc:	d020      	beq.n	8088400 <_strtod_r+0x348>
 80883be:	dc07      	bgt.n	80883d0 <_strtod_r+0x318>
 80883c0:	2b49      	cmp	r3, #73	; 0x49
 80883c2:	d00a      	beq.n	80883da <_strtod_r+0x322>
 80883c4:	e03b      	b.n	808843e <_strtod_r+0x386>
 80883c6:	bf00      	nop
 80883c8:	0808acc8 	.word	0x0808acc8
 80883cc:	7ff00000 	.word	0x7ff00000
 80883d0:	2b69      	cmp	r3, #105	; 0x69
 80883d2:	d002      	beq.n	80883da <_strtod_r+0x322>
 80883d4:	2b6e      	cmp	r3, #110	; 0x6e
 80883d6:	d013      	beq.n	8088400 <_strtod_r+0x348>
 80883d8:	e031      	b.n	808843e <_strtod_r+0x386>
 80883da:	49aa      	ldr	r1, [pc, #680]	; (8088684 <_strtod_r+0x5cc>)
 80883dc:	a817      	add	r0, sp, #92	; 0x5c
 80883de:	f001 fa4b 	bl	8089878 <__match>
 80883e2:	b360      	cbz	r0, 808843e <_strtod_r+0x386>
 80883e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80883e6:	49a8      	ldr	r1, [pc, #672]	; (8088688 <_strtod_r+0x5d0>)
 80883e8:	3b01      	subs	r3, #1
 80883ea:	a817      	add	r0, sp, #92	; 0x5c
 80883ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80883ee:	f001 fa43 	bl	8089878 <__match>
 80883f2:	b910      	cbnz	r0, 80883fa <_strtod_r+0x342>
 80883f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80883f6:	3301      	adds	r3, #1
 80883f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80883fa:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80886a4 <_strtod_r+0x5ec>
 80883fe:	e01a      	b.n	8088436 <_strtod_r+0x37e>
 8088400:	49a2      	ldr	r1, [pc, #648]	; (808868c <_strtod_r+0x5d4>)
 8088402:	a817      	add	r0, sp, #92	; 0x5c
 8088404:	f001 fa38 	bl	8089878 <__match>
 8088408:	b1c8      	cbz	r0, 808843e <_strtod_r+0x386>
 808840a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808840c:	781b      	ldrb	r3, [r3, #0]
 808840e:	2b28      	cmp	r3, #40	; 0x28
 8088410:	d10f      	bne.n	8088432 <_strtod_r+0x37a>
 8088412:	aa1a      	add	r2, sp, #104	; 0x68
 8088414:	499e      	ldr	r1, [pc, #632]	; (8088690 <_strtod_r+0x5d8>)
 8088416:	a817      	add	r0, sp, #92	; 0x5c
 8088418:	f001 fa41 	bl	808989e <__hexnan>
 808841c:	2805      	cmp	r0, #5
 808841e:	d108      	bne.n	8088432 <_strtod_r+0x37a>
 8088420:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8088422:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8088426:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808842a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808842e:	f000 bc0c 	b.w	8088c4a <_strtod_r+0xb92>
 8088432:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80886a8 <_strtod_r+0x5f0>
 8088436:	f04f 0800 	mov.w	r8, #0
 808843a:	f000 bc06 	b.w	8088c4a <_strtod_r+0xb92>
 808843e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8088440:	9417      	str	r4, [sp, #92]	; 0x5c
 8088442:	2b00      	cmp	r3, #0
 8088444:	f000 840c 	beq.w	8088c60 <_strtod_r+0xba8>
 8088448:	2300      	movs	r3, #0
 808844a:	930c      	str	r3, [sp, #48]	; 0x30
 808844c:	e3ff      	b.n	8088c4e <_strtod_r+0xb96>
 808844e:	462c      	mov	r4, r5
 8088450:	f1bb 0f00 	cmp.w	fp, #0
 8088454:	bf08      	it	eq
 8088456:	46ab      	moveq	fp, r5
 8088458:	9804      	ldr	r0, [sp, #16]
 808845a:	2d10      	cmp	r5, #16
 808845c:	bfa8      	it	ge
 808845e:	2410      	movge	r4, #16
 8088460:	1ab7      	subs	r7, r6, r2
 8088462:	f7fe f80b 	bl	808647c <__aeabi_ui2d>
 8088466:	2c09      	cmp	r4, #9
 8088468:	4680      	mov	r8, r0
 808846a:	4689      	mov	r9, r1
 808846c:	dd13      	ble.n	8088496 <_strtod_r+0x3de>
 808846e:	4b89      	ldr	r3, [pc, #548]	; (8088694 <_strtod_r+0x5dc>)
 8088470:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8088474:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8088478:	f7fe f876 	bl	8086568 <__aeabi_dmul>
 808847c:	4680      	mov	r8, r0
 808847e:	9802      	ldr	r0, [sp, #8]
 8088480:	4689      	mov	r9, r1
 8088482:	f7fd fffb 	bl	808647c <__aeabi_ui2d>
 8088486:	4602      	mov	r2, r0
 8088488:	460b      	mov	r3, r1
 808848a:	4640      	mov	r0, r8
 808848c:	4649      	mov	r1, r9
 808848e:	f7fd feb9 	bl	8086204 <__adddf3>
 8088492:	4680      	mov	r8, r0
 8088494:	4689      	mov	r9, r1
 8088496:	2d0f      	cmp	r5, #15
 8088498:	dc33      	bgt.n	8088502 <_strtod_r+0x44a>
 808849a:	2f00      	cmp	r7, #0
 808849c:	f000 83d5 	beq.w	8088c4a <_strtod_r+0xb92>
 80884a0:	dd22      	ble.n	80884e8 <_strtod_r+0x430>
 80884a2:	2f16      	cmp	r7, #22
 80884a4:	dc07      	bgt.n	80884b6 <_strtod_r+0x3fe>
 80884a6:	4d7b      	ldr	r5, [pc, #492]	; (8088694 <_strtod_r+0x5dc>)
 80884a8:	4642      	mov	r2, r8
 80884aa:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80884ae:	464b      	mov	r3, r9
 80884b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80884b4:	e013      	b.n	80884de <_strtod_r+0x426>
 80884b6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80884ba:	429f      	cmp	r7, r3
 80884bc:	dc21      	bgt.n	8088502 <_strtod_r+0x44a>
 80884be:	4c75      	ldr	r4, [pc, #468]	; (8088694 <_strtod_r+0x5dc>)
 80884c0:	f1c5 050f 	rsb	r5, r5, #15
 80884c4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80884c8:	1b7d      	subs	r5, r7, r5
 80884ca:	4642      	mov	r2, r8
 80884cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80884d0:	464b      	mov	r3, r9
 80884d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80884d6:	f7fe f847 	bl	8086568 <__aeabi_dmul>
 80884da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80884de:	f7fe f843 	bl	8086568 <__aeabi_dmul>
 80884e2:	4680      	mov	r8, r0
 80884e4:	4689      	mov	r9, r1
 80884e6:	e3b0      	b.n	8088c4a <_strtod_r+0xb92>
 80884e8:	f117 0f16 	cmn.w	r7, #22
 80884ec:	db09      	blt.n	8088502 <_strtod_r+0x44a>
 80884ee:	4d69      	ldr	r5, [pc, #420]	; (8088694 <_strtod_r+0x5dc>)
 80884f0:	4640      	mov	r0, r8
 80884f2:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80884f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80884fa:	4649      	mov	r1, r9
 80884fc:	f7fe f95e 	bl	80867bc <__aeabi_ddiv>
 8088500:	e7ef      	b.n	80884e2 <_strtod_r+0x42a>
 8088502:	1b2c      	subs	r4, r5, r4
 8088504:	443c      	add	r4, r7
 8088506:	2c00      	cmp	r4, #0
 8088508:	dd5d      	ble.n	80885c6 <_strtod_r+0x50e>
 808850a:	f014 010f 	ands.w	r1, r4, #15
 808850e:	d00a      	beq.n	8088526 <_strtod_r+0x46e>
 8088510:	4b60      	ldr	r3, [pc, #384]	; (8088694 <_strtod_r+0x5dc>)
 8088512:	4642      	mov	r2, r8
 8088514:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8088518:	e9d1 0100 	ldrd	r0, r1, [r1]
 808851c:	464b      	mov	r3, r9
 808851e:	f7fe f823 	bl	8086568 <__aeabi_dmul>
 8088522:	4680      	mov	r8, r0
 8088524:	4689      	mov	r9, r1
 8088526:	f034 040f 	bics.w	r4, r4, #15
 808852a:	f000 80c1 	beq.w	80886b0 <_strtod_r+0x5f8>
 808852e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8088532:	dd0f      	ble.n	8088554 <_strtod_r+0x49c>
 8088534:	f04f 0b00 	mov.w	fp, #0
 8088538:	f8cd b008 	str.w	fp, [sp, #8]
 808853c:	f8cd b014 	str.w	fp, [sp, #20]
 8088540:	f8cd b010 	str.w	fp, [sp, #16]
 8088544:	2322      	movs	r3, #34	; 0x22
 8088546:	f8ca 3000 	str.w	r3, [sl]
 808854a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80886a4 <_strtod_r+0x5ec>
 808854e:	f04f 0800 	mov.w	r8, #0
 8088552:	e189      	b.n	8088868 <_strtod_r+0x7b0>
 8088554:	4640      	mov	r0, r8
 8088556:	4649      	mov	r1, r9
 8088558:	2300      	movs	r3, #0
 808855a:	4e4f      	ldr	r6, [pc, #316]	; (8088698 <_strtod_r+0x5e0>)
 808855c:	1124      	asrs	r4, r4, #4
 808855e:	9302      	str	r3, [sp, #8]
 8088560:	2c01      	cmp	r4, #1
 8088562:	dd0c      	ble.n	808857e <_strtod_r+0x4c6>
 8088564:	07e2      	lsls	r2, r4, #31
 8088566:	d504      	bpl.n	8088572 <_strtod_r+0x4ba>
 8088568:	e9d6 2300 	ldrd	r2, r3, [r6]
 808856c:	f7fd fffc 	bl	8086568 <__aeabi_dmul>
 8088570:	2301      	movs	r3, #1
 8088572:	9a02      	ldr	r2, [sp, #8]
 8088574:	1064      	asrs	r4, r4, #1
 8088576:	3201      	adds	r2, #1
 8088578:	9202      	str	r2, [sp, #8]
 808857a:	3608      	adds	r6, #8
 808857c:	e7f0      	b.n	8088560 <_strtod_r+0x4a8>
 808857e:	b10b      	cbz	r3, 8088584 <_strtod_r+0x4cc>
 8088580:	4680      	mov	r8, r0
 8088582:	4689      	mov	r9, r1
 8088584:	4b44      	ldr	r3, [pc, #272]	; (8088698 <_strtod_r+0x5e0>)
 8088586:	9a02      	ldr	r2, [sp, #8]
 8088588:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808858c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8088590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8088594:	4642      	mov	r2, r8
 8088596:	464b      	mov	r3, r9
 8088598:	f7fd ffe6 	bl	8086568 <__aeabi_dmul>
 808859c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80885a0:	4689      	mov	r9, r1
 80885a2:	460a      	mov	r2, r1
 80885a4:	0d1b      	lsrs	r3, r3, #20
 80885a6:	493d      	ldr	r1, [pc, #244]	; (808869c <_strtod_r+0x5e4>)
 80885a8:	051b      	lsls	r3, r3, #20
 80885aa:	428b      	cmp	r3, r1
 80885ac:	4680      	mov	r8, r0
 80885ae:	d8c1      	bhi.n	8088534 <_strtod_r+0x47c>
 80885b0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80885b4:	428b      	cmp	r3, r1
 80885b6:	bf86      	itte	hi
 80885b8:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80886ac <_strtod_r+0x5f4>
 80885bc:	f04f 38ff 	movhi.w	r8, #4294967295
 80885c0:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80885c4:	e074      	b.n	80886b0 <_strtod_r+0x5f8>
 80885c6:	d073      	beq.n	80886b0 <_strtod_r+0x5f8>
 80885c8:	4264      	negs	r4, r4
 80885ca:	f014 020f 	ands.w	r2, r4, #15
 80885ce:	d00a      	beq.n	80885e6 <_strtod_r+0x52e>
 80885d0:	4b30      	ldr	r3, [pc, #192]	; (8088694 <_strtod_r+0x5dc>)
 80885d2:	4640      	mov	r0, r8
 80885d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80885d8:	4649      	mov	r1, r9
 80885da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80885de:	f7fe f8ed 	bl	80867bc <__aeabi_ddiv>
 80885e2:	4680      	mov	r8, r0
 80885e4:	4689      	mov	r9, r1
 80885e6:	1124      	asrs	r4, r4, #4
 80885e8:	d062      	beq.n	80886b0 <_strtod_r+0x5f8>
 80885ea:	2c1f      	cmp	r4, #31
 80885ec:	dd08      	ble.n	8088600 <_strtod_r+0x548>
 80885ee:	f04f 0b00 	mov.w	fp, #0
 80885f2:	f8cd b008 	str.w	fp, [sp, #8]
 80885f6:	f8cd b014 	str.w	fp, [sp, #20]
 80885fa:	f8cd b010 	str.w	fp, [sp, #16]
 80885fe:	e12c      	b.n	808885a <_strtod_r+0x7a2>
 8088600:	4640      	mov	r0, r8
 8088602:	4649      	mov	r1, r9
 8088604:	f014 0f10 	tst.w	r4, #16
 8088608:	bf0c      	ite	eq
 808860a:	2300      	moveq	r3, #0
 808860c:	236a      	movne	r3, #106	; 0x6a
 808860e:	4e24      	ldr	r6, [pc, #144]	; (80886a0 <_strtod_r+0x5e8>)
 8088610:	9303      	str	r3, [sp, #12]
 8088612:	2300      	movs	r3, #0
 8088614:	2c00      	cmp	r4, #0
 8088616:	dd09      	ble.n	808862c <_strtod_r+0x574>
 8088618:	07e2      	lsls	r2, r4, #31
 808861a:	d504      	bpl.n	8088626 <_strtod_r+0x56e>
 808861c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8088620:	f7fd ffa2 	bl	8086568 <__aeabi_dmul>
 8088624:	2301      	movs	r3, #1
 8088626:	1064      	asrs	r4, r4, #1
 8088628:	3608      	adds	r6, #8
 808862a:	e7f3      	b.n	8088614 <_strtod_r+0x55c>
 808862c:	b10b      	cbz	r3, 8088632 <_strtod_r+0x57a>
 808862e:	4680      	mov	r8, r0
 8088630:	4689      	mov	r9, r1
 8088632:	9b03      	ldr	r3, [sp, #12]
 8088634:	b1eb      	cbz	r3, 8088672 <_strtod_r+0x5ba>
 8088636:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808863a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808863e:	2b00      	cmp	r3, #0
 8088640:	4649      	mov	r1, r9
 8088642:	dd16      	ble.n	8088672 <_strtod_r+0x5ba>
 8088644:	2b1f      	cmp	r3, #31
 8088646:	dd0e      	ble.n	8088666 <_strtod_r+0x5ae>
 8088648:	2b34      	cmp	r3, #52	; 0x34
 808864a:	bfde      	ittt	le
 808864c:	3b20      	suble	r3, #32
 808864e:	f04f 32ff 	movle.w	r2, #4294967295
 8088652:	fa02 f303 	lslle.w	r3, r2, r3
 8088656:	f04f 0800 	mov.w	r8, #0
 808865a:	bfcc      	ite	gt
 808865c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8088660:	ea03 0901 	andle.w	r9, r3, r1
 8088664:	e005      	b.n	8088672 <_strtod_r+0x5ba>
 8088666:	f04f 32ff 	mov.w	r2, #4294967295
 808866a:	fa02 f303 	lsl.w	r3, r2, r3
 808866e:	ea03 0808 	and.w	r8, r3, r8
 8088672:	2200      	movs	r2, #0
 8088674:	2300      	movs	r3, #0
 8088676:	4640      	mov	r0, r8
 8088678:	4649      	mov	r1, r9
 808867a:	f7fe f9dd 	bl	8086a38 <__aeabi_dcmpeq>
 808867e:	2800      	cmp	r0, #0
 8088680:	d1b5      	bne.n	80885ee <_strtod_r+0x536>
 8088682:	e017      	b.n	80886b4 <_strtod_r+0x5fc>
 8088684:	0808a825 	.word	0x0808a825
 8088688:	0808acdc 	.word	0x0808acdc
 808868c:	0808ad29 	.word	0x0808ad29
 8088690:	0808ace4 	.word	0x0808ace4
 8088694:	0808af80 	.word	0x0808af80
 8088698:	0808b048 	.word	0x0808b048
 808869c:	7ca00000 	.word	0x7ca00000
 80886a0:	0808acf8 	.word	0x0808acf8
 80886a4:	7ff00000 	.word	0x7ff00000
 80886a8:	fff80000 	.word	0xfff80000
 80886ac:	7fefffff 	.word	0x7fefffff
 80886b0:	2300      	movs	r3, #0
 80886b2:	9303      	str	r3, [sp, #12]
 80886b4:	9b04      	ldr	r3, [sp, #16]
 80886b6:	465a      	mov	r2, fp
 80886b8:	9300      	str	r3, [sp, #0]
 80886ba:	9906      	ldr	r1, [sp, #24]
 80886bc:	462b      	mov	r3, r5
 80886be:	4650      	mov	r0, sl
 80886c0:	f001 fae5 	bl	8089c8e <__s2b>
 80886c4:	9005      	str	r0, [sp, #20]
 80886c6:	2800      	cmp	r0, #0
 80886c8:	f43f af34 	beq.w	8088534 <_strtod_r+0x47c>
 80886cc:	2f00      	cmp	r7, #0
 80886ce:	f1c7 0300 	rsb	r3, r7, #0
 80886d2:	bfa8      	it	ge
 80886d4:	2300      	movge	r3, #0
 80886d6:	930d      	str	r3, [sp, #52]	; 0x34
 80886d8:	f04f 0b00 	mov.w	fp, #0
 80886dc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80886e0:	9312      	str	r3, [sp, #72]	; 0x48
 80886e2:	f8cd b008 	str.w	fp, [sp, #8]
 80886e6:	9b05      	ldr	r3, [sp, #20]
 80886e8:	4650      	mov	r0, sl
 80886ea:	6859      	ldr	r1, [r3, #4]
 80886ec:	f001 fa48 	bl	8089b80 <_Balloc>
 80886f0:	9004      	str	r0, [sp, #16]
 80886f2:	2800      	cmp	r0, #0
 80886f4:	f43f af26 	beq.w	8088544 <_strtod_r+0x48c>
 80886f8:	9b05      	ldr	r3, [sp, #20]
 80886fa:	300c      	adds	r0, #12
 80886fc:	691a      	ldr	r2, [r3, #16]
 80886fe:	f103 010c 	add.w	r1, r3, #12
 8088702:	3202      	adds	r2, #2
 8088704:	0092      	lsls	r2, r2, #2
 8088706:	f7fe ff08 	bl	808751a <memcpy>
 808870a:	ab1a      	add	r3, sp, #104	; 0x68
 808870c:	9301      	str	r3, [sp, #4]
 808870e:	ab19      	add	r3, sp, #100	; 0x64
 8088710:	9300      	str	r3, [sp, #0]
 8088712:	4642      	mov	r2, r8
 8088714:	464b      	mov	r3, r9
 8088716:	4650      	mov	r0, sl
 8088718:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808871c:	f001 fd67 	bl	808a1ee <__d2b>
 8088720:	9018      	str	r0, [sp, #96]	; 0x60
 8088722:	2800      	cmp	r0, #0
 8088724:	f43f af0e 	beq.w	8088544 <_strtod_r+0x48c>
 8088728:	2101      	movs	r1, #1
 808872a:	4650      	mov	r0, sl
 808872c:	f001 fb3a 	bl	8089da4 <__i2b>
 8088730:	9002      	str	r0, [sp, #8]
 8088732:	2800      	cmp	r0, #0
 8088734:	f43f af06 	beq.w	8088544 <_strtod_r+0x48c>
 8088738:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808873a:	9903      	ldr	r1, [sp, #12]
 808873c:	2b00      	cmp	r3, #0
 808873e:	bfac      	ite	ge
 8088740:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 8088742:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8088744:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8088746:	bfac      	ite	ge
 8088748:	18d6      	addge	r6, r2, r3
 808874a:	1ad2      	sublt	r2, r2, r3
 808874c:	eba3 0301 	sub.w	r3, r3, r1
 8088750:	4423      	add	r3, r4
 8088752:	49b1      	ldr	r1, [pc, #708]	; (8088a18 <_strtod_r+0x960>)
 8088754:	f103 33ff 	add.w	r3, r3, #4294967295
 8088758:	bfac      	ite	ge
 808875a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808875c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808875e:	428b      	cmp	r3, r1
 8088760:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 8088764:	f280 8085 	bge.w	8088872 <_strtod_r+0x7ba>
 8088768:	1ac9      	subs	r1, r1, r3
 808876a:	291f      	cmp	r1, #31
 808876c:	bfc8      	it	gt
 808876e:	4dab      	ldrgt	r5, [pc, #684]	; (8088a1c <_strtod_r+0x964>)
 8088770:	f04f 0701 	mov.w	r7, #1
 8088774:	bfd4      	ite	le
 8088776:	fa07 f301 	lslle.w	r3, r7, r1
 808877a:	1aed      	subgt	r5, r5, r3
 808877c:	eba4 0401 	sub.w	r4, r4, r1
 8088780:	bfd9      	ittee	le
 8088782:	9307      	strle	r3, [sp, #28]
 8088784:	2500      	movle	r5, #0
 8088786:	fa07 f505 	lslgt.w	r5, r7, r5
 808878a:	9707      	strgt	r7, [sp, #28]
 808878c:	1937      	adds	r7, r6, r4
 808878e:	9b03      	ldr	r3, [sp, #12]
 8088790:	42be      	cmp	r6, r7
 8088792:	4414      	add	r4, r2
 8088794:	441c      	add	r4, r3
 8088796:	4633      	mov	r3, r6
 8088798:	bfa8      	it	ge
 808879a:	463b      	movge	r3, r7
 808879c:	42a3      	cmp	r3, r4
 808879e:	bfa8      	it	ge
 80887a0:	4623      	movge	r3, r4
 80887a2:	2b00      	cmp	r3, #0
 80887a4:	bfc2      	ittt	gt
 80887a6:	1aff      	subgt	r7, r7, r3
 80887a8:	1ae4      	subgt	r4, r4, r3
 80887aa:	1af6      	subgt	r6, r6, r3
 80887ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80887ae:	2b00      	cmp	r3, #0
 80887b0:	d163      	bne.n	808887a <_strtod_r+0x7c2>
 80887b2:	2f00      	cmp	r7, #0
 80887b4:	dc7a      	bgt.n	80888ac <_strtod_r+0x7f4>
 80887b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80887b8:	2b00      	cmp	r3, #0
 80887ba:	f040 8081 	bne.w	80888c0 <_strtod_r+0x808>
 80887be:	2c00      	cmp	r4, #0
 80887c0:	f300 8088 	bgt.w	80888d4 <_strtod_r+0x81c>
 80887c4:	2e00      	cmp	r6, #0
 80887c6:	f300 808f 	bgt.w	80888e8 <_strtod_r+0x830>
 80887ca:	9a04      	ldr	r2, [sp, #16]
 80887cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80887ce:	4650      	mov	r0, sl
 80887d0:	f001 fc3d 	bl	808a04e <__mdiff>
 80887d4:	4683      	mov	fp, r0
 80887d6:	2800      	cmp	r0, #0
 80887d8:	f43f aeb4 	beq.w	8088544 <_strtod_r+0x48c>
 80887dc:	68c3      	ldr	r3, [r0, #12]
 80887de:	2400      	movs	r4, #0
 80887e0:	60c4      	str	r4, [r0, #12]
 80887e2:	9902      	ldr	r1, [sp, #8]
 80887e4:	9306      	str	r3, [sp, #24]
 80887e6:	f001 fc16 	bl	808a016 <__mcmp>
 80887ea:	42a0      	cmp	r0, r4
 80887ec:	f280 808b 	bge.w	8088906 <_strtod_r+0x84e>
 80887f0:	9b06      	ldr	r3, [sp, #24]
 80887f2:	2b00      	cmp	r3, #0
 80887f4:	f040 8202 	bne.w	8088bfc <_strtod_r+0xb44>
 80887f8:	f1b8 0f00 	cmp.w	r8, #0
 80887fc:	f040 81fe 	bne.w	8088bfc <_strtod_r+0xb44>
 8088800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8088804:	2b00      	cmp	r3, #0
 8088806:	f040 81f9 	bne.w	8088bfc <_strtod_r+0xb44>
 808880a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808880e:	0d1b      	lsrs	r3, r3, #20
 8088810:	051b      	lsls	r3, r3, #20
 8088812:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8088816:	f240 81f1 	bls.w	8088bfc <_strtod_r+0xb44>
 808881a:	f8db 3014 	ldr.w	r3, [fp, #20]
 808881e:	2b00      	cmp	r3, #0
 8088820:	d06c      	beq.n	80888fc <_strtod_r+0x844>
 8088822:	4659      	mov	r1, fp
 8088824:	2201      	movs	r2, #1
 8088826:	4650      	mov	r0, sl
 8088828:	f001 fba4 	bl	8089f74 <__lshift>
 808882c:	9902      	ldr	r1, [sp, #8]
 808882e:	4683      	mov	fp, r0
 8088830:	f001 fbf1 	bl	808a016 <__mcmp>
 8088834:	2800      	cmp	r0, #0
 8088836:	f340 81e1 	ble.w	8088bfc <_strtod_r+0xb44>
 808883a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808883e:	9a03      	ldr	r2, [sp, #12]
 8088840:	0d1b      	lsrs	r3, r3, #20
 8088842:	051b      	lsls	r3, r3, #20
 8088844:	2a00      	cmp	r2, #0
 8088846:	f000 808d 	beq.w	8088964 <_strtod_r+0x8ac>
 808884a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808884e:	f300 8089 	bgt.w	8088964 <_strtod_r+0x8ac>
 8088852:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8088856:	f300 81d3 	bgt.w	8088c00 <_strtod_r+0xb48>
 808885a:	2322      	movs	r3, #34	; 0x22
 808885c:	f04f 0800 	mov.w	r8, #0
 8088860:	f04f 0900 	mov.w	r9, #0
 8088864:	f8ca 3000 	str.w	r3, [sl]
 8088868:	9b05      	ldr	r3, [sp, #20]
 808886a:	2b00      	cmp	r3, #0
 808886c:	f040 81d9 	bne.w	8088c22 <_strtod_r+0xb6a>
 8088870:	e1eb      	b.n	8088c4a <_strtod_r+0xb92>
 8088872:	2301      	movs	r3, #1
 8088874:	2500      	movs	r5, #0
 8088876:	9307      	str	r3, [sp, #28]
 8088878:	e788      	b.n	808878c <_strtod_r+0x6d4>
 808887a:	461a      	mov	r2, r3
 808887c:	9902      	ldr	r1, [sp, #8]
 808887e:	4650      	mov	r0, sl
 8088880:	f001 fb2a 	bl	8089ed8 <__pow5mult>
 8088884:	9002      	str	r0, [sp, #8]
 8088886:	2800      	cmp	r0, #0
 8088888:	f43f ae5c 	beq.w	8088544 <_strtod_r+0x48c>
 808888c:	4601      	mov	r1, r0
 808888e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8088890:	4650      	mov	r0, sl
 8088892:	f001 fa90 	bl	8089db6 <__multiply>
 8088896:	9006      	str	r0, [sp, #24]
 8088898:	2800      	cmp	r0, #0
 808889a:	f43f ae53 	beq.w	8088544 <_strtod_r+0x48c>
 808889e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80888a0:	4650      	mov	r0, sl
 80888a2:	f001 f9a2 	bl	8089bea <_Bfree>
 80888a6:	9b06      	ldr	r3, [sp, #24]
 80888a8:	9318      	str	r3, [sp, #96]	; 0x60
 80888aa:	e782      	b.n	80887b2 <_strtod_r+0x6fa>
 80888ac:	463a      	mov	r2, r7
 80888ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80888b0:	4650      	mov	r0, sl
 80888b2:	f001 fb5f 	bl	8089f74 <__lshift>
 80888b6:	9018      	str	r0, [sp, #96]	; 0x60
 80888b8:	2800      	cmp	r0, #0
 80888ba:	f47f af7c 	bne.w	80887b6 <_strtod_r+0x6fe>
 80888be:	e641      	b.n	8088544 <_strtod_r+0x48c>
 80888c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80888c2:	9904      	ldr	r1, [sp, #16]
 80888c4:	4650      	mov	r0, sl
 80888c6:	f001 fb07 	bl	8089ed8 <__pow5mult>
 80888ca:	9004      	str	r0, [sp, #16]
 80888cc:	2800      	cmp	r0, #0
 80888ce:	f47f af76 	bne.w	80887be <_strtod_r+0x706>
 80888d2:	e637      	b.n	8088544 <_strtod_r+0x48c>
 80888d4:	4622      	mov	r2, r4
 80888d6:	9904      	ldr	r1, [sp, #16]
 80888d8:	4650      	mov	r0, sl
 80888da:	f001 fb4b 	bl	8089f74 <__lshift>
 80888de:	9004      	str	r0, [sp, #16]
 80888e0:	2800      	cmp	r0, #0
 80888e2:	f47f af6f 	bne.w	80887c4 <_strtod_r+0x70c>
 80888e6:	e62d      	b.n	8088544 <_strtod_r+0x48c>
 80888e8:	4632      	mov	r2, r6
 80888ea:	9902      	ldr	r1, [sp, #8]
 80888ec:	4650      	mov	r0, sl
 80888ee:	f001 fb41 	bl	8089f74 <__lshift>
 80888f2:	9002      	str	r0, [sp, #8]
 80888f4:	2800      	cmp	r0, #0
 80888f6:	f47f af68 	bne.w	80887ca <_strtod_r+0x712>
 80888fa:	e623      	b.n	8088544 <_strtod_r+0x48c>
 80888fc:	f8db 3010 	ldr.w	r3, [fp, #16]
 8088900:	2b01      	cmp	r3, #1
 8088902:	dc8e      	bgt.n	8088822 <_strtod_r+0x76a>
 8088904:	e17a      	b.n	8088bfc <_strtod_r+0xb44>
 8088906:	d161      	bne.n	80889cc <_strtod_r+0x914>
 8088908:	9a06      	ldr	r2, [sp, #24]
 808890a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808890e:	b322      	cbz	r2, 808895a <_strtod_r+0x8a2>
 8088910:	4943      	ldr	r1, [pc, #268]	; (8088a20 <_strtod_r+0x968>)
 8088912:	464a      	mov	r2, r9
 8088914:	428b      	cmp	r3, r1
 8088916:	d12e      	bne.n	8088976 <_strtod_r+0x8be>
 8088918:	9b03      	ldr	r3, [sp, #12]
 808891a:	4641      	mov	r1, r8
 808891c:	b163      	cbz	r3, 8088938 <_strtod_r+0x880>
 808891e:	4b41      	ldr	r3, [pc, #260]	; (8088a24 <_strtod_r+0x96c>)
 8088920:	4013      	ands	r3, r2
 8088922:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8088926:	d807      	bhi.n	8088938 <_strtod_r+0x880>
 8088928:	0d1b      	lsrs	r3, r3, #20
 808892a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808892e:	f04f 30ff 	mov.w	r0, #4294967295
 8088932:	fa00 f303 	lsl.w	r3, r0, r3
 8088936:	e001      	b.n	808893c <_strtod_r+0x884>
 8088938:	f04f 33ff 	mov.w	r3, #4294967295
 808893c:	428b      	cmp	r3, r1
 808893e:	d11a      	bne.n	8088976 <_strtod_r+0x8be>
 8088940:	4939      	ldr	r1, [pc, #228]	; (8088a28 <_strtod_r+0x970>)
 8088942:	428a      	cmp	r2, r1
 8088944:	d102      	bne.n	808894c <_strtod_r+0x894>
 8088946:	3301      	adds	r3, #1
 8088948:	f43f adfc 	beq.w	8088544 <_strtod_r+0x48c>
 808894c:	4b35      	ldr	r3, [pc, #212]	; (8088a24 <_strtod_r+0x96c>)
 808894e:	f04f 0800 	mov.w	r8, #0
 8088952:	4013      	ands	r3, r2
 8088954:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8088958:	e150      	b.n	8088bfc <_strtod_r+0xb44>
 808895a:	b963      	cbnz	r3, 8088976 <_strtod_r+0x8be>
 808895c:	f1b8 0f00 	cmp.w	r8, #0
 8088960:	d109      	bne.n	8088976 <_strtod_r+0x8be>
 8088962:	e76a      	b.n	808883a <_strtod_r+0x782>
 8088964:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8088968:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808896c:	f04f 38ff 	mov.w	r8, #4294967295
 8088970:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8088974:	e142      	b.n	8088bfc <_strtod_r+0xb44>
 8088976:	b115      	cbz	r5, 808897e <_strtod_r+0x8c6>
 8088978:	ea15 0f09 	tst.w	r5, r9
 808897c:	e002      	b.n	8088984 <_strtod_r+0x8cc>
 808897e:	9b07      	ldr	r3, [sp, #28]
 8088980:	ea13 0f08 	tst.w	r3, r8
 8088984:	f000 813a 	beq.w	8088bfc <_strtod_r+0xb44>
 8088988:	9b06      	ldr	r3, [sp, #24]
 808898a:	9a03      	ldr	r2, [sp, #12]
 808898c:	4640      	mov	r0, r8
 808898e:	4649      	mov	r1, r9
 8088990:	b153      	cbz	r3, 80889a8 <_strtod_r+0x8f0>
 8088992:	f7ff fb6f 	bl	8088074 <sulp>
 8088996:	4602      	mov	r2, r0
 8088998:	460b      	mov	r3, r1
 808899a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808899e:	f7fd fc31 	bl	8086204 <__adddf3>
 80889a2:	4680      	mov	r8, r0
 80889a4:	4689      	mov	r9, r1
 80889a6:	e129      	b.n	8088bfc <_strtod_r+0xb44>
 80889a8:	f7ff fb64 	bl	8088074 <sulp>
 80889ac:	4602      	mov	r2, r0
 80889ae:	460b      	mov	r3, r1
 80889b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80889b4:	f7fd fc24 	bl	8086200 <__aeabi_dsub>
 80889b8:	2200      	movs	r2, #0
 80889ba:	2300      	movs	r3, #0
 80889bc:	4680      	mov	r8, r0
 80889be:	4689      	mov	r9, r1
 80889c0:	f7fe f83a 	bl	8086a38 <__aeabi_dcmpeq>
 80889c4:	2800      	cmp	r0, #0
 80889c6:	f47f af48 	bne.w	808885a <_strtod_r+0x7a2>
 80889ca:	e117      	b.n	8088bfc <_strtod_r+0xb44>
 80889cc:	9902      	ldr	r1, [sp, #8]
 80889ce:	4658      	mov	r0, fp
 80889d0:	f001 fc5b 	bl	808a28a <__ratio>
 80889d4:	2200      	movs	r2, #0
 80889d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80889da:	4606      	mov	r6, r0
 80889dc:	460f      	mov	r7, r1
 80889de:	f7fe f83f 	bl	8086a60 <__aeabi_dcmple>
 80889e2:	2800      	cmp	r0, #0
 80889e4:	d03f      	beq.n	8088a66 <_strtod_r+0x9ae>
 80889e6:	9b06      	ldr	r3, [sp, #24]
 80889e8:	b113      	cbz	r3, 80889f0 <_strtod_r+0x938>
 80889ea:	2600      	movs	r6, #0
 80889ec:	4f0f      	ldr	r7, [pc, #60]	; (8088a2c <_strtod_r+0x974>)
 80889ee:	e010      	b.n	8088a12 <_strtod_r+0x95a>
 80889f0:	f1b8 0f00 	cmp.w	r8, #0
 80889f4:	d103      	bne.n	80889fe <_strtod_r+0x946>
 80889f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80889fa:	b93b      	cbnz	r3, 8088a0c <_strtod_r+0x954>
 80889fc:	e01a      	b.n	8088a34 <_strtod_r+0x97c>
 80889fe:	f1b8 0f01 	cmp.w	r8, #1
 8088a02:	d103      	bne.n	8088a0c <_strtod_r+0x954>
 8088a04:	f1b9 0f00 	cmp.w	r9, #0
 8088a08:	f43f af27 	beq.w	808885a <_strtod_r+0x7a2>
 8088a0c:	4f08      	ldr	r7, [pc, #32]	; (8088a30 <_strtod_r+0x978>)
 8088a0e:	2600      	movs	r6, #0
 8088a10:	2400      	movs	r4, #0
 8088a12:	4d06      	ldr	r5, [pc, #24]	; (8088a2c <_strtod_r+0x974>)
 8088a14:	e03c      	b.n	8088a90 <_strtod_r+0x9d8>
 8088a16:	bf00      	nop
 8088a18:	fffffc02 	.word	0xfffffc02
 8088a1c:	fffffbe2 	.word	0xfffffbe2
 8088a20:	000fffff 	.word	0x000fffff
 8088a24:	7ff00000 	.word	0x7ff00000
 8088a28:	7fefffff 	.word	0x7fefffff
 8088a2c:	3ff00000 	.word	0x3ff00000
 8088a30:	bff00000 	.word	0xbff00000
 8088a34:	2200      	movs	r2, #0
 8088a36:	4b9a      	ldr	r3, [pc, #616]	; (8088ca0 <_strtod_r+0xbe8>)
 8088a38:	4630      	mov	r0, r6
 8088a3a:	4639      	mov	r1, r7
 8088a3c:	f7fe f806 	bl	8086a4c <__aeabi_dcmplt>
 8088a40:	b940      	cbnz	r0, 8088a54 <_strtod_r+0x99c>
 8088a42:	2200      	movs	r2, #0
 8088a44:	4b97      	ldr	r3, [pc, #604]	; (8088ca4 <_strtod_r+0xbec>)
 8088a46:	4630      	mov	r0, r6
 8088a48:	4639      	mov	r1, r7
 8088a4a:	f7fd fd8d 	bl	8086568 <__aeabi_dmul>
 8088a4e:	4604      	mov	r4, r0
 8088a50:	460d      	mov	r5, r1
 8088a52:	e001      	b.n	8088a58 <_strtod_r+0x9a0>
 8088a54:	9c06      	ldr	r4, [sp, #24]
 8088a56:	4d93      	ldr	r5, [pc, #588]	; (8088ca4 <_strtod_r+0xbec>)
 8088a58:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8088a5c:	9414      	str	r4, [sp, #80]	; 0x50
 8088a5e:	9315      	str	r3, [sp, #84]	; 0x54
 8088a60:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8088a64:	e014      	b.n	8088a90 <_strtod_r+0x9d8>
 8088a66:	4b8f      	ldr	r3, [pc, #572]	; (8088ca4 <_strtod_r+0xbec>)
 8088a68:	2200      	movs	r2, #0
 8088a6a:	4630      	mov	r0, r6
 8088a6c:	4639      	mov	r1, r7
 8088a6e:	f7fd fd7b 	bl	8086568 <__aeabi_dmul>
 8088a72:	9b06      	ldr	r3, [sp, #24]
 8088a74:	4604      	mov	r4, r0
 8088a76:	460d      	mov	r5, r1
 8088a78:	b923      	cbnz	r3, 8088a84 <_strtod_r+0x9cc>
 8088a7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8088a7e:	900e      	str	r0, [sp, #56]	; 0x38
 8088a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8088a82:	e003      	b.n	8088a8c <_strtod_r+0x9d4>
 8088a84:	4602      	mov	r2, r0
 8088a86:	460b      	mov	r3, r1
 8088a88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8088a8c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8088a90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8088a94:	0d1b      	lsrs	r3, r3, #20
 8088a96:	051b      	lsls	r3, r3, #20
 8088a98:	9307      	str	r3, [sp, #28]
 8088a9a:	9a07      	ldr	r2, [sp, #28]
 8088a9c:	4b82      	ldr	r3, [pc, #520]	; (8088ca8 <_strtod_r+0xbf0>)
 8088a9e:	429a      	cmp	r2, r3
 8088aa0:	d12b      	bne.n	8088afa <_strtod_r+0xa42>
 8088aa2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8088aa6:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8088aaa:	4640      	mov	r0, r8
 8088aac:	4649      	mov	r1, r9
 8088aae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8088ab2:	f001 fb2b 	bl	808a10c <__ulp>
 8088ab6:	4602      	mov	r2, r0
 8088ab8:	460b      	mov	r3, r1
 8088aba:	4630      	mov	r0, r6
 8088abc:	4639      	mov	r1, r7
 8088abe:	f7fd fd53 	bl	8086568 <__aeabi_dmul>
 8088ac2:	4642      	mov	r2, r8
 8088ac4:	464b      	mov	r3, r9
 8088ac6:	f7fd fb9d 	bl	8086204 <__adddf3>
 8088aca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8088ace:	0d1b      	lsrs	r3, r3, #20
 8088ad0:	4a76      	ldr	r2, [pc, #472]	; (8088cac <_strtod_r+0xbf4>)
 8088ad2:	051b      	lsls	r3, r3, #20
 8088ad4:	4293      	cmp	r3, r2
 8088ad6:	4680      	mov	r8, r0
 8088ad8:	d90c      	bls.n	8088af4 <_strtod_r+0xa3c>
 8088ada:	4b75      	ldr	r3, [pc, #468]	; (8088cb0 <_strtod_r+0xbf8>)
 8088adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8088ade:	429a      	cmp	r2, r3
 8088ae0:	d103      	bne.n	8088aea <_strtod_r+0xa32>
 8088ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8088ae4:	3301      	adds	r3, #1
 8088ae6:	f43f ad2d 	beq.w	8088544 <_strtod_r+0x48c>
 8088aea:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8088cb0 <_strtod_r+0xbf8>
 8088aee:	f04f 38ff 	mov.w	r8, #4294967295
 8088af2:	e072      	b.n	8088bda <_strtod_r+0xb22>
 8088af4:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8088af8:	e039      	b.n	8088b6e <_strtod_r+0xab6>
 8088afa:	9b03      	ldr	r3, [sp, #12]
 8088afc:	b33b      	cbz	r3, 8088b4e <_strtod_r+0xa96>
 8088afe:	9b07      	ldr	r3, [sp, #28]
 8088b00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8088b04:	d823      	bhi.n	8088b4e <_strtod_r+0xa96>
 8088b06:	a35e      	add	r3, pc, #376	; (adr r3, 8088c80 <_strtod_r+0xbc8>)
 8088b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088b0c:	4620      	mov	r0, r4
 8088b0e:	4629      	mov	r1, r5
 8088b10:	f7fd ffa6 	bl	8086a60 <__aeabi_dcmple>
 8088b14:	b1b8      	cbz	r0, 8088b46 <_strtod_r+0xa8e>
 8088b16:	4629      	mov	r1, r5
 8088b18:	4620      	mov	r0, r4
 8088b1a:	f7fd fffd 	bl	8086b18 <__aeabi_d2uiz>
 8088b1e:	2800      	cmp	r0, #0
 8088b20:	bf08      	it	eq
 8088b22:	2001      	moveq	r0, #1
 8088b24:	f7fd fcaa 	bl	808647c <__aeabi_ui2d>
 8088b28:	9b06      	ldr	r3, [sp, #24]
 8088b2a:	4604      	mov	r4, r0
 8088b2c:	460d      	mov	r5, r1
 8088b2e:	b923      	cbnz	r3, 8088b3a <_strtod_r+0xa82>
 8088b30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8088b34:	9010      	str	r0, [sp, #64]	; 0x40
 8088b36:	9311      	str	r3, [sp, #68]	; 0x44
 8088b38:	e003      	b.n	8088b42 <_strtod_r+0xa8a>
 8088b3a:	4602      	mov	r2, r0
 8088b3c:	460b      	mov	r3, r1
 8088b3e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8088b42:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8088b46:	9a07      	ldr	r2, [sp, #28]
 8088b48:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8088b4c:	1a9f      	subs	r7, r3, r2
 8088b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8088b52:	f001 fadb 	bl	808a10c <__ulp>
 8088b56:	4602      	mov	r2, r0
 8088b58:	460b      	mov	r3, r1
 8088b5a:	4630      	mov	r0, r6
 8088b5c:	4639      	mov	r1, r7
 8088b5e:	f7fd fd03 	bl	8086568 <__aeabi_dmul>
 8088b62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8088b66:	f7fd fb4d 	bl	8086204 <__adddf3>
 8088b6a:	4680      	mov	r8, r0
 8088b6c:	4689      	mov	r9, r1
 8088b6e:	9b03      	ldr	r3, [sp, #12]
 8088b70:	bb9b      	cbnz	r3, 8088bda <_strtod_r+0xb22>
 8088b72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8088b76:	0d1b      	lsrs	r3, r3, #20
 8088b78:	9a07      	ldr	r2, [sp, #28]
 8088b7a:	051b      	lsls	r3, r3, #20
 8088b7c:	429a      	cmp	r2, r3
 8088b7e:	464e      	mov	r6, r9
 8088b80:	d12b      	bne.n	8088bda <_strtod_r+0xb22>
 8088b82:	4629      	mov	r1, r5
 8088b84:	4620      	mov	r0, r4
 8088b86:	f7fd ff9f 	bl	8086ac8 <__aeabi_d2iz>
 8088b8a:	f7fd fc87 	bl	808649c <__aeabi_i2d>
 8088b8e:	460b      	mov	r3, r1
 8088b90:	4602      	mov	r2, r0
 8088b92:	4629      	mov	r1, r5
 8088b94:	4620      	mov	r0, r4
 8088b96:	f7fd fb33 	bl	8086200 <__aeabi_dsub>
 8088b9a:	9b06      	ldr	r3, [sp, #24]
 8088b9c:	4604      	mov	r4, r0
 8088b9e:	460d      	mov	r5, r1
 8088ba0:	b92b      	cbnz	r3, 8088bae <_strtod_r+0xaf6>
 8088ba2:	f1b8 0f00 	cmp.w	r8, #0
 8088ba6:	d102      	bne.n	8088bae <_strtod_r+0xaf6>
 8088ba8:	f3c9 0613 	ubfx	r6, r9, #0, #20
 8088bac:	b17e      	cbz	r6, 8088bce <_strtod_r+0xb16>
 8088bae:	a336      	add	r3, pc, #216	; (adr r3, 8088c88 <_strtod_r+0xbd0>)
 8088bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088bb4:	4620      	mov	r0, r4
 8088bb6:	4629      	mov	r1, r5
 8088bb8:	f7fd ff48 	bl	8086a4c <__aeabi_dcmplt>
 8088bbc:	bb88      	cbnz	r0, 8088c22 <_strtod_r+0xb6a>
 8088bbe:	a334      	add	r3, pc, #208	; (adr r3, 8088c90 <_strtod_r+0xbd8>)
 8088bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088bc4:	4620      	mov	r0, r4
 8088bc6:	4629      	mov	r1, r5
 8088bc8:	f7fd ff5e 	bl	8086a88 <__aeabi_dcmpgt>
 8088bcc:	e004      	b.n	8088bd8 <_strtod_r+0xb20>
 8088bce:	a332      	add	r3, pc, #200	; (adr r3, 8088c98 <_strtod_r+0xbe0>)
 8088bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8088bd4:	f7fd ff3a 	bl	8086a4c <__aeabi_dcmplt>
 8088bd8:	bb18      	cbnz	r0, 8088c22 <_strtod_r+0xb6a>
 8088bda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8088bdc:	4650      	mov	r0, sl
 8088bde:	f001 f804 	bl	8089bea <_Bfree>
 8088be2:	9904      	ldr	r1, [sp, #16]
 8088be4:	4650      	mov	r0, sl
 8088be6:	f001 f800 	bl	8089bea <_Bfree>
 8088bea:	9902      	ldr	r1, [sp, #8]
 8088bec:	4650      	mov	r0, sl
 8088bee:	f000 fffc 	bl	8089bea <_Bfree>
 8088bf2:	4659      	mov	r1, fp
 8088bf4:	4650      	mov	r0, sl
 8088bf6:	f000 fff8 	bl	8089bea <_Bfree>
 8088bfa:	e574      	b.n	80886e6 <_strtod_r+0x62e>
 8088bfc:	9b03      	ldr	r3, [sp, #12]
 8088bfe:	b183      	cbz	r3, 8088c22 <_strtod_r+0xb6a>
 8088c00:	4b2c      	ldr	r3, [pc, #176]	; (8088cb4 <_strtod_r+0xbfc>)
 8088c02:	4640      	mov	r0, r8
 8088c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8088c06:	2300      	movs	r3, #0
 8088c08:	930a      	str	r3, [sp, #40]	; 0x28
 8088c0a:	4649      	mov	r1, r9
 8088c0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8088c10:	f7fd fcaa 	bl	8086568 <__aeabi_dmul>
 8088c14:	4680      	mov	r8, r0
 8088c16:	4689      	mov	r9, r1
 8088c18:	b919      	cbnz	r1, 8088c22 <_strtod_r+0xb6a>
 8088c1a:	b910      	cbnz	r0, 8088c22 <_strtod_r+0xb6a>
 8088c1c:	2322      	movs	r3, #34	; 0x22
 8088c1e:	f8ca 3000 	str.w	r3, [sl]
 8088c22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8088c24:	4650      	mov	r0, sl
 8088c26:	f000 ffe0 	bl	8089bea <_Bfree>
 8088c2a:	9904      	ldr	r1, [sp, #16]
 8088c2c:	4650      	mov	r0, sl
 8088c2e:	f000 ffdc 	bl	8089bea <_Bfree>
 8088c32:	9902      	ldr	r1, [sp, #8]
 8088c34:	4650      	mov	r0, sl
 8088c36:	f000 ffd8 	bl	8089bea <_Bfree>
 8088c3a:	9905      	ldr	r1, [sp, #20]
 8088c3c:	4650      	mov	r0, sl
 8088c3e:	f000 ffd4 	bl	8089bea <_Bfree>
 8088c42:	4659      	mov	r1, fp
 8088c44:	4650      	mov	r0, sl
 8088c46:	f000 ffd0 	bl	8089bea <_Bfree>
 8088c4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8088c4c:	b113      	cbz	r3, 8088c54 <_strtod_r+0xb9c>
 8088c4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088c50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8088c52:	6013      	str	r3, [r2, #0]
 8088c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8088c56:	b11b      	cbz	r3, 8088c60 <_strtod_r+0xba8>
 8088c58:	4642      	mov	r2, r8
 8088c5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8088c5e:	e007      	b.n	8088c70 <_strtod_r+0xbb8>
 8088c60:	4642      	mov	r2, r8
 8088c62:	464b      	mov	r3, r9
 8088c64:	e004      	b.n	8088c70 <_strtod_r+0xbb8>
 8088c66:	2500      	movs	r5, #0
 8088c68:	462a      	mov	r2, r5
 8088c6a:	2101      	movs	r1, #1
 8088c6c:	f7ff bb47 	b.w	80882fe <_strtod_r+0x246>
 8088c70:	4610      	mov	r0, r2
 8088c72:	4619      	mov	r1, r3
 8088c74:	b01d      	add	sp, #116	; 0x74
 8088c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088c7a:	bf00      	nop
 8088c7c:	f3af 8000 	nop.w
 8088c80:	ffc00000 	.word	0xffc00000
 8088c84:	41dfffff 	.word	0x41dfffff
 8088c88:	94a03595 	.word	0x94a03595
 8088c8c:	3fdfffff 	.word	0x3fdfffff
 8088c90:	35afe535 	.word	0x35afe535
 8088c94:	3fe00000 	.word	0x3fe00000
 8088c98:	94a03595 	.word	0x94a03595
 8088c9c:	3fcfffff 	.word	0x3fcfffff
 8088ca0:	3ff00000 	.word	0x3ff00000
 8088ca4:	3fe00000 	.word	0x3fe00000
 8088ca8:	7fe00000 	.word	0x7fe00000
 8088cac:	7c9fffff 	.word	0x7c9fffff
 8088cb0:	7fefffff 	.word	0x7fefffff
 8088cb4:	39500000 	.word	0x39500000

08088cb8 <strtod>:
 8088cb8:	4b02      	ldr	r3, [pc, #8]	; (8088cc4 <strtod+0xc>)
 8088cba:	460a      	mov	r2, r1
 8088cbc:	4601      	mov	r1, r0
 8088cbe:	6818      	ldr	r0, [r3, #0]
 8088cc0:	f7ff b9fa 	b.w	80880b8 <_strtod_r>
 8088cc4:	200000b4 	.word	0x200000b4

08088cc8 <_strtol_r>:
 8088cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088ccc:	460f      	mov	r7, r1
 8088cce:	4680      	mov	r8, r0
 8088cd0:	483f      	ldr	r0, [pc, #252]	; (8088dd0 <_strtol_r+0x108>)
 8088cd2:	f8d0 9000 	ldr.w	r9, [r0]
 8088cd6:	463d      	mov	r5, r7
 8088cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8088cdc:	eb09 0004 	add.w	r0, r9, r4
 8088ce0:	7840      	ldrb	r0, [r0, #1]
 8088ce2:	f000 0008 	and.w	r0, r0, #8
 8088ce6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8088cea:	b108      	cbz	r0, 8088cf0 <_strtol_r+0x28>
 8088cec:	462f      	mov	r7, r5
 8088cee:	e7f2      	b.n	8088cd6 <_strtol_r+0xe>
 8088cf0:	2c2d      	cmp	r4, #45	; 0x2d
 8088cf2:	d103      	bne.n	8088cfc <_strtol_r+0x34>
 8088cf4:	1cbd      	adds	r5, r7, #2
 8088cf6:	787c      	ldrb	r4, [r7, #1]
 8088cf8:	2601      	movs	r6, #1
 8088cfa:	e003      	b.n	8088d04 <_strtol_r+0x3c>
 8088cfc:	2c2b      	cmp	r4, #43	; 0x2b
 8088cfe:	bf04      	itt	eq
 8088d00:	787c      	ldrbeq	r4, [r7, #1]
 8088d02:	1cbd      	addeq	r5, r7, #2
 8088d04:	b113      	cbz	r3, 8088d0c <_strtol_r+0x44>
 8088d06:	2b10      	cmp	r3, #16
 8088d08:	d10a      	bne.n	8088d20 <_strtol_r+0x58>
 8088d0a:	e05b      	b.n	8088dc4 <_strtol_r+0xfc>
 8088d0c:	2c30      	cmp	r4, #48	; 0x30
 8088d0e:	d157      	bne.n	8088dc0 <_strtol_r+0xf8>
 8088d10:	7828      	ldrb	r0, [r5, #0]
 8088d12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8088d16:	2858      	cmp	r0, #88	; 0x58
 8088d18:	d14d      	bne.n	8088db6 <_strtol_r+0xee>
 8088d1a:	786c      	ldrb	r4, [r5, #1]
 8088d1c:	2310      	movs	r3, #16
 8088d1e:	3502      	adds	r5, #2
 8088d20:	2e00      	cmp	r6, #0
 8088d22:	bf14      	ite	ne
 8088d24:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8088d28:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8088d2c:	fbbc faf3 	udiv	sl, ip, r3
 8088d30:	2700      	movs	r7, #0
 8088d32:	4638      	mov	r0, r7
 8088d34:	fb03 cc1a 	mls	ip, r3, sl, ip
 8088d38:	eb09 0e04 	add.w	lr, r9, r4
 8088d3c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8088d40:	f01e 0f04 	tst.w	lr, #4
 8088d44:	d001      	beq.n	8088d4a <_strtol_r+0x82>
 8088d46:	3c30      	subs	r4, #48	; 0x30
 8088d48:	e00b      	b.n	8088d62 <_strtol_r+0x9a>
 8088d4a:	f01e 0e03 	ands.w	lr, lr, #3
 8088d4e:	d01b      	beq.n	8088d88 <_strtol_r+0xc0>
 8088d50:	f1be 0f01 	cmp.w	lr, #1
 8088d54:	bf0c      	ite	eq
 8088d56:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8088d5a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8088d5e:	ebce 0404 	rsb	r4, lr, r4
 8088d62:	42a3      	cmp	r3, r4
 8088d64:	dd10      	ble.n	8088d88 <_strtol_r+0xc0>
 8088d66:	f1b7 3fff 	cmp.w	r7, #4294967295
 8088d6a:	d00a      	beq.n	8088d82 <_strtol_r+0xba>
 8088d6c:	4550      	cmp	r0, sl
 8088d6e:	d806      	bhi.n	8088d7e <_strtol_r+0xb6>
 8088d70:	d101      	bne.n	8088d76 <_strtol_r+0xae>
 8088d72:	4564      	cmp	r4, ip
 8088d74:	dc03      	bgt.n	8088d7e <_strtol_r+0xb6>
 8088d76:	fb03 4000 	mla	r0, r3, r0, r4
 8088d7a:	2701      	movs	r7, #1
 8088d7c:	e001      	b.n	8088d82 <_strtol_r+0xba>
 8088d7e:	f04f 37ff 	mov.w	r7, #4294967295
 8088d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8088d86:	e7d7      	b.n	8088d38 <_strtol_r+0x70>
 8088d88:	1c7b      	adds	r3, r7, #1
 8088d8a:	d10c      	bne.n	8088da6 <_strtol_r+0xde>
 8088d8c:	2e00      	cmp	r6, #0
 8088d8e:	f04f 0322 	mov.w	r3, #34	; 0x22
 8088d92:	bf14      	ite	ne
 8088d94:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8088d98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8088d9c:	f8c8 3000 	str.w	r3, [r8]
 8088da0:	b92a      	cbnz	r2, 8088dae <_strtol_r+0xe6>
 8088da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088da6:	b106      	cbz	r6, 8088daa <_strtol_r+0xe2>
 8088da8:	4240      	negs	r0, r0
 8088daa:	b172      	cbz	r2, 8088dca <_strtol_r+0x102>
 8088dac:	b107      	cbz	r7, 8088db0 <_strtol_r+0xe8>
 8088dae:	1e69      	subs	r1, r5, #1
 8088db0:	6011      	str	r1, [r2, #0]
 8088db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088db6:	2430      	movs	r4, #48	; 0x30
 8088db8:	2b00      	cmp	r3, #0
 8088dba:	d1b1      	bne.n	8088d20 <_strtol_r+0x58>
 8088dbc:	2308      	movs	r3, #8
 8088dbe:	e7af      	b.n	8088d20 <_strtol_r+0x58>
 8088dc0:	230a      	movs	r3, #10
 8088dc2:	e7ad      	b.n	8088d20 <_strtol_r+0x58>
 8088dc4:	2c30      	cmp	r4, #48	; 0x30
 8088dc6:	d0a3      	beq.n	8088d10 <_strtol_r+0x48>
 8088dc8:	e7aa      	b.n	8088d20 <_strtol_r+0x58>
 8088dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088dce:	bf00      	nop
 8088dd0:	20000050 	.word	0x20000050

08088dd4 <strtol>:
 8088dd4:	4613      	mov	r3, r2
 8088dd6:	460a      	mov	r2, r1
 8088dd8:	4601      	mov	r1, r0
 8088dda:	4802      	ldr	r0, [pc, #8]	; (8088de4 <strtol+0x10>)
 8088ddc:	6800      	ldr	r0, [r0, #0]
 8088dde:	f7ff bf73 	b.w	8088cc8 <_strtol_r>
 8088de2:	bf00      	nop
 8088de4:	200000b4 	.word	0x200000b4

08088de8 <_strtoul_r>:
 8088de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088dec:	460e      	mov	r6, r1
 8088dee:	4680      	mov	r8, r0
 8088df0:	483b      	ldr	r0, [pc, #236]	; (8088ee0 <_strtoul_r+0xf8>)
 8088df2:	f8d0 9000 	ldr.w	r9, [r0]
 8088df6:	4635      	mov	r5, r6
 8088df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8088dfc:	eb09 0004 	add.w	r0, r9, r4
 8088e00:	7840      	ldrb	r0, [r0, #1]
 8088e02:	f000 0008 	and.w	r0, r0, #8
 8088e06:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8088e0a:	b108      	cbz	r0, 8088e10 <_strtoul_r+0x28>
 8088e0c:	462e      	mov	r6, r5
 8088e0e:	e7f2      	b.n	8088df6 <_strtoul_r+0xe>
 8088e10:	2c2d      	cmp	r4, #45	; 0x2d
 8088e12:	d103      	bne.n	8088e1c <_strtoul_r+0x34>
 8088e14:	1cb5      	adds	r5, r6, #2
 8088e16:	7874      	ldrb	r4, [r6, #1]
 8088e18:	2701      	movs	r7, #1
 8088e1a:	e003      	b.n	8088e24 <_strtoul_r+0x3c>
 8088e1c:	2c2b      	cmp	r4, #43	; 0x2b
 8088e1e:	bf04      	itt	eq
 8088e20:	7874      	ldrbeq	r4, [r6, #1]
 8088e22:	1cb5      	addeq	r5, r6, #2
 8088e24:	b113      	cbz	r3, 8088e2c <_strtoul_r+0x44>
 8088e26:	2b10      	cmp	r3, #16
 8088e28:	d10a      	bne.n	8088e40 <_strtoul_r+0x58>
 8088e2a:	e053      	b.n	8088ed4 <_strtoul_r+0xec>
 8088e2c:	2c30      	cmp	r4, #48	; 0x30
 8088e2e:	d14f      	bne.n	8088ed0 <_strtoul_r+0xe8>
 8088e30:	7828      	ldrb	r0, [r5, #0]
 8088e32:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8088e36:	2858      	cmp	r0, #88	; 0x58
 8088e38:	d145      	bne.n	8088ec6 <_strtoul_r+0xde>
 8088e3a:	786c      	ldrb	r4, [r5, #1]
 8088e3c:	2310      	movs	r3, #16
 8088e3e:	3502      	adds	r5, #2
 8088e40:	f04f 3cff 	mov.w	ip, #4294967295
 8088e44:	fbbc fcf3 	udiv	ip, ip, r3
 8088e48:	fb03 fa0c 	mul.w	sl, r3, ip
 8088e4c:	2600      	movs	r6, #0
 8088e4e:	ea6f 0a0a 	mvn.w	sl, sl
 8088e52:	4630      	mov	r0, r6
 8088e54:	eb09 0e04 	add.w	lr, r9, r4
 8088e58:	f89e e001 	ldrb.w	lr, [lr, #1]
 8088e5c:	f01e 0f04 	tst.w	lr, #4
 8088e60:	d001      	beq.n	8088e66 <_strtoul_r+0x7e>
 8088e62:	3c30      	subs	r4, #48	; 0x30
 8088e64:	e00b      	b.n	8088e7e <_strtoul_r+0x96>
 8088e66:	f01e 0e03 	ands.w	lr, lr, #3
 8088e6a:	d01a      	beq.n	8088ea2 <_strtoul_r+0xba>
 8088e6c:	f1be 0f01 	cmp.w	lr, #1
 8088e70:	bf0c      	ite	eq
 8088e72:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8088e76:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8088e7a:	ebce 0404 	rsb	r4, lr, r4
 8088e7e:	42a3      	cmp	r3, r4
 8088e80:	dd0f      	ble.n	8088ea2 <_strtoul_r+0xba>
 8088e82:	2e00      	cmp	r6, #0
 8088e84:	db08      	blt.n	8088e98 <_strtoul_r+0xb0>
 8088e86:	4560      	cmp	r0, ip
 8088e88:	d806      	bhi.n	8088e98 <_strtoul_r+0xb0>
 8088e8a:	d101      	bne.n	8088e90 <_strtoul_r+0xa8>
 8088e8c:	4554      	cmp	r4, sl
 8088e8e:	dc03      	bgt.n	8088e98 <_strtoul_r+0xb0>
 8088e90:	fb03 4000 	mla	r0, r3, r0, r4
 8088e94:	2601      	movs	r6, #1
 8088e96:	e001      	b.n	8088e9c <_strtoul_r+0xb4>
 8088e98:	f04f 36ff 	mov.w	r6, #4294967295
 8088e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8088ea0:	e7d8      	b.n	8088e54 <_strtoul_r+0x6c>
 8088ea2:	2e00      	cmp	r6, #0
 8088ea4:	da07      	bge.n	8088eb6 <_strtoul_r+0xce>
 8088ea6:	2322      	movs	r3, #34	; 0x22
 8088ea8:	f8c8 3000 	str.w	r3, [r8]
 8088eac:	f04f 30ff 	mov.w	r0, #4294967295
 8088eb0:	b92a      	cbnz	r2, 8088ebe <_strtoul_r+0xd6>
 8088eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088eb6:	b107      	cbz	r7, 8088eba <_strtoul_r+0xd2>
 8088eb8:	4240      	negs	r0, r0
 8088eba:	b172      	cbz	r2, 8088eda <_strtoul_r+0xf2>
 8088ebc:	b106      	cbz	r6, 8088ec0 <_strtoul_r+0xd8>
 8088ebe:	1e69      	subs	r1, r5, #1
 8088ec0:	6011      	str	r1, [r2, #0]
 8088ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088ec6:	2430      	movs	r4, #48	; 0x30
 8088ec8:	2b00      	cmp	r3, #0
 8088eca:	d1b9      	bne.n	8088e40 <_strtoul_r+0x58>
 8088ecc:	2308      	movs	r3, #8
 8088ece:	e7b7      	b.n	8088e40 <_strtoul_r+0x58>
 8088ed0:	230a      	movs	r3, #10
 8088ed2:	e7b5      	b.n	8088e40 <_strtoul_r+0x58>
 8088ed4:	2c30      	cmp	r4, #48	; 0x30
 8088ed6:	d0ab      	beq.n	8088e30 <_strtoul_r+0x48>
 8088ed8:	e7b2      	b.n	8088e40 <_strtoul_r+0x58>
 8088eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088ede:	bf00      	nop
 8088ee0:	20000050 	.word	0x20000050

08088ee4 <strtoul>:
 8088ee4:	4613      	mov	r3, r2
 8088ee6:	460a      	mov	r2, r1
 8088ee8:	4601      	mov	r1, r0
 8088eea:	4802      	ldr	r0, [pc, #8]	; (8088ef4 <strtoul+0x10>)
 8088eec:	6800      	ldr	r0, [r0, #0]
 8088eee:	f7ff bf7b 	b.w	8088de8 <_strtoul_r>
 8088ef2:	bf00      	nop
 8088ef4:	200000b4 	.word	0x200000b4

08088ef8 <__get_current_time_locale>:
 8088ef8:	4b04      	ldr	r3, [pc, #16]	; (8088f0c <__get_current_time_locale+0x14>)
 8088efa:	4a05      	ldr	r2, [pc, #20]	; (8088f10 <__get_current_time_locale+0x18>)
 8088efc:	6818      	ldr	r0, [r3, #0]
 8088efe:	4b05      	ldr	r3, [pc, #20]	; (8088f14 <__get_current_time_locale+0x1c>)
 8088f00:	2800      	cmp	r0, #0
 8088f02:	bf14      	ite	ne
 8088f04:	4610      	movne	r0, r2
 8088f06:	4618      	moveq	r0, r3
 8088f08:	4770      	bx	lr
 8088f0a:	bf00      	nop
 8088f0c:	200008e8 	.word	0x200008e8
 8088f10:	200008ec 	.word	0x200008ec
 8088f14:	0808ae44 	.word	0x0808ae44

08088f18 <__tzcalc_limits>:
 8088f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088f1c:	4604      	mov	r4, r0
 8088f1e:	f000 fd91 	bl	8089a44 <__gettzinfo>
 8088f22:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8088f26:	429c      	cmp	r4, r3
 8088f28:	f340 8096 	ble.w	8089058 <__tzcalc_limits+0x140>
 8088f2c:	f240 156d 	movw	r5, #365	; 0x16d
 8088f30:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8088f34:	18e3      	adds	r3, r4, r3
 8088f36:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8088f3a:	109b      	asrs	r3, r3, #2
 8088f3c:	fb05 3502 	mla	r5, r5, r2, r3
 8088f40:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8088f44:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8088f48:	fb92 f3f3 	sdiv	r3, r2, r3
 8088f4c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8088f50:	442b      	add	r3, r5
 8088f52:	18a5      	adds	r5, r4, r2
 8088f54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8088f58:	fb94 f7f2 	sdiv	r7, r4, r2
 8088f5c:	fb95 f5f2 	sdiv	r5, r5, r2
 8088f60:	fb02 4717 	mls	r7, r2, r7, r4
 8088f64:	441d      	add	r5, r3
 8088f66:	2364      	movs	r3, #100	; 0x64
 8088f68:	fb94 f6f3 	sdiv	r6, r4, r3
 8088f6c:	fab7 fe87 	clz	lr, r7
 8088f70:	4601      	mov	r1, r0
 8088f72:	fb03 4616 	mls	r6, r3, r6, r4
 8088f76:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8088f7a:	9301      	str	r3, [sp, #4]
 8088f7c:	f004 0303 	and.w	r3, r4, #3
 8088f80:	6044      	str	r4, [r0, #4]
 8088f82:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8088f86:	9300      	str	r3, [sp, #0]
 8088f88:	f04f 0c07 	mov.w	ip, #7
 8088f8c:	7a0b      	ldrb	r3, [r1, #8]
 8088f8e:	2b4a      	cmp	r3, #74	; 0x4a
 8088f90:	d10e      	bne.n	8088fb0 <__tzcalc_limits+0x98>
 8088f92:	694b      	ldr	r3, [r1, #20]
 8088f94:	9a00      	ldr	r2, [sp, #0]
 8088f96:	18ec      	adds	r4, r5, r3
 8088f98:	b902      	cbnz	r2, 8088f9c <__tzcalc_limits+0x84>
 8088f9a:	b906      	cbnz	r6, 8088f9e <__tzcalc_limits+0x86>
 8088f9c:	b927      	cbnz	r7, 8088fa8 <__tzcalc_limits+0x90>
 8088f9e:	2b3b      	cmp	r3, #59	; 0x3b
 8088fa0:	bfd4      	ite	le
 8088fa2:	2300      	movle	r3, #0
 8088fa4:	2301      	movgt	r3, #1
 8088fa6:	e000      	b.n	8088faa <__tzcalc_limits+0x92>
 8088fa8:	2300      	movs	r3, #0
 8088faa:	4423      	add	r3, r4
 8088fac:	3b01      	subs	r3, #1
 8088fae:	e03f      	b.n	8089030 <__tzcalc_limits+0x118>
 8088fb0:	2b44      	cmp	r3, #68	; 0x44
 8088fb2:	d102      	bne.n	8088fba <__tzcalc_limits+0xa2>
 8088fb4:	694b      	ldr	r3, [r1, #20]
 8088fb6:	442b      	add	r3, r5
 8088fb8:	e03a      	b.n	8089030 <__tzcalc_limits+0x118>
 8088fba:	9b00      	ldr	r3, [sp, #0]
 8088fbc:	b92b      	cbnz	r3, 8088fca <__tzcalc_limits+0xb2>
 8088fbe:	2e00      	cmp	r6, #0
 8088fc0:	bf0c      	ite	eq
 8088fc2:	46f0      	moveq	r8, lr
 8088fc4:	f04f 0801 	movne.w	r8, #1
 8088fc8:	e000      	b.n	8088fcc <__tzcalc_limits+0xb4>
 8088fca:	46f0      	mov	r8, lr
 8088fcc:	46a9      	mov	r9, r5
 8088fce:	4b24      	ldr	r3, [pc, #144]	; (8089060 <__tzcalc_limits+0x148>)
 8088fd0:	2230      	movs	r2, #48	; 0x30
 8088fd2:	fb02 3808 	mla	r8, r2, r8, r3
 8088fd6:	68cc      	ldr	r4, [r1, #12]
 8088fd8:	f1a8 0a04 	sub.w	sl, r8, #4
 8088fdc:	2301      	movs	r3, #1
 8088fde:	42a3      	cmp	r3, r4
 8088fe0:	da04      	bge.n	8088fec <__tzcalc_limits+0xd4>
 8088fe2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8088fe6:	3301      	adds	r3, #1
 8088fe8:	44d9      	add	r9, fp
 8088fea:	e7f8      	b.n	8088fde <__tzcalc_limits+0xc6>
 8088fec:	f109 0304 	add.w	r3, r9, #4
 8088ff0:	fb93 fbfc 	sdiv	fp, r3, ip
 8088ff4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8088ff8:	ebca 0a03 	rsb	sl, sl, r3
 8088ffc:	694b      	ldr	r3, [r1, #20]
 8088ffe:	2c01      	cmp	r4, #1
 8089000:	bfb8      	it	lt
 8089002:	2401      	movlt	r4, #1
 8089004:	ebb3 0a0a 	subs.w	sl, r3, sl
 8089008:	690b      	ldr	r3, [r1, #16]
 808900a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808900e:	f103 33ff 	add.w	r3, r3, #4294967295
 8089012:	f104 34ff 	add.w	r4, r4, #4294967295
 8089016:	bf48      	it	mi
 8089018:	f10a 0a07 	addmi.w	sl, sl, #7
 808901c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8089020:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8089024:	4453      	add	r3, sl
 8089026:	42a3      	cmp	r3, r4
 8089028:	db01      	blt.n	808902e <__tzcalc_limits+0x116>
 808902a:	3b07      	subs	r3, #7
 808902c:	e7fb      	b.n	8089026 <__tzcalc_limits+0x10e>
 808902e:	444b      	add	r3, r9
 8089030:	698c      	ldr	r4, [r1, #24]
 8089032:	4a0c      	ldr	r2, [pc, #48]	; (8089064 <__tzcalc_limits+0x14c>)
 8089034:	fb02 4303 	mla	r3, r2, r3, r4
 8089038:	6a0c      	ldr	r4, [r1, #32]
 808903a:	4423      	add	r3, r4
 808903c:	f841 3f1c 	str.w	r3, [r1, #28]!
 8089040:	9b01      	ldr	r3, [sp, #4]
 8089042:	4299      	cmp	r1, r3
 8089044:	d1a2      	bne.n	8088f8c <__tzcalc_limits+0x74>
 8089046:	69c3      	ldr	r3, [r0, #28]
 8089048:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808904a:	4293      	cmp	r3, r2
 808904c:	bfac      	ite	ge
 808904e:	2300      	movge	r3, #0
 8089050:	2301      	movlt	r3, #1
 8089052:	6003      	str	r3, [r0, #0]
 8089054:	2001      	movs	r0, #1
 8089056:	e000      	b.n	808905a <__tzcalc_limits+0x142>
 8089058:	2000      	movs	r0, #0
 808905a:	b003      	add	sp, #12
 808905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089060:	0808ac0c 	.word	0x0808ac0c
 8089064:	00015180 	.word	0x00015180

08089068 <__tz_lock>:
 8089068:	4770      	bx	lr

0808906a <__tz_unlock>:
 808906a:	4770      	bx	lr

0808906c <_tzset_unlocked>:
 808906c:	4b01      	ldr	r3, [pc, #4]	; (8089074 <_tzset_unlocked+0x8>)
 808906e:	6818      	ldr	r0, [r3, #0]
 8089070:	f000 b802 	b.w	8089078 <_tzset_unlocked_r>
 8089074:	200000b4 	.word	0x200000b4

08089078 <_tzset_unlocked_r>:
 8089078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808907c:	b08d      	sub	sp, #52	; 0x34
 808907e:	4607      	mov	r7, r0
 8089080:	f000 fce0 	bl	8089a44 <__gettzinfo>
 8089084:	49b0      	ldr	r1, [pc, #704]	; (8089348 <_tzset_unlocked_r+0x2d0>)
 8089086:	4604      	mov	r4, r0
 8089088:	4638      	mov	r0, r7
 808908a:	f000 fcd3 	bl	8089a34 <_getenv_r>
 808908e:	4eaf      	ldr	r6, [pc, #700]	; (808934c <_tzset_unlocked_r+0x2d4>)
 8089090:	4605      	mov	r5, r0
 8089092:	b960      	cbnz	r0, 80890ae <_tzset_unlocked_r+0x36>
 8089094:	4bae      	ldr	r3, [pc, #696]	; (8089350 <_tzset_unlocked_r+0x2d8>)
 8089096:	4aaf      	ldr	r2, [pc, #700]	; (8089354 <_tzset_unlocked_r+0x2dc>)
 8089098:	6018      	str	r0, [r3, #0]
 808909a:	4baf      	ldr	r3, [pc, #700]	; (8089358 <_tzset_unlocked_r+0x2e0>)
 808909c:	6018      	str	r0, [r3, #0]
 808909e:	4baf      	ldr	r3, [pc, #700]	; (808935c <_tzset_unlocked_r+0x2e4>)
 80890a0:	6830      	ldr	r0, [r6, #0]
 80890a2:	601a      	str	r2, [r3, #0]
 80890a4:	605a      	str	r2, [r3, #4]
 80890a6:	f7fb f989 	bl	80843bc <free>
 80890aa:	6035      	str	r5, [r6, #0]
 80890ac:	e148      	b.n	8089340 <_tzset_unlocked_r+0x2c8>
 80890ae:	6831      	ldr	r1, [r6, #0]
 80890b0:	b979      	cbnz	r1, 80890d2 <_tzset_unlocked_r+0x5a>
 80890b2:	6830      	ldr	r0, [r6, #0]
 80890b4:	f7fb f982 	bl	80843bc <free>
 80890b8:	4628      	mov	r0, r5
 80890ba:	f7fe ffab 	bl	8088014 <strlen>
 80890be:	1c41      	adds	r1, r0, #1
 80890c0:	4638      	mov	r0, r7
 80890c2:	f7fb f9bb 	bl	808443c <_malloc_r>
 80890c6:	6030      	str	r0, [r6, #0]
 80890c8:	b148      	cbz	r0, 80890de <_tzset_unlocked_r+0x66>
 80890ca:	4629      	mov	r1, r5
 80890cc:	f7fe fa6a 	bl	80875a4 <strcpy>
 80890d0:	e005      	b.n	80890de <_tzset_unlocked_r+0x66>
 80890d2:	f7fe fa5d 	bl	8087590 <strcmp>
 80890d6:	2800      	cmp	r0, #0
 80890d8:	f000 8132 	beq.w	8089340 <_tzset_unlocked_r+0x2c8>
 80890dc:	e7e9      	b.n	80890b2 <_tzset_unlocked_r+0x3a>
 80890de:	782b      	ldrb	r3, [r5, #0]
 80890e0:	ae0a      	add	r6, sp, #40	; 0x28
 80890e2:	2b3a      	cmp	r3, #58	; 0x3a
 80890e4:	bf08      	it	eq
 80890e6:	3501      	addeq	r5, #1
 80890e8:	4633      	mov	r3, r6
 80890ea:	4a9d      	ldr	r2, [pc, #628]	; (8089360 <_tzset_unlocked_r+0x2e8>)
 80890ec:	499d      	ldr	r1, [pc, #628]	; (8089364 <_tzset_unlocked_r+0x2ec>)
 80890ee:	4628      	mov	r0, r5
 80890f0:	f7fb f97c 	bl	80843ec <siscanf>
 80890f4:	2800      	cmp	r0, #0
 80890f6:	f340 8123 	ble.w	8089340 <_tzset_unlocked_r+0x2c8>
 80890fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80890fc:	18ef      	adds	r7, r5, r3
 80890fe:	5ceb      	ldrb	r3, [r5, r3]
 8089100:	2b2d      	cmp	r3, #45	; 0x2d
 8089102:	d103      	bne.n	808910c <_tzset_unlocked_r+0x94>
 8089104:	3701      	adds	r7, #1
 8089106:	f04f 35ff 	mov.w	r5, #4294967295
 808910a:	e003      	b.n	8089114 <_tzset_unlocked_r+0x9c>
 808910c:	2b2b      	cmp	r3, #43	; 0x2b
 808910e:	bf08      	it	eq
 8089110:	3701      	addeq	r7, #1
 8089112:	2501      	movs	r5, #1
 8089114:	f10d 0a20 	add.w	sl, sp, #32
 8089118:	f10d 0b1e 	add.w	fp, sp, #30
 808911c:	f04f 0800 	mov.w	r8, #0
 8089120:	9603      	str	r6, [sp, #12]
 8089122:	f8cd a008 	str.w	sl, [sp, #8]
 8089126:	9601      	str	r6, [sp, #4]
 8089128:	f8cd b000 	str.w	fp, [sp]
 808912c:	4633      	mov	r3, r6
 808912e:	aa07      	add	r2, sp, #28
 8089130:	498d      	ldr	r1, [pc, #564]	; (8089368 <_tzset_unlocked_r+0x2f0>)
 8089132:	4638      	mov	r0, r7
 8089134:	f8ad 801e 	strh.w	r8, [sp, #30]
 8089138:	f8ad 8020 	strh.w	r8, [sp, #32]
 808913c:	f7fb f956 	bl	80843ec <siscanf>
 8089140:	4540      	cmp	r0, r8
 8089142:	f340 80fd 	ble.w	8089340 <_tzset_unlocked_r+0x2c8>
 8089146:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808914a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808914e:	213c      	movs	r1, #60	; 0x3c
 8089150:	fb01 3302 	mla	r3, r1, r2, r3
 8089154:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8089158:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808915c:	fb01 3302 	mla	r3, r1, r2, r3
 8089160:	435d      	muls	r5, r3
 8089162:	4b7f      	ldr	r3, [pc, #508]	; (8089360 <_tzset_unlocked_r+0x2e8>)
 8089164:	6225      	str	r5, [r4, #32]
 8089166:	4d7d      	ldr	r5, [pc, #500]	; (808935c <_tzset_unlocked_r+0x2e4>)
 8089168:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8089374 <_tzset_unlocked_r+0x2fc>
 808916c:	602b      	str	r3, [r5, #0]
 808916e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089170:	464a      	mov	r2, r9
 8089172:	441f      	add	r7, r3
 8089174:	497b      	ldr	r1, [pc, #492]	; (8089364 <_tzset_unlocked_r+0x2ec>)
 8089176:	4633      	mov	r3, r6
 8089178:	4638      	mov	r0, r7
 808917a:	f7fb f937 	bl	80843ec <siscanf>
 808917e:	4540      	cmp	r0, r8
 8089180:	dc08      	bgt.n	8089194 <_tzset_unlocked_r+0x11c>
 8089182:	682b      	ldr	r3, [r5, #0]
 8089184:	6a22      	ldr	r2, [r4, #32]
 8089186:	606b      	str	r3, [r5, #4]
 8089188:	4b71      	ldr	r3, [pc, #452]	; (8089350 <_tzset_unlocked_r+0x2d8>)
 808918a:	601a      	str	r2, [r3, #0]
 808918c:	4b72      	ldr	r3, [pc, #456]	; (8089358 <_tzset_unlocked_r+0x2e0>)
 808918e:	f8c3 8000 	str.w	r8, [r3]
 8089192:	e0d5      	b.n	8089340 <_tzset_unlocked_r+0x2c8>
 8089194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089196:	f8c5 9004 	str.w	r9, [r5, #4]
 808919a:	18fd      	adds	r5, r7, r3
 808919c:	5cfb      	ldrb	r3, [r7, r3]
 808919e:	2b2d      	cmp	r3, #45	; 0x2d
 80891a0:	d103      	bne.n	80891aa <_tzset_unlocked_r+0x132>
 80891a2:	3501      	adds	r5, #1
 80891a4:	f04f 37ff 	mov.w	r7, #4294967295
 80891a8:	e003      	b.n	80891b2 <_tzset_unlocked_r+0x13a>
 80891aa:	2b2b      	cmp	r3, #43	; 0x2b
 80891ac:	bf08      	it	eq
 80891ae:	3501      	addeq	r5, #1
 80891b0:	2701      	movs	r7, #1
 80891b2:	2300      	movs	r3, #0
 80891b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80891b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80891bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80891c0:	930a      	str	r3, [sp, #40]	; 0x28
 80891c2:	9603      	str	r6, [sp, #12]
 80891c4:	f8cd a008 	str.w	sl, [sp, #8]
 80891c8:	9601      	str	r6, [sp, #4]
 80891ca:	f8cd b000 	str.w	fp, [sp]
 80891ce:	4633      	mov	r3, r6
 80891d0:	aa07      	add	r2, sp, #28
 80891d2:	4965      	ldr	r1, [pc, #404]	; (8089368 <_tzset_unlocked_r+0x2f0>)
 80891d4:	4628      	mov	r0, r5
 80891d6:	f7fb f909 	bl	80843ec <siscanf>
 80891da:	2800      	cmp	r0, #0
 80891dc:	dc04      	bgt.n	80891e8 <_tzset_unlocked_r+0x170>
 80891de:	6a23      	ldr	r3, [r4, #32]
 80891e0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80891e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80891e6:	e00e      	b.n	8089206 <_tzset_unlocked_r+0x18e>
 80891e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80891ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80891f0:	213c      	movs	r1, #60	; 0x3c
 80891f2:	fb01 3302 	mla	r3, r1, r2, r3
 80891f6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80891fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80891fe:	fb01 3302 	mla	r3, r1, r2, r3
 8089202:	435f      	muls	r7, r3
 8089204:	63e7      	str	r7, [r4, #60]	; 0x3c
 8089206:	4627      	mov	r7, r4
 8089208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808920a:	f04f 0900 	mov.w	r9, #0
 808920e:	441d      	add	r5, r3
 8089210:	782b      	ldrb	r3, [r5, #0]
 8089212:	2b2c      	cmp	r3, #44	; 0x2c
 8089214:	bf08      	it	eq
 8089216:	3501      	addeq	r5, #1
 8089218:	f895 8000 	ldrb.w	r8, [r5]
 808921c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8089220:	d126      	bne.n	8089270 <_tzset_unlocked_r+0x1f8>
 8089222:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8089226:	9302      	str	r3, [sp, #8]
 8089228:	ab09      	add	r3, sp, #36	; 0x24
 808922a:	9300      	str	r3, [sp, #0]
 808922c:	9603      	str	r6, [sp, #12]
 808922e:	9601      	str	r6, [sp, #4]
 8089230:	4633      	mov	r3, r6
 8089232:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8089236:	494d      	ldr	r1, [pc, #308]	; (808936c <_tzset_unlocked_r+0x2f4>)
 8089238:	4628      	mov	r0, r5
 808923a:	f7fb f8d7 	bl	80843ec <siscanf>
 808923e:	2803      	cmp	r0, #3
 8089240:	d17e      	bne.n	8089340 <_tzset_unlocked_r+0x2c8>
 8089242:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8089246:	1e4b      	subs	r3, r1, #1
 8089248:	2b0b      	cmp	r3, #11
 808924a:	d879      	bhi.n	8089340 <_tzset_unlocked_r+0x2c8>
 808924c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8089250:	1e53      	subs	r3, r2, #1
 8089252:	2b04      	cmp	r3, #4
 8089254:	d874      	bhi.n	8089340 <_tzset_unlocked_r+0x2c8>
 8089256:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808925a:	2b06      	cmp	r3, #6
 808925c:	d870      	bhi.n	8089340 <_tzset_unlocked_r+0x2c8>
 808925e:	f887 8008 	strb.w	r8, [r7, #8]
 8089262:	60f9      	str	r1, [r7, #12]
 8089264:	613a      	str	r2, [r7, #16]
 8089266:	617b      	str	r3, [r7, #20]
 8089268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808926a:	eb05 0803 	add.w	r8, r5, r3
 808926e:	e02a      	b.n	80892c6 <_tzset_unlocked_r+0x24e>
 8089270:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8089274:	bf06      	itte	eq
 8089276:	4643      	moveq	r3, r8
 8089278:	3501      	addeq	r5, #1
 808927a:	2344      	movne	r3, #68	; 0x44
 808927c:	220a      	movs	r2, #10
 808927e:	a90b      	add	r1, sp, #44	; 0x2c
 8089280:	4628      	mov	r0, r5
 8089282:	9305      	str	r3, [sp, #20]
 8089284:	f7ff fe2e 	bl	8088ee4 <strtoul>
 8089288:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808928c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8089290:	4545      	cmp	r5, r8
 8089292:	9b05      	ldr	r3, [sp, #20]
 8089294:	d114      	bne.n	80892c0 <_tzset_unlocked_r+0x248>
 8089296:	234d      	movs	r3, #77	; 0x4d
 8089298:	f1b9 0f00 	cmp.w	r9, #0
 808929c:	d107      	bne.n	80892ae <_tzset_unlocked_r+0x236>
 808929e:	7223      	strb	r3, [r4, #8]
 80892a0:	2303      	movs	r3, #3
 80892a2:	60e3      	str	r3, [r4, #12]
 80892a4:	2302      	movs	r3, #2
 80892a6:	6123      	str	r3, [r4, #16]
 80892a8:	f8c4 9014 	str.w	r9, [r4, #20]
 80892ac:	e00b      	b.n	80892c6 <_tzset_unlocked_r+0x24e>
 80892ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80892b2:	230b      	movs	r3, #11
 80892b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80892b6:	2301      	movs	r3, #1
 80892b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80892ba:	2300      	movs	r3, #0
 80892bc:	6323      	str	r3, [r4, #48]	; 0x30
 80892be:	e002      	b.n	80892c6 <_tzset_unlocked_r+0x24e>
 80892c0:	b280      	uxth	r0, r0
 80892c2:	723b      	strb	r3, [r7, #8]
 80892c4:	6178      	str	r0, [r7, #20]
 80892c6:	2302      	movs	r3, #2
 80892c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80892cc:	2300      	movs	r3, #0
 80892ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 80892d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80892d6:	930a      	str	r3, [sp, #40]	; 0x28
 80892d8:	f898 3000 	ldrb.w	r3, [r8]
 80892dc:	2b2f      	cmp	r3, #47	; 0x2f
 80892de:	d10b      	bne.n	80892f8 <_tzset_unlocked_r+0x280>
 80892e0:	9603      	str	r6, [sp, #12]
 80892e2:	f8cd a008 	str.w	sl, [sp, #8]
 80892e6:	9601      	str	r6, [sp, #4]
 80892e8:	f8cd b000 	str.w	fp, [sp]
 80892ec:	4633      	mov	r3, r6
 80892ee:	aa07      	add	r2, sp, #28
 80892f0:	491f      	ldr	r1, [pc, #124]	; (8089370 <_tzset_unlocked_r+0x2f8>)
 80892f2:	4640      	mov	r0, r8
 80892f4:	f7fb f87a 	bl	80843ec <siscanf>
 80892f8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80892fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8089300:	213c      	movs	r1, #60	; 0x3c
 8089302:	fb01 3302 	mla	r3, r1, r2, r3
 8089306:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808930a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808930e:	fb01 3302 	mla	r3, r1, r2, r3
 8089312:	61bb      	str	r3, [r7, #24]
 8089314:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8089316:	f109 0901 	add.w	r9, r9, #1
 808931a:	f1b9 0f02 	cmp.w	r9, #2
 808931e:	4445      	add	r5, r8
 8089320:	f107 071c 	add.w	r7, r7, #28
 8089324:	f47f af74 	bne.w	8089210 <_tzset_unlocked_r+0x198>
 8089328:	6860      	ldr	r0, [r4, #4]
 808932a:	f7ff fdf5 	bl	8088f18 <__tzcalc_limits>
 808932e:	6a22      	ldr	r2, [r4, #32]
 8089330:	4b07      	ldr	r3, [pc, #28]	; (8089350 <_tzset_unlocked_r+0x2d8>)
 8089332:	601a      	str	r2, [r3, #0]
 8089334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8089336:	1a9b      	subs	r3, r3, r2
 8089338:	4a07      	ldr	r2, [pc, #28]	; (8089358 <_tzset_unlocked_r+0x2e0>)
 808933a:	bf18      	it	ne
 808933c:	2301      	movne	r3, #1
 808933e:	6013      	str	r3, [r2, #0]
 8089340:	b00d      	add	sp, #52	; 0x34
 8089342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089346:	bf00      	nop
 8089348:	0808af40 	.word	0x0808af40
 808934c:	20000a00 	.word	0x20000a00
 8089350:	20000a08 	.word	0x20000a08
 8089354:	0808af43 	.word	0x0808af43
 8089358:	20000a04 	.word	0x20000a04
 808935c:	200000f0 	.word	0x200000f0
 8089360:	200009f3 	.word	0x200009f3
 8089364:	0808af47 	.word	0x0808af47
 8089368:	0808af6a 	.word	0x0808af6a
 808936c:	0808af56 	.word	0x0808af56
 8089370:	0808af69 	.word	0x0808af69
 8089374:	200009e8 	.word	0x200009e8

08089378 <abs>:
 8089378:	2800      	cmp	r0, #0
 808937a:	bfb8      	it	lt
 808937c:	4240      	neglt	r0, r0
 808937e:	4770      	bx	lr

08089380 <rshift>:
 8089380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089382:	6906      	ldr	r6, [r0, #16]
 8089384:	114b      	asrs	r3, r1, #5
 8089386:	42b3      	cmp	r3, r6
 8089388:	f100 0514 	add.w	r5, r0, #20
 808938c:	da27      	bge.n	80893de <rshift+0x5e>
 808938e:	f011 011f 	ands.w	r1, r1, #31
 8089392:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8089396:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808939a:	d101      	bne.n	80893a0 <rshift+0x20>
 808939c:	4629      	mov	r1, r5
 808939e:	e016      	b.n	80893ce <rshift+0x4e>
 80893a0:	1d14      	adds	r4, r2, #4
 80893a2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80893a6:	462b      	mov	r3, r5
 80893a8:	f1c1 0e20 	rsb	lr, r1, #32
 80893ac:	40ca      	lsrs	r2, r1
 80893ae:	42b4      	cmp	r4, r6
 80893b0:	d209      	bcs.n	80893c6 <rshift+0x46>
 80893b2:	6827      	ldr	r7, [r4, #0]
 80893b4:	fa07 f70e 	lsl.w	r7, r7, lr
 80893b8:	433a      	orrs	r2, r7
 80893ba:	f843 2b04 	str.w	r2, [r3], #4
 80893be:	f854 2b04 	ldr.w	r2, [r4], #4
 80893c2:	40ca      	lsrs	r2, r1
 80893c4:	e7f3      	b.n	80893ae <rshift+0x2e>
 80893c6:	601a      	str	r2, [r3, #0]
 80893c8:	b152      	cbz	r2, 80893e0 <rshift+0x60>
 80893ca:	3304      	adds	r3, #4
 80893cc:	e008      	b.n	80893e0 <rshift+0x60>
 80893ce:	42b2      	cmp	r2, r6
 80893d0:	460b      	mov	r3, r1
 80893d2:	d205      	bcs.n	80893e0 <rshift+0x60>
 80893d4:	f852 3b04 	ldr.w	r3, [r2], #4
 80893d8:	f841 3b04 	str.w	r3, [r1], #4
 80893dc:	e7f7      	b.n	80893ce <rshift+0x4e>
 80893de:	462b      	mov	r3, r5
 80893e0:	1b5b      	subs	r3, r3, r5
 80893e2:	109b      	asrs	r3, r3, #2
 80893e4:	6103      	str	r3, [r0, #16]
 80893e6:	b903      	cbnz	r3, 80893ea <rshift+0x6a>
 80893e8:	6143      	str	r3, [r0, #20]
 80893ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080893ec <__hexdig_fun>:
 80893ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80893f0:	2b09      	cmp	r3, #9
 80893f2:	d801      	bhi.n	80893f8 <__hexdig_fun+0xc>
 80893f4:	3820      	subs	r0, #32
 80893f6:	e00a      	b.n	808940e <__hexdig_fun+0x22>
 80893f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80893fc:	2b05      	cmp	r3, #5
 80893fe:	d801      	bhi.n	8089404 <__hexdig_fun+0x18>
 8089400:	3847      	subs	r0, #71	; 0x47
 8089402:	e004      	b.n	808940e <__hexdig_fun+0x22>
 8089404:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8089408:	2b05      	cmp	r3, #5
 808940a:	d802      	bhi.n	8089412 <__hexdig_fun+0x26>
 808940c:	3827      	subs	r0, #39	; 0x27
 808940e:	b2c0      	uxtb	r0, r0
 8089410:	4770      	bx	lr
 8089412:	2000      	movs	r0, #0
 8089414:	4770      	bx	lr

08089416 <__gethex>:
 8089416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808941a:	b08b      	sub	sp, #44	; 0x2c
 808941c:	468a      	mov	sl, r1
 808941e:	4690      	mov	r8, r2
 8089420:	9306      	str	r3, [sp, #24]
 8089422:	9002      	str	r0, [sp, #8]
 8089424:	f7fe f866 	bl	80874f4 <_localeconv_r>
 8089428:	6803      	ldr	r3, [r0, #0]
 808942a:	f04f 0b00 	mov.w	fp, #0
 808942e:	4618      	mov	r0, r3
 8089430:	9303      	str	r3, [sp, #12]
 8089432:	f7fe fdef 	bl	8088014 <strlen>
 8089436:	9b03      	ldr	r3, [sp, #12]
 8089438:	9001      	str	r0, [sp, #4]
 808943a:	4403      	add	r3, r0
 808943c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8089440:	9307      	str	r3, [sp, #28]
 8089442:	f8da 3000 	ldr.w	r3, [sl]
 8089446:	3302      	adds	r3, #2
 8089448:	461f      	mov	r7, r3
 808944a:	f813 0b01 	ldrb.w	r0, [r3], #1
 808944e:	2830      	cmp	r0, #48	; 0x30
 8089450:	d102      	bne.n	8089458 <__gethex+0x42>
 8089452:	f10b 0b01 	add.w	fp, fp, #1
 8089456:	e7f7      	b.n	8089448 <__gethex+0x32>
 8089458:	f7ff ffc8 	bl	80893ec <__hexdig_fun>
 808945c:	4604      	mov	r4, r0
 808945e:	b9e0      	cbnz	r0, 808949a <__gethex+0x84>
 8089460:	9a01      	ldr	r2, [sp, #4]
 8089462:	9903      	ldr	r1, [sp, #12]
 8089464:	4638      	mov	r0, r7
 8089466:	f7fe fddd 	bl	8088024 <strncmp>
 808946a:	2800      	cmp	r0, #0
 808946c:	d134      	bne.n	80894d8 <__gethex+0xc2>
 808946e:	9b01      	ldr	r3, [sp, #4]
 8089470:	5cf8      	ldrb	r0, [r7, r3]
 8089472:	18fe      	adds	r6, r7, r3
 8089474:	f7ff ffba 	bl	80893ec <__hexdig_fun>
 8089478:	b380      	cbz	r0, 80894dc <__gethex+0xc6>
 808947a:	4633      	mov	r3, r6
 808947c:	7818      	ldrb	r0, [r3, #0]
 808947e:	461f      	mov	r7, r3
 8089480:	2830      	cmp	r0, #48	; 0x30
 8089482:	f103 0301 	add.w	r3, r3, #1
 8089486:	d0f9      	beq.n	808947c <__gethex+0x66>
 8089488:	f7ff ffb0 	bl	80893ec <__hexdig_fun>
 808948c:	fab0 f580 	clz	r5, r0
 8089490:	4634      	mov	r4, r6
 8089492:	096d      	lsrs	r5, r5, #5
 8089494:	f04f 0b01 	mov.w	fp, #1
 8089498:	e001      	b.n	808949e <__gethex+0x88>
 808949a:	2500      	movs	r5, #0
 808949c:	462c      	mov	r4, r5
 808949e:	463a      	mov	r2, r7
 80894a0:	4616      	mov	r6, r2
 80894a2:	7830      	ldrb	r0, [r6, #0]
 80894a4:	3201      	adds	r2, #1
 80894a6:	f7ff ffa1 	bl	80893ec <__hexdig_fun>
 80894aa:	2800      	cmp	r0, #0
 80894ac:	d1f8      	bne.n	80894a0 <__gethex+0x8a>
 80894ae:	9a01      	ldr	r2, [sp, #4]
 80894b0:	9903      	ldr	r1, [sp, #12]
 80894b2:	4630      	mov	r0, r6
 80894b4:	f7fe fdb6 	bl	8088024 <strncmp>
 80894b8:	b950      	cbnz	r0, 80894d0 <__gethex+0xba>
 80894ba:	b954      	cbnz	r4, 80894d2 <__gethex+0xbc>
 80894bc:	9b01      	ldr	r3, [sp, #4]
 80894be:	18f4      	adds	r4, r6, r3
 80894c0:	4622      	mov	r2, r4
 80894c2:	4616      	mov	r6, r2
 80894c4:	7830      	ldrb	r0, [r6, #0]
 80894c6:	3201      	adds	r2, #1
 80894c8:	f7ff ff90 	bl	80893ec <__hexdig_fun>
 80894cc:	2800      	cmp	r0, #0
 80894ce:	d1f8      	bne.n	80894c2 <__gethex+0xac>
 80894d0:	b134      	cbz	r4, 80894e0 <__gethex+0xca>
 80894d2:	1ba4      	subs	r4, r4, r6
 80894d4:	00a4      	lsls	r4, r4, #2
 80894d6:	e003      	b.n	80894e0 <__gethex+0xca>
 80894d8:	463e      	mov	r6, r7
 80894da:	e000      	b.n	80894de <__gethex+0xc8>
 80894dc:	4604      	mov	r4, r0
 80894de:	2501      	movs	r5, #1
 80894e0:	7833      	ldrb	r3, [r6, #0]
 80894e2:	2b50      	cmp	r3, #80	; 0x50
 80894e4:	d001      	beq.n	80894ea <__gethex+0xd4>
 80894e6:	2b70      	cmp	r3, #112	; 0x70
 80894e8:	d12a      	bne.n	8089540 <__gethex+0x12a>
 80894ea:	7873      	ldrb	r3, [r6, #1]
 80894ec:	2b2b      	cmp	r3, #43	; 0x2b
 80894ee:	d008      	beq.n	8089502 <__gethex+0xec>
 80894f0:	2b2d      	cmp	r3, #45	; 0x2d
 80894f2:	d003      	beq.n	80894fc <__gethex+0xe6>
 80894f4:	1c71      	adds	r1, r6, #1
 80894f6:	f04f 0900 	mov.w	r9, #0
 80894fa:	e005      	b.n	8089508 <__gethex+0xf2>
 80894fc:	f04f 0901 	mov.w	r9, #1
 8089500:	e001      	b.n	8089506 <__gethex+0xf0>
 8089502:	f04f 0900 	mov.w	r9, #0
 8089506:	1cb1      	adds	r1, r6, #2
 8089508:	7808      	ldrb	r0, [r1, #0]
 808950a:	f7ff ff6f 	bl	80893ec <__hexdig_fun>
 808950e:	1e43      	subs	r3, r0, #1
 8089510:	b2db      	uxtb	r3, r3
 8089512:	2b18      	cmp	r3, #24
 8089514:	d814      	bhi.n	8089540 <__gethex+0x12a>
 8089516:	f1a0 0210 	sub.w	r2, r0, #16
 808951a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808951e:	f7ff ff65 	bl	80893ec <__hexdig_fun>
 8089522:	1e43      	subs	r3, r0, #1
 8089524:	b2db      	uxtb	r3, r3
 8089526:	2b18      	cmp	r3, #24
 8089528:	d804      	bhi.n	8089534 <__gethex+0x11e>
 808952a:	230a      	movs	r3, #10
 808952c:	fb03 0202 	mla	r2, r3, r2, r0
 8089530:	3a10      	subs	r2, #16
 8089532:	e7f2      	b.n	808951a <__gethex+0x104>
 8089534:	f1b9 0f00 	cmp.w	r9, #0
 8089538:	d000      	beq.n	808953c <__gethex+0x126>
 808953a:	4252      	negs	r2, r2
 808953c:	4414      	add	r4, r2
 808953e:	e000      	b.n	8089542 <__gethex+0x12c>
 8089540:	4631      	mov	r1, r6
 8089542:	f8ca 1000 	str.w	r1, [sl]
 8089546:	b12d      	cbz	r5, 8089554 <__gethex+0x13e>
 8089548:	f1bb 0f00 	cmp.w	fp, #0
 808954c:	bf14      	ite	ne
 808954e:	2000      	movne	r0, #0
 8089550:	2006      	moveq	r0, #6
 8089552:	e17c      	b.n	808984e <__gethex+0x438>
 8089554:	4629      	mov	r1, r5
 8089556:	1bf3      	subs	r3, r6, r7
 8089558:	3b01      	subs	r3, #1
 808955a:	2b07      	cmp	r3, #7
 808955c:	dd02      	ble.n	8089564 <__gethex+0x14e>
 808955e:	3101      	adds	r1, #1
 8089560:	105b      	asrs	r3, r3, #1
 8089562:	e7fa      	b.n	808955a <__gethex+0x144>
 8089564:	9802      	ldr	r0, [sp, #8]
 8089566:	f000 fb0b 	bl	8089b80 <_Balloc>
 808956a:	f04f 0900 	mov.w	r9, #0
 808956e:	4605      	mov	r5, r0
 8089570:	46cb      	mov	fp, r9
 8089572:	9b01      	ldr	r3, [sp, #4]
 8089574:	f100 0a14 	add.w	sl, r0, #20
 8089578:	f1c3 0301 	rsb	r3, r3, #1
 808957c:	f8cd a010 	str.w	sl, [sp, #16]
 8089580:	9308      	str	r3, [sp, #32]
 8089582:	42b7      	cmp	r7, r6
 8089584:	d22f      	bcs.n	80895e6 <__gethex+0x1d0>
 8089586:	1e73      	subs	r3, r6, #1
 8089588:	9305      	str	r3, [sp, #20]
 808958a:	9a07      	ldr	r2, [sp, #28]
 808958c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8089590:	4293      	cmp	r3, r2
 8089592:	d00b      	beq.n	80895ac <__gethex+0x196>
 8089594:	f1bb 0f20 	cmp.w	fp, #32
 8089598:	d116      	bne.n	80895c8 <__gethex+0x1b2>
 808959a:	9b04      	ldr	r3, [sp, #16]
 808959c:	f8c3 9000 	str.w	r9, [r3]
 80895a0:	3304      	adds	r3, #4
 80895a2:	f04f 0900 	mov.w	r9, #0
 80895a6:	9304      	str	r3, [sp, #16]
 80895a8:	46cb      	mov	fp, r9
 80895aa:	e00d      	b.n	80895c8 <__gethex+0x1b2>
 80895ac:	9b05      	ldr	r3, [sp, #20]
 80895ae:	9a08      	ldr	r2, [sp, #32]
 80895b0:	4413      	add	r3, r2
 80895b2:	429f      	cmp	r7, r3
 80895b4:	d8ee      	bhi.n	8089594 <__gethex+0x17e>
 80895b6:	4618      	mov	r0, r3
 80895b8:	9a01      	ldr	r2, [sp, #4]
 80895ba:	9903      	ldr	r1, [sp, #12]
 80895bc:	9309      	str	r3, [sp, #36]	; 0x24
 80895be:	f7fe fd31 	bl	8088024 <strncmp>
 80895c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80895c4:	b168      	cbz	r0, 80895e2 <__gethex+0x1cc>
 80895c6:	e7e5      	b.n	8089594 <__gethex+0x17e>
 80895c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80895cc:	f7ff ff0e 	bl	80893ec <__hexdig_fun>
 80895d0:	f000 000f 	and.w	r0, r0, #15
 80895d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80895d8:	9b05      	ldr	r3, [sp, #20]
 80895da:	ea49 0900 	orr.w	r9, r9, r0
 80895de:	f10b 0b04 	add.w	fp, fp, #4
 80895e2:	461e      	mov	r6, r3
 80895e4:	e7cd      	b.n	8089582 <__gethex+0x16c>
 80895e6:	9804      	ldr	r0, [sp, #16]
 80895e8:	f840 9b04 	str.w	r9, [r0], #4
 80895ec:	ebca 0000 	rsb	r0, sl, r0
 80895f0:	1080      	asrs	r0, r0, #2
 80895f2:	6128      	str	r0, [r5, #16]
 80895f4:	0147      	lsls	r7, r0, #5
 80895f6:	4648      	mov	r0, r9
 80895f8:	f000 fb87 	bl	8089d0a <__hi0bits>
 80895fc:	f8d8 6000 	ldr.w	r6, [r8]
 8089600:	1a38      	subs	r0, r7, r0
 8089602:	42b0      	cmp	r0, r6
 8089604:	dd26      	ble.n	8089654 <__gethex+0x23e>
 8089606:	1b87      	subs	r7, r0, r6
 8089608:	4639      	mov	r1, r7
 808960a:	4628      	mov	r0, r5
 808960c:	f000 fe7f 	bl	808a30e <__any_on>
 8089610:	b1c8      	cbz	r0, 8089646 <__gethex+0x230>
 8089612:	1e7b      	subs	r3, r7, #1
 8089614:	1159      	asrs	r1, r3, #5
 8089616:	f003 021f 	and.w	r2, r3, #31
 808961a:	f04f 0901 	mov.w	r9, #1
 808961e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8089622:	fa09 f202 	lsl.w	r2, r9, r2
 8089626:	420a      	tst	r2, r1
 8089628:	d00e      	beq.n	8089648 <__gethex+0x232>
 808962a:	454b      	cmp	r3, r9
 808962c:	dc02      	bgt.n	8089634 <__gethex+0x21e>
 808962e:	f04f 0902 	mov.w	r9, #2
 8089632:	e009      	b.n	8089648 <__gethex+0x232>
 8089634:	1eb9      	subs	r1, r7, #2
 8089636:	4628      	mov	r0, r5
 8089638:	f000 fe69 	bl	808a30e <__any_on>
 808963c:	2800      	cmp	r0, #0
 808963e:	d0f6      	beq.n	808962e <__gethex+0x218>
 8089640:	f04f 0903 	mov.w	r9, #3
 8089644:	e000      	b.n	8089648 <__gethex+0x232>
 8089646:	4681      	mov	r9, r0
 8089648:	4639      	mov	r1, r7
 808964a:	4628      	mov	r0, r5
 808964c:	f7ff fe98 	bl	8089380 <rshift>
 8089650:	443c      	add	r4, r7
 8089652:	e00c      	b.n	808966e <__gethex+0x258>
 8089654:	da09      	bge.n	808966a <__gethex+0x254>
 8089656:	1a37      	subs	r7, r6, r0
 8089658:	4629      	mov	r1, r5
 808965a:	463a      	mov	r2, r7
 808965c:	9802      	ldr	r0, [sp, #8]
 808965e:	f000 fc89 	bl	8089f74 <__lshift>
 8089662:	4605      	mov	r5, r0
 8089664:	1be4      	subs	r4, r4, r7
 8089666:	f100 0a14 	add.w	sl, r0, #20
 808966a:	f04f 0900 	mov.w	r9, #0
 808966e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8089672:	429c      	cmp	r4, r3
 8089674:	dd08      	ble.n	8089688 <__gethex+0x272>
 8089676:	9802      	ldr	r0, [sp, #8]
 8089678:	4629      	mov	r1, r5
 808967a:	f000 fab6 	bl	8089bea <_Bfree>
 808967e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8089680:	2300      	movs	r3, #0
 8089682:	6013      	str	r3, [r2, #0]
 8089684:	20a3      	movs	r0, #163	; 0xa3
 8089686:	e0e2      	b.n	808984e <__gethex+0x438>
 8089688:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808968c:	4284      	cmp	r4, r0
 808968e:	da53      	bge.n	8089738 <__gethex+0x322>
 8089690:	1b04      	subs	r4, r0, r4
 8089692:	42a6      	cmp	r6, r4
 8089694:	dc2e      	bgt.n	80896f4 <__gethex+0x2de>
 8089696:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808969a:	2b02      	cmp	r3, #2
 808969c:	d01a      	beq.n	80896d4 <__gethex+0x2be>
 808969e:	2b03      	cmp	r3, #3
 80896a0:	d01c      	beq.n	80896dc <__gethex+0x2c6>
 80896a2:	2b01      	cmp	r3, #1
 80896a4:	d11d      	bne.n	80896e2 <__gethex+0x2cc>
 80896a6:	42a6      	cmp	r6, r4
 80896a8:	d11b      	bne.n	80896e2 <__gethex+0x2cc>
 80896aa:	2e01      	cmp	r6, #1
 80896ac:	dc0b      	bgt.n	80896c6 <__gethex+0x2b0>
 80896ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80896b2:	9a06      	ldr	r2, [sp, #24]
 80896b4:	2062      	movs	r0, #98	; 0x62
 80896b6:	6013      	str	r3, [r2, #0]
 80896b8:	2301      	movs	r3, #1
 80896ba:	612b      	str	r3, [r5, #16]
 80896bc:	f8ca 3000 	str.w	r3, [sl]
 80896c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80896c2:	601d      	str	r5, [r3, #0]
 80896c4:	e0c3      	b.n	808984e <__gethex+0x438>
 80896c6:	1e71      	subs	r1, r6, #1
 80896c8:	4628      	mov	r0, r5
 80896ca:	f000 fe20 	bl	808a30e <__any_on>
 80896ce:	2800      	cmp	r0, #0
 80896d0:	d1ed      	bne.n	80896ae <__gethex+0x298>
 80896d2:	e006      	b.n	80896e2 <__gethex+0x2cc>
 80896d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80896d6:	2b00      	cmp	r3, #0
 80896d8:	d0e9      	beq.n	80896ae <__gethex+0x298>
 80896da:	e002      	b.n	80896e2 <__gethex+0x2cc>
 80896dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80896de:	2b00      	cmp	r3, #0
 80896e0:	d1e5      	bne.n	80896ae <__gethex+0x298>
 80896e2:	9802      	ldr	r0, [sp, #8]
 80896e4:	4629      	mov	r1, r5
 80896e6:	f000 fa80 	bl	8089bea <_Bfree>
 80896ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80896ec:	2300      	movs	r3, #0
 80896ee:	6013      	str	r3, [r2, #0]
 80896f0:	2050      	movs	r0, #80	; 0x50
 80896f2:	e0ac      	b.n	808984e <__gethex+0x438>
 80896f4:	1e67      	subs	r7, r4, #1
 80896f6:	f1b9 0f00 	cmp.w	r9, #0
 80896fa:	d106      	bne.n	808970a <__gethex+0x2f4>
 80896fc:	b13f      	cbz	r7, 808970e <__gethex+0x2f8>
 80896fe:	4639      	mov	r1, r7
 8089700:	4628      	mov	r0, r5
 8089702:	f000 fe04 	bl	808a30e <__any_on>
 8089706:	4681      	mov	r9, r0
 8089708:	e001      	b.n	808970e <__gethex+0x2f8>
 808970a:	f04f 0901 	mov.w	r9, #1
 808970e:	117a      	asrs	r2, r7, #5
 8089710:	2301      	movs	r3, #1
 8089712:	f007 071f 	and.w	r7, r7, #31
 8089716:	fa03 f707 	lsl.w	r7, r3, r7
 808971a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808971e:	4621      	mov	r1, r4
 8089720:	421f      	tst	r7, r3
 8089722:	4628      	mov	r0, r5
 8089724:	bf18      	it	ne
 8089726:	f049 0902 	orrne.w	r9, r9, #2
 808972a:	1b36      	subs	r6, r6, r4
 808972c:	f7ff fe28 	bl	8089380 <rshift>
 8089730:	2702      	movs	r7, #2
 8089732:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8089736:	e000      	b.n	808973a <__gethex+0x324>
 8089738:	2701      	movs	r7, #1
 808973a:	f1b9 0f00 	cmp.w	r9, #0
 808973e:	f000 8081 	beq.w	8089844 <__gethex+0x42e>
 8089742:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8089746:	2b02      	cmp	r3, #2
 8089748:	d00e      	beq.n	8089768 <__gethex+0x352>
 808974a:	2b03      	cmp	r3, #3
 808974c:	d010      	beq.n	8089770 <__gethex+0x35a>
 808974e:	2b01      	cmp	r3, #1
 8089750:	d176      	bne.n	8089840 <__gethex+0x42a>
 8089752:	f019 0f02 	tst.w	r9, #2
 8089756:	d073      	beq.n	8089840 <__gethex+0x42a>
 8089758:	f8da 0000 	ldr.w	r0, [sl]
 808975c:	ea49 0900 	orr.w	r9, r9, r0
 8089760:	f019 0f01 	tst.w	r9, #1
 8089764:	d107      	bne.n	8089776 <__gethex+0x360>
 8089766:	e06b      	b.n	8089840 <__gethex+0x42a>
 8089768:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808976a:	f1c3 0301 	rsb	r3, r3, #1
 808976e:	9315      	str	r3, [sp, #84]	; 0x54
 8089770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8089772:	2b00      	cmp	r3, #0
 8089774:	d064      	beq.n	8089840 <__gethex+0x42a>
 8089776:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808977a:	f105 0314 	add.w	r3, r5, #20
 808977e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8089782:	eb03 0109 	add.w	r1, r3, r9
 8089786:	2000      	movs	r0, #0
 8089788:	681a      	ldr	r2, [r3, #0]
 808978a:	f1b2 3fff 	cmp.w	r2, #4294967295
 808978e:	d002      	beq.n	8089796 <__gethex+0x380>
 8089790:	3201      	adds	r2, #1
 8089792:	601a      	str	r2, [r3, #0]
 8089794:	e020      	b.n	80897d8 <__gethex+0x3c2>
 8089796:	f843 0b04 	str.w	r0, [r3], #4
 808979a:	4299      	cmp	r1, r3
 808979c:	d8f4      	bhi.n	8089788 <__gethex+0x372>
 808979e:	68ab      	ldr	r3, [r5, #8]
 80897a0:	459a      	cmp	sl, r3
 80897a2:	db12      	blt.n	80897ca <__gethex+0x3b4>
 80897a4:	6869      	ldr	r1, [r5, #4]
 80897a6:	9802      	ldr	r0, [sp, #8]
 80897a8:	3101      	adds	r1, #1
 80897aa:	f000 f9e9 	bl	8089b80 <_Balloc>
 80897ae:	4683      	mov	fp, r0
 80897b0:	692a      	ldr	r2, [r5, #16]
 80897b2:	f105 010c 	add.w	r1, r5, #12
 80897b6:	3202      	adds	r2, #2
 80897b8:	0092      	lsls	r2, r2, #2
 80897ba:	300c      	adds	r0, #12
 80897bc:	f7fd fead 	bl	808751a <memcpy>
 80897c0:	4629      	mov	r1, r5
 80897c2:	9802      	ldr	r0, [sp, #8]
 80897c4:	f000 fa11 	bl	8089bea <_Bfree>
 80897c8:	465d      	mov	r5, fp
 80897ca:	692b      	ldr	r3, [r5, #16]
 80897cc:	1c5a      	adds	r2, r3, #1
 80897ce:	612a      	str	r2, [r5, #16]
 80897d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80897d4:	2201      	movs	r2, #1
 80897d6:	615a      	str	r2, [r3, #20]
 80897d8:	2f02      	cmp	r7, #2
 80897da:	f105 0214 	add.w	r2, r5, #20
 80897de:	d111      	bne.n	8089804 <__gethex+0x3ee>
 80897e0:	f8d8 3000 	ldr.w	r3, [r8]
 80897e4:	3b01      	subs	r3, #1
 80897e6:	429e      	cmp	r6, r3
 80897e8:	d127      	bne.n	808983a <__gethex+0x424>
 80897ea:	1171      	asrs	r1, r6, #5
 80897ec:	2301      	movs	r3, #1
 80897ee:	f006 061f 	and.w	r6, r6, #31
 80897f2:	fa03 f606 	lsl.w	r6, r3, r6
 80897f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80897fa:	421e      	tst	r6, r3
 80897fc:	bf0c      	ite	eq
 80897fe:	2702      	moveq	r7, #2
 8089800:	2701      	movne	r7, #1
 8089802:	e01a      	b.n	808983a <__gethex+0x424>
 8089804:	692b      	ldr	r3, [r5, #16]
 8089806:	459a      	cmp	sl, r3
 8089808:	da0a      	bge.n	8089820 <__gethex+0x40a>
 808980a:	2101      	movs	r1, #1
 808980c:	4628      	mov	r0, r5
 808980e:	f7ff fdb7 	bl	8089380 <rshift>
 8089812:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8089816:	3401      	adds	r4, #1
 8089818:	429c      	cmp	r4, r3
 808981a:	f73f af2c 	bgt.w	8089676 <__gethex+0x260>
 808981e:	e00b      	b.n	8089838 <__gethex+0x422>
 8089820:	f016 061f 	ands.w	r6, r6, #31
 8089824:	d008      	beq.n	8089838 <__gethex+0x422>
 8089826:	4491      	add	r9, r2
 8089828:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808982c:	f000 fa6d 	bl	8089d0a <__hi0bits>
 8089830:	f1c6 0620 	rsb	r6, r6, #32
 8089834:	42b0      	cmp	r0, r6
 8089836:	dbe8      	blt.n	808980a <__gethex+0x3f4>
 8089838:	2701      	movs	r7, #1
 808983a:	f047 0720 	orr.w	r7, r7, #32
 808983e:	e001      	b.n	8089844 <__gethex+0x42e>
 8089840:	f047 0710 	orr.w	r7, r7, #16
 8089844:	4638      	mov	r0, r7
 8089846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8089848:	601d      	str	r5, [r3, #0]
 808984a:	9b06      	ldr	r3, [sp, #24]
 808984c:	601c      	str	r4, [r3, #0]
 808984e:	b00b      	add	sp, #44	; 0x2c
 8089850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08089854 <L_shift>:
 8089854:	f1c2 0208 	rsb	r2, r2, #8
 8089858:	0092      	lsls	r2, r2, #2
 808985a:	b570      	push	{r4, r5, r6, lr}
 808985c:	f1c2 0620 	rsb	r6, r2, #32
 8089860:	6843      	ldr	r3, [r0, #4]
 8089862:	6805      	ldr	r5, [r0, #0]
 8089864:	fa03 f406 	lsl.w	r4, r3, r6
 8089868:	432c      	orrs	r4, r5
 808986a:	40d3      	lsrs	r3, r2
 808986c:	6004      	str	r4, [r0, #0]
 808986e:	f840 3f04 	str.w	r3, [r0, #4]!
 8089872:	4288      	cmp	r0, r1
 8089874:	d3f4      	bcc.n	8089860 <L_shift+0xc>
 8089876:	bd70      	pop	{r4, r5, r6, pc}

08089878 <__match>:
 8089878:	b530      	push	{r4, r5, lr}
 808987a:	6803      	ldr	r3, [r0, #0]
 808987c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8089880:	3301      	adds	r3, #1
 8089882:	b14c      	cbz	r4, 8089898 <__match+0x20>
 8089884:	781a      	ldrb	r2, [r3, #0]
 8089886:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808988a:	2d19      	cmp	r5, #25
 808988c:	bf98      	it	ls
 808988e:	3220      	addls	r2, #32
 8089890:	42a2      	cmp	r2, r4
 8089892:	d0f3      	beq.n	808987c <__match+0x4>
 8089894:	2000      	movs	r0, #0
 8089896:	bd30      	pop	{r4, r5, pc}
 8089898:	6003      	str	r3, [r0, #0]
 808989a:	2001      	movs	r0, #1
 808989c:	bd30      	pop	{r4, r5, pc}

0808989e <__hexnan>:
 808989e:	680b      	ldr	r3, [r1, #0]
 80898a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80898a4:	115e      	asrs	r6, r3, #5
 80898a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80898aa:	f013 031f 	ands.w	r3, r3, #31
 80898ae:	bf18      	it	ne
 80898b0:	3604      	addne	r6, #4
 80898b2:	1f35      	subs	r5, r6, #4
 80898b4:	4617      	mov	r7, r2
 80898b6:	2200      	movs	r2, #0
 80898b8:	4682      	mov	sl, r0
 80898ba:	46a8      	mov	r8, r5
 80898bc:	462c      	mov	r4, r5
 80898be:	4691      	mov	r9, r2
 80898c0:	b085      	sub	sp, #20
 80898c2:	f8d0 b000 	ldr.w	fp, [r0]
 80898c6:	9301      	str	r3, [sp, #4]
 80898c8:	f846 2c04 	str.w	r2, [r6, #-4]
 80898cc:	9200      	str	r2, [sp, #0]
 80898ce:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80898d2:	2900      	cmp	r1, #0
 80898d4:	d03c      	beq.n	8089950 <__hexnan+0xb2>
 80898d6:	4608      	mov	r0, r1
 80898d8:	9203      	str	r2, [sp, #12]
 80898da:	9102      	str	r1, [sp, #8]
 80898dc:	f7ff fd86 	bl	80893ec <__hexdig_fun>
 80898e0:	9a03      	ldr	r2, [sp, #12]
 80898e2:	bb00      	cbnz	r0, 8089926 <__hexnan+0x88>
 80898e4:	9902      	ldr	r1, [sp, #8]
 80898e6:	2920      	cmp	r1, #32
 80898e8:	d816      	bhi.n	8089918 <__hexnan+0x7a>
 80898ea:	9b00      	ldr	r3, [sp, #0]
 80898ec:	4599      	cmp	r9, r3
 80898ee:	ddee      	ble.n	80898ce <__hexnan+0x30>
 80898f0:	4544      	cmp	r4, r8
 80898f2:	d205      	bcs.n	8089900 <__hexnan+0x62>
 80898f4:	2a07      	cmp	r2, #7
 80898f6:	dc03      	bgt.n	8089900 <__hexnan+0x62>
 80898f8:	4641      	mov	r1, r8
 80898fa:	4620      	mov	r0, r4
 80898fc:	f7ff ffaa 	bl	8089854 <L_shift>
 8089900:	42bc      	cmp	r4, r7
 8089902:	d923      	bls.n	808994c <__hexnan+0xae>
 8089904:	2300      	movs	r3, #0
 8089906:	f1a4 0804 	sub.w	r8, r4, #4
 808990a:	f844 3c04 	str.w	r3, [r4, #-4]
 808990e:	f8cd 9000 	str.w	r9, [sp]
 8089912:	4644      	mov	r4, r8
 8089914:	461a      	mov	r2, r3
 8089916:	e7da      	b.n	80898ce <__hexnan+0x30>
 8089918:	2929      	cmp	r1, #41	; 0x29
 808991a:	d148      	bne.n	80899ae <__hexnan+0x110>
 808991c:	f10b 0301 	add.w	r3, fp, #1
 8089920:	f8ca 3000 	str.w	r3, [sl]
 8089924:	e014      	b.n	8089950 <__hexnan+0xb2>
 8089926:	3201      	adds	r2, #1
 8089928:	2a08      	cmp	r2, #8
 808992a:	f109 0901 	add.w	r9, r9, #1
 808992e:	dd06      	ble.n	808993e <__hexnan+0xa0>
 8089930:	42bc      	cmp	r4, r7
 8089932:	d9cc      	bls.n	80898ce <__hexnan+0x30>
 8089934:	2300      	movs	r3, #0
 8089936:	f844 3c04 	str.w	r3, [r4, #-4]
 808993a:	2201      	movs	r2, #1
 808993c:	3c04      	subs	r4, #4
 808993e:	6821      	ldr	r1, [r4, #0]
 8089940:	f000 000f 	and.w	r0, r0, #15
 8089944:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8089948:	6020      	str	r0, [r4, #0]
 808994a:	e7c0      	b.n	80898ce <__hexnan+0x30>
 808994c:	2208      	movs	r2, #8
 808994e:	e7be      	b.n	80898ce <__hexnan+0x30>
 8089950:	f1b9 0f00 	cmp.w	r9, #0
 8089954:	d02b      	beq.n	80899ae <__hexnan+0x110>
 8089956:	4544      	cmp	r4, r8
 8089958:	d205      	bcs.n	8089966 <__hexnan+0xc8>
 808995a:	2a07      	cmp	r2, #7
 808995c:	dc03      	bgt.n	8089966 <__hexnan+0xc8>
 808995e:	4641      	mov	r1, r8
 8089960:	4620      	mov	r0, r4
 8089962:	f7ff ff77 	bl	8089854 <L_shift>
 8089966:	42bc      	cmp	r4, r7
 8089968:	d90c      	bls.n	8089984 <__hexnan+0xe6>
 808996a:	463b      	mov	r3, r7
 808996c:	f854 2b04 	ldr.w	r2, [r4], #4
 8089970:	42a5      	cmp	r5, r4
 8089972:	f843 2b04 	str.w	r2, [r3], #4
 8089976:	d2f9      	bcs.n	808996c <__hexnan+0xce>
 8089978:	2200      	movs	r2, #0
 808997a:	f843 2b04 	str.w	r2, [r3], #4
 808997e:	429d      	cmp	r5, r3
 8089980:	d2fb      	bcs.n	808997a <__hexnan+0xdc>
 8089982:	e00b      	b.n	808999c <__hexnan+0xfe>
 8089984:	9b01      	ldr	r3, [sp, #4]
 8089986:	b14b      	cbz	r3, 808999c <__hexnan+0xfe>
 8089988:	f1c3 0220 	rsb	r2, r3, #32
 808998c:	f04f 33ff 	mov.w	r3, #4294967295
 8089990:	40d3      	lsrs	r3, r2
 8089992:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8089996:	4013      	ands	r3, r2
 8089998:	f846 3c04 	str.w	r3, [r6, #-4]
 808999c:	682b      	ldr	r3, [r5, #0]
 808999e:	b943      	cbnz	r3, 80899b2 <__hexnan+0x114>
 80899a0:	42bd      	cmp	r5, r7
 80899a2:	d102      	bne.n	80899aa <__hexnan+0x10c>
 80899a4:	2301      	movs	r3, #1
 80899a6:	602b      	str	r3, [r5, #0]
 80899a8:	e003      	b.n	80899b2 <__hexnan+0x114>
 80899aa:	3d04      	subs	r5, #4
 80899ac:	e7f6      	b.n	808999c <__hexnan+0xfe>
 80899ae:	2004      	movs	r0, #4
 80899b0:	e000      	b.n	80899b4 <__hexnan+0x116>
 80899b2:	2005      	movs	r0, #5
 80899b4:	b005      	add	sp, #20
 80899b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080899bc <_findenv_r>:
 80899bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80899c0:	4607      	mov	r7, r0
 80899c2:	468b      	mov	fp, r1
 80899c4:	4690      	mov	r8, r2
 80899c6:	f000 fcd2 	bl	808a36e <__env_lock>
 80899ca:	4b19      	ldr	r3, [pc, #100]	; (8089a30 <_findenv_r+0x74>)
 80899cc:	681d      	ldr	r5, [r3, #0]
 80899ce:	469a      	mov	sl, r3
 80899d0:	b13d      	cbz	r5, 80899e2 <_findenv_r+0x26>
 80899d2:	465c      	mov	r4, fp
 80899d4:	4623      	mov	r3, r4
 80899d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80899da:	b142      	cbz	r2, 80899ee <_findenv_r+0x32>
 80899dc:	2a3d      	cmp	r2, #61	; 0x3d
 80899de:	461c      	mov	r4, r3
 80899e0:	d1f8      	bne.n	80899d4 <_findenv_r+0x18>
 80899e2:	4638      	mov	r0, r7
 80899e4:	f000 fcc4 	bl	808a370 <__env_unlock>
 80899e8:	2000      	movs	r0, #0
 80899ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80899ee:	ebcb 0404 	rsb	r4, fp, r4
 80899f2:	46a9      	mov	r9, r5
 80899f4:	f859 0b04 	ldr.w	r0, [r9], #4
 80899f8:	2800      	cmp	r0, #0
 80899fa:	d0f2      	beq.n	80899e2 <_findenv_r+0x26>
 80899fc:	4622      	mov	r2, r4
 80899fe:	4659      	mov	r1, fp
 8089a00:	f7fe fb10 	bl	8088024 <strncmp>
 8089a04:	b988      	cbnz	r0, 8089a2a <_findenv_r+0x6e>
 8089a06:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8089a0a:	191e      	adds	r6, r3, r4
 8089a0c:	5d1b      	ldrb	r3, [r3, r4]
 8089a0e:	2b3d      	cmp	r3, #61	; 0x3d
 8089a10:	d10b      	bne.n	8089a2a <_findenv_r+0x6e>
 8089a12:	f8da 3000 	ldr.w	r3, [sl]
 8089a16:	4638      	mov	r0, r7
 8089a18:	1aed      	subs	r5, r5, r3
 8089a1a:	10ad      	asrs	r5, r5, #2
 8089a1c:	f8c8 5000 	str.w	r5, [r8]
 8089a20:	f000 fca6 	bl	808a370 <__env_unlock>
 8089a24:	1c70      	adds	r0, r6, #1
 8089a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089a2a:	464d      	mov	r5, r9
 8089a2c:	e7e1      	b.n	80899f2 <_findenv_r+0x36>
 8089a2e:	bf00      	nop
 8089a30:	20000138 	.word	0x20000138

08089a34 <_getenv_r>:
 8089a34:	b507      	push	{r0, r1, r2, lr}
 8089a36:	aa01      	add	r2, sp, #4
 8089a38:	f7ff ffc0 	bl	80899bc <_findenv_r>
 8089a3c:	b003      	add	sp, #12
 8089a3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089a44 <__gettzinfo>:
 8089a44:	4800      	ldr	r0, [pc, #0]	; (8089a48 <__gettzinfo+0x4>)
 8089a46:	4770      	bx	lr
 8089a48:	200000f8 	.word	0x200000f8

08089a4c <gmtime_r>:
 8089a4c:	6802      	ldr	r2, [r0, #0]
 8089a4e:	4b46      	ldr	r3, [pc, #280]	; (8089b68 <gmtime_r+0x11c>)
 8089a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089a52:	fb92 f4f3 	sdiv	r4, r2, r3
 8089a56:	fb03 2214 	mls	r2, r3, r4, r2
 8089a5a:	2a00      	cmp	r2, #0
 8089a5c:	bfbc      	itt	lt
 8089a5e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8089a62:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8089a66:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8089a6a:	fb92 f3f0 	sdiv	r3, r2, r0
 8089a6e:	fb00 2213 	mls	r2, r0, r3, r2
 8089a72:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8089a76:	608b      	str	r3, [r1, #8]
 8089a78:	fb92 f3f0 	sdiv	r3, r2, r0
 8089a7c:	fb00 2213 	mls	r2, r0, r3, r2
 8089a80:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8089a84:	bfac      	ite	ge
 8089a86:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8089a8a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8089a8e:	604b      	str	r3, [r1, #4]
 8089a90:	600a      	str	r2, [r1, #0]
 8089a92:	2307      	movs	r3, #7
 8089a94:	1ce2      	adds	r2, r4, #3
 8089a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8089a9a:	4d34      	ldr	r5, [pc, #208]	; (8089b6c <gmtime_r+0x120>)
 8089a9c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8089aa0:	fb94 f5f5 	sdiv	r5, r4, r5
 8089aa4:	1ad3      	subs	r3, r2, r3
 8089aa6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8089aaa:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8089aae:	618b      	str	r3, [r1, #24]
 8089ab0:	4b2f      	ldr	r3, [pc, #188]	; (8089b70 <gmtime_r+0x124>)
 8089ab2:	4830      	ldr	r0, [pc, #192]	; (8089b74 <gmtime_r+0x128>)
 8089ab4:	fb03 4405 	mla	r4, r3, r5, r4
 8089ab8:	fbb4 f2f2 	udiv	r2, r4, r2
 8089abc:	fbb4 f3f7 	udiv	r3, r4, r7
 8089ac0:	fbb4 f0f0 	udiv	r0, r4, r0
 8089ac4:	4422      	add	r2, r4
 8089ac6:	1ad2      	subs	r2, r2, r3
 8089ac8:	f648 6694 	movw	r6, #36500	; 0x8e94
 8089acc:	1a13      	subs	r3, r2, r0
 8089ace:	f240 126d 	movw	r2, #365	; 0x16d
 8089ad2:	fbb3 f6f6 	udiv	r6, r3, r6
 8089ad6:	fbb3 f0f2 	udiv	r0, r3, r2
 8089ada:	fbb3 f3f7 	udiv	r3, r3, r7
 8089ade:	4434      	add	r4, r6
 8089ae0:	1ae3      	subs	r3, r4, r3
 8089ae2:	fb02 3310 	mls	r3, r2, r0, r3
 8089ae6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8089aea:	2499      	movs	r4, #153	; 0x99
 8089aec:	3202      	adds	r2, #2
 8089aee:	fbb2 f2f4 	udiv	r2, r2, r4
 8089af2:	4354      	muls	r4, r2
 8089af4:	1ca6      	adds	r6, r4, #2
 8089af6:	2405      	movs	r4, #5
 8089af8:	fbb6 f4f4 	udiv	r4, r6, r4
 8089afc:	2a0a      	cmp	r2, #10
 8089afe:	bf34      	ite	cc
 8089b00:	2602      	movcc	r6, #2
 8089b02:	f06f 0609 	mvncs.w	r6, #9
 8089b06:	4416      	add	r6, r2
 8089b08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8089b0c:	fb02 0505 	mla	r5, r2, r5, r0
 8089b10:	1c5f      	adds	r7, r3, #1
 8089b12:	2e01      	cmp	r6, #1
 8089b14:	bf98      	it	ls
 8089b16:	3501      	addls	r5, #1
 8089b18:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8089b1c:	eba7 0704 	sub.w	r7, r7, r4
 8089b20:	d302      	bcc.n	8089b28 <gmtime_r+0xdc>
 8089b22:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8089b26:	e014      	b.n	8089b52 <gmtime_r+0x106>
 8089b28:	0782      	lsls	r2, r0, #30
 8089b2a:	d105      	bne.n	8089b38 <gmtime_r+0xec>
 8089b2c:	2464      	movs	r4, #100	; 0x64
 8089b2e:	fbb0 f2f4 	udiv	r2, r0, r4
 8089b32:	fb04 0212 	mls	r2, r4, r2, r0
 8089b36:	b94a      	cbnz	r2, 8089b4c <gmtime_r+0x100>
 8089b38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8089b3c:	fbb0 f4f2 	udiv	r4, r0, r2
 8089b40:	fb02 0014 	mls	r0, r2, r4, r0
 8089b44:	fab0 f280 	clz	r2, r0
 8089b48:	0952      	lsrs	r2, r2, #5
 8089b4a:	e000      	b.n	8089b4e <gmtime_r+0x102>
 8089b4c:	2201      	movs	r2, #1
 8089b4e:	333b      	adds	r3, #59	; 0x3b
 8089b50:	441a      	add	r2, r3
 8089b52:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8089b56:	2300      	movs	r3, #0
 8089b58:	61ca      	str	r2, [r1, #28]
 8089b5a:	614d      	str	r5, [r1, #20]
 8089b5c:	610e      	str	r6, [r1, #16]
 8089b5e:	60cf      	str	r7, [r1, #12]
 8089b60:	620b      	str	r3, [r1, #32]
 8089b62:	4608      	mov	r0, r1
 8089b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089b66:	bf00      	nop
 8089b68:	00015180 	.word	0x00015180
 8089b6c:	00023ab1 	.word	0x00023ab1
 8089b70:	fffdc54f 	.word	0xfffdc54f
 8089b74:	00023ab0 	.word	0x00023ab0

08089b78 <labs>:
 8089b78:	2800      	cmp	r0, #0
 8089b7a:	bfb8      	it	lt
 8089b7c:	4240      	neglt	r0, r0
 8089b7e:	4770      	bx	lr

08089b80 <_Balloc>:
 8089b80:	b570      	push	{r4, r5, r6, lr}
 8089b82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8089b84:	4604      	mov	r4, r0
 8089b86:	460e      	mov	r6, r1
 8089b88:	b93d      	cbnz	r5, 8089b9a <_Balloc+0x1a>
 8089b8a:	2010      	movs	r0, #16
 8089b8c:	f7fa fc0e 	bl	80843ac <malloc>
 8089b90:	6260      	str	r0, [r4, #36]	; 0x24
 8089b92:	6045      	str	r5, [r0, #4]
 8089b94:	6085      	str	r5, [r0, #8]
 8089b96:	6005      	str	r5, [r0, #0]
 8089b98:	60c5      	str	r5, [r0, #12]
 8089b9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8089b9c:	68eb      	ldr	r3, [r5, #12]
 8089b9e:	b143      	cbz	r3, 8089bb2 <_Balloc+0x32>
 8089ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8089ba2:	68db      	ldr	r3, [r3, #12]
 8089ba4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8089ba8:	b178      	cbz	r0, 8089bca <_Balloc+0x4a>
 8089baa:	6802      	ldr	r2, [r0, #0]
 8089bac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8089bb0:	e017      	b.n	8089be2 <_Balloc+0x62>
 8089bb2:	2221      	movs	r2, #33	; 0x21
 8089bb4:	2104      	movs	r1, #4
 8089bb6:	4620      	mov	r0, r4
 8089bb8:	f000 fbcb 	bl	808a352 <_calloc_r>
 8089bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8089bbe:	60e8      	str	r0, [r5, #12]
 8089bc0:	68db      	ldr	r3, [r3, #12]
 8089bc2:	2b00      	cmp	r3, #0
 8089bc4:	d1ec      	bne.n	8089ba0 <_Balloc+0x20>
 8089bc6:	2000      	movs	r0, #0
 8089bc8:	bd70      	pop	{r4, r5, r6, pc}
 8089bca:	2101      	movs	r1, #1
 8089bcc:	fa01 f506 	lsl.w	r5, r1, r6
 8089bd0:	1d6a      	adds	r2, r5, #5
 8089bd2:	0092      	lsls	r2, r2, #2
 8089bd4:	4620      	mov	r0, r4
 8089bd6:	f000 fbbc 	bl	808a352 <_calloc_r>
 8089bda:	2800      	cmp	r0, #0
 8089bdc:	d0f3      	beq.n	8089bc6 <_Balloc+0x46>
 8089bde:	6046      	str	r6, [r0, #4]
 8089be0:	6085      	str	r5, [r0, #8]
 8089be2:	2300      	movs	r3, #0
 8089be4:	6103      	str	r3, [r0, #16]
 8089be6:	60c3      	str	r3, [r0, #12]
 8089be8:	bd70      	pop	{r4, r5, r6, pc}

08089bea <_Bfree>:
 8089bea:	b570      	push	{r4, r5, r6, lr}
 8089bec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8089bee:	4606      	mov	r6, r0
 8089bf0:	460d      	mov	r5, r1
 8089bf2:	b93c      	cbnz	r4, 8089c04 <_Bfree+0x1a>
 8089bf4:	2010      	movs	r0, #16
 8089bf6:	f7fa fbd9 	bl	80843ac <malloc>
 8089bfa:	6270      	str	r0, [r6, #36]	; 0x24
 8089bfc:	6044      	str	r4, [r0, #4]
 8089bfe:	6084      	str	r4, [r0, #8]
 8089c00:	6004      	str	r4, [r0, #0]
 8089c02:	60c4      	str	r4, [r0, #12]
 8089c04:	b13d      	cbz	r5, 8089c16 <_Bfree+0x2c>
 8089c06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8089c08:	686a      	ldr	r2, [r5, #4]
 8089c0a:	68db      	ldr	r3, [r3, #12]
 8089c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8089c10:	6029      	str	r1, [r5, #0]
 8089c12:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8089c16:	bd70      	pop	{r4, r5, r6, pc}

08089c18 <__multadd>:
 8089c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089c1c:	4606      	mov	r6, r0
 8089c1e:	460c      	mov	r4, r1
 8089c20:	690d      	ldr	r5, [r1, #16]
 8089c22:	461f      	mov	r7, r3
 8089c24:	f101 0e14 	add.w	lr, r1, #20
 8089c28:	2300      	movs	r3, #0
 8089c2a:	f8de 0000 	ldr.w	r0, [lr]
 8089c2e:	3301      	adds	r3, #1
 8089c30:	b281      	uxth	r1, r0
 8089c32:	fb02 7101 	mla	r1, r2, r1, r7
 8089c36:	0c00      	lsrs	r0, r0, #16
 8089c38:	0c0f      	lsrs	r7, r1, #16
 8089c3a:	fb02 7000 	mla	r0, r2, r0, r7
 8089c3e:	b289      	uxth	r1, r1
 8089c40:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8089c44:	429d      	cmp	r5, r3
 8089c46:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8089c4a:	f84e 1b04 	str.w	r1, [lr], #4
 8089c4e:	dcec      	bgt.n	8089c2a <__multadd+0x12>
 8089c50:	b1d7      	cbz	r7, 8089c88 <__multadd+0x70>
 8089c52:	68a3      	ldr	r3, [r4, #8]
 8089c54:	429d      	cmp	r5, r3
 8089c56:	db12      	blt.n	8089c7e <__multadd+0x66>
 8089c58:	6861      	ldr	r1, [r4, #4]
 8089c5a:	4630      	mov	r0, r6
 8089c5c:	3101      	adds	r1, #1
 8089c5e:	f7ff ff8f 	bl	8089b80 <_Balloc>
 8089c62:	4680      	mov	r8, r0
 8089c64:	6922      	ldr	r2, [r4, #16]
 8089c66:	f104 010c 	add.w	r1, r4, #12
 8089c6a:	3202      	adds	r2, #2
 8089c6c:	0092      	lsls	r2, r2, #2
 8089c6e:	300c      	adds	r0, #12
 8089c70:	f7fd fc53 	bl	808751a <memcpy>
 8089c74:	4621      	mov	r1, r4
 8089c76:	4630      	mov	r0, r6
 8089c78:	f7ff ffb7 	bl	8089bea <_Bfree>
 8089c7c:	4644      	mov	r4, r8
 8089c7e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8089c82:	3501      	adds	r5, #1
 8089c84:	615f      	str	r7, [r3, #20]
 8089c86:	6125      	str	r5, [r4, #16]
 8089c88:	4620      	mov	r0, r4
 8089c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08089c8e <__s2b>:
 8089c8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089c92:	4606      	mov	r6, r0
 8089c94:	4615      	mov	r5, r2
 8089c96:	461f      	mov	r7, r3
 8089c98:	2209      	movs	r2, #9
 8089c9a:	3308      	adds	r3, #8
 8089c9c:	460c      	mov	r4, r1
 8089c9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8089ca2:	2100      	movs	r1, #0
 8089ca4:	2201      	movs	r2, #1
 8089ca6:	429a      	cmp	r2, r3
 8089ca8:	da02      	bge.n	8089cb0 <__s2b+0x22>
 8089caa:	0052      	lsls	r2, r2, #1
 8089cac:	3101      	adds	r1, #1
 8089cae:	e7fa      	b.n	8089ca6 <__s2b+0x18>
 8089cb0:	4630      	mov	r0, r6
 8089cb2:	f7ff ff65 	bl	8089b80 <_Balloc>
 8089cb6:	9b08      	ldr	r3, [sp, #32]
 8089cb8:	2d09      	cmp	r5, #9
 8089cba:	6143      	str	r3, [r0, #20]
 8089cbc:	f04f 0301 	mov.w	r3, #1
 8089cc0:	6103      	str	r3, [r0, #16]
 8089cc2:	dd11      	ble.n	8089ce8 <__s2b+0x5a>
 8089cc4:	f104 0809 	add.w	r8, r4, #9
 8089cc8:	46c1      	mov	r9, r8
 8089cca:	442c      	add	r4, r5
 8089ccc:	f819 3b01 	ldrb.w	r3, [r9], #1
 8089cd0:	4601      	mov	r1, r0
 8089cd2:	3b30      	subs	r3, #48	; 0x30
 8089cd4:	220a      	movs	r2, #10
 8089cd6:	4630      	mov	r0, r6
 8089cd8:	f7ff ff9e 	bl	8089c18 <__multadd>
 8089cdc:	45a1      	cmp	r9, r4
 8089cde:	d1f5      	bne.n	8089ccc <__s2b+0x3e>
 8089ce0:	eb08 0405 	add.w	r4, r8, r5
 8089ce4:	3c08      	subs	r4, #8
 8089ce6:	e001      	b.n	8089cec <__s2b+0x5e>
 8089ce8:	340a      	adds	r4, #10
 8089cea:	2509      	movs	r5, #9
 8089cec:	1b2d      	subs	r5, r5, r4
 8089cee:	1963      	adds	r3, r4, r5
 8089cf0:	429f      	cmp	r7, r3
 8089cf2:	dd08      	ble.n	8089d06 <__s2b+0x78>
 8089cf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8089cf8:	4601      	mov	r1, r0
 8089cfa:	3b30      	subs	r3, #48	; 0x30
 8089cfc:	220a      	movs	r2, #10
 8089cfe:	4630      	mov	r0, r6
 8089d00:	f7ff ff8a 	bl	8089c18 <__multadd>
 8089d04:	e7f3      	b.n	8089cee <__s2b+0x60>
 8089d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08089d0a <__hi0bits>:
 8089d0a:	0c03      	lsrs	r3, r0, #16
 8089d0c:	041b      	lsls	r3, r3, #16
 8089d0e:	b913      	cbnz	r3, 8089d16 <__hi0bits+0xc>
 8089d10:	0400      	lsls	r0, r0, #16
 8089d12:	2310      	movs	r3, #16
 8089d14:	e000      	b.n	8089d18 <__hi0bits+0xe>
 8089d16:	2300      	movs	r3, #0
 8089d18:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8089d1c:	bf04      	itt	eq
 8089d1e:	0200      	lsleq	r0, r0, #8
 8089d20:	3308      	addeq	r3, #8
 8089d22:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8089d26:	bf04      	itt	eq
 8089d28:	0100      	lsleq	r0, r0, #4
 8089d2a:	3304      	addeq	r3, #4
 8089d2c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8089d30:	bf04      	itt	eq
 8089d32:	0080      	lsleq	r0, r0, #2
 8089d34:	3302      	addeq	r3, #2
 8089d36:	2800      	cmp	r0, #0
 8089d38:	db03      	blt.n	8089d42 <__hi0bits+0x38>
 8089d3a:	0042      	lsls	r2, r0, #1
 8089d3c:	d503      	bpl.n	8089d46 <__hi0bits+0x3c>
 8089d3e:	1c58      	adds	r0, r3, #1
 8089d40:	4770      	bx	lr
 8089d42:	4618      	mov	r0, r3
 8089d44:	4770      	bx	lr
 8089d46:	2020      	movs	r0, #32
 8089d48:	4770      	bx	lr

08089d4a <__lo0bits>:
 8089d4a:	6803      	ldr	r3, [r0, #0]
 8089d4c:	f013 0207 	ands.w	r2, r3, #7
 8089d50:	d00b      	beq.n	8089d6a <__lo0bits+0x20>
 8089d52:	07d9      	lsls	r1, r3, #31
 8089d54:	d422      	bmi.n	8089d9c <__lo0bits+0x52>
 8089d56:	079a      	lsls	r2, r3, #30
 8089d58:	bf4b      	itete	mi
 8089d5a:	085b      	lsrmi	r3, r3, #1
 8089d5c:	089b      	lsrpl	r3, r3, #2
 8089d5e:	6003      	strmi	r3, [r0, #0]
 8089d60:	6003      	strpl	r3, [r0, #0]
 8089d62:	bf4c      	ite	mi
 8089d64:	2001      	movmi	r0, #1
 8089d66:	2002      	movpl	r0, #2
 8089d68:	4770      	bx	lr
 8089d6a:	b299      	uxth	r1, r3
 8089d6c:	b909      	cbnz	r1, 8089d72 <__lo0bits+0x28>
 8089d6e:	0c1b      	lsrs	r3, r3, #16
 8089d70:	2210      	movs	r2, #16
 8089d72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8089d76:	bf04      	itt	eq
 8089d78:	0a1b      	lsreq	r3, r3, #8
 8089d7a:	3208      	addeq	r2, #8
 8089d7c:	0719      	lsls	r1, r3, #28
 8089d7e:	bf04      	itt	eq
 8089d80:	091b      	lsreq	r3, r3, #4
 8089d82:	3204      	addeq	r2, #4
 8089d84:	0799      	lsls	r1, r3, #30
 8089d86:	bf04      	itt	eq
 8089d88:	089b      	lsreq	r3, r3, #2
 8089d8a:	3202      	addeq	r2, #2
 8089d8c:	07d9      	lsls	r1, r3, #31
 8089d8e:	d402      	bmi.n	8089d96 <__lo0bits+0x4c>
 8089d90:	085b      	lsrs	r3, r3, #1
 8089d92:	d005      	beq.n	8089da0 <__lo0bits+0x56>
 8089d94:	3201      	adds	r2, #1
 8089d96:	6003      	str	r3, [r0, #0]
 8089d98:	4610      	mov	r0, r2
 8089d9a:	4770      	bx	lr
 8089d9c:	2000      	movs	r0, #0
 8089d9e:	4770      	bx	lr
 8089da0:	2020      	movs	r0, #32
 8089da2:	4770      	bx	lr

08089da4 <__i2b>:
 8089da4:	b510      	push	{r4, lr}
 8089da6:	460c      	mov	r4, r1
 8089da8:	2101      	movs	r1, #1
 8089daa:	f7ff fee9 	bl	8089b80 <_Balloc>
 8089dae:	2201      	movs	r2, #1
 8089db0:	6144      	str	r4, [r0, #20]
 8089db2:	6102      	str	r2, [r0, #16]
 8089db4:	bd10      	pop	{r4, pc}

08089db6 <__multiply>:
 8089db6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089dba:	4614      	mov	r4, r2
 8089dbc:	690a      	ldr	r2, [r1, #16]
 8089dbe:	6923      	ldr	r3, [r4, #16]
 8089dc0:	4688      	mov	r8, r1
 8089dc2:	429a      	cmp	r2, r3
 8089dc4:	bfbe      	ittt	lt
 8089dc6:	460b      	movlt	r3, r1
 8089dc8:	46a0      	movlt	r8, r4
 8089dca:	461c      	movlt	r4, r3
 8089dcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8089dd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8089dd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8089dd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8089ddc:	eb07 0609 	add.w	r6, r7, r9
 8089de0:	429e      	cmp	r6, r3
 8089de2:	bfc8      	it	gt
 8089de4:	3101      	addgt	r1, #1
 8089de6:	f7ff fecb 	bl	8089b80 <_Balloc>
 8089dea:	f100 0514 	add.w	r5, r0, #20
 8089dee:	462b      	mov	r3, r5
 8089df0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8089df4:	2200      	movs	r2, #0
 8089df6:	4563      	cmp	r3, ip
 8089df8:	d202      	bcs.n	8089e00 <__multiply+0x4a>
 8089dfa:	f843 2b04 	str.w	r2, [r3], #4
 8089dfe:	e7fa      	b.n	8089df6 <__multiply+0x40>
 8089e00:	f104 0214 	add.w	r2, r4, #20
 8089e04:	f108 0114 	add.w	r1, r8, #20
 8089e08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8089e0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8089e10:	9300      	str	r3, [sp, #0]
 8089e12:	9b00      	ldr	r3, [sp, #0]
 8089e14:	9201      	str	r2, [sp, #4]
 8089e16:	4293      	cmp	r3, r2
 8089e18:	d957      	bls.n	8089eca <__multiply+0x114>
 8089e1a:	f8b2 b000 	ldrh.w	fp, [r2]
 8089e1e:	f1bb 0f00 	cmp.w	fp, #0
 8089e22:	d023      	beq.n	8089e6c <__multiply+0xb6>
 8089e24:	4689      	mov	r9, r1
 8089e26:	46ae      	mov	lr, r5
 8089e28:	f04f 0800 	mov.w	r8, #0
 8089e2c:	f859 4b04 	ldr.w	r4, [r9], #4
 8089e30:	f8be a000 	ldrh.w	sl, [lr]
 8089e34:	b2a3      	uxth	r3, r4
 8089e36:	fb0b a303 	mla	r3, fp, r3, sl
 8089e3a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8089e3e:	f8de 4000 	ldr.w	r4, [lr]
 8089e42:	4443      	add	r3, r8
 8089e44:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8089e48:	fb0b 840a 	mla	r4, fp, sl, r8
 8089e4c:	46f2      	mov	sl, lr
 8089e4e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8089e52:	b29b      	uxth	r3, r3
 8089e54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8089e58:	454f      	cmp	r7, r9
 8089e5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8089e5e:	f84a 3b04 	str.w	r3, [sl], #4
 8089e62:	d901      	bls.n	8089e68 <__multiply+0xb2>
 8089e64:	46d6      	mov	lr, sl
 8089e66:	e7e1      	b.n	8089e2c <__multiply+0x76>
 8089e68:	f8ce 8004 	str.w	r8, [lr, #4]
 8089e6c:	9b01      	ldr	r3, [sp, #4]
 8089e6e:	3204      	adds	r2, #4
 8089e70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8089e74:	f1ba 0f00 	cmp.w	sl, #0
 8089e78:	d021      	beq.n	8089ebe <__multiply+0x108>
 8089e7a:	462c      	mov	r4, r5
 8089e7c:	4689      	mov	r9, r1
 8089e7e:	682b      	ldr	r3, [r5, #0]
 8089e80:	f04f 0800 	mov.w	r8, #0
 8089e84:	f8b9 e000 	ldrh.w	lr, [r9]
 8089e88:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8089e8c:	b29b      	uxth	r3, r3
 8089e8e:	fb0a be0e 	mla	lr, sl, lr, fp
 8089e92:	46a3      	mov	fp, r4
 8089e94:	44f0      	add	r8, lr
 8089e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8089e9a:	f84b 3b04 	str.w	r3, [fp], #4
 8089e9e:	f859 3b04 	ldr.w	r3, [r9], #4
 8089ea2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8089ea6:	0c1b      	lsrs	r3, r3, #16
 8089ea8:	fb0a e303 	mla	r3, sl, r3, lr
 8089eac:	454f      	cmp	r7, r9
 8089eae:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8089eb2:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8089eb6:	d901      	bls.n	8089ebc <__multiply+0x106>
 8089eb8:	465c      	mov	r4, fp
 8089eba:	e7e3      	b.n	8089e84 <__multiply+0xce>
 8089ebc:	6063      	str	r3, [r4, #4]
 8089ebe:	3504      	adds	r5, #4
 8089ec0:	e7a7      	b.n	8089e12 <__multiply+0x5c>
 8089ec2:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8089ec6:	b913      	cbnz	r3, 8089ece <__multiply+0x118>
 8089ec8:	3e01      	subs	r6, #1
 8089eca:	2e00      	cmp	r6, #0
 8089ecc:	dcf9      	bgt.n	8089ec2 <__multiply+0x10c>
 8089ece:	6106      	str	r6, [r0, #16]
 8089ed0:	b003      	add	sp, #12
 8089ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08089ed8 <__pow5mult>:
 8089ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089edc:	4615      	mov	r5, r2
 8089ede:	f012 0203 	ands.w	r2, r2, #3
 8089ee2:	4606      	mov	r6, r0
 8089ee4:	460f      	mov	r7, r1
 8089ee6:	d007      	beq.n	8089ef8 <__pow5mult+0x20>
 8089ee8:	4c21      	ldr	r4, [pc, #132]	; (8089f70 <__pow5mult+0x98>)
 8089eea:	3a01      	subs	r2, #1
 8089eec:	2300      	movs	r3, #0
 8089eee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8089ef2:	f7ff fe91 	bl	8089c18 <__multadd>
 8089ef6:	4607      	mov	r7, r0
 8089ef8:	10ad      	asrs	r5, r5, #2
 8089efa:	d036      	beq.n	8089f6a <__pow5mult+0x92>
 8089efc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8089efe:	b93c      	cbnz	r4, 8089f10 <__pow5mult+0x38>
 8089f00:	2010      	movs	r0, #16
 8089f02:	f7fa fa53 	bl	80843ac <malloc>
 8089f06:	6270      	str	r0, [r6, #36]	; 0x24
 8089f08:	6044      	str	r4, [r0, #4]
 8089f0a:	6084      	str	r4, [r0, #8]
 8089f0c:	6004      	str	r4, [r0, #0]
 8089f0e:	60c4      	str	r4, [r0, #12]
 8089f10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8089f14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8089f18:	b94c      	cbnz	r4, 8089f2e <__pow5mult+0x56>
 8089f1a:	f240 2171 	movw	r1, #625	; 0x271
 8089f1e:	4630      	mov	r0, r6
 8089f20:	f7ff ff40 	bl	8089da4 <__i2b>
 8089f24:	4604      	mov	r4, r0
 8089f26:	2300      	movs	r3, #0
 8089f28:	f8c8 0008 	str.w	r0, [r8, #8]
 8089f2c:	6003      	str	r3, [r0, #0]
 8089f2e:	f04f 0800 	mov.w	r8, #0
 8089f32:	07eb      	lsls	r3, r5, #31
 8089f34:	d50a      	bpl.n	8089f4c <__pow5mult+0x74>
 8089f36:	4639      	mov	r1, r7
 8089f38:	4622      	mov	r2, r4
 8089f3a:	4630      	mov	r0, r6
 8089f3c:	f7ff ff3b 	bl	8089db6 <__multiply>
 8089f40:	4681      	mov	r9, r0
 8089f42:	4639      	mov	r1, r7
 8089f44:	4630      	mov	r0, r6
 8089f46:	f7ff fe50 	bl	8089bea <_Bfree>
 8089f4a:	464f      	mov	r7, r9
 8089f4c:	106d      	asrs	r5, r5, #1
 8089f4e:	d00c      	beq.n	8089f6a <__pow5mult+0x92>
 8089f50:	6820      	ldr	r0, [r4, #0]
 8089f52:	b108      	cbz	r0, 8089f58 <__pow5mult+0x80>
 8089f54:	4604      	mov	r4, r0
 8089f56:	e7ec      	b.n	8089f32 <__pow5mult+0x5a>
 8089f58:	4622      	mov	r2, r4
 8089f5a:	4621      	mov	r1, r4
 8089f5c:	4630      	mov	r0, r6
 8089f5e:	f7ff ff2a 	bl	8089db6 <__multiply>
 8089f62:	6020      	str	r0, [r4, #0]
 8089f64:	f8c0 8000 	str.w	r8, [r0]
 8089f68:	e7f4      	b.n	8089f54 <__pow5mult+0x7c>
 8089f6a:	4638      	mov	r0, r7
 8089f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8089f70:	0808b070 	.word	0x0808b070

08089f74 <__lshift>:
 8089f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089f78:	460c      	mov	r4, r1
 8089f7a:	4607      	mov	r7, r0
 8089f7c:	4691      	mov	r9, r2
 8089f7e:	6926      	ldr	r6, [r4, #16]
 8089f80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8089f84:	4456      	add	r6, sl
 8089f86:	6849      	ldr	r1, [r1, #4]
 8089f88:	68a3      	ldr	r3, [r4, #8]
 8089f8a:	1c75      	adds	r5, r6, #1
 8089f8c:	42ab      	cmp	r3, r5
 8089f8e:	da02      	bge.n	8089f96 <__lshift+0x22>
 8089f90:	3101      	adds	r1, #1
 8089f92:	005b      	lsls	r3, r3, #1
 8089f94:	e7fa      	b.n	8089f8c <__lshift+0x18>
 8089f96:	4638      	mov	r0, r7
 8089f98:	f7ff fdf2 	bl	8089b80 <_Balloc>
 8089f9c:	2300      	movs	r3, #0
 8089f9e:	4680      	mov	r8, r0
 8089fa0:	461a      	mov	r2, r3
 8089fa2:	f100 0114 	add.w	r1, r0, #20
 8089fa6:	4553      	cmp	r3, sl
 8089fa8:	da03      	bge.n	8089fb2 <__lshift+0x3e>
 8089faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8089fae:	3301      	adds	r3, #1
 8089fb0:	e7f9      	b.n	8089fa6 <__lshift+0x32>
 8089fb2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8089fb6:	6920      	ldr	r0, [r4, #16]
 8089fb8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8089fbc:	f019 091f 	ands.w	r9, r9, #31
 8089fc0:	f104 0114 	add.w	r1, r4, #20
 8089fc4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8089fc8:	d014      	beq.n	8089ff4 <__lshift+0x80>
 8089fca:	f1c9 0c20 	rsb	ip, r9, #32
 8089fce:	2200      	movs	r2, #0
 8089fd0:	6808      	ldr	r0, [r1, #0]
 8089fd2:	469a      	mov	sl, r3
 8089fd4:	fa00 f009 	lsl.w	r0, r0, r9
 8089fd8:	4302      	orrs	r2, r0
 8089fda:	f843 2b04 	str.w	r2, [r3], #4
 8089fde:	f851 2b04 	ldr.w	r2, [r1], #4
 8089fe2:	458e      	cmp	lr, r1
 8089fe4:	fa22 f20c 	lsr.w	r2, r2, ip
 8089fe8:	d8f2      	bhi.n	8089fd0 <__lshift+0x5c>
 8089fea:	f8ca 2004 	str.w	r2, [sl, #4]
 8089fee:	b142      	cbz	r2, 808a002 <__lshift+0x8e>
 8089ff0:	1cb5      	adds	r5, r6, #2
 8089ff2:	e006      	b.n	808a002 <__lshift+0x8e>
 8089ff4:	3b04      	subs	r3, #4
 8089ff6:	f851 2b04 	ldr.w	r2, [r1], #4
 8089ffa:	458e      	cmp	lr, r1
 8089ffc:	f843 2f04 	str.w	r2, [r3, #4]!
 808a000:	d8f9      	bhi.n	8089ff6 <__lshift+0x82>
 808a002:	3d01      	subs	r5, #1
 808a004:	4638      	mov	r0, r7
 808a006:	f8c8 5010 	str.w	r5, [r8, #16]
 808a00a:	4621      	mov	r1, r4
 808a00c:	f7ff fded 	bl	8089bea <_Bfree>
 808a010:	4640      	mov	r0, r8
 808a012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808a016 <__mcmp>:
 808a016:	6903      	ldr	r3, [r0, #16]
 808a018:	690a      	ldr	r2, [r1, #16]
 808a01a:	b510      	push	{r4, lr}
 808a01c:	1a9b      	subs	r3, r3, r2
 808a01e:	d111      	bne.n	808a044 <__mcmp+0x2e>
 808a020:	0092      	lsls	r2, r2, #2
 808a022:	3014      	adds	r0, #20
 808a024:	3114      	adds	r1, #20
 808a026:	1883      	adds	r3, r0, r2
 808a028:	440a      	add	r2, r1
 808a02a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808a02e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808a032:	428c      	cmp	r4, r1
 808a034:	d002      	beq.n	808a03c <__mcmp+0x26>
 808a036:	d307      	bcc.n	808a048 <__mcmp+0x32>
 808a038:	2001      	movs	r0, #1
 808a03a:	bd10      	pop	{r4, pc}
 808a03c:	4298      	cmp	r0, r3
 808a03e:	d3f4      	bcc.n	808a02a <__mcmp+0x14>
 808a040:	2000      	movs	r0, #0
 808a042:	bd10      	pop	{r4, pc}
 808a044:	4618      	mov	r0, r3
 808a046:	bd10      	pop	{r4, pc}
 808a048:	f04f 30ff 	mov.w	r0, #4294967295
 808a04c:	bd10      	pop	{r4, pc}

0808a04e <__mdiff>:
 808a04e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808a052:	460c      	mov	r4, r1
 808a054:	4607      	mov	r7, r0
 808a056:	4611      	mov	r1, r2
 808a058:	4620      	mov	r0, r4
 808a05a:	4615      	mov	r5, r2
 808a05c:	f7ff ffdb 	bl	808a016 <__mcmp>
 808a060:	1e06      	subs	r6, r0, #0
 808a062:	d108      	bne.n	808a076 <__mdiff+0x28>
 808a064:	4631      	mov	r1, r6
 808a066:	4638      	mov	r0, r7
 808a068:	f7ff fd8a 	bl	8089b80 <_Balloc>
 808a06c:	2301      	movs	r3, #1
 808a06e:	6103      	str	r3, [r0, #16]
 808a070:	6146      	str	r6, [r0, #20]
 808a072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808a076:	bfbc      	itt	lt
 808a078:	4623      	movlt	r3, r4
 808a07a:	462c      	movlt	r4, r5
 808a07c:	4638      	mov	r0, r7
 808a07e:	6861      	ldr	r1, [r4, #4]
 808a080:	bfba      	itte	lt
 808a082:	461d      	movlt	r5, r3
 808a084:	2601      	movlt	r6, #1
 808a086:	2600      	movge	r6, #0
 808a088:	f7ff fd7a 	bl	8089b80 <_Balloc>
 808a08c:	692b      	ldr	r3, [r5, #16]
 808a08e:	60c6      	str	r6, [r0, #12]
 808a090:	6926      	ldr	r6, [r4, #16]
 808a092:	f105 0914 	add.w	r9, r5, #20
 808a096:	f104 0114 	add.w	r1, r4, #20
 808a09a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808a09e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808a0a2:	f100 0514 	add.w	r5, r0, #20
 808a0a6:	f04f 0c00 	mov.w	ip, #0
 808a0aa:	f851 2b04 	ldr.w	r2, [r1], #4
 808a0ae:	f859 4b04 	ldr.w	r4, [r9], #4
 808a0b2:	b293      	uxth	r3, r2
 808a0b4:	449c      	add	ip, r3
 808a0b6:	b2a3      	uxth	r3, r4
 808a0b8:	0c24      	lsrs	r4, r4, #16
 808a0ba:	ebc3 030c 	rsb	r3, r3, ip
 808a0be:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808a0c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808a0c6:	b29b      	uxth	r3, r3
 808a0c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808a0cc:	45c8      	cmp	r8, r9
 808a0ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808a0d2:	468e      	mov	lr, r1
 808a0d4:	f845 2b04 	str.w	r2, [r5], #4
 808a0d8:	d8e7      	bhi.n	808a0aa <__mdiff+0x5c>
 808a0da:	45be      	cmp	lr, r7
 808a0dc:	d20e      	bcs.n	808a0fc <__mdiff+0xae>
 808a0de:	f85e 1b04 	ldr.w	r1, [lr], #4
 808a0e2:	b28a      	uxth	r2, r1
 808a0e4:	4462      	add	r2, ip
 808a0e6:	1413      	asrs	r3, r2, #16
 808a0e8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808a0ec:	b292      	uxth	r2, r2
 808a0ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808a0f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808a0f6:	f845 2b04 	str.w	r2, [r5], #4
 808a0fa:	e7ee      	b.n	808a0da <__mdiff+0x8c>
 808a0fc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808a100:	b90b      	cbnz	r3, 808a106 <__mdiff+0xb8>
 808a102:	3e01      	subs	r6, #1
 808a104:	e7fa      	b.n	808a0fc <__mdiff+0xae>
 808a106:	6106      	str	r6, [r0, #16]
 808a108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808a10c <__ulp>:
 808a10c:	4b10      	ldr	r3, [pc, #64]	; (808a150 <__ulp+0x44>)
 808a10e:	400b      	ands	r3, r1
 808a110:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808a114:	2b00      	cmp	r3, #0
 808a116:	dd02      	ble.n	808a11e <__ulp+0x12>
 808a118:	2000      	movs	r0, #0
 808a11a:	4619      	mov	r1, r3
 808a11c:	4770      	bx	lr
 808a11e:	425b      	negs	r3, r3
 808a120:	151b      	asrs	r3, r3, #20
 808a122:	2b13      	cmp	r3, #19
 808a124:	f04f 0000 	mov.w	r0, #0
 808a128:	f04f 0100 	mov.w	r1, #0
 808a12c:	dc04      	bgt.n	808a138 <__ulp+0x2c>
 808a12e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808a132:	fa42 f103 	asr.w	r1, r2, r3
 808a136:	4770      	bx	lr
 808a138:	3b14      	subs	r3, #20
 808a13a:	2b1e      	cmp	r3, #30
 808a13c:	f04f 0201 	mov.w	r2, #1
 808a140:	bfce      	itee	gt
 808a142:	4613      	movgt	r3, r2
 808a144:	f1c3 031f 	rsble	r3, r3, #31
 808a148:	fa02 f303 	lslle.w	r3, r2, r3
 808a14c:	4618      	mov	r0, r3
 808a14e:	4770      	bx	lr
 808a150:	7ff00000 	.word	0x7ff00000

0808a154 <__b2d>:
 808a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a156:	6905      	ldr	r5, [r0, #16]
 808a158:	f100 0614 	add.w	r6, r0, #20
 808a15c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808a160:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808a164:	1f2f      	subs	r7, r5, #4
 808a166:	4620      	mov	r0, r4
 808a168:	f7ff fdcf 	bl	8089d0a <__hi0bits>
 808a16c:	f1c0 0320 	rsb	r3, r0, #32
 808a170:	280a      	cmp	r0, #10
 808a172:	600b      	str	r3, [r1, #0]
 808a174:	dc14      	bgt.n	808a1a0 <__b2d+0x4c>
 808a176:	f1c0 0e0b 	rsb	lr, r0, #11
 808a17a:	fa24 f10e 	lsr.w	r1, r4, lr
 808a17e:	42be      	cmp	r6, r7
 808a180:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808a184:	bf34      	ite	cc
 808a186:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808a18a:	2100      	movcs	r1, #0
 808a18c:	3015      	adds	r0, #21
 808a18e:	fa04 f000 	lsl.w	r0, r4, r0
 808a192:	fa21 f10e 	lsr.w	r1, r1, lr
 808a196:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808a19a:	ea40 0201 	orr.w	r2, r0, r1
 808a19e:	e023      	b.n	808a1e8 <__b2d+0x94>
 808a1a0:	42be      	cmp	r6, r7
 808a1a2:	bf3a      	itte	cc
 808a1a4:	f1a5 0708 	subcc.w	r7, r5, #8
 808a1a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808a1ac:	2100      	movcs	r1, #0
 808a1ae:	380b      	subs	r0, #11
 808a1b0:	d015      	beq.n	808a1de <__b2d+0x8a>
 808a1b2:	4084      	lsls	r4, r0
 808a1b4:	f1c0 0520 	rsb	r5, r0, #32
 808a1b8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808a1bc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808a1c0:	42b7      	cmp	r7, r6
 808a1c2:	fa21 fe05 	lsr.w	lr, r1, r5
 808a1c6:	ea44 030e 	orr.w	r3, r4, lr
 808a1ca:	bf8c      	ite	hi
 808a1cc:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808a1d0:	2400      	movls	r4, #0
 808a1d2:	fa01 f000 	lsl.w	r0, r1, r0
 808a1d6:	40ec      	lsrs	r4, r5
 808a1d8:	ea40 0204 	orr.w	r2, r0, r4
 808a1dc:	e004      	b.n	808a1e8 <__b2d+0x94>
 808a1de:	460a      	mov	r2, r1
 808a1e0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808a1e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808a1e8:	4610      	mov	r0, r2
 808a1ea:	4619      	mov	r1, r3
 808a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a1ee <__d2b>:
 808a1ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808a1f2:	461c      	mov	r4, r3
 808a1f4:	2101      	movs	r1, #1
 808a1f6:	4690      	mov	r8, r2
 808a1f8:	9e08      	ldr	r6, [sp, #32]
 808a1fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808a1fc:	f7ff fcc0 	bl	8089b80 <_Balloc>
 808a200:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808a204:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808a208:	4607      	mov	r7, r0
 808a20a:	b10c      	cbz	r4, 808a210 <__d2b+0x22>
 808a20c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808a210:	9201      	str	r2, [sp, #4]
 808a212:	f1b8 0f00 	cmp.w	r8, #0
 808a216:	d019      	beq.n	808a24c <__d2b+0x5e>
 808a218:	a802      	add	r0, sp, #8
 808a21a:	f840 8d08 	str.w	r8, [r0, #-8]!
 808a21e:	f7ff fd94 	bl	8089d4a <__lo0bits>
 808a222:	9b00      	ldr	r3, [sp, #0]
 808a224:	b148      	cbz	r0, 808a23a <__d2b+0x4c>
 808a226:	9a01      	ldr	r2, [sp, #4]
 808a228:	f1c0 0120 	rsb	r1, r0, #32
 808a22c:	fa02 f101 	lsl.w	r1, r2, r1
 808a230:	430b      	orrs	r3, r1
 808a232:	40c2      	lsrs	r2, r0
 808a234:	617b      	str	r3, [r7, #20]
 808a236:	9201      	str	r2, [sp, #4]
 808a238:	e000      	b.n	808a23c <__d2b+0x4e>
 808a23a:	617b      	str	r3, [r7, #20]
 808a23c:	9b01      	ldr	r3, [sp, #4]
 808a23e:	2b00      	cmp	r3, #0
 808a240:	bf14      	ite	ne
 808a242:	2102      	movne	r1, #2
 808a244:	2101      	moveq	r1, #1
 808a246:	61bb      	str	r3, [r7, #24]
 808a248:	6139      	str	r1, [r7, #16]
 808a24a:	e007      	b.n	808a25c <__d2b+0x6e>
 808a24c:	a801      	add	r0, sp, #4
 808a24e:	f7ff fd7c 	bl	8089d4a <__lo0bits>
 808a252:	9b01      	ldr	r3, [sp, #4]
 808a254:	2101      	movs	r1, #1
 808a256:	617b      	str	r3, [r7, #20]
 808a258:	6139      	str	r1, [r7, #16]
 808a25a:	3020      	adds	r0, #32
 808a25c:	b134      	cbz	r4, 808a26c <__d2b+0x7e>
 808a25e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808a262:	4404      	add	r4, r0
 808a264:	6034      	str	r4, [r6, #0]
 808a266:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808a26a:	e009      	b.n	808a280 <__d2b+0x92>
 808a26c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808a270:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808a274:	6030      	str	r0, [r6, #0]
 808a276:	6918      	ldr	r0, [r3, #16]
 808a278:	f7ff fd47 	bl	8089d0a <__hi0bits>
 808a27c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808a280:	6028      	str	r0, [r5, #0]
 808a282:	4638      	mov	r0, r7
 808a284:	b002      	add	sp, #8
 808a286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808a28a <__ratio>:
 808a28a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808a28e:	4688      	mov	r8, r1
 808a290:	4669      	mov	r1, sp
 808a292:	4681      	mov	r9, r0
 808a294:	f7ff ff5e 	bl	808a154 <__b2d>
 808a298:	460d      	mov	r5, r1
 808a29a:	4604      	mov	r4, r0
 808a29c:	a901      	add	r1, sp, #4
 808a29e:	4640      	mov	r0, r8
 808a2a0:	f7ff ff58 	bl	808a154 <__b2d>
 808a2a4:	460f      	mov	r7, r1
 808a2a6:	4606      	mov	r6, r0
 808a2a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808a2ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808a2b0:	4620      	mov	r0, r4
 808a2b2:	1a9a      	subs	r2, r3, r2
 808a2b4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808a2b8:	1ac9      	subs	r1, r1, r3
 808a2ba:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808a2be:	2b00      	cmp	r3, #0
 808a2c0:	bfcc      	ite	gt
 808a2c2:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808a2c6:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808a2ca:	4632      	mov	r2, r6
 808a2cc:	463b      	mov	r3, r7
 808a2ce:	4629      	mov	r1, r5
 808a2d0:	f7fc fa74 	bl	80867bc <__aeabi_ddiv>
 808a2d4:	b003      	add	sp, #12
 808a2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808a2da <__copybits>:
 808a2da:	3901      	subs	r1, #1
 808a2dc:	b510      	push	{r4, lr}
 808a2de:	1149      	asrs	r1, r1, #5
 808a2e0:	6914      	ldr	r4, [r2, #16]
 808a2e2:	3101      	adds	r1, #1
 808a2e4:	f102 0314 	add.w	r3, r2, #20
 808a2e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808a2ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808a2f0:	42a3      	cmp	r3, r4
 808a2f2:	4602      	mov	r2, r0
 808a2f4:	d204      	bcs.n	808a300 <__copybits+0x26>
 808a2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 808a2fa:	f840 2b04 	str.w	r2, [r0], #4
 808a2fe:	e7f7      	b.n	808a2f0 <__copybits+0x16>
 808a300:	2300      	movs	r3, #0
 808a302:	428a      	cmp	r2, r1
 808a304:	d202      	bcs.n	808a30c <__copybits+0x32>
 808a306:	f842 3b04 	str.w	r3, [r2], #4
 808a30a:	e7fa      	b.n	808a302 <__copybits+0x28>
 808a30c:	bd10      	pop	{r4, pc}

0808a30e <__any_on>:
 808a30e:	f100 0214 	add.w	r2, r0, #20
 808a312:	6900      	ldr	r0, [r0, #16]
 808a314:	114b      	asrs	r3, r1, #5
 808a316:	4298      	cmp	r0, r3
 808a318:	b510      	push	{r4, lr}
 808a31a:	db0c      	blt.n	808a336 <__any_on+0x28>
 808a31c:	dd0c      	ble.n	808a338 <__any_on+0x2a>
 808a31e:	f011 011f 	ands.w	r1, r1, #31
 808a322:	d009      	beq.n	808a338 <__any_on+0x2a>
 808a324:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808a328:	fa24 f001 	lsr.w	r0, r4, r1
 808a32c:	fa00 f101 	lsl.w	r1, r0, r1
 808a330:	428c      	cmp	r4, r1
 808a332:	d10c      	bne.n	808a34e <__any_on+0x40>
 808a334:	e000      	b.n	808a338 <__any_on+0x2a>
 808a336:	4603      	mov	r3, r0
 808a338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808a33c:	4293      	cmp	r3, r2
 808a33e:	d904      	bls.n	808a34a <__any_on+0x3c>
 808a340:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808a344:	2900      	cmp	r1, #0
 808a346:	d0f9      	beq.n	808a33c <__any_on+0x2e>
 808a348:	e001      	b.n	808a34e <__any_on+0x40>
 808a34a:	2000      	movs	r0, #0
 808a34c:	bd10      	pop	{r4, pc}
 808a34e:	2001      	movs	r0, #1
 808a350:	bd10      	pop	{r4, pc}

0808a352 <_calloc_r>:
 808a352:	b538      	push	{r3, r4, r5, lr}
 808a354:	fb02 f401 	mul.w	r4, r2, r1
 808a358:	4621      	mov	r1, r4
 808a35a:	f7fa f86f 	bl	808443c <_malloc_r>
 808a35e:	4605      	mov	r5, r0
 808a360:	b118      	cbz	r0, 808a36a <_calloc_r+0x18>
 808a362:	4622      	mov	r2, r4
 808a364:	2100      	movs	r1, #0
 808a366:	f7fd f8e3 	bl	8087530 <memset>
 808a36a:	4628      	mov	r0, r5
 808a36c:	bd38      	pop	{r3, r4, r5, pc}

0808a36e <__env_lock>:
 808a36e:	4770      	bx	lr

0808a370 <__env_unlock>:
 808a370:	4770      	bx	lr

0808a372 <link_code_end>:
	...

0808a374 <dynalib_user>:
 808a374:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808a384:	0000 0000 0a0d 4b00 2520 0075 2041 7525     .......K %u.A %u
 808a394:	4d00 2520 0075 0051 2050 7525 2520 0075     .M %u.Q.P %u %u.
 808a3a4:	002a 0048 2046 7525 2520 0075 0055 2058     *.H.F %u %u.U.X 
 808a3b4:	7525 7000 2520 0075                         %u.p %u.

0808a3bc <_ZTVN8particle13__SPISettingsE>:
	...
 808a3c4:	0ba1 0808 6564 6166 6c75 2074 4d00 4253     ....default .MSB
 808a3d4:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 808a3e4:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 808a3f4:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
 808a404:	4d20 444f 2545 3e64 4700 4147 4700 4c4c      MODE%d>.GGA.GLL
 808a414:	4700 4153 5200 434d 4400 5442 4800 4d44     .GSA.RMC.DBT.HDM
 808a424:	4800 5444 4d00 4144 4d00 5754 4d00 5657     .HDT.MDA.MTW.MWV
 808a434:	5200 424d 5400 5458 5600 5748 5600 574c     .RMB.TXT.VHW.VLW
 808a444:	5600 5750 5600 5257 5700 5643 5800 4554     .VPW.VWR.WCV.XTE
 808a454:	5a00 5a5a 4100 4250 4400 5450 4700 5653     .ZZZ.APB.DPT.GSV
 808a464:	4800 4744 4d00 4457 5200 544f 5200 4d50     .HDG.MWD.ROT.RPM
 808a474:	5200 4153 5600 5244 5600 4754 5a00 4144     .RSA.VDR.VTG.ZDA
 808a484:	2400 4d50 4b54 3831 2c35 2a30 3232 2400     .$PMTK185,0*22.$
 808a494:	4d50 4b54 3030 2c31 3831 2c35 2a33 4333     PMTK001,185,3*3C
 808a4a4:	2400 4d50 4b54 3831 2c35 2a31 3332 2400     .$PMTK185,1*23.$
 808a4b4:	4d50 4b54 3831 2a33 3833 2400 4d50 4b54     PMTK183*38.$PMTK
 808a4c4:	4f4c 0047 5024 544d 314b 3136 302c 322a     LOG.$PMTK161,0*2
 808a4d4:	0038 5024 544d 304b 3031 302c 3230 322a     8.$PMTK010,002*2
 808a4e4:	0044 4949 5700 0049 5047 4700 004e 6f67     D.II.WI.GP.GN.go
 808a4f4:	6e69 2067 6f74 7320 656c 7065 000a 6f6c     ing to sleep..lo
 808a504:	6767 6e69 2067 6f64 656e 0a21 4c00 676f     gging done!..Log
 808a514:	742e 7478 7000 6275 696c 6873 6e69 2067     .txt.publishing 
 808a524:	6164 6174 6400 6c65 6174 4350 326f 6d00     data.deltaPCo2.m
 808a534:	7861 7420 6d69 2065 6f66 2072 7570 696c     ax time for puli
 808a544:	6873 6e69 2067 6572 6361 0068 6f4e 2074     shing reach.Not 
 808a554:	616d 2078 6974 656d 202c 7274 2079 6761     max time, try ag
 808a564:	6961 206e 6f74 7020 6275 696c 6873 2d00     ain to publish.-
 808a574:	203e 4f43 2032 203a 0000 0000               > CO2 : ....

0808a580 <_ZTV12PublishState>:
	...
 808a588:	0de5 0808 0df9 0808 0ed5 0808 0d4d 0808     ............M...
 808a598:	0fb5 0808 0e0d 0808 0da5 0808 6143 206e     ............Can 
 808a5a8:	6f6e 2074 7550 6c62 7369 0a68 4300 6e61     not Publish..Can
 808a5b8:	6e20 746f 5320 656c 7065 000a 6143 206e      not Sleep..Can 
 808a5c8:	6f6e 2074 6552 6461 5320 6e65 6f73 7372     not Read Sensors
 808a5d8:	000a 6143 206e 6f6e 2074 6f6c 0a67 4300     ..Can not log..C
 808a5e8:	6e61 6e20 746f 7720 6b61 7565 0a70 5700     an not wakeup..W
 808a5f8:	6b6f 2065 7075 0a21 0000 0000               oke up!.....

0808a604 <_ZTV10SleepState>:
	...
 808a60c:	0ffd 0808 1011 0808 0f8d 0808 0f79 0808     ............y...
 808a61c:	0fcd 0808 0f65 0808 0fa1 0808               ....e.......

0808a628 <_ZTV4File>:
	...
 808a630:	1047 0808 1049 0808 1089 0808 1083 0808     G...I...........
 808a640:	102b 0808 1063 0808 105d 0808 1057 0808     +...c...]...W...
 808a650:	0000 6f4c 6767 6e69 2067 7246 7165 6575     ..Logging Freque
 808a660:	636e 2079 203d 2000 2020 6b4f 0021 5245     ncy = .   Ok!.ER
 808a670:	4f52 3a52 0020 6944 2064 6f79 2075 656d     ROR: .Did you me
 808a680:	6e61 2220 2200 003f 7273 7461 0065 7073     an "."?.srate.sp
 808a690:	7265 6f69 0064 666c 6572 0071 6153 706d     eriod.lfreq.Samp
 808a6a0:	696c 676e 5020 7265 6f69 2064 203d 5300     ling Period = .S
 808a6b0:	6d61 6c70 6e69 2067 6152 6574 3d20 0020     ampling Rate = .
 808a6c0:	6f4e 6320 7261 2064 6564 6574 7463 6465     No card detected
 808a6d0:	202e 6157 7469 6e69 2067 6f66 2072 6163     . Waiting for ca
 808a6e0:	6472 002e 4453 4920 696e 6974 6c61 7a69     rd..SD Initializ
 808a6f0:	7461 6f69 206e 6166 6c69 6465 0a21 4300     ation failed!..C
 808a700:	6d6f 616d 646e 7542 6666 7265 2f00 222f     ommandBuffer.//"
 808a710:	5c22 625c 6608 6e0c 720a 740d 0009 756e     "\\b.f.n.r.t..nu
 808a720:	6c6c 6500 002d 7274 6575 6600 6c61 6573     ll.e-.true.false
 808a730:	7300 6e65 6f73 0072 5925 252d 2d6d 6425     .sensor.%Y-%m-%d
 808a740:	2520 3a48 4d25 253a 0053 554e 4c4c 5020      %H:%M:%S.NULL P
 808a750:	696f 746e 7265 4500 706d 7974 6920 706e     ointer.Empty inp
 808a760:	7475 4e00 206f 7265 6f72 0072 6f43 6d6d     ut.No error.Comm
 808a770:	6e61 2064 6f6e 2074 6f66 6e75 0064 6e55     and not found.Un
 808a780:	6e6b 776f 206e 7261 7567 656d 746e 4d00     known argument.M
 808a790:	7369 6973 676e 6120 6772 6d75 6e65 0074     issing argument.
 808a7a0:	694d 7373 6e69 2067 7261 7567 656d 746e     Missing argument
 808a7b0:	7620 6c61 6575 5500 636e 6f6c 6573 2064      value.Unclosed 
 808a7c0:	7571 746f 0065 6120 2074 6f63 6d6d 6e61     quote. at comman
 808a7d0:	2064 0027 6120 2074 7261 7567 656d 746e     d '. at argument
 808a7e0:	2720 2000 7461 2720 3c00 6176 756c 3e65      '. at '.<value>
 808a7f0:	3c20 6176 756c 3e65 2e20 2e2e 3c00 2e2e      <value> ....<..
 808a800:	3e2e 0000                                   .>..

0808a804 <_ZTV8SPIClass>:
	...
 808a80c:	444d 0808 4465 0808                         MD..eD..

0808a814 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808a814:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 808a824:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 808a834:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 808a844:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 808a854:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 808a864:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 808a874:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 808a884:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 808a894:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 808a8a4:	3031 2075 5d00 0020 202c 2800 3a29 0020     10u .] ., .(): .
 808a8b4:	5b20 6300 646f 2065 203d 2500 0069 6564      [.code = .%i.de
 808a8c4:	6174 6c69 2073 203d 6c00 006e 6e66 6300     tails = .ln.fn.c
 808a8d4:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 808a8e4:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 808a8f4:	6170 696e 0063 6c61 006c 2b25 3330 3a64     panic.all.%+03d:
 808a904:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 808a914:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 808a924:	0000 0000                                   ....

0808a928 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808a930:	4f89 0808 4f8f 0808 4fd3 0808 4f9d 0808     .O...O...O...O..
 808a940:	4f8b 0808                                   .O..

0808a944 <_ZTV9IPAddress>:
	...
 808a94c:	5521 0808 5511 0808 5513 0808               !U...U...U..

0808a958 <_ZTV9USBSerial>:
	...
 808a960:	55b5 0808 5605 0808 5613 0808 48ff 0808     .U...V...V...H..
 808a970:	55f1 0808 55b7 0808 55cd 0808 55ff 0808     .U...U...U...U..
 808a980:	55e3 0808 55b1 0808                         .U...U..

0808a988 <_ZTVN5spark13CellularClassE>:
	...
 808a990:	5877 0808 586d 0808 5863 0808 57d5 0808     wX..mX..cX...W..
 808a9a0:	5857 0808 584b 0808 583f 0808 5837 0808     WX..KX..?X..7X..
 808a9b0:	582d 0808 5823 0808 57df 0808               -X..#X...W..

0808a9bc <_ZTV11USARTSerial>:
	...
 808a9c4:	1029 0808 1581 0808 58ff 0808 48ff 0808     )........X...H..
 808a9d4:	58c3 0808 58e5 0808 58d1 0808 58f9 0808     .X...X...X...X..
 808a9e4:	58b1 0808 58b5 0808                         .X...X..

0808a9ec <_ZTV7TwoWire>:
	...
 808a9f4:	59d9 0808 5a23 0808 59fb 0808 59db 0808     .Y..#Z...Y...Y..
 808aa04:	5a03 0808 5a0b 0808 5a13 0808 5a1b 0808     .Z...Z...Z...Z..

0808aa14 <_ZTVN5spark12NetworkClassE>:
	...
 808aa1c:	5a5d 0808 5a67 0808 5a71 0808 5a7b 0808     ]Z..gZ..qZ..{Z..
 808aa2c:	5a85 0808 5a91 0808 5a9d 0808 5aa9 0808     .Z...Z...Z...Z..
 808aa3c:	5ab1 0808 5abb 0808 5ac5 0808               .Z...Z...Z..

0808aa48 <_ZSt7nothrow>:
	...

0808aa49 <day_name.4723>:
 808aa49:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808aa59:	6972 6153 4a74                                   riSat

0808aa5e <mon_name.4724>:
 808aa5e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808aa6e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808aa7e:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808aa8e:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808aa9e:	6425 000a                                   %d..

0808aaa2 <_ctype_>:
 808aaa2:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808aab2:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808aac2:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808aad2:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808aae2:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808aaf2:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808ab02:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808ab12:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808ab22:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808aba4 <__sf_fake_stdin>:
	...

0808abc4 <__sf_fake_stdout>:
	...

0808abe4 <__sf_fake_stderr>:
	...
 808ac04:	4f50 4953 0058 0000                         POSIX...

0808ac0c <__month_lengths>:
 808ac0c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 808ac1c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808ac2c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808ac3c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 808ac4c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 808ac5c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 808ac6c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 808ac7c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 808ac8c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 808ac9c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 808acac:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 808acbc:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

0808acc8 <fpi.5342>:
 808acc8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808acd8:	0000 0000 6e69 7469 0079 0000               ....inity...

0808ace4 <fpinan.5378>:
 808ace4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 808acf4:	0000 0000                                   ....

0808acf8 <tinytens>:
 808acf8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 808ad08:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 808ad18:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 808ad28:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 808ad38:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 808ad48:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 808ad58:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 808ad68:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 808ad78:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 808ad88:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 808ad98:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 808ada8:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 808adb8:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 808adc8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 808add8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 808ade8:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 808adf8:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 808ae08:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 808ae18:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 808ae28:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 808ae38:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

0808ae44 <_C_time_locale>:
 808ae44:	ad28 0808 ad2c 0808 ad30 0808 ad34 0808     (...,...0...4...
 808ae54:	ad38 0808 ad3c 0808 ad40 0808 ad44 0808     8...<...@...D...
 808ae64:	ad48 0808 ad4c 0808 ad50 0808 ad54 0808     H...L...P...T...
 808ae74:	ad58 0808 ad60 0808 ad69 0808 ad6f 0808     X...`...i...o...
 808ae84:	ad38 0808 ad75 0808 ad7a 0808 ad7f 0808     8...u...z.......
 808ae94:	ad86 0808 ad90 0808 ad98 0808 ada1 0808     ................
 808aea4:	adaa 0808 adae 0808 adb2 0808 adb6 0808     ................
 808aeb4:	adba 0808 adbe 0808 adc2 0808 adc6 0808     ................
 808aec4:	adcd 0808 add4 0808 addc 0808 ade6 0808     ................
 808aed4:	adef 0808 adf6 0808 a741 0808 adff 0808     ........A.......
 808aee4:	ae08 0808 ae1d 0808 a472 0808 ae20 0808     ........r... ...
 808aef4:	ad58 0808 ad60 0808 ad69 0808 ad6f 0808     X...`...i...o...
 808af04:	ad38 0808 ad75 0808 ad7a 0808 ad7f 0808     8...u...z.......
 808af14:	ad86 0808 ad90 0808 ad98 0808 ada1 0808     ................
 808af24:	a84b 0808 ae38 0808 a71d 0808 a71d 0808     K...8...........
 808af34:	a71d 0808 a71d 0808 a71d 0808 5a54 4700     ............TZ.G
 808af44:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 808af54:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 808af64:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 808af74:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

0808af80 <__mprec_tens>:
 808af80:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 808af90:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 808afa0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 808afb0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 808afc0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 808afd0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 808afe0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 808aff0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 808b000:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 808b010:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 808b020:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 808b030:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 808b040:	9db4 79d9 7843 44ea                         ...yCx.D

0808b048 <__mprec_bigtens>:
 808b048:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 808b058:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 808b068:	bf3c 7f73 4fdd 7515                         <.s..O.u

0808b070 <p05.5385>:
 808b070:	0005 0000 0019 0000 007d 0000               ........}...

0808b07c <link_const_variable_data_end>:
 808b07c:	08080a9d 	.word	0x08080a9d
 808b080:	08080b91 	.word	0x08080b91
 808b084:	08080b95 	.word	0x08080b95
 808b088:	08080b99 	.word	0x08080b99
 808b08c:	08080b9d 	.word	0x08080b9d
 808b090:	08080bf9 	.word	0x08080bf9
 808b094:	08080d01 	.word	0x08080d01
 808b098:	08080f49 	.word	0x08080f49
 808b09c:	08080fc9 	.word	0x08080fc9
 808b0a0:	08081025 	.word	0x08081025
 808b0a4:	08081f09 	.word	0x08081f09
 808b0a8:	08081f59 	.word	0x08081f59
 808b0ac:	08081f5d 	.word	0x08081f5d
 808b0b0:	08082585 	.word	0x08082585
 808b0b4:	08082589 	.word	0x08082589
 808b0b8:	0808258d 	.word	0x0808258d
 808b0bc:	08082591 	.word	0x08082591
 808b0c0:	08082c59 	.word	0x08082c59
 808b0c4:	08082c7d 	.word	0x08082c7d
 808b0c8:	08082c81 	.word	0x08082c81
 808b0cc:	08082fad 	.word	0x08082fad
 808b0d0:	08082fb1 	.word	0x08082fb1
 808b0d4:	08082fb5 	.word	0x08082fb5
 808b0d8:	080834ef 	.word	0x080834ef
 808b0dc:	080834f3 	.word	0x080834f3
 808b0e0:	080834f7 	.word	0x080834f7
 808b0e4:	0808359d 	.word	0x0808359d
 808b0e8:	0808382d 	.word	0x0808382d
 808b0ec:	080839a5 	.word	0x080839a5
 808b0f0:	08083b59 	.word	0x08083b59
 808b0f4:	08083d51 	.word	0x08083d51
 808b0f8:	08083eaf 	.word	0x08083eaf
 808b0fc:	0808471d 	.word	0x0808471d
 808b100:	08084bed 	.word	0x08084bed
 808b104:	08084dd5 	.word	0x08084dd5
 808b108:	08084e1d 	.word	0x08084e1d
 808b10c:	08085881 	.word	0x08085881
 808b110:	08085b11 	.word	0x08085b11
 808b114:	08085e65 	.word	0x08085e65
 808b118:	08085f69 	.word	0x08085f69
 808b11c:	08085fed 	.word	0x08085fed
 808b120:	080860b1 	.word	0x080860b1
 808b124:	08086175 	.word	0x08086175

0808b128 <link_constructors_end>:
	...
